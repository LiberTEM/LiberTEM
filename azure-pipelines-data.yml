trigger:
  branches:
    include:
      - master
      - 'v*'

resources:
  repositories:
    - repository: LiberTEM-live
      type: github
      endpoint: LiberTEM
      name: LiberTEM/LiberTEM-live

variables:
  - name: PIP_CACHE_DIR
    value: $(Pipeline.Workspace)/.pip
  - group: Packaging
  - name: npm_config_cache
    value: $(Pipeline.Workspace)/.npm
  - name: tox_dir
    value: $(Build.Repository.LocalPath)/.tox

parameters:
  # by default, the tox environment is kept around, so we need this parameter
  # as a way to manually re-create it, in case dependencies change.
  - name: recreate_tox
    displayName: Recreate tox environments?
    type: boolean
    default: false

  # This parameter allows to run slower tests, this is useful for running more
  # comprehensive tests, for example before doing a release.
  - name: run_slow
    displayName: Also run slow tests
    type: boolean
    default: false

stages:
  - stage: test
    jobs:
    - job: check_example_notebooks
      pool: DataAccess
      variables:
        TESTDATA_BASE_PATH: '/data/'
      steps:
      - bash: find /data/
        displayName: 'list available data'

      - task: UsePythonVersion@0
        displayName: 'Use Python 3.9'
        inputs:
          versionSpec: '3.9'

#      - task: Cache@2
#        inputs:
#          key: 'python | "$(Agent.OS)" | test_requirements.txt'
#          restoreKeys: |
#            python | "$(Agent.OS)"
#            python
#          path: $(PIP_CACHE_DIR)
#        displayName: 'cache pip packages'

      - bash: python3.9 -m venv venv
        displayName: 'create venv'

      - bash: ./venv/bin/pip install tox
        displayName: 'install tox'

      - ${{ if eq(parameters.recreate_tox, true) }}:
        - bash: ./venv/bin/tox -e notebooks -r -- examples/*.ipynb -v
          displayName: 'Run nbval tests $(Agent.OS) (recreating)'

      - ${{ if eq(parameters.recreate_tox, false) }}:
        - bash: ./venv/bin/tox -e notebooks -- examples/*.ipynb -v
          displayName: 'Run nbval tests $(Agent.OS)'

      - bash: ./scripts/codecov.sh -f ./coverage.xml
        displayName: 'Submit coverage to codecov.io'

      - task: PublishTestResults@2
        condition: succeededOrFailed()
        inputs:
          testResultsFiles: 'junit.xml'
          testRunTitle: 'Publish test results for Python $(python.version)'

    - job: data_tests
      pool: DataAccess
      strategy:
        matrix:
          # 3.6: oldest version
          Python36:
            python.version: '3.6'
            TOXENV: 'py36-data'
          # Python38:
          #   python.version: '3.8'
          #   TOXENV: 'py38'
          # 3.9: default in current Debian stable
          Python39:
            python.version: '3.9'
            TOXENV: 'py39-data'
          Python310:
            python.version: '3.10'
            TOXENV: 'py310-data'
      variables:
        TESTDATA_BASE_PATH: '/data/'
      steps:
      - bash: find /data/
        displayName: 'list available data'

      - task: UsePythonVersion@0
        displayName: 'Use Python $(python.version)'
        inputs:
          versionSpec: '$(python.version)'

#      - task: Cache@2
#        inputs:
#          key: 'python | "$(Agent.OS)" | test_requirements.txt'
#          restoreKeys: |
#            python | "$(Agent.OS)"
#            python
#          path: $(PIP_CACHE_DIR)
#        displayName: 'cache pip packages'

      - bash: python3.9 -m venv venv
        displayName: 'create venv'

      - bash: ./venv/bin/pip install tox
        displayName: 'install tox'

      - ${{ if eq(parameters.recreate_tox, true) }}:
        - bash: ./venv/bin/tox -r
          displayName: 'Run tox tests $(TOXENV) $(Agent.OS) (recreating)'

      - ${{ if eq(parameters.recreate_tox, false) }}:
        - bash: ./venv/bin/tox
          displayName: 'Run tox tests $(TOXENV) $(Agent.OS)'

      - bash: ./scripts/codecov.sh -f ./coverage.xml
        displayName: 'Submit coverage to codecov.io'

      - task: PublishTestResults@2
        condition: succeededOrFailed()
        inputs:
          testResultsFiles: 'junit.xml'
          testRunTitle: 'Publish test results for Python $(python.version)'

    - job: linux_tests
      pool: DataAccess
      strategy:
        matrix:
          Python36:
            python.version: '3.6'
            TOXENV: 'py36'
          Python38:
            python.version: '3.8'
            TOXENV: 'py38'
          Python39:
            python.version: '3.9'
            TOXENV: 'py39'
          Python310:
            python.version: '3.10'
            TOXENV: 'py310'
      variables:
        TOXENV: '$(TOXENV)'
      steps:
      - task: UsePythonVersion@0
        displayName: 'Use Python $(python.version)'
        inputs:
          versionSpec: '$(python.version)'

#      - task: Cache@2
#        inputs:
#          key: 'python | "$(Agent.OS)" | "$(python.version)" | setup.py | test_requirements.txt'
#          restoreKeys: |
#            python | "$(Agent.OS)" | "$(python.version)"
#            python | "$(Agent.OS)"
#            python
#          path: $(PIP_CACHE_DIR)
#        displayName: 'cache pip packages'

      - bash: pip install -U tox
        displayName: 'install requirements'

      - ${{ if eq(parameters.recreate_tox, true) }}:
        - bash: tox -r
          displayName: 'Run tox tests $(TOXENV) $(Agent.OS) (recreating)'

      - ${{ if eq(parameters.recreate_tox, false) }}:
        - bash: tox
          displayName: 'Run tox tests $(TOXENV) $(Agent.OS)'

      - ${{ if eq(parameters.run_slow, true) }}:
        - bash: tox -- -m slow --cov-append tests/
          displayName: 'Run tox slow tests $(TOXENV) $(Agent.OS)'

      - bash: ./scripts/codecov.sh -f ./coverage.xml
        displayName: 'Submit coverage to codecov.io'

      - task: PublishTestResults@2
        condition: succeededOrFailed()
        inputs:
          testResultsFiles: 'junit.xml'
          testRunTitle: 'Publish test results for Python $(python.version)'

    - job: numba_coverage
      pool: DataAccess
      variables:
        TOXENV: 'numba_coverage'
      steps:
      - task: UsePythonVersion@0
        displayName: 'Use Python 3.9'
        inputs:
          versionSpec: '3.9'

#      - task: Cache@2
#        inputs:
#          key: 'python | "$(Agent.OS)" | "3.9" | setup.py | test_requirements.txt'
#          restoreKeys: |
#            python | "$(Agent.OS)" | "3.9"
#            python | "$(Agent.OS)"
#            python
#          path: $(PIP_CACHE_DIR)
#        displayName: 'cache pip packages'

#      - task: Cache@2
#        inputs:
#          key: 'tox_numba_coverage | "$(Agent.OS)" | test_requirements.txt | setup.py'
#          path: $(tox_dir)
#        displayName: 'cache tox environment'

      - bash: pip install -U tox
        displayName: 'install requirements'

      - ${{ if eq(parameters.recreate_tox, true) }}:
        - bash: tox -r
          displayName: 'Run tox tests $(TOXENV) $(Agent.OS) (recreating)'

      - ${{ if eq(parameters.recreate_tox, false) }}:
        - bash: tox
          displayName: 'Run tox tests $(TOXENV) $(Agent.OS)'

      - bash: ./scripts/codecov.sh -f ./coverage.xml
        displayName: 'Submit coverage to codecov.io'

      - task: PublishTestResults@2
        condition: succeededOrFailed()
        inputs:
          testResultsFiles: 'junit.xml'
          testRunTitle: 'Publish test results for numba coverage on Python 3.9'

    - job: lint
      pool: DataAccess
      strategy:
        matrix:
          docs-check:
            TOXENV: 'docs-check'
      variables:
        TOXENV: '$(TOXENV)'
      steps:
      - task: UsePythonVersion@0
        displayName: 'Use Python 3.9'
        inputs:
          versionSpec: '3.9'
      - bash: apt-get update && apt-get install -y pandoc graphviz
        displayName: install required debian packages

#      - task: Cache@2
#        inputs:
#          key: 'lint | "$(Agent.OS)"'
#          restoreKeys: |
#            lint | "$(Agent.OS)"
#            lint
#          path: $(PIP_CACHE_DIR)
#        displayName: 'cache pip packages'
#
#      - task: Cache@2
#        inputs:
#          key: 'tox_lint | "$(Agent.OS)" | docs_requirements.txt | test_requirements.txt | setup.py | "$(TOXENV)"'
#          path: $(tox_dir)
#        displayName: 'cache tox environment'


      - bash: pip install -U tox
        displayName: 'install requirements'

      - ${{ if eq(parameters.recreate_tox, true) }}:
        - bash: tox -r
          displayName: 'Run tox tests $(TOXENV) $(Agent.OS) (recreating)'

      - ${{ if eq(parameters.recreate_tox, false) }}:
        - bash: tox
          displayName: 'Run tox tests $(TOXENV) $(Agent.OS)'

    - job: integration_live
      pool: DataAccess
      variables:
        TESTDATA_BASE_PATH: '/data/'
      steps:
      - task: UsePythonVersion@0
        displayName: 'Use Python 3.9'
        inputs:
          versionSpec: '3.9'

      - checkout: self
      - checkout: LiberTEM-live

      - bash: python3 -m venv $(Agent.TempDirectory)/venv/
        displayName: create virtualenv

      - bash: $(Agent.TempDirectory)/venv/bin/pip install $(Build.SourcesDirectory)/LiberTEM/
        displayName: install LiberTEM

      - bash: $(Agent.TempDirectory)/venv/bin/pip install $(Build.SourcesDirectory)/LiberTEM-live/
        displayName: install LiberTEM-live

      - bash: $(Agent.TempDirectory)/venv/bin/pip install -r $(Build.SourcesDirectory)/LiberTEM-live/test_requirements.txt
        displayName: install LiberTEM-live test requirements

      - bash: cd $(Build.SourcesDirectory)/LiberTEM-live/ && $(Agent.TempDirectory)/venv/bin/pytest
        displayName: run LiberTEM-live tests

    - job: node_tests
      pool: DataAccess
      steps:
      - task: NodeTool@0
        inputs:
          versionSpec: '16'

#      - task: Cache@2
#        inputs:
#          key: 'npm | "$(Agent.OS)" | client/package-lock.json'
#          restoreKeys: |
#            npm | "$(Agent.OS)"
#          path: $(npm_config_cache)
#        displayName: Cache npm

      - bash: (cd client && npm ci)
        displayName: 'install npm dependencies'

      - bash: (cd client && npm run build)
        displayName: 'ensure the typescript build works'

      - bash: (cd client && CI=1 npm test -- --coverage --all)
        displayName: 'run client tests'

      - bash: (cd client && npm run lint)
        displayName: 'run client linter'

      - bash: ./scripts/codecov.sh -f client/coverage/coverage-final.json
        displayName: 'Submit coverage to codecov.io'

  - stage: deploy
    jobs:
    - job: deploy_docs
      pool: DataAccess
      steps:
      - task: UsePythonVersion@0
        displayName: 'Use Python 3.9'
        inputs:
          versionSpec: '3.9'
      - bash: apt-get update && apt-get install -y pandoc graphviz
        displayName: 'install required debian packages'

#      - task: Cache@2
#        inputs:
#          key: 'deploy_docs | "$(Agent.OS)" | setup.py | docs_requirements.txt'
#          restoreKeys: |
#            deploy_docs | "$(Agent.OS)"
#            deploy_docs
#          path: $(PIP_CACHE_DIR)
#        displayName: 'cache pip packages'

      - bash: pip install -U tox && pip install -r scripts/requirements.txt
        displayName: 'install requirements'

      - bash: tox -e docs-build-ci
        displayName: 'build docs'

      - task: DownloadSecureFile@1
        inputs:
          secureFile: deploy_key
        displayName: 'Get the deploy key'
        condition: |
            and(not(eq(variables['Build.Reason'], 'PullRequest')),
                eq(variables['Build.SourceBranch'], 'refs/heads/master'))

      - script: |
          mkdir -p ~/.ssh && mv $DOWNLOADSECUREFILE_SECUREFILEPATH ~/.ssh/id_rsa
          chmod 700 ~/.ssh && chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -t rsa github.com >> ~/.ssh/known_hosts
        condition: |
            and(not(eq(variables['Build.Reason'], 'PullRequest')),
                eq(variables['Build.SourceBranch'], 'refs/heads/master'))

      - bash: ./scripts/deploy_docs docs/build/html/
        displayName: 'deploy docs'
        condition: |
            and(not(eq(variables['Build.Reason'], 'PullRequest')),
                eq(variables['Build.SourceBranch'], 'refs/heads/master'))

      - script: |
          rm -f ~/.ssh/id_rsa
        condition: |
            and(not(eq(variables['Build.Reason'], 'PullRequest')),
                eq(variables['Build.SourceBranch'], 'refs/heads/master'))

    - job: make_upload_packages
      pool: DataAccess
      steps:
      - script: |  # need to get rid of old build stuff, packages etc.
          rm -rf ./build/
          rm -rf ./dist/
          rm -f ./packaging/appimage/*.AppImage
      - task: UsePythonVersion@0
        displayName: 'Use Python 3.9'
        inputs:
          versionSpec: '3.9'
#      - task: Cache@2
#        inputs:
#          key: 'deploy | "$(Agent.OS)" | scripts/requirements.txt'
#          restoreKeys: |
#            deploy | "$(Agent.OS)"
#            deploy
#          path: $(PIP_CACHE_DIR)
#        displayName: 'cache pip packages'
      - bash: pip install -U tox && pip install -r scripts/requirements.txt
        displayName: 'install requirements'
      - bash: python scripts/release --verbose upload --no-dry-run
        displayName: 'Upload packages / release'
        env:
          LT_RELEASE_UPLOAD_PYPI_PASSWORD: $(LT_RELEASE_UPLOAD_PYPI_PASSWORD)
          LT_RELEASE_UPLOAD_PYPI_TEST_PASSWORD: $(LT_RELEASE_UPLOAD_PYPI_TEST_PASSWORD)
          LT_RELEASE_UPLOAD_TOKEN: $(LT_RELEASE_UPLOAD_TOKEN)
          LT_RELEASE_UPLOAD_ZENODO_SANDBOX_TOKEN: $(LT_RELEASE_UPLOAD_ZENODO_SANDBOX_TOKEN)
          LT_RELEASE_UPLOAD_ZENODO_TOKEN: $(LT_RELEASE_UPLOAD_ZENODO_TOKEN)
          LT_RELEASE_UPLOAD_ZENODO_SANDBOX_PARENT: $(LT_RELEASE_UPLOAD_ZENODO_SANDBOX_PARENT)
          LT_RELEASE_UPLOAD_ZENODO_PARENT: $(LT_RELEASE_UPLOAD_ZENODO_PARENT)
