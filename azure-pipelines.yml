trigger:
  branches:
    include:
      - master
      - 'v*'

variables:
  - group: Packaging
  - name: PIP_CACHE_DIR
    value: $(Pipeline.Workspace)/.pip
  - name: npm_config_cache
    value: $(Pipeline.Workspace)/.npm
  - name: tox_dir
    value: $(Build.Repository.LocalPath)/.tox

parameters:
  # On windows and mac os x, creating tox environments is costly,
  # so we disable it by default, caching the tox environments for the
  # next run. They are also rebuilt when setup.py or test_requirements.txt change
  - name: recreate_tox
    displayName: Recreate tox environments? (Win/Mac)
    type: boolean
    default: false

  # This parameter allows to run slower tests, this is useful for running more
  # comprehensive tests, for example before doing a release.
  - name: run_slow
    displayName: Also run slow tests
    type: boolean
    default: false

stages:
  - stage: test
    jobs:
    - job: linux_tests
      pool:
        vmImage: 'ubuntu-latest'
      strategy:
        matrix:
          Python36:
            python.version: '3.6'
            TOXENV: 'py36'
          Python37:
            python.version: '3.7'
            TOXENV: 'py37'
          Python38:
            python.version: '3.8'
            TOXENV: 'py38'
          Python39:
            python.version: '3.9'
            TOXENV: 'py39'
      variables:
        TOXENV: '$(TOXENV)'
      steps:
      - task: UsePythonVersion@0
        displayName: 'Use Python $(python.version)'
        inputs:
          versionSpec: '$(python.version)'

      - task: Cache@2
        inputs:
          key: 'python | "$(Agent.OS)" | "$(python.version)" | setup.py | test_requirements.txt'
          restoreKeys: |
            python | "$(Agent.OS)" | "$(python.version)"
            python | "$(Agent.OS)"
            python
          path: $(PIP_CACHE_DIR)
        displayName: 'cache pip packages'

      - bash: pip install -U tox
        displayName: 'install requirements'

      - bash: tox
        displayName: 'Run tox tests $(TOXENV) $(Agent.OS)'

      - ${{ if eq(parameters.run_slow, true) }}:
        - bash: tox -- -m slow --cov-append tests/
          displayName: 'Run tox slow tests $(TOXENV) $(Agent.OS)'

      - ${{ if eq(python.version, '3.9') }}:
        - bash: tox -e mypy
          displayName: 'Run mypy type checks'

      - bash: bash <(curl -s https://codecov.io/bash) -f coverage.xml
        displayName: 'Submit coverage to codecov.io'

      - task: PublishTestResults@2
        condition: succeededOrFailed()
        inputs:
          testResultsFiles: 'junit.xml'
          testRunTitle: 'Publish test results for Python $(python.version)'

    - job: numba_coverage
      pool:
        vmImage: 'ubuntu-latest'
      variables:
        TOXENV: 'numba_coverage'
      steps:
      - task: UsePythonVersion@0
        displayName: 'Use Python 3.9'
        inputs:
          versionSpec: '3.9'

      - task: Cache@2
        inputs:
          key: 'python | "$(Agent.OS)" | "3.9" | setup.py | test_requirements.txt'
          restoreKeys: |
            python | "$(Agent.OS)" | "3.9"
            python | "$(Agent.OS)"
            python
          path: $(PIP_CACHE_DIR)
        displayName: 'cache pip packages'

      - task: Cache@2
        inputs:
          key: 'tox_numba_coverage | "$(Agent.OS)" | test_requirements.txt | setup.py'
          path: $(tox_dir)
        displayName: 'cache tox environment'

      - bash: pip install -U tox
        displayName: 'install requirements'

      - bash: tox
        displayName: 'Run tox tests $(TOXENV) $(Agent.OS)'

      - bash: bash <(curl -s https://codecov.io/bash) -f coverage.xml
        displayName: 'Submit coverage to codecov.io'

      - task: PublishTestResults@2
        condition: succeededOrFailed()
        inputs:
          testResultsFiles: 'junit.xml'
          testRunTitle: 'Publish test results for numba coverage on Python 3.9'

    - job: lint
      pool:
        vmImage: 'ubuntu-latest'
      strategy:
        matrix:
          docs-check:
            TOXENV: 'docs-check'
      variables:
        TOXENV: '$(TOXENV)'
      steps:
      - task: UsePythonVersion@0
        displayName: 'Use Python 3.9'
        inputs:
          versionSpec: '3.9'

      - task: Cache@2
        inputs:
          key: 'lint | "$(Agent.OS)"'
          restoreKeys: |
            lint | "$(Agent.OS)"
            lint
          path: $(PIP_CACHE_DIR)
        displayName: 'cache pip packages'

      - task: Cache@2
        inputs:
          key: 'tox_lint | "$(Agent.OS)" | docs_requirements.txt | test_requirements.txt | setup.py | "$(TOXENV)"'
          path: $(tox_dir)
        displayName: 'cache tox environment'

      - bash: sudo apt install -y pandoc
        displayName: install required debian packages
      - bash: pip install -U tox
        displayName: 'install requirements'
      - bash: tox
        displayName: 'Run tox lint $(TOXENV) $(Agent.OS)'

    - job: windows_tests
      pool:
        vmImage: 'windows-latest'
      strategy:
        matrix:
          Python36:
            python.version: '3.6'
            TOXENV: 'py36'
          Python37:
            python.version: '3.7'
            TOXENV: 'py37'
          Python38:
            python.version: '3.8'
            TOXENV: 'py38'
          Python39:
            python.version: '3.9'
            TOXENV: 'py39'
      variables:
        TOXENV: '$(TOXENV)'
      steps:
      - task: UsePythonVersion@0
        displayName: 'Use Python $(python.version)'
        inputs:
          versionSpec: '$(python.version)'

      - task: Cache@2
        inputs:
          key: 'python | "$(Agent.OS)" | "$(python.version)" | setup.py | test_requirements.txt'
          restoreKeys: |
            python | "$(Agent.OS)" | "$(python.version)"
            python | "$(Agent.OS)"
            python
          path: $(PIP_CACHE_DIR)
        displayName: 'cache pip packages'

      - task: Cache@2
        inputs:
          key: 'tox | "$(Agent.OS)" | test_requirements.txt | setup.py | "$(python.version)"'
          path: $(tox_dir)
        displayName: 'cache tox environment'

      - bash: pip install -U tox
        displayName: 'install requirements'

      - ${{ if eq(parameters.recreate_tox, true) }}:
        - bash: tox -r
          displayName: 'Run tox tests $(TOXENV) $(Agent.OS) (recreating)'

      - ${{ if eq(parameters.recreate_tox, false) }}:
        - bash: tox
          displayName: 'Run tox tests $(TOXENV) $(Agent.OS)'

      - ${{ if eq(parameters.run_slow, true) }}:
        - bash: tox -- -m slow --cov-append tests/
          displayName: 'Run tox slow tests $(TOXENV) $(Agent.OS)'

      - bash: bash <(curl -s https://codecov.io/bash) -f coverage.xml
        displayName: 'Submit coverage to codecov.io'

      - task: PublishTestResults@2
        condition: succeededOrFailed()
        inputs:
          testResultsFiles: 'junit.xml'
          testRunTitle: 'Publish test results for Python $(python.version)'

    - job: macos_tests
      strategy:
        matrix:
          Python36:
            python.version: '3.6'
            TOXENV: 'py36'
            imageName: 'macos-10.14'
          Python37:
            python.version: '3.7'
            TOXENV: 'py37'
            imageName: 'macos-latest'
          Python38:
            python.version: '3.8'
            TOXENV: 'py38'
            imageName: 'macos-latest'
          Python39:
            python.version: '3.9'
            TOXENV: 'py39'
            imageName: 'macos-latest'
      pool:
        vmImage: '$(imageName)'
      variables:
        TOXENV: '$(TOXENV)'
      steps:
      - task: UsePythonVersion@0
        displayName: 'Use Python $(python.version)'
        inputs:
          versionSpec: '$(python.version)'

      - task: Cache@2
        inputs:
          key: 'python | "$(Agent.OS)" | "$(python.version)" | setup.py | test_requirements.txt'
          restoreKeys: |
            python | "$(Agent.OS)" | "$(python.version)"
            python | "$(Agent.OS)"
            python
          path: $(PIP_CACHE_DIR)
        displayName: 'cache pip packages'

      - task: Cache@2
        inputs:
          key: 'tox | "$(Agent.OS)" | test_requirements.txt | setup.py | "$(python.version)"'
          path: $(tox_dir)
        displayName: 'cache tox environment'

      - bash: pip install -U tox
        displayName: 'install requirements'

      - ${{ if eq(parameters.recreate_tox, true) }}:
        - bash: tox -r
          displayName: 'Run tox tests $(TOXENV) $(Agent.OS) (recreating)'

      - ${{ if eq(parameters.recreate_tox, false) }}:
        - bash: tox
          displayName: 'Run tox tests $(TOXENV) $(Agent.OS)'

      - ${{ if eq(parameters.run_slow, true) }}:
        - bash: tox -- -m slow --cov-append tests/
          displayName: 'Run tox slow tests $(TOXENV) $(Agent.OS)'

      - bash: bash <(curl -s https://codecov.io/bash) -f coverage.xml
        displayName: 'Submit coverage to codecov.io'

      - task: PublishTestResults@2
        condition: succeededOrFailed()
        inputs:
          testResultsFiles: 'junit.xml'
          testRunTitle: 'Publish test results for Python $(python.version)'

    - job: node_tests
      pool:
        vmImage: 'ubuntu-latest'
      steps:
      - task: NodeTool@0
        inputs:
          versionSpec: '12'

      - task: Cache@2
        inputs:
          key: 'npm | "$(Agent.OS)" | client/package-lock.json'
          restoreKeys: |
            npm | "$(Agent.OS)"
          path: $(npm_config_cache)
        displayName: Cache npm

      - bash: (cd client && npm install)
        displayName: 'install npm dependencies'

      - bash: (cd client && npm run build)
        displayName: 'ensure the typescript build works'

      - bash: (cd client && CI=1 npm test -- --coverage --all)
        displayName: 'run client tests'

      - bash: (cd client && npm run lint)
        displayName: 'run client linter'

      - bash: bash <(curl -s https://codecov.io/bash) -f client/coverage/coverage-final.json
        displayName: 'Submit coverage to codecov.io'

    - job: distributed_tests
      pool:
        vmImage: 'ubuntu-latest'
      variables:
        DASK_SCHEDULER_ADDRESS: tcp://localhost:8786
        DOCKER_BUILDKIT: "1"
      steps:

      - task: UsePythonVersion@0
        inputs:
          versionSpec: '3.9'

      - bash: pip install -U tox 'virtualenv>19' pip-tools
        displayName: 'install requirements'

      - script: |
          cd packaging/docker/
          ./update_reqs.sh
          docker pull libertem/libertem-dev || true
          docker build --cache-from=libertem/libertem-dev -t libertem/libertem-dev --build-arg BUILDKIT_INLINE_CACHE=1 ../../ -f Dockerfile
          # make this succeed even if the access token is not available:
          (docker login -u sk1p -p $(DOCKER_ACCESS_TOKEN) && docker push libertem/libertem-dev) || true
        displayName: 'Build docker container(s)'
        env:
          DOCKER_ACCESS_TOKEN: $(DOCKER_ACCESS_TOKEN)

      - bash: (cd packaging/docker/ && docker-compose run tests)
        displayName: 'run tests'

  - stage: deploy
    jobs:
    - job: deploy_docs
      pool:
        vmImage: 'ubuntu-latest'
      steps:
      - task: UsePythonVersion@0
        displayName: 'Use Python 3.9'
        inputs:
          versionSpec: '3.9'
      - bash: sudo apt install -y pandoc
        displayName: 'install required debian packages'

      - task: Cache@2
        inputs:
          key: 'deploy_docs | "$(Agent.OS)" | setup.py | docs_requirements.txt'
          restoreKeys: |
            deploy_docs | "$(Agent.OS)"
            deploy_docs
          path: $(PIP_CACHE_DIR)
        displayName: 'cache pip packages'

      - bash: pip install -U tox && pip install -r scripts/requirements.txt
        displayName: 'install requirements'

      - bash: tox -e docs-build-ci
        displayName: 'build docs'

      - task: DownloadSecureFile@1
        inputs:
          secureFile: deploy_key
        displayName: 'Get the deploy key'

      - script: |
          mkdir ~/.ssh && mv $DOWNLOADSECUREFILE_SECUREFILEPATH ~/.ssh/id_rsa
          chmod 700 ~/.ssh && chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -t rsa github.com >> ~/.ssh/known_hosts

      - bash: ./scripts/deploy_docs docs/build/html/
        displayName: 'deploy docs'
        condition: |
            and(not(eq(variables['Build.Reason'], 'PullRequest')),
                eq(variables['Build.SourceBranch'], 'refs/heads/master'))

    - job: make_upload_packages
      pool:
        vmImage: 'ubuntu-latest'
      steps:
      - task: UsePythonVersion@0
        displayName: 'Use Python 3.9'
        inputs:
          versionSpec: '3.9'
      - task: Cache@2
        inputs:
          key: 'deploy | "$(Agent.OS)" | scripts/requirements.txt'
          restoreKeys: |
            deploy | "$(Agent.OS)"
            deploy
          path: $(PIP_CACHE_DIR)
        displayName: 'cache pip packages'
      - bash: pip install -U tox && pip install -r scripts/requirements.txt
        displayName: 'install requirements'
      - bash: python scripts/release --verbose upload --no-dry-run
        displayName: 'Upload packages / release'
        env:
          LT_RELEASE_UPLOAD_PYPI_PASSWORD: $(LT_RELEASE_UPLOAD_PYPI_PASSWORD)
          LT_RELEASE_UPLOAD_PYPI_TEST_PASSWORD: $(LT_RELEASE_UPLOAD_PYPI_TEST_PASSWORD)
          LT_RELEASE_UPLOAD_TOKEN: $(LT_RELEASE_UPLOAD_TOKEN)
          LT_RELEASE_UPLOAD_ZENODO_SANDBOX_TOKEN: $(LT_RELEASE_UPLOAD_ZENODO_SANDBOX_TOKEN)
          LT_RELEASE_UPLOAD_ZENODO_TOKEN: $(LT_RELEASE_UPLOAD_ZENODO_TOKEN)
          LT_RELEASE_UPLOAD_ZENODO_SANDBOX_PARENT: $(LT_RELEASE_UPLOAD_ZENODO_SANDBOX_PARENT)
          LT_RELEASE_UPLOAD_ZENODO_PARENT: $(LT_RELEASE_UPLOAD_ZENODO_PARENT)
