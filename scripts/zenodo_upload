#!/usr/bin/env python
# -*- encoding: utf-8 -*-

import os
import json
import pprint

import click
import requests

import libertem

ACCESS_TOKEN = os.environ['ZENODO_OAUTH_TOKEN']

BASE_URL = ''
VERBOSE = False

CONF = 'packaging/zenodo-upload.json'

config = json.load(open(CONF))

default_params = {'access_token': ACCESS_TOKEN}
default_headers = {"Content-Type": "application/json"}
deposition_path = 'deposit/depositions'


class ZenodoException(Exception):
    pass


def prettystring(r):
    result = 'Status code: %s \n' % r.status_code
    if r.text:
        result += (pprint.pformat(r.json()))
    return result


def prettylog(r):
    log(prettystring(r))


def log(s):
    if VERBOSE:
        print(s)


def zenodo_deposition_get(snippet='', extra_params={}):
    params = dict(default_params)
    params.update(extra_params)
    r = requests.get(BASE_URL + deposition_path + snippet, params=params)
    return r


def zenodo_deposition_post(snippet='', json=None, data=None, extra_params={}, extra_headers={}):
    headers = dict(default_headers)
    headers.update(extra_headers)

    params = dict(default_params)
    params.update(extra_params)

    r = requests.post(BASE_URL + deposition_path + snippet,
        params=params,
        json=json,
        data=data,
        headers=headers)
    return r


def zenodo_deposition_put(snippet='', json={}, extra_params={}, extra_headers={}):
    headers = dict(default_headers)
    headers.update(extra_headers)

    params = dict(default_params)
    params.update(extra_params)

    r = requests.put(BASE_URL + deposition_path + snippet,
        params=params,
        json=json,
        headers=headers)
    return r


def zenodo_deposition_delete(snippet='', extra_params={}):
    params = dict(default_params)
    params.update(extra_params)
    r = requests.delete(BASE_URL + deposition_path + snippet, params=params)
    return r


def list_depositions():
    r = zenodo_deposition_get()
    if r.status_code != 200:
        raise ZenodoException(prettystring(r))
    return r


def create_deposition():
    r = zenodo_deposition_post()
    if r.status_code != 201:
        raise ZenodoException(prettystring(r))
    return r


def get_deposition(deposition_id):
    r = zenodo_deposition_get(snippet='/%s' % deposition_id)
    if r.status_code != 200:
        raise ZenodoException(prettystring(r))
    return r


def update_deposition(deposition_id, data):
    r = zenodo_deposition_put(snippet='/%s' % deposition_id, json=data)
    if r.status_code != 200:
        raise ZenodoException(prettystring(r))
    return r


def new_version(parent_id):
    snippet = '/%s/actions/newversion' % parent_id
    r = zenodo_deposition_post(snippet=snippet)
    if r.status_code != 201:
        raise ZenodoException(prettystring(r))
    return r


def get_latest_draft(r):
    data = r.json()
    url = data['links']['latest_draft']
    parts = url.split('/')
    # The last bit of the URL is the ID
    return parts[-1]


def get_file_ids(r):
    data = r.json()
    return [f['id'] for f in data['files']]


def delete_file(deposition_id, file_id):
    snippet = '/%s/files/%s' % (deposition_id, file_id)
    r = zenodo_deposition_delete(snippet=snippet)
    if r.status_code != 204:
        raise ZenodoException(prettystring(r))
    return r


def upload_file(deposition_id, filename, remote_filename=None):
    if remote_filename is None:
        remote_filename = os.path.basename(filename)

    data = {'filename': remote_filename}
    snippet = '/%s/files' % deposition_id

    with open(filename, 'rb') as fh:

        files = {'file': fh}
        # We can't use zenodo_deposition_post() because the data is encoded as multipart/form-data
        # for upload, different from the JSON of other actions.
        r = requests.post(BASE_URL + deposition_path + snippet,
            data=data, files=files, params=default_params)
    if r.status_code != 201:
        raise ZenodoException(prettystring(r))
    return r


def make_creators():
    with open('packaging/creators.json', 'r', encoding='utf-8') as f:
        raw_creators = json.load(f)

    result = []
    for c in raw_creators:
        creator = {
            'name': c['authorname']
        }
        for key in ['affiliation', 'orcid']:
            try:
                creator[key] = c[key]
            except KeyError:
                pass
        result.append(creator)
    return result


def make_contributors():
    with open('packaging/contributors.json', 'r', encoding='utf-8') as f:
        raw_contributors = json.load(f)

    result = []
    for c in raw_contributors:
        contributor = {
            'name': c['authorname'],
            'type': 'Other'
        }

        for key in ['affiliation', 'orcid']:
            try:
                contributor[key] = c[key]
            except KeyError:
                pass
        result.append(contributor)
    return result


# Work in progress, see also https://github.com/zenodo/zenodo/issues/1736
def make_description():
    with open('packaging/README.html', 'r', encoding='utf-8') as f:
        readme = f.read()
    return readme


def make_data():
    data = config['template']
    metadata = data['metadata']
    metadata['creators'] = make_creators()
    metadata['contributors'] = make_contributors()
    metadata['description'] = make_description()
    metadata['version'] = libertem.__version__
    metadata['title'] += libertem.__version__
    return data


@click.command()
@click.option('--wheel', required=True, type=click.File())
@click.option('--tarball', required=True, type=click.File())
@click.option('--parent', default="264899")
@click.option('--url', default='https://sandbox.zenodo.org/api/')
@click.option('--verbose', '-v', is_flag=True)
def main(wheel, tarball, parent, url, verbose):
    global BASE_URL
    BASE_URL = url

    global VERBOSE
    VERBOSE = verbose
    
    log("Creating new version of deposition %s..." % parent)
    r = new_version(parent_id=parent)
    prettylog(r)

    deposition_id = get_latest_draft(r)
    log("Updating draft deposition %s..." % deposition_id)
    r = update_deposition(deposition_id=deposition_id, data=make_data())
    prettylog(r)

    for file_id in get_file_ids(r):
        log("Deleting inherited file %s..." % file_id)
        r = delete_file(deposition_id, file_id)
        prettylog(r)

    log("Uploading wheel as new file...")
    wheel_upload = upload_file(deposition_id=deposition_id, filename=wheel.name)
    prettylog(wheel_upload)

    log("Uploading tarball as new file...")
    tar_upload = upload_file(deposition_id=deposition_id, filename=tarball.name)
    prettylog(tar_upload)

    log("Finished!")


if __name__ == '__main__':
    main()
