{"version":3,"sources":["job/components/ResultImage.module.css","images/LiberTEM logo-medium.png","cluster/actions.ts","About.tsx","helpers/actionHelpers.ts","helpers/index.ts","messages.ts","cluster/components/LocalConnectionForm.tsx","cluster/components/TCPConnectionForm.tsx","browser/actions.ts","cluster/components/ClusterConnectionForm.tsx","channel/components/ChannelConnecting.tsx","channel/components/ChannelStatus.tsx","browser/components/FileBrowserEntry.tsx","browser/components/FileBrowserHeader.tsx","browser/components/FileEntry.tsx","browser/components/FolderEntry.tsx","browser/components/PathDropDownItem.tsx","browser/components/PathInput.tsx","browser/components/RecentFiles.tsx","browser/components/PathBar.tsx","browser/components/FileBrowser.tsx","job/types.ts","browser/components/BrowserWrapper.tsx","widgets/BusySpinner.tsx","widgets/BusyWrapper.tsx","widgets/HandleParent.tsx","job/components/ResultImage.tsx","job/components/Result.tsx","job/components/Selectors.tsx","job/components/ResultList.tsx","widgets/constraints.ts","widgets/styles.ts","widgets/Disk.tsx","widgets/kbdHandler.ts","widgets/DraggableHandle.tsx","analysis/actions.ts","analysis/components/AnalysisLayoutTwoCol.tsx","analysis/components/FramePicker.tsx","analysis/components/ModeSelector.tsx","widgets/Rect.tsx","analysis/components/DefaultFrameView.tsx","analysis/components/RectROI.tsx","analysis/components/RoiPicker.tsx","analysis/components/DiskROI.tsx","analysis/components/Toolbar.tsx","analysis/helpers.ts","analysis/components/CenterOfMassAnalysis.tsx","helpers/svg.ts","widgets/Ring.tsx","analysis/components/AnalysisLayoutTwoRes.tsx","analysis/components/Clustering.tsx","analysis/components/DiskMaskAnalysis.tsx","analysis/components/FEM.tsx","analysis/components/AnalysisLayoutThreeCol.tsx","analysis/components/FFTFramePicker.tsx","analysis/components/FFTSumFrames.tsx","analysis/components/FFTFrameView.tsx","analysis/components/FFTAnalysis.tsx","analysis/components/PointSelectionAnalysis.tsx","analysis/components/RadialFourierAnalysis.tsx","analysis/components/RingMaskAnalysis.tsx","analysis/types.ts","analysis/components/Analysis.tsx","analysis/components/AnalysisList.tsx","helpers/reducerHelpers.ts","analysis/components/AnalysisSelect.tsx","dataset/actions.ts","dataset/components/AddAnalysis.tsx","dataset/components/DatasetParams.tsx","dataset/components/DatasetInfo.tsx","dataset/components/DatasetToolbar.tsx","dataset/components/Dataset.tsx","dataset/api.ts","dataset/validate.ts","dataset/helpers.ts","dataset/components/BLOParamsForm.tsx","dataset/components/DatasetTypeSelect.tsx","dataset/components/EMPADParamsForm.tsx","dataset/components/FRMS6ParamsForm.tsx","dataset/components/HDF5ParamsForm.tsx","dataset/components/K2ISParamsForm.tsx","dataset/components/MIBParamsForm.tsx","dataset/components/RawFileParamsForm.tsx","dataset/components/SERParamsForm.tsx","dataset/components/DatasetOpen.tsx","errors/actions.ts","dataset/components/DatasetOpenSpinner.tsx","dataset/components/DatasetList.tsx","errors/components/Error.tsx","errors/components/ErrorList.tsx","App.tsx","registerServiceWorker.ts","job/actions.ts","job/api.ts","analysis/sagas.ts","config/helpers.ts","browser/api.ts","channel/actions.ts","browser/sagas.ts","channel/messages.ts","channel/sagas.ts","cluster/api.ts","config/actions.ts","cluster/sagas.ts","config/api.ts","config/sagas.ts","dataset/sagas.ts","sagas.ts","analysis/reducers.ts","browser/reducers.ts","channel/reducers.ts","cluster/reducers.ts","config/reducers.ts","dataset/reducers.ts","errors/reducers.ts","job/reducers.ts","store.ts","index.tsx"],"names":["module","exports","ActionTypes","connect","state","version","config","revision","Header","as","slice","List","Item","Icon","name","Content","href","src","alt","createAction","type","payload","meta","undefined","Actions","notConnected","NOT_CONNECTED","params","CONNECT","connected","CONNECTED","defaultDebounce","fn","delay","_","maxWait","getEnumValues","e","Object","keys","ClusterTypes","DatasetTypes","DatasetStatus","AnalysisTypes","ClusterTypeMetadata","LOCAL","label","TCP","helpText","withFormik","mapPropsToValues","ownProps","numWorkers","localCores","handleSubmit","values","formikBag","onSubmit","props","touched","errors","isSubmitting","dirty","handleChange","handleBlur","handleReset","Form","Field","htmlFor","value","onChange","onBlur","Button","primary","disabled","address","mapDispatchToProps","connectToCluster","clusterActions","clusterTypeOptions","map","t","text","ClusterConnectionForm","clusterType","setType","setState","data","this","Dropdown","inline","options","Segment","renderForm","React","ChannelConnecting","msg","Message","icon","loading","messages","waiting","connecting","clusterMessages","channelStatus","clusterConnection","haveConfig","children","status","list","path","LIST_DIRECTORY","dirListing","dirs","files","drives","places","DIRECTORY_LISTING","open","OPEN","cancel","CANCEL","select","SELECT","selectFullPath","SELECT_FULL_PATH","error","timestamp","id","ERROR","detectParams","DETECT_PARAMS","paramsDetected","PARAMS_DETECTED","TimeStamp","ts","date","Date","fmtDate","toLocaleDateString","fmtTime","toLocaleTimeString","title","style","display","whiteSpace","width","marginRight","FileSize","fmtSize","bytes","si","thresh","Math","abs","size","unit","units","u","length","toFixed","humanFileSize","textAlign","Cell","overflow","textOverflow","FileBrowserEntry","onClick","details","myStyle","cursor","tsStyles","paddingRight","flexGrow","owner","ctime","mtime","FileBrowserHeader","alignRight","paddingBottom","FileEntry","dispatch","browserActions","window","setTimeout","toString","newProps","initialPath","enableReinitialize","Input","autoComplete","lastOpened","fileHistory","separator","recentFiles","filter","item","floating","Menu","content","option","idx","key","refresh","currentPath","handleInputChange","goUp","driveOptions","placeOptions","listRef","scrollToTop","current","scrollToItem","sortByKey","array","getKey","sort","a","b","x","y","JobRunning","JobStatus","browser","isLoading","getSortKey","toLowerCase","dirEntries","dir","fileEntries","f","entries","concat","overflowY","ref","height","itemCount","itemSize","index","Group","isOpen","labelPosition","BusySpinner","margin","padding","position","bottom","right","color","opacity","BusyWrapper","busy","HandleParent","currentHandle","handleDragStart","h","handleDrop","handleMouseMove","externalMouseMove","handleMouseLeave","externalLeave","handleMouseUp","externalMouseUp","onMouseMove","onMouseLeave","onMouseUp","onKeyDown","onKeyboardEvent","outline","tabIndex","fill","renderHandles","handles","i","elem","ResultImage","job","result","results","className","styles","fallback","viewBox","default","xlinkHref","imageURL","ResultWrapper","styled","svg","Result","extraHandles","extraWidgets","running","DONE","Selectors","div","ResultList","selectedChannel","selectChannel","getJob","currentJob","analysis","jobsById","jobIndex","history","jobHistory","tmpJob","selectors","dataset","subtitle","currentResult","border","dt","endTimestamp","startTimestamp","selectedImg","ResultImageSelector","availableImages","description","analyses","byId","jobId","jobs","ds","datasets","inRectConstraint","p","max","min","cbToRadius","cx","cy","cb","dx","dy","sqrt","dist","keepOnCY","riConstraint","outerPos","otherX","roConstraints","innerPos","defaultMaskStyles","imageWidth","fillOpacity","strokeOpacity","stroke","strokeWidth","Disk","imageHeight","r","handleKeyEvent","update","delta","shiftKey","preventDefault","StyledCircle","circle","Cross","FocusGroup","g","Handle","scale","withCross","focusRef","args","transform","crossSpec","cross","d","relativeCoords","parent","ownerSVGElement","Error","inWidthAttr","getAttribute","inWidth","getBoundingClientRect","getScalingFactor","parentPos","pageX","left","pageXOffset","pageY","top","pageYOffset","DraggableHandle","posRef","dragging","drag","move","stopDrag","applyConstraint","constraint","startDrag","parentOnDragStart","focus","onDragMove","constrained","parentOnDrop","handleKeyDown","newCoords","visibility","onMouseDown","renderCommon","renderDragging","create","analysisType","CREATE","created","CREATED","prepareRun","PREPARE_RUN","run","parameters","RUN","RUNNING","remove","REMOVE","removed","REMOVED","AnalysisLayoutTwoCol","toolbar","attached","Grid","columns","Row","Column","useFramePicker","enabled","scanWidth","scanHeight","analysisId","setCx","setCy","useDispatch","useEffect","analysisActions","PICK_FRAME","onPickChange","pickX","pickY","newX","round","newY","coords","onDragStart","onDrop","ModeSelector","modes","currentMode","onModeChange","DefaultModes","DefaultRois","Rect","ymin","xmin","useRectROI","minLength","useState","setx","sety","setwidth","setheight","handleCornerChange","newx","newy","handleShapeChange","smthHandle","rectRoiParameters","roi","shape","rectRoiHandles","rectRoiWidgets","useRoiPicker","roiParameters","handle","analysisDetails","clearTimeout","JSON","stringify","useDefaultFrameView","widgets","availableModes","SUM","SD","PICK","availableRois","ALL","DISK","RECT","frameMode","setMode","setRoi","frameModeSelector","roiSelector","pickCoords","pickHandles","setR","handleCenterChange","newCx","newCy","handleRChange","newR","rHandle","diskRoiParameters","diskRoiHandles","diskRoiWidgets","useDiskROI","SD_FRAMES","SUM_FRAMES","frameViewTitle","jobIdxsToInclude","filteredJobs","indexOf","reduce","prevValue","getAnalysisStatus","busyIdxs","handleRemove","onApply","applyIconProps","CenterOfMassAnalysis","frameViewWidgets","resultHandles","resultWidgets","CENTER_OF_MASS","getPathArc","center","start","end","radius","degree","points","push","getLocationFromAngle","clockWise","join","getCirclePath","radian","PI","cos","sin","Ring","ri","pathSpec","ro","fillRule","AnalysisLayoutTwoRes","mid","clustparams","title1","title2","title3","ClustAnalysis","setRi","setRo","riHandle","roHandle","setDelta","minDist","setMinDist","nPeaks","setNPeaks","nClust","setNClust","handleRIChange","handleROChange","SUM_SIG","CLUST","n_clust","n_peaks","min_dist","paramsVisible","setParamsVisible","Accordion","Title","active","event","step","target","valueAsNumber","DiskMaskAnalysis","APPLY_DISK_MASK","FEMAnalysis","FEM","AnalysisLayoutThreeCol","useFFTFramePicker","real_rad","real_centerx","real_centery","PICK_FFT_FRAME","useFFTSumFrames","FFTSUM_FRAMES","useFFTFrameView","FFTAnalysis","radIn","radOut","frameViewWidgetsfft","check","setCheck","realCenterX","realCenterY","realRad","frameViewWidgetsreal","APPLY_FFT_MASK","rad_in","rad_out","checked","PointSelectionAnalysis","APPLY_POINT_SELECTOR","RadialFourierAnalysis","nBins","maxOrder","RADIAL_FOURIER","n_bins","max_order","RingMaskAnalysis","APPLY_RING_MASK","AnalysisMetadata","desc","component","AnalysisDispatcherComponent","useSelector","AnalysisComponent","mainAnalysisType","AnalysisList","ids","Analysis","updateById","partialRecord","newObj","assign","newById","insertById","record","filterWithPred","pred","acc","getMetadata","typeName","analysisTypeOptions","AnalysisSelect","labeled","button","handleAddAnalysis","renderParams","Table","Array","DatasetParams","HeaderCell","Body","DiagElem","diagnostics","renderValue","DiagElems","DatasetInfo","cachedParams","detectedParams","cancelOpen","CANCEL_OPEN","delete","DELETE","deleted","DELETED","detect","DETECT","detected","DETECTED","detectFailed","DETECT_FAILED","handleRemoveDataset","datasetActions","DatasetContainer","OPENING","DELETING","dividing","marginTop","marginBottom","horizontal","Modal","trigger","link","Popup","flexShrink","openDataset","fetch","body","credentials","method","then","json","deleteDataset","detectDataset","encodeURIComponent","schemaCache","getSchema","cached","Promise","resolve","schemaResponse","convertErrors","res","forEach","err","fieldName","dataPath","replace","match","plainName","message","schema","validate","Ajv","compile","parseNumList","nums","split","part","trim","getInitial","otherwise","withValidation","opts","formToJson","setSubmitting","validateOpen","validateOnChange","validateOnBlur","initial","tileshape","BLO","isValidating","onCancel","datasetTypeOptions","DatasetTypeSelect","currentType","scan_size","EMPAD","FRMS6","ds_path","HDF5","K2IS","MIB","enable_direct","detector_size","dtype","RAW","SER","getDefaultDSType","didReset","openState","formCachedParams","formDetectedParams","getFormInitial","DatasetOpen","setReset","formInitial","defaultType","datasetType","setDatasetType","doSetType","form","formPath","commonParams","uuid","onReset","MIBParamsForm","BLOParamsForm","K2ISParamsForm","EMPADParamsForm","assertNotReached","busyPath","DatasetList","formVisible","dsId","Dataset","DISMISS","dismiss","errorActions","negative","onDismiss","clusterConnected","channelConnected","latestErrors","showModal","App","Container","logo","alignSelf","isLocalhost","Boolean","location","hostname","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","startJob","datasetId","cancelJob","createAnalysisSaga","analysisSidecar","doRemoveAnalysisSaga","analysisRootSaga","selectDataset","selectAnalysis","selectJob","action","fork","sidecarTask","put","take","now","actionChannel","buffers","sliding","runOrParamsChannel","jobActions","oldJobId","call","takeEvery","CONFIG_KEY","joinPaths","parts","RegExp","escapeRegExp","mergeLocalStorage","serverConfig","localSettings","localStorage","getItem","cwd","localSettingsParsed","parse","defaultConfig","setLocalStorage","setItem","getDirectoryListing","url","directoryListingSaga","fetchOnRequest","fetchDirectoryListing","fetchDirectoryListOnOpen","newPath","browserState","alternative","home","MessageTypes","initialState","INITIAL_STATE","jobStarted","JOB_STARTED","finishJob","FINISH_JOB","taskResult","TASK_RESULT","jobError","JOB_ERROR","close","CLOSE","cancelled","CANCELLED","createMessage","messageType","attribs","Messages","followup","binary","objectURL","BINARY","DELETE_DATASET","CANCEL_JOB_DONE","webSocketSaga","actionsFromChannel","handleBinaryParts","handleTaskResult","handleFinishJob","createWebSocketChannel","eventChannel","emit","onMessage","Blob","channelMessages","URL","createObjectURL","parsed","onOpen","onClose","END","onError","ws","WebSocket","port","addEventListener","removeEventListener","socketChannel","channelActions","numParts","binMsg","numMessages","images","descriptions","connection","checkClusterConnection","connectSaga","putClusterStatus","trackClusterConnection","clusterConnectionSaga","conn","all","FETCH","fetched","FETCHED","fetchFailed","FETCH_FAILED","getConfig","getConfigOnReconnect","getConfigSaga","updateLocalStorageConfig","firstConfigFetch","configRootSaga","configActions","configResponse","mergedConfig","removeItem","createDatasetSaga","deleteDatasetSaga","doOpenDataset","openDatasetSagaFullPath","openDatasetSaga","datasetRootSaga","resp","fullPath","detectResult","datasetParams","rootSaga","initialAnalysisState","ChannelStatusCodes","initialBrowserState","initialChannelState","WAITING","initialClusterConnectionState","initialConfigState","initialDatasetState","initialOpenDatasetState","initialErrorState","initialJobState","rootReducer","combineReducers","oldJob","hist","newJobs","READY","items","CREATING","IN_PROGRESS","SUCCESS","inp","newLastOpened","newFileHistory","curr","place","sagaMiddleware","createSagaMiddleware","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","ReactDOM","document","getElementById","process","origin","response","headers","get","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.57be1889.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"default\":\"ResultImage_default__1X7FO\",\"fallback\":\"ResultImage_fallback__kO3cw\"};","module.exports = __webpack_public_path__ + \"static/media/LiberTEM logo-medium.7999e0dc.png\";","import { ActionsUnion, createAction } from '../helpers/actionHelpers';\nimport { ConnectRequestParams } from '../messages';\n\nexport enum ActionTypes {\n    NOT_CONNECTED = 'CLUSTER_NOT_CONNECTED',\n    CONNECT = 'CLUSTER_CONNECT',\n    CONNECTED = 'CLUSTER_CONNECTED',\n}\n\nexport const Actions = {\n    notConnected: () => createAction(ActionTypes.NOT_CONNECTED),\n    connect: (params: ConnectRequestParams) => createAction(ActionTypes.CONNECT, { params }),\n    connected: (params: ConnectRequestParams) => createAction(ActionTypes.CONNECTED, { params }),\n}\n\nexport type Actions = ActionsUnion<typeof Actions>;\n","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Header, List } from \"semantic-ui-react\";\nimport { RootReducer } from \"./store\";\n\nconst mapStateToProps = (state: RootReducer) => {\n    return {\n        version: state.config.version,\n        revision: state.config.revision,\n    }\n}\n\ntype MergedProps = ReturnType<typeof mapStateToProps>;\n\nconst About: React.SFC<MergedProps> = ({ version, revision }) => {\n    return (\n        <>\n            <Header as=\"h3\">This is LiberTEM version {version} (revision {revision.slice(0, 8)})</Header>\n            <List>\n                <List.Item>\n                    <List.Icon name=\"github\" />\n                    <List.Content>\n                        Find us on <a href=\"https://github.com/LiberTEM/LiberTEM\">GitHub</a>\n                    </List.Content>\n                </List.Item>\n                <List.Item>\n                    <List.Icon name=\"bug\" />\n                    <List.Content>\n                        Found a bug? Got a feature request? Please <a href=\"https://github.com/LiberTEM/LiberTEM/issues/new\">open an issue!</a>\n                    </List.Content>\n                </List.Item>\n                <List.Item>\n                    <List.Icon name=\"legal\" />\n                    <List.Content>\n                        LiberTEM is licensed under the <a href=\"https://github.com/LiberTEM/LiberTEM/blob/master/LICENSE\">GNU General Public License v3.0</a>\n                    </List.Content>\n                </List.Item>\n                <List.Item>\n                    <List.Icon name=\"book\" />\n                    <List.Content>\n                        Read <a href=\"https://libertem.github.io/LiberTEM/\">the documentation</a>\n                    </List.Content>\n                </List.Item>\n                <List.Item>\n                    <List.Icon name=\"user\" />\n                    <List.Content>\n                        Read <a href=\"https://libertem.github.io/LiberTEM/acknowledgments.html\">the acknowledgments</a>\n                    </List.Content>\n                </List.Item>\n                <List.Item>\n                    <List.Icon name=\"gitter\" />\n                    <List.Content>\n                        Join our <a href=\"https://gitter.im/LiberTEM/Lobby\">chat on gitter!</a>\n                    </List.Content>\n                </List.Item>\n                <List.Item>\n                    <List.Icon name=\"linkify\" />\n                    <List.Content>\n                    <a href=\"https://doi.org/10.5281/zenodo.1477847\"><img src=\"https://zenodo.org/badge/DOI/10.5281/zenodo.1477847.svg\" alt=\"doi.org/10.5281/zenodo.1477847\"/></a>\n                    </List.Content>\n                </List.Item>\n            </List>\n        </>\n    );\n}\n\nexport default connect(mapStateToProps)(About);\n","import { ActionCreatorsMapObject } from \"redux\";\n\nexport interface Action<T extends string> {\n    type: T\n}\n\nexport interface ActionWithPayload<T extends string, P> extends Action<T> {\n    payload: P\n}\n\nexport interface ActionWithMeta<T extends string, P, M> extends ActionWithPayload<T, P> {\n    meta: M\n}\n\nexport function createAction<T extends string>(type: T): Action<T>\nexport function createAction<T extends string, P, M>(type: T, payload?: P): ActionWithPayload<T, P>\nexport function createAction<T extends string, P, M>(type: T, payload?: P, meta?: M): ActionWithMeta<T, P, M>\nexport function createAction<T extends string, P, M>(type: T, payload?: P, meta?: M) {\n    if (meta === undefined && payload === undefined) {\n        return { type };\n    } else if (meta === undefined) {\n        return { type, payload };\n    } else {\n        return { type, payload, meta }\n    }\n}\n\nexport type ActionsUnion<A extends ActionCreatorsMapObject> = ReturnType<A[keyof A]>","import * as _ from \"lodash\";\n\nexport function assertNotReached(message: string): never {\n    throw new Error(message);\n}\n\nexport function defaultDebounce<T extends (...args: any[]) => any>(fn: T, delay: number = 50) {\n    return _.debounce(fn, delay, { maxWait: delay });\n}\n\nexport function getEnumValues<E>(e: E): Array<keyof E> {\n    return Object.keys(e) as Array<keyof E>;\n}","\n/* \n * Common\n */\n\nexport interface FollowupPart {\n    numMessages: number,\n    descriptions: Array<{ title: string, desc: string }>,\n}\n\nexport interface MsgPartConfig {\n    version: string,\n    revision: string,\n    localCores: number,\n    cwd: string,\n    separator: string,\n}\n\nexport interface GetConfigResponse {\n    status: \"ok\",\n    config: MsgPartConfig,\n}\n\n/*\n * Connection\n */\n\nexport enum ClusterTypes {\n    LOCAL = \"LOCAL\",\n    TCP = \"TCP\",\n}\n\nexport const ClusterTypeMetadata: { [s: string]: { [s: string]: string } } = {\n    [ClusterTypes.LOCAL]: {\n        label: \"Create local cluster\",\n    },\n    [ClusterTypes.TCP]: {\n        label: \"Connect to cluster\",\n        helpText: \"can be either local or remote, connection via TCP\",\n    }\n}\n\nexport interface ConnectRequestLocalCluster {\n    type: ClusterTypes.LOCAL,\n    numWorkers?: number,\n}\n\nexport interface ConnectRequestTCP {\n    type: ClusterTypes.TCP,\n    address: string,\n}\n\nexport type ConnectRequestParams = ConnectRequestLocalCluster | ConnectRequestTCP\n\nexport interface ConnectRequest {\n    connection: ConnectRequestParams\n}\n\nexport type ConnectResponse = {\n    status: \"ok\",\n    connection: ConnectRequest,\n} | {\n    status: \"disconnected\",\n    connection: {},\n}\n\n/*\n * Dataset\n */\n\nexport enum DatasetTypes {\n    HDF5 = \"HDF5\",\n    RAW = \"RAW\",\n    MIB = \"MIB\",\n    BLO = \"BLO\",\n    K2IS = \"K2IS\",\n    SER = \"SER\",\n    FRMS6 = \"FRMS6\",\n    EMPAD = \"EMPAD\",\n}\n\nexport interface DatasetParamsCommon {\n    name: string,\n}\n\nexport type DatasetParamsHDF5 = {\n    type: DatasetTypes.HDF5,\n    path: string,\n    ds_path: string,\n    tileshape: number[],\n} & DatasetParamsCommon\n\nexport type DatasetParamsRaw = {\n    type: DatasetTypes.RAW,\n    path: string,\n    dtype: string,\n    detector_size: number[],\n    enable_direct: boolean,\n    scan_size: number[],\n    tileshape: number[],\n} & DatasetParamsCommon\n\nexport type DatasetParamsMIB = {\n    type: DatasetTypes.MIB,\n    path: string,\n    scan_size: number[],\n    tileshape: number[],\n} & DatasetParamsCommon\n\nexport type DatasetParamsBLO = {\n    type: DatasetTypes.BLO,\n    path: string,\n    tileshape: number[],\n} & DatasetParamsCommon\n\nexport type DatasetParamsK2IS = {\n    type: DatasetTypes.K2IS,\n    path: string,\n} & DatasetParamsCommon\n\nexport type DatasetParamsSER = {\n    type: DatasetTypes.SER,\n    path: string,\n} & DatasetParamsCommon\n\nexport type DatasetParamsFRMS6 = {\n    type: DatasetTypes.FRMS6,\n    path: string,\n} & DatasetParamsCommon\n\nexport type DatasetParamsEMPAD = {\n    type: DatasetTypes.EMPAD,\n    path: string,\n    scan_size: number[],\n} & DatasetParamsCommon\n\nexport type DatasetFormParams = DatasetParamsHDF5 | DatasetParamsRaw | DatasetParamsMIB | DatasetParamsBLO | DatasetParamsK2IS | DatasetParamsSER | DatasetParamsFRMS6 | DatasetParamsEMPAD\n\nexport interface DatasetCreateParams {\n    id: string,\n    params: DatasetFormParams,\n}\n\nexport enum DatasetStatus {\n    OPEN = \"OPEN\",\n    OPENING = \"OPENING\",\n    DELETING = \"DELETING\",\n}\n\nexport interface DiagElemMsg {\n    name: string,\n    value: string | DiagElemMsg[],\n}\n\ninterface DatasetCommon {\n    id: string,\n    params: DatasetFormParams,\n}\n\nexport type DatasetOpening = DatasetCommon & {\n    status: DatasetStatus.OPENING,\n}\n\nexport type DatasetDeleting = DatasetCommon & {\n    status: DatasetStatus.DELETING,\n}\n\nexport type DatasetOpen = DatasetCommon & {\n    status: DatasetStatus.OPEN,\n    params: {\n        shape: number[],\n    }\n    diagnostics: DiagElemMsg[],\n}\n\nexport type Dataset = DatasetOpening | DatasetOpen | DatasetDeleting;\n\nexport interface OpenDatasetRequest {\n    dataset: DatasetCreateParams\n}\n\nexport interface OpenDatasetResponseOk {\n    status: \"ok\",\n    dataset: string,  // TODO: uuid type?\n    details: Dataset,\n}\n\nexport interface OpenDatasetResponseError {\n    status: \"error\",\n    dataset: string,\n    msg: string,\n}\n\nexport type OpenDatasetResponse = OpenDatasetResponseOk | OpenDatasetResponseError\n\nexport interface DeleteDatasetResponse {\n    status: \"ok\",\n    dataset: string,\n}\n\nexport interface DetectDatasetSuccessResponse {\n    status: \"ok\",\n    datasetParams: DatasetFormParams,\n}\n\nexport interface DetectDatasetErrorResponse {\n    status: \"error\",\n    path: string,\n    msg: string,\n}\n\nexport type DetectDatasetResponse = DetectDatasetSuccessResponse | DetectDatasetErrorResponse;\n\nexport interface DataSetOpenSchemaSuccessResponse {\n    status: \"ok\",\n    ds_type: string,\n    schema: object,\n}\n\nexport interface DataSetOpenSchemaErrorResponse {\n    status: \"error\",\n    ds_type: string,\n    msg: string,\n}\n\nexport type DataSetOpenSchemaResponse = DataSetOpenSchemaSuccessResponse | DataSetOpenSchemaErrorResponse;\n\nexport type MsgPartInitialDataset = DatasetOpen\n\n// type alias to add client-side state to datasets\nexport type DatasetState = Dataset & {}\n\n/*\n * Job\n */\nexport interface MsgPartJob {\n    id: string,\n    dataset: string,\n}\n\nexport interface MaskDefRing {\n    shape: \"ring\",\n    cx: number,\n    cy: number,\n    ri: number,\n    ro: number\n}\n\n\nexport interface MaskDefDisk {\n    shape: \"disk\",\n    cx: number,\n    cy: number,\n    r: number,\n}\n\nexport interface PointDef {\n    shape: \"point\",\n    cx: number,\n    cy: number,\n}\n\n// TODO: shape doesn't really make sense here, needs to be restructured\nexport interface CenterOfMassParams {\n    shape: \"com\",\n    cx: number,\n    cy: number,\n    r: number,\n}\n\nexport interface PickFrameParams {\n    x: number,\n    y: number,\n}\n\nexport interface FFTSumFramesParams {\n    real_rad: number | null,\n    real_centerx: number | null,\n    real_centery: number | null,\n}\n\nexport interface PickFFTFrameParams {\n    x: number,\n    y: number,\n    real_rad: number | null,\n    real_centerx: number | null,\n    real_centery: number | null,\n}\nexport interface RadialFourierParams {\n    shape: \"radial_fourier\",\n    cx: number,\n    cy: number,\n    ri: number,\n    ro: number,\n    n_bins: number,\n    max_order: number\n}\n\nexport interface FFTParams {\n    rad_in: number,\n    rad_out: number,\n    real_rad: number | null,\n    real_centerx: number | null,\n    real_centery: number | null,\n}\n\n\nexport interface FrameParams {\n    roi: {\n        shape: \"rect\",\n        x: number,\n        y: number,\n        width: number,\n        height: number,\n    } | {\n        shape: \"disk\",\n        cx: number,\n        cy: number,\n        r: number,\n    } |\n    {}\n}\n\nexport interface ClustParams {\n    roi: {\n        shape: \"rect\",\n        x: number,\n        y: number,\n        width: number,\n        height: number,\n    } | {}\n    cx: number,\n    cy: number,\n    ri: number,\n    ro: number,\n    delta: number,\n    n_peaks: number,\n    n_clust: number,\n    min_dist: number,\n}\n\nexport enum AnalysisTypes {\n    APPLY_RING_MASK = \"APPLY_RING_MASK\",\n    APPLY_DISK_MASK = \"APPLY_DISK_MASK\",\n    APPLY_POINT_SELECTOR = \"APPLY_POINT_SELECTOR\",\n    CENTER_OF_MASS = \"CENTER_OF_MASS\",\n    SUM_FRAMES = \"SUM_FRAMES\",\n    SD_FRAMES = \"SD_FRAMES\",\n    PICK_FRAME = \"PICK_FRAME\",\n    PICK_FFT_FRAME = \"PICK_FFT_FRAME\",\n    APPLY_FFT_MASK = \"APPLY_FFT_MASK\",\n    FFTSUM_FRAMES = \"FFTSUM_FRAMES\",\n    RADIAL_FOURIER = \"RADIAL_FOURIER\",\n    FEM = \"FEM\",\n    CLUST = \"CLUST\",\n    SUM_SIG = \"SUM_SIG\",\n}\n\nexport interface RingMaskDetails {\n    type: AnalysisTypes.APPLY_RING_MASK,\n    parameters: MaskDefRing,\n\n}\n\nexport interface FFTDetails {\n    type: AnalysisTypes.APPLY_FFT_MASK,\n    parameters: FFTParams,\n}\n\nexport interface FEMDetails {\n    type: AnalysisTypes.FEM,\n    parameters: MaskDefRing,\n}\n\nexport interface DiskMaskDetails {\n    type: AnalysisTypes.APPLY_DISK_MASK,\n    parameters: MaskDefDisk,\n}\n\nexport interface PointDefDetails {\n    type: AnalysisTypes.APPLY_POINT_SELECTOR,\n    parameters: PointDef,\n}\n\nexport interface CenterOfMassDetails {\n    type: AnalysisTypes.CENTER_OF_MASS,\n    parameters: CenterOfMassParams,\n}\n\nexport interface SumFramesDetails {\n    type: AnalysisTypes.SUM_FRAMES,\n    parameters: FrameParams\n}\n\nexport interface SDFramesDetails {\n    type: AnalysisTypes.SD_FRAMES,\n    parameters: FrameParams\n}\n\nexport interface SumSigDetails {\n    type: AnalysisTypes.SUM_SIG,\n    parameters: {}\n}\n\nexport interface FFTSumFramesDetails {\n    type: AnalysisTypes.FFTSUM_FRAMES,\n    parameters: FFTSumFramesParams,\n}\n\nexport interface PickFrameDetails {\n    type: AnalysisTypes.PICK_FRAME,\n    parameters: PickFrameParams,\n}\n\nexport interface PickFFTFrameDetails {\n    type: AnalysisTypes.PICK_FFT_FRAME,\n    parameters: PickFFTFrameParams,\n}\n\nexport interface RadialFourierDetails {\n    type: AnalysisTypes.RADIAL_FOURIER,\n    parameters: RadialFourierParams,\n}\n\nexport interface RadialFourierDetails {\n    type: AnalysisTypes.RADIAL_FOURIER,\n    parameters: RadialFourierParams,\n}\n\nexport interface ClustDetails {\n    type: AnalysisTypes.CLUST,\n    parameters: ClustParams,\n}\n\nexport type AnalysisParameters = MaskDefRing | MaskDefDisk | CenterOfMassParams | PointDef | PickFrameParams | RadialFourierParams | FFTParams | PickFFTFrameParams | FFTSumFramesParams | ClustParams;\nexport type AnalysisDetails = RingMaskDetails | DiskMaskDetails | CenterOfMassDetails | PointDefDetails | SumFramesDetails | SDFramesDetails | PickFrameDetails | RadialFourierDetails | FEMDetails | FFTDetails | FFTSumFramesDetails | PickFFTFrameDetails | SumSigDetails | ClustDetails;\n\nexport interface StartJobRequest {\n    job: {\n        dataset: string,\n        analysis: AnalysisDetails,\n    }\n}\n\nexport interface StartJobResponse {\n    status: \"ok\",\n    job: string,\n    details: MsgPartJob,\n}\n\nexport interface CancelJobResponse {\n    status: \"ok\",\n    job: string,\n}\n\n/*\n * fs browser \n */\n\n// some named place, i.e. \"Documents\", \"Home\", ...\nexport interface FSPlace {\n    title: string,\n    path: string,\n    key: string,\n}\n\nexport interface DirectoryListingDetails {\n    name: string,\n    size: number,\n    ctime: number,\n    mtime: number,\n    owner: string,\n}\n\nexport interface DirectoryListingResponseOK {\n    status: \"ok\",\n    path: string,\n    files: DirectoryListingDetails[],\n    dirs: DirectoryListingDetails[],\n    drives: string[],\n    places: FSPlace[],\n}\n\nexport interface DirectoryListingResponseError {\n    status: \"error\",\n    path: string,\n    code: string,\n    msg: string,\n    alternative?: string,\n}\n\nexport type DirectoryListingResponse = DirectoryListingResponseOK | DirectoryListingResponseError;\n","import { FormikProps, withFormik } from \"formik\";\nimport * as React from \"react\";\nimport { Button, Form } from \"semantic-ui-react\";\nimport { ConfigState } from \"../../config/reducers\";\nimport { Omit } from \"../../helpers/types\";\nimport { ClusterTypes, ConnectRequestLocalCluster } from \"../../messages\";\n\ntype FormValues = Omit<ConnectRequestLocalCluster, \"type\">;\n\ninterface FormProps {\n    onSubmit: (params: ConnectRequestLocalCluster) => void,\n    config: ConfigState,\n}\n\ntype MergedProps = FormikProps<FormValues> & FormProps;\n\nconst LocalConnectionForm: React.SFC<MergedProps> = ({\n    values,\n    touched,\n    errors,\n    dirty,\n    isSubmitting,\n    handleChange,\n    handleBlur,\n    handleSubmit,\n    handleReset,\n}) => {\n    return (\n        <Form onSubmit={handleSubmit}>\n            <Form.Field>\n                <label htmlFor=\"numWorkers\">Number of Workers:</label>\n                <input type=\"number\" name=\"numWorkers\" value={values.numWorkers}\n                    onChange={handleChange}\n                    onBlur={handleBlur} />\n                {errors.numWorkers && touched.numWorkers && errors.numWorkers}\n            </Form.Field>\n            <Button primary={true} type=\"submit\" disabled={isSubmitting}>Connect</Button>\n        </Form>\n    )\n}\n\nexport default withFormik<FormProps, FormValues>({\n    mapPropsToValues: (ownProps: FormProps) => ({\n        numWorkers: ownProps.config.localCores,\n    }),\n    handleSubmit: (values, formikBag) => {\n        const { onSubmit } = formikBag.props;\n        onSubmit({\n            type: ClusterTypes.LOCAL,\n            ...values,\n        });\n    }\n})(LocalConnectionForm);\n","\nimport { FormikProps, withFormik } from \"formik\";\nimport * as React from \"react\";\nimport { Button, Form } from \"semantic-ui-react\";\nimport { Omit } from \"../../helpers/types\";\nimport { ClusterTypes, ConnectRequestTCP } from \"../../messages\";\n\ntype FormValues = Omit<ConnectRequestTCP, \"type\">;\n\ninterface FormProps {\n    onSubmit: (params: ConnectRequestTCP) => void,\n}\n\ntype MergedProps = FormikProps<FormValues> & FormProps;\n\nconst TCPConnectionForm: React.SFC<MergedProps> = ({\n    values,\n    touched,\n    errors,\n    dirty,\n    isSubmitting,\n    handleChange,\n    handleBlur,\n    handleSubmit,\n    handleReset,\n}) => {\n    return (\n        <Form onSubmit={handleSubmit}>\n            <Form.Field>\n                <label htmlFor=\"address\">Scheduler URI</label>\n                <input type=\"text\" name=\"address\" value={values.address}\n                    onChange={handleChange}\n                    onBlur={handleBlur} />\n                {errors.address && touched.address && errors.address}\n            </Form.Field>\n            <Button primary={true} type=\"submit\" disabled={isSubmitting}>Connect</Button>\n        </Form>\n    )\n}\n\nexport default withFormik<FormProps, FormValues>({\n    mapPropsToValues: () => ({\n        address: \"tcp://localhost:8786\",\n    }),\n    handleSubmit: (values, formikBag) => {\n        const { onSubmit } = formikBag.props;\n        onSubmit({\n            type: ClusterTypes.TCP,\n            ...values\n        });\n    }\n})(TCPConnectionForm);\n","import { ActionsUnion, createAction } from \"../helpers/actionHelpers\";\nimport { DatasetFormParams, DirectoryListingDetails, FSPlace } from \"../messages\";\n\nexport enum ActionTypes {\n    LIST_DIRECTORY = 'BROWSER_LIST_DIRECTORY',\n    LIST_FULL_PATH = 'BROWSER_LIST_DIRECTORY_FULL',\n    DIRECTORY_LISTING = 'BROWSER_DIRECTORY_LISTING',\n    DETECT_PARAMS = 'BROWSER_DETECT_PARAMS',\n    PARAMS_DETECTED = 'BROWSER_PARAMS_DETECTED',\n    ERROR = 'BROWSER_ERROR',\n    OPEN = 'BROWSER_OPEN',\n    CANCEL = 'BROWSER_CANCEL',\n    SELECT = 'BROWSER_SELECT',\n    SELECT_FULL_PATH = 'BROWSER_SELECT_FULL_PATH',\n}\n\nexport const Actions = {\n    list: (path: string, name?: string) => createAction(ActionTypes.LIST_DIRECTORY, { path, name }),\n    dirListing: (path: string, dirs: DirectoryListingDetails[], files: DirectoryListingDetails[], drives: string[], places: FSPlace[]) => createAction(ActionTypes.DIRECTORY_LISTING, { path, dirs, files, drives, places }),\n    open: () => createAction(ActionTypes.OPEN),\n    cancel: () => createAction(ActionTypes.CANCEL),\n    select: (path: string, name: string) => createAction(ActionTypes.SELECT, { path, name }),\n    selectFullPath: (path: string) => createAction(ActionTypes.SELECT_FULL_PATH, { path }),\n    error: (msg: string, timestamp: number, id: string) => createAction(ActionTypes.ERROR, { msg, timestamp, id }),\n    detectParams: (path: string) => createAction(ActionTypes.DETECT_PARAMS, { path }),\n    paramsDetected: (path: string, params: DatasetFormParams) => createAction(ActionTypes.PARAMS_DETECTED, { path, params }),\n}\n\nexport type Actions = ActionsUnion<typeof Actions>;","\nimport * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Dropdown, DropdownProps, Segment } from \"semantic-ui-react\";\nimport * as clusterActions from \"../../cluster/actions\";\nimport { getEnumValues } from \"../../helpers\";\nimport { ClusterTypeMetadata, ClusterTypes, ConnectRequestParams } from \"../../messages\";\nimport { RootReducer } from \"../../store\";\nimport LocalConnectionForm from \"./LocalConnectionForm\";\nimport TCPConnectionForm from \"./TCPConnectionForm\";\n\n\nconst mapDispatchToProps = {\n    connectToCluster: clusterActions.Actions.connect,\n};\n\nconst mapStateToProps = (state: RootReducer) => {\n    return {\n        config: state.config,\n    }\n}\n\ntype MergedProps = DispatchProps<typeof mapDispatchToProps> & ReturnType<typeof mapStateToProps>;\n\nconst clusterTypeKeys = getEnumValues(ClusterTypes);\nconst clusterTypeOptions = clusterTypeKeys.map(t => ({\n    text: ClusterTypeMetadata[ClusterTypes[t]].label,\n    value: ClusterTypes[t],\n}));\n\ninterface ConnectionParamsState {\n    clusterType: ClusterTypes\n}\n\nclass ClusterConnectionForm extends React.Component<MergedProps, ConnectionParamsState> {\n    public state = {\n        clusterType: ClusterTypes.LOCAL,\n    }\n\n    public setType = (type: ClusterTypes) => {\n        this.setState({\n            clusterType: type,\n        });\n    }\n\n    public handleChange = (e: React.SyntheticEvent, data: DropdownProps) => {\n        const value = data.value as ClusterTypes;\n        this.setType(value);\n    }\n\n    public handleSubmit = (params: ConnectRequestParams) => {\n        this.props.connectToCluster(params);\n    }\n\n    public renderForm() {\n        const { clusterType } = this.state;\n        const { config } = this.props;\n\n        switch (clusterType) {\n            case ClusterTypes.LOCAL: {\n                return <LocalConnectionForm config={config} onSubmit={this.handleSubmit} />\n            }\n            case ClusterTypes.TCP: {\n                return <TCPConnectionForm onSubmit={this.handleSubmit} />\n            }\n        }\n    }\n\n    public render() {\n        return (\n            <>\n                <div>\n                    <Dropdown\n                        inline={true}\n                        options={clusterTypeOptions}\n                        value={this.state.clusterType}\n                        onChange={this.handleChange}\n                    />\n                </div>\n                <Segment>\n                    {this.renderForm()}\n                </Segment>\n            </>\n        )\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ClusterConnectionForm);","import * as React from 'react';\nimport { Icon, Message } from 'semantic-ui-react';\n\ninterface ChannelConnectingProps {\n    msg: string,\n}\n\nconst ChannelConnecting: React.SFC<ChannelConnectingProps> = ({ msg }) => (\n    <Message icon={true}>\n        <Icon name='cog' loading={true} />\n        <Message.Content>\n            <Message.Header>Connecting to LiberTEM</Message.Header>\n            {msg}\n        </Message.Content>\n    </Message>\n)\n\nexport default ChannelConnecting;","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport ClusterConnectionForm from \"../../cluster/components/ClusterConnectionForm\";\nimport { RootReducer } from \"../../store\";\nimport ChannelConnecting from \"./ChannelConnecting\";\n\nconst mapStateToProps = (state: RootReducer) => {\n    return {\n        channelStatus: state.channelStatus,\n        clusterConnection: state.clusterConnection,\n        haveConfig: state.config.haveConfig,\n    }\n}\n\n\ntype MergedProps = ReturnType<typeof mapStateToProps>;\n\nconst messages = {\n    waiting: \"Waiting...\",\n    connecting: \"Connecting...\",\n}\n\nconst clusterMessages = {\n    connected: \"Connected, waiting for initial state...\",\n    unknown: \"Connected, fetching cluster status...\",\n}\n\nconst ChannelStatus: React.SFC<MergedProps> = ({ haveConfig, children, channelStatus, clusterConnection }) => {\n    switch (channelStatus.status) {\n        case \"waiting\":\n        case \"connecting\": {\n            return <ChannelConnecting msg={messages[channelStatus.status]} />;\n        }\n        case \"connected\": {\n            if (!haveConfig) {\n                return <ChannelConnecting msg=\"waiting for configuration...\" />;\n            }\n            if (clusterConnection.status === \"disconnected\") {\n                return <ClusterConnectionForm />\n            } else if (clusterConnection.status === \"connected\") {\n                return <ChannelConnecting msg={clusterMessages.connected} />;\n            } else if (clusterConnection.status === \"unknown\") {\n                return <ChannelConnecting msg={clusterMessages.unknown} />;\n            }\n        }\n    }\n    return <>{children}</>;\n}\n\nexport default connect(mapStateToProps)(ChannelStatus);","import * as React from \"react\";\nimport { Icon, SemanticICONS } from \"semantic-ui-react\";\nimport { DirectoryListingDetails } from \"../../messages\";\n\n\ninterface FileBrowserEntryProps {\n    style: object,\n    details: DirectoryListingDetails,\n    onClick?: () => void,\n    icon?: SemanticICONS,\n}\n\ninterface TimeStampProps {\n    ts: number,\n}\n\nexport const TimeStamp: React.SFC<TimeStampProps> = ({ ts }) => {\n    const date = new Date(ts * 1000);\n    const fmtDate = date.toLocaleDateString();\n    const fmtTime = date.toLocaleTimeString();\n    const title = `${fmtDate} ${fmtTime}`;\n    return (\n        <div style={{ display: \"flex\", whiteSpace: \"nowrap\" }} title={title}>\n            <div style={{ width: \"50%\", marginRight: \"10px\" }}>{fmtDate}</div>\n            <div style={{ width: \"45%\" }}>{fmtTime}</div>\n        </div>\n    )\n}\n\n// adapted from https://stackoverflow.com/a/14919494/540644\nfunction humanFileSize(bytes: number, si: boolean = false) {\n    const thresh = si ? 1000 : 1024;\n    if (Math.abs(bytes) < thresh) {\n        return {\n            size: bytes,\n            unit: 'B',\n        }\n    }\n    const units = si\n        ? ['kB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB']\n        : ['KiB', 'MiB', 'GiB', 'TiB', 'PiB', 'EiB', 'ZiB', 'YiB'];\n    let u = -1;\n    do {\n        bytes /= thresh;\n        ++u;\n    } while (Math.abs(bytes) >= thresh && u < units.length - 1);\n\n    return {\n        size: bytes.toFixed(1),\n        unit: units[u],\n    }\n}\n\ninterface FileSizeProps {\n    size: number,\n    si?: boolean,\n}\n\nexport const FileSize: React.SFC<FileSizeProps> = ({ size, si }) => {\n    const fmtSize = humanFileSize(size, si)\n    return (\n        <div style={{ textAlign: \"right\" }}>\n            {fmtSize.size} {fmtSize.unit}\n        </div>\n    );\n}\n\nexport const Cell: React.SFC<{ title?: string }> = ({ children, title }) => {\n    const styles: React.CSSProperties = {\n        whiteSpace: \"nowrap\",\n        overflow: \"hidden\",\n        textOverflow: \"ellipsis\",\n        marginRight: \"10px\",\n    }\n    return (\n        <div style={styles} title={title}>{children}</div>\n    );\n}\n\n\nclass FileBrowserEntry extends React.Component<FileBrowserEntryProps> {\n    public onClick = (e: React.MouseEvent) => {\n        const { onClick } = this.props;\n        if (onClick) {\n            onClick();\n        }\n    }\n\n    public render() {\n        const { details, style, icon } = this.props;\n        const myStyle: React.CSSProperties = {\n            cursor: \"pointer\",\n            ...style,\n        };\n\n        const tsStyles: React.CSSProperties = {\n            textAlign: \"right\",\n        };\n\n        return (\n            <div onClick={this.onClick} style={myStyle}>\n                <div style={{ display: \"flex\", paddingRight: \"10px\" }}>\n                    <div style={{ width: \"20%\", flexGrow: 1 }}>\n                        <Cell title={details.name}>\n                            {icon && <Icon name={icon} />}\n                            {details.name}\n                        </Cell>\n                    </div>\n                    <div style={{ width: \"10%\" }}><Cell><FileSize size={details.size} si={false} /></Cell></div>\n                    <div style={{ width: \"10%\" }}><Cell>{details.owner}</Cell></div>\n                    <div style={{ width: \"18%\", ...tsStyles }}>\n                        <Cell><TimeStamp ts={details.ctime} /></Cell>\n                    </div>\n                    <div style={{ width: \"18%\", ...tsStyles }}>\n                        <Cell><TimeStamp ts={details.mtime} /></Cell>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default FileBrowserEntry;","import * as React from \"react\";\nimport { Cell } from \"./FileBrowserEntry\";\n\nconst FileBrowserHeader: React.SFC = () => {\n    const alignRight: React.CSSProperties = {\n        textAlign: \"right\",\n    };\n\n    // ugly hack: padding-right to compensate for scrollbar size\n    return (\n        <div style={{ paddingRight: \"20px\", paddingBottom: \"10px\" }}>\n            <div style={{ display: \"flex\" }}>\n                <div style={{ width: \"20%\", flexGrow: 1 }}>\n                    <Cell>Name</Cell>\n                </div>\n                <div style={{ width: \"10%\", ...alignRight }}>\n                    <Cell>Size</Cell>\n                </div>\n                <div style={{ width: \"10%\" }}>\n                    <Cell>Owner</Cell>\n                </div>\n                <div style={{ width: \"18%\", ...alignRight }}>\n                    <Cell>Created</Cell>\n                </div>\n                <div style={{ width: \"18%\", ...alignRight }}>\n                    <Cell>Modified</Cell>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default FileBrowserHeader;","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { DirectoryListingDetails } from \"../../messages\";\nimport * as browserActions from '../actions';\nimport FileBrowserEntry from \"./FileBrowserEntry\";\n\ninterface FileEntryProps {\n    path: string,\n    style: object,\n    details: DirectoryListingDetails,\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch, ownProps: FileEntryProps) => {\n    return {\n        select: () => dispatch(browserActions.Actions.select(ownProps.path, ownProps.details.name)),\n    };\n}\n\ntype MergedProps = FileEntryProps & ReturnType<typeof mapDispatchToProps>;\n\nclass FileEntry extends React.Component<MergedProps> {\n    public render() {\n        const { details, style, select } = this.props;\n\n        return (\n            <FileBrowserEntry onClick={select} style={style} details={details}\n                icon=\"file outline\" />\n        )\n    }\n}\n\nexport default connect(null, mapDispatchToProps)(FileEntry);","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { DirectoryListingDetails } from \"../../messages\";\nimport * as browserActions from '../actions';\nimport FileBrowserEntry from \"./FileBrowserEntry\";\n\nconst mapDispatchToProps = (dispatch: Dispatch, ownProps: FolderEntryProps) => {\n    return {\n        list: () => {\n            dispatch(browserActions.Actions.list(ownProps.path, ownProps.details.name));\n            window.setTimeout(() => ownProps.onChange(), 0);\n        },\n    };\n}\n\ninterface FolderEntryProps {\n    path: string,\n    style: object,\n    details: DirectoryListingDetails,\n    onChange: () => void,\n}\n\ntype MergedProps = FolderEntryProps & ReturnType<typeof mapDispatchToProps>;\n\nconst FolderEntry: React.SFC<MergedProps> = ({ list, details, style, onChange }) => {\n    return (\n        <FileBrowserEntry onClick={list} style={style} details={details} icon=\"folder\" />\n    )\n}\n\nexport default connect(null, mapDispatchToProps)(FolderEntry);\n","import * as React from 'react';\nimport { connect } from \"react-redux\";\nimport { Dispatch } from 'redux';\nimport { Dropdown, DropdownItemProps } from \"semantic-ui-react\";\nimport * as browserActions from '../actions';\n\nconst mapDispatchToProps = (dispatch: Dispatch, ownProps: DropdownItemProps) => {\n    return {\n        list: () => {\n            if (ownProps.value !== undefined) {\n                dispatch(browserActions.Actions.list(ownProps.value.toString()));\n                window.setTimeout(() => ownProps.onChange(), 0);\n            }\n        },\n    };\n}\n\ntype MergedProps = ReturnType<typeof mapDispatchToProps> & DropdownItemProps & {\n    onChange: () => void,\n};\n\nconst PathDropDownItem: React.SFC<MergedProps> = ({ list, ...props }) => {\n    const newProps = {\n        onClick: list,\n        ...props,\n    }\n    return <Dropdown.Item {...newProps} />;\n}\n\nexport default connect(null, mapDispatchToProps)(PathDropDownItem);","import { FormikProps, withFormik } from \"formik\";\nimport * as React from \"react\";\nimport { Form, Input } from \"semantic-ui-react\";\n\ninterface FormValues {\n    path: string,\n}\n\ninterface PathInputProps {\n    onChange: (path: string) => void,\n    initialPath: string,\n}\n\ntype MergedProps = FormikProps<FormValues> & PathInputProps;\n\nconst PathInput: React.SFC<MergedProps> = ({\n    values,\n    touched,\n    errors,\n    dirty,\n    isSubmitting,\n    handleChange,\n    handleBlur,\n    handleSubmit,\n    handleReset,\n}) => {\n    return (\n        <Form onSubmit={handleSubmit} style={{ flexGrow: 1 }}>\n            <Form.Field>\n                <Input autoComplete=\"off\" onBlur={handleBlur} onChange={handleChange} value={values.path} name=\"path\" />\n            </Form.Field>\n        </Form>\n    )\n}\n\nexport default withFormik<PathInputProps, FormValues>({\n    mapPropsToValues: ({ initialPath }) => ({\n        path: initialPath,\n    }),\n    handleSubmit: (values, formikBag) => {\n        const { onChange } = formikBag.props;\n        onChange(values.path);\n    },\n    enableReinitialize: true,\n})(PathInput);","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { Dropdown, DropdownItemProps } from \"semantic-ui-react\";\nimport { DatasetTypes } from \"../../messages\";\nimport { RootReducer } from \"../../store\";\nimport * as browserActions from '../actions';\n\n\ntype DropdownOptions = Array<{\n    text: string,\n    value: {\n        type: DatasetTypes,\n        path: string,\n    },\n}>;\n\nconst mapStateToProps = (state: RootReducer) => {\n    return {\n        lastOpened: state.config.lastOpened,\n        fileHistory: state.config.fileHistory,\n        separator: state.config.separator,\n    };\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch) => {\n    return {\n        select: (path: string) => dispatch(browserActions.Actions.selectFullPath(path)),\n    };\n}\n\ntype MergedProps = ReturnType<typeof mapStateToProps> & ReturnType<typeof mapDispatchToProps>;\n\nconst RecentFiles: React.SFC<MergedProps> = ({ lastOpened, fileHistory, select }) => {\n\n    const recentFiles: DropdownOptions = fileHistory.filter((path: string) => lastOpened[path]).map((path: string) => {\n        const item = lastOpened[path];\n        return {\n            text: item.path,\n            value: {\n                type: item.type,\n                path: item.path,\n            },\n        };\n    });\n\n    const onClick = (e: React.MouseEvent<HTMLDivElement>, data: DropdownItemProps) => data.value && select(data.value.toString())\n\n    return (\n        <Dropdown item={true} text=\"Recent\" floating={true}>\n            <Dropdown.Menu>\n                <Dropdown.Header content=\"recent datasets\" />\n                {recentFiles.map((option, idx) => (\n                    <Dropdown.Item key={idx} value={option.value.path} content={option.text} onClick={onClick} />\n                ))}\n            </Dropdown.Menu>\n        </Dropdown>\n    );\n}\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RecentFiles);","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { Dropdown, Menu } from \"semantic-ui-react\";\nimport * as browserActions from '../actions';\nimport { FSPlaces } from \"../types\";\nimport PathDropDownItem from \"./PathDropDownItem\";\nimport PathInput from \"./PathInput\";\nimport RecentFiles from \"./RecentFiles\";\n\nconst mapDispatchToProps = (dispatch: Dispatch, ownProps: PathBarProps) => {\n    return {\n        refresh: () => {\n            dispatch(browserActions.Actions.list(ownProps.currentPath));\n            window.setTimeout(() => ownProps.onChange(), 0);\n        },\n        handleInputChange: (path: string) => {\n            dispatch(browserActions.Actions.list(path));\n            window.setTimeout(() => ownProps.onChange(), 0);\n        },\n        goUp: () => {\n            dispatch(browserActions.Actions.list(ownProps.currentPath, '..'));\n            window.setTimeout(() => ownProps.onChange(), 0);\n        },\n    };\n}\n\ninterface PathBarProps {\n    currentPath: string,\n    onChange: () => void,\n    drives: string[],\n    places: FSPlaces,\n}\n\ntype MergedProps = ReturnType<typeof mapDispatchToProps> & PathBarProps;\n\nconst PathBar: React.SFC<MergedProps> = ({ currentPath, drives, places, onChange, refresh, goUp, handleInputChange }) => {\n    const driveOptions = drives.map((path) => ({ key: path, text: path }));\n    const placeOptions = Object.keys(places).map((key) => ({ key: places[key].path, text: places[key].title }))\n    return (\n        <Menu>\n            <RecentFiles />\n            <Dropdown text=\"Go to...\" floating={true} item={true}>\n                <Dropdown.Menu>\n                    <Dropdown.Header content=\"Drives\" />\n                    {driveOptions.map((option) => {\n                        return <PathDropDownItem key={option.key} value={option.key} content={option.text} onChange={onChange} />\n                    })}\n                    <Dropdown.Header content=\"Places\" />\n                    {placeOptions.map((option) => {\n                        return <PathDropDownItem key={option.key} value={option.key} content={option.text} onChange={onChange} />\n                    })}\n                </Dropdown.Menu>\n            </Dropdown>\n            <Menu.Item icon=\"arrow up\" onClick={goUp} />\n            <Menu.Item style={{ flexGrow: 1 }}>\n                <PathInput onChange={handleInputChange} initialPath={currentPath} />\n            </Menu.Item>\n            <Menu.Item icon=\"refresh\" onClick={refresh} />\n        </Menu>\n    );\n}\n\n\nexport default connect(null, mapDispatchToProps)(PathBar);","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { FixedSizeList as List } from \"react-window\";\nimport { Dispatch } from \"redux\";\nimport { Button, Header, Segment } from \"semantic-ui-react\";\nimport { DirectoryListingDetails } from \"../../messages\";\nimport { RootReducer } from \"../../store\";\nimport * as browserActions from '../actions';\nimport FileBrowserHeader from \"./FileBrowserHeader\";\nimport FileEntry from \"./FileEntry\";\nimport FolderEntry from \"./FolderEntry\";\nimport PathBar from \"./PathBar\";\n\nconst mapStateToProps = (state: RootReducer) => {\n    const { browser } = state;\n    return {\n        files: browser.files,\n        dirs: browser.dirs,\n        path: browser.path,\n        drives: browser.drives,\n        places: browser.places,\n        isLoading: browser.isLoading,\n    };\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch) => {\n    return {\n        cancel: () => dispatch(browserActions.Actions.cancel()),\n    };\n}\n\ntype MergedProps = ReturnType<typeof mapStateToProps> & ReturnType<typeof mapDispatchToProps>;\n\ninterface EntryFnArgs {\n    index: number,\n    style: object\n}\ntype EntryFn = (arg: EntryFnArgs) => void\n\nconst listRef = React.createRef<List>();\n\nconst scrollToTop = () => {\n    if (listRef.current === null) {\n        return;\n    }\n    listRef.current.scrollToItem(0);\n}\n\nfunction sortByKey<T extends object>(array: T[], getKey: (item: T) => any) {\n    return array.sort((a, b) => {\n        const x = getKey(a);\n        const y = getKey(b);\n        return ((x < y) ? -1 : ((x > y) ? 1 : 0));\n    });\n}\n\nconst FileBrowser: React.SFC<MergedProps> = ({ files, dirs, path, drives, places, cancel, isLoading }) => {\n    const getSortKey = (item: DirectoryListingDetails) => item.name.toLowerCase();\n    const dirEntries = sortByKey(dirs, getSortKey).map((dir) => (style: object) => <FolderEntry style={style} onChange={scrollToTop} path={path} details={dir} />);\n    const fileEntries = sortByKey(files, getSortKey).map((f) => ((style: object) => <FileEntry style={style} path={path} details={f} />));\n    const entries = dirEntries.concat(fileEntries);\n\n    const cellFn: EntryFn = ({ index, style }) => {\n        return entries[index](style)\n    }\n\n    let list = (\n        <List style={{ overflowY: \"scroll\" }} ref={listRef} height={300} width=\"100%\" itemCount={entries.length} itemSize={35}>\n            {cellFn}\n        </List>\n    );\n\n    if (isLoading) {\n        // FIXME: hardcoded height\n        list = (\n            <Segment loading={true} style={{ height: \"300px\" }} />\n        )\n    }\n\n    return (\n        <Segment.Group>\n            <Segment>\n                <Header as=\"h2\">Open dataset</Header>\n            </Segment>\n            <Segment>\n                <PathBar currentPath={path} drives={drives} places={places} onChange={scrollToTop} />\n            </Segment>\n            <Segment>\n                <FileBrowserHeader />\n                {list}\n            </Segment>\n            <Segment>\n                <Button onClick={cancel}>Cancel</Button>\n            </Segment>\n        </Segment.Group>\n    );\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FileBrowser);","\nexport interface JobResultType {\n    imageURL: string,\n    description: { title: string, desc: string },\n}\n\nexport enum JobRunning {\n    CREATING = 'CREATING',\n    RUNNING = 'RUNNING',\n    DONE = 'DONE',\n}\n\nexport enum JobStatus {\n    CREATING = 'CREATING',\n    IN_PROGRESS = 'IN_PROGRESS',\n    CANCELLED = 'CANCELLED',\n    SUCCESS = 'SUCCESS',\n    ERROR = 'ERROR',\n}\n\nexport interface JobStateCommon {\n    id: string,\n    dataset: string,\n    status: JobStatus,\n    startTimestamp: number,\n    results: JobResultType[],\n}\n\nexport type JobStateStart = JobStateCommon & {\n    running: JobRunning.CREATING | JobRunning.RUNNING,\n}\n\nexport type JobStateDone = JobStateCommon & {\n    running: JobRunning.DONE,\n    endTimestamp: number,\n}\n\nexport type JobState = JobStateStart | JobStateDone;","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Button, Icon } from \"semantic-ui-react\";\nimport { RootReducer } from \"../../store\";\nimport * as browserActions from '../actions';\nimport FileBrowser from \"./FileBrowser\";\n\nexport const mapStateToProps = (state: RootReducer) => {\n    return {\n        isOpen: state.browser.isOpen,\n    }\n}\n\nexport const mapDispatchToProps = {\n    open: browserActions.Actions.open,\n}\n\ntype MergedProps = ReturnType<typeof mapStateToProps> & DispatchProps<typeof mapDispatchToProps>;\n\nconst BrowserWrapper: React.SFC<MergedProps> = ({ isOpen, open }) => {\n    if (!isOpen) {\n        return (\n            <Button icon={true} labelPosition=\"left\" onClick={open}>\n                <Icon name='add' />\n                Browse\n            </Button>\n        );\n    }\n    return (\n        <FileBrowser />\n    );\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(BrowserWrapper)","import * as React from \"react\";\nimport { Icon } from \"semantic-ui-react\";\n\nconst BusySpinner: React.SFC = () => {\n    const styles: React.CSSProperties = {\n        margin: 0,\n        padding: 0,\n        position: \"absolute\",\n        bottom: \"10px\",\n        right: \"10px\",\n        color: \"white\",\n        opacity: 0.7,\n        filter: \"drop-shadow(0 0 3px #000)\",\n    };\n    return (\n        <Icon name=\"cog\" loading={true} style={styles} />\n    )\n}\n\nexport default BusySpinner;","import * as React from \"react\";\nimport BusySpinner from \"./BusySpinner\";\n\ninterface BusyWrapperProps {\n    busy: boolean,\n}\n\nconst BusyWrapper: React.SFC<BusyWrapperProps> = ({ children, busy }) => {\n    const styles: React.CSSProperties = {\n        position: \"relative\",\n    };\n    return (\n        <div style={styles}>\n            {children}\n            {busy && <BusySpinner />}\n        </div>\n    )\n}\n\nexport default BusyWrapper;","import * as React from \"react\";\nimport { DraggableHandle } from \"./DraggableHandle\";\nimport { HandleRenderFunction } from \"./types\";\n\nexport interface HandleParentProps {\n    width: number,\n    height: number,\n    onKeyboardEvent?: React.KeyboardEventHandler<SVGElement>,\n    handles: HandleRenderFunction[],\n}\n\nexport class HandleParent extends React.Component<HandleParentProps> {\n    public currentHandle: DraggableHandle | undefined;\n\n    public handleDragStart = (h: DraggableHandle): void => {\n        this.currentHandle = h;\n    }\n\n    public handleDrop = (): void => {\n        this.currentHandle = undefined;\n    }\n\n    public handleMouseMove = (e: React.MouseEvent<SVGElement>): void => {\n        if (this.currentHandle) {\n            return this.currentHandle.externalMouseMove(e);\n        }\n    }\n\n    public handleMouseLeave = (e: React.MouseEvent<SVGElement>): void => {\n        if (this.currentHandle) {\n            this.currentHandle.externalLeave(e);\n        }\n    }\n\n    public handleMouseUp = (e: React.MouseEvent<SVGElement>): void => {\n        if (this.currentHandle) {\n            this.currentHandle.externalMouseUp(e);\n        }\n    }\n\n    public render() {\n        const { width, height } = this.props;\n        const styles = {\n            outline: \"1px dashed black\"\n        }\n        return (\n            <g\n                onMouseMove={this.handleMouseMove}\n                onMouseLeave={this.handleMouseLeave}\n                onMouseUp={this.handleMouseUp}\n                onKeyDown={this.props.onKeyboardEvent}\n                style={styles}\n                tabIndex={0}\n            >\n                <rect style={{ fill: \"transparent\" }}\n                    x={0} y={0} width={width} height={height}\n                />\n                {this.renderHandles()}\n            </g>\n        );\n    }\n\n    public renderHandles() {\n        const { handles, onKeyboardEvent } = this.props;\n        // we need to inform the handle when there are move/up/leave events\n        // on this parent element, for which we need to know the current handle.\n        // so we pass the handle a dragstart/drop function and kindly ask it\n        // to call us if it starts to be dragged or is dropped.\n        return handles.map((h, i) => {\n            const elem = h(this.handleDragStart, this.handleDrop, onKeyboardEvent);\n            if (React.isValidElement(elem)) {\n                return React.cloneElement(elem, { key: i });\n            }\n            return null;\n        });\n    }\n}\n\nexport default HandleParent;","import * as React from \"react\";\nimport { JobState } from \"../types\";\nimport styles from \"./ResultImage.module.css\";\n\ninterface ResultImageProps {\n    job: JobState,\n    idx: number,\n    width: number,\n    height: number,\n}\n\nconst ResultImage: React.SFC<ResultImageProps> = ({ job, idx, width, height }) => {\n    const result = job.results[idx];\n    if (result === undefined) {\n        return (\n            <svg className={styles.fallback} width={width} height={height} viewBox={`0 0 ${width} ${height}`} key={-1} />\n        )\n    }\n    return (\n        <image className={styles.default} xlinkHref={result.imageURL} width={width} height={height} />\n    );\n}\n\nexport default ResultImage;","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport styled from 'styled-components';\nimport { AnalysisState } from \"../../analysis/types\";\nimport { DatasetState } from \"../../messages\";\nimport BusyWrapper from \"../../widgets/BusyWrapper\";\nimport HandleParent from \"../../widgets/HandleParent\";\nimport { HandleRenderFunction } from \"../../widgets/types\";\nimport { JobRunning, JobState } from \"../types\";\nimport ResultImage from \"./ResultImage\";\n\ninterface ResultProps {\n    width: number,\n    height: number,\n    job: JobState,\n    dataset: DatasetState,\n    analysis: AnalysisState,\n    extraHandles?: HandleRenderFunction,\n    extraWidgets?: React.ReactElement<SVGElement>,\n    idx: number,\n    jobIndex: number,\n}\n\nconst ResultWrapper = styled.svg`\n    display: block;\n    border: 1px solid black;\n    width: 100%;\n    height: auto;\n`;\n\ntype MergedProps = ResultProps;\n\nclass Result extends React.Component<MergedProps> {\n    public renderHandles() {\n        const { width, height, extraHandles } = this.props;\n        let handles: HandleRenderFunction[] = [];\n        if (extraHandles) {\n            handles = [...handles, extraHandles];\n        }\n\n        return (\n            <HandleParent width={width} height={height} handles={handles} />\n        )\n    }\n\n    public render() {\n        const { job, idx, width, height, extraWidgets } = this.props;\n        const busy = job.running !== JobRunning.DONE;\n\n        return (\n            <BusyWrapper busy={busy}>\n                <ResultWrapper width={width} height={height} viewBox={`0 0 ${width} ${height}`}>\n                    <ResultImage job={job} idx={idx} width={width} height={height} />\n                    {extraWidgets}\n                    {this.renderHandles()}\n                </ResultWrapper>\n            </BusyWrapper>\n        );\n    }\n};\n\nexport default connect(null, null)(Result);","import styled from 'styled-components';\n\n\nconst Selectors = styled.div`\n    display: flex;\n    & > * {\n        margin-right: 10px;\n    }\n`;\n\n\n\nexport default Selectors;","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Dropdown, DropdownProps } from \"semantic-ui-react\";\nimport { RootReducer } from \"../../store\";\nimport { HandleRenderFunction } from \"../../widgets/types\";\nimport { JobRunning, JobState } from \"../types\";\nimport Result from \"./Result\";\nimport Selectors from \"./Selectors\";\n\ninterface ResultListProps {\n    width: number,\n    height: number,\n    selectors?: React.ReactElement<any>,\n    extraHandles?: HandleRenderFunction,\n    extraWidgets?: React.ReactElement<SVGElement>,\n    subtitle?: React.ReactNode,\n}\n\ninterface ExternalResultListProps {\n    analysis: string,\n    jobIndex: number,\n}\n\nconst mapStateToProps = (state: RootReducer, ownProps: ExternalResultListProps) => {\n    const analysis = state.analyses.byId[ownProps.analysis];\n    const jobId = analysis.jobs[ownProps.jobIndex];\n    const job = jobId ? state.jobs.byId[jobId] : undefined;\n    const ds = job ? state.datasets.byId[job.dataset] : undefined;\n\n    return {\n        currentJob: job,\n        jobsById: state.jobs.byId,\n        analysis,\n        dataset: ds,\n        jobIndex: ownProps.jobIndex,\n    };\n};\n\ntype MergedProps = ResultListProps & ReturnType<typeof mapStateToProps>;\n\ninterface ResultListState {\n    selectedChannel: number,\n}\n\nclass ResultList extends React.Component<MergedProps, ResultListState> {\n    public state: ResultListState = { selectedChannel: 0 };\n\n    public selectChannel = (e: React.SyntheticEvent, data: DropdownProps) => {\n        const value = data.value as number;\n        this.setState({ selectedChannel: value });\n    }\n\n    public getJob = () => {\n        const { currentJob, analysis, jobsById, jobIndex } = this.props;\n        if (!currentJob) {\n            return;\n        }\n        if (currentJob.results.length > 0) {\n            return currentJob;\n        }\n        const history = analysis.jobHistory[jobIndex];\n\n        if (history === undefined) {\n            return;\n        }\n        for (const tmpJobId of history) {\n            const tmpJob = jobsById[tmpJobId];\n            if (tmpJob.results.length > 0) {\n                return tmpJob;\n            }\n        }\n        return;\n    }\n\n    public render() {\n        const {\n            selectors, analysis, dataset, children, width, height, jobIndex,\n            extraHandles, extraWidgets, subtitle,\n        } = this.props;\n        let msg;\n        let currentResult = (\n            // placeholder:\n            <svg style={{ display: \"block\", border: \"1px solid black\", width: \"100%\", height: \"auto\" }} width={width} height={height} viewBox={`0 0 ${width} ${height}`} key={-1} />\n        );\n        const job = this.getJob();\n        if (!job || !dataset) {\n            msg = <>&nbsp;</>;\n        } else {\n            currentResult = (\n                <Result analysis={analysis} job={job} dataset={dataset}\n                    extraHandles={extraHandles}\n                    extraWidgets={extraWidgets}\n                    width={width} height={height}\n                    jobIndex={jobIndex}\n                    idx={this.state.selectedChannel}\n                />\n            );\n            if (job.running === JobRunning.DONE) {\n                const dt = (job.endTimestamp - job.startTimestamp) / 1000;\n                msg = <>Analysis done in {dt.toFixed(3)}s</>;\n            } else {\n                msg = <>Analysis running...</>;\n            }\n        }\n        return (\n            <div>\n                {currentResult}\n                {children}\n                <Selectors>\n                    <ResultImageSelector job={job} handleChange={this.selectChannel} selectedImg={this.state.selectedChannel} />\n                    {selectors}\n                </Selectors>\n                <p>{subtitle} {msg}</p>\n            </div>\n        );\n    }\n}\n\ninterface ImageSelectorProps {\n    job?: JobState,\n    handleChange: (e: React.SyntheticEvent, data: DropdownProps) => void,\n    selectedImg: number,\n}\n\nconst ResultImageSelector: React.SFC<ImageSelectorProps> = ({ job, handleChange, selectedImg }) => {\n    if (!job) {\n        return null;\n    }\n    const availableImages = job.results.map((result, idx) => ({ text: result.description.title, value: idx }));\n    return (\n        <>\n            <div>\n                Channel:{' '}\n                <Dropdown\n                    inline={true}\n                    options={availableImages}\n                    value={selectedImg}\n                    onChange={handleChange}\n                />\n            </div>\n        </>\n    )\n}\n\n\nexport default connect(mapStateToProps)(ResultList);\n","export const inRectConstraint = (width: number, height: number) => (p: Point2D) => {\n    return {\n        x: Math.max(0, Math.min(width - 1, p.x)),\n        y: Math.max(0, Math.min(height - 1, p.y)),\n    }\n}\n\nexport const dist = (cx: number, cy: number, x: number, y: number) => {\n    const dx = cx - x;\n    const dy = cy - y;\n    return Math.sqrt(dx * dx + dy * dy);\n}\n\nexport const cbToRadius = (cx: number, cy: number, cb: ((r: number) => void) | undefined) => (x: number, y: number) => cb && cb(dist(cx, cy, x, y))\n\nexport const keepOnCY = (cy: number) => (p: Point2D) => {\n    return {\n        x: p.x,\n        y: cy,\n    }\n}\n\nexport const keepXLargerThan = (otherX: number) => (p: Point2D) => {\n    return {\n        x: otherX > p.x ? otherX : p.x,\n        y: p.y,\n    }\n}\n\nexport const keepXSmallerThan = (otherX: number) => (p: Point2D) => {\n    return {\n        x: otherX < p.x ? otherX : p.x,\n        y: p.y,\n    }\n}\n\nexport const riConstraint = (outerPos: number, cy: number) => (p: Point2D) => {\n    return keepXLargerThan(outerPos)(\n        keepOnCY(cy)(p)\n    );\n}\n\nexport const roConstraints = (innerPos: number, cy: number) => (p: Point2D) => {\n    return keepXSmallerThan(innerPos)(\n        keepOnCY(cy)(p)\n    );\n}","import { CSSProperties } from \"react\";\n\nexport const defaultMaskStyles = (imageWidth: number): CSSProperties => ({\n    fillOpacity: 0.3,\n    fill: \"red\",\n    strokeOpacity: 0.7,\n    stroke: \"red\",\n    strokeWidth: imageWidth / 128 / 3,\n});","import * as React from \"react\";\nimport { defaultMaskStyles } from \"./styles\";\n\nexport interface DiskProps {\n    imageWidth: number,\n    imageHeight: number,\n    cx: number,\n    cy: number,\n    r: number,\n}\n\nconst Disk: React.SFC<DiskProps> = ({ imageWidth, imageHeight, cx, cy, r }) => {\n    return (\n        <circle cx={cx + .5} cy={cy + .5} r={r} style={{ ...defaultMaskStyles(imageWidth) }} />\n    );\n}\n\nexport default Disk;","export type ModifyCoords = ((x: number, y: number) => ({ x: number, y: number }));\n\n/**\n * Call this function whenever a keyboard event happens. The keyboard event is then translated\n * to a coordinate transformation, which is passed to the update callback. The update callback is\n * only called if relevant keys were pressed (example: arrow keys).\n * \n * @param e keyboard event\n * @param update a callback to handle coordinate updates\n */\nexport const handleKeyEvent = (e: React.KeyboardEvent<SVGElement>, update: (fn: ModifyCoords) => void) => {\n    let delta = 1;\n    if (e.shiftKey) {\n        delta = 10;\n    }\n    switch (e.key) {\n        case \"ArrowUp\":\n            update((x: number, y: number) => ({ x, y: y - delta }));\n            break;\n        case \"ArrowDown\":\n            update((x: number, y: number) => ({ x, y: y + delta }));\n            break;\n        case \"ArrowLeft\":\n            update((x: number, y: number) => ({ x: x - delta, y }));\n            break;\n        case \"ArrowRight\":\n            update((x: number, y: number) => ({ x: x + delta, y }));\n            break;\n        default:\n            return;\n    }\n    e.preventDefault();\n}\n","import * as React from \"react\";\nimport styled from 'styled-components';\nimport { handleKeyEvent, ModifyCoords } from \"./kbdHandler\";\n\nexport type HandleProps = {\n    x: number,\n    y: number,\n    scale: number,\n    withCross?: boolean,\n    focusRef: React.RefObject<SVGGElement>,\n} & React.SVGProps<SVGGElement>;\n\nconst StyledCircle = styled.circle`\n    stroke: red;\n    stroke-width: 1;\n    fill: transparent;\n    g:focus > & {\n        stroke: lightgreen;\n    }\n`;\n\nconst Cross = styled.path`\n    stroke: red;\n    stroke-width: 1;\n    fill: transparent;\n    g:focus > & {\n        stroke: lightgreen;\n    }\n`;\n\nconst FocusGroup = styled.g`\n    &:focus { outline: none; }\n`;\n\nconst Handle: React.SFC<HandleProps> = ({ scale, x, y, withCross, focusRef, ...args }) => {\n    const r = 3;\n    // scaleMatrix is needed to set the origin of the scale\n    const scaleMatrix = `matrix(${scale}, 0, 0, ${scale}, ${x - scale * x}, ${y - scale * y})`;\n    const style: React.CSSProperties = { transform: scaleMatrix };\n    const crossSpec = `\n        M${x - r / 2} ${y} L ${x + r / 2} ${y}\n        M${x} ${y - r / 2} L ${x} ${y + r / 2}\n    `;\n    const cross = withCross ? <Cross d={crossSpec} style={style} /> : null;\n    return (\n        <FocusGroup {...args} ref={focusRef}>\n            <StyledCircle cx={x} cy={y} r={r} style={style} />\n            {cross}\n        </FocusGroup>\n    )\n}\n\nexport interface DraggableHandleProps {\n    x: number,\n    y: number,\n    withCross?: boolean,\n    imageWidth?: number,\n    onDragMove?: (x: number, y: number) => void,\n    parentOnDragStart: (h: DraggableHandle) => void,\n    parentOnDrop: (x: number, y: number) => void,\n    onKeyboardEvent?: (e: React.KeyboardEvent<SVGElement>) => void,\n    constraint?: (p: Point2D) => Point2D,\n}\n\nexport function getScalingFactor(elem: SVGElement): number {\n    const svg = elem.ownerSVGElement;\n    if (svg === null) {\n        throw new Error(\"no owner SVG element?\");\n    }\n    const inWidthAttr = svg.getAttribute(\"width\");\n    if (inWidthAttr === null) {\n        throw new Error(\"no width on SVG element?\");\n    }\n    const inWidth = +inWidthAttr;\n    const svgMeasurements = svg.getBoundingClientRect();\n    return svgMeasurements.width / inWidth;\n}\n\nfunction relativeCoords(e: React.MouseEvent, parent: SVGElement) {\n    const f = getScalingFactor(parent);\n    const parentPos = parent.getBoundingClientRect();\n    const res = {\n        x: (e.pageX - (parentPos.left + window.pageXOffset)) / f,\n        y: (e.pageY - (parentPos.top + window.pageYOffset)) / f,\n    }\n    return res;\n}\n\n/**\n * stateful draggable handle, to be used as part of <svg/>\n */\nexport class DraggableHandle extends React.Component<DraggableHandleProps> {\n    public posRef: React.RefObject<SVGRectElement>;\n    public focusRef: React.RefObject<SVGGElement>;\n\n    public state = {\n        dragging: false,\n        drag: { x: 0, y: 0 },\n    }\n\n    constructor(props: DraggableHandleProps) {\n        super(props);\n        this.posRef = React.createRef<SVGRectElement>();\n        this.focusRef = React.createRef<SVGGElement>();\n    }\n\n    // mousemove event from outside (delegated from surrounding element)\n    public externalMouseMove = (e: React.MouseEvent<SVGElement>): void => {\n        this.move(e);\n    }\n\n    // mouseleave event from outside (delegated from surrounding element)\n    public externalLeave = (e: React.MouseEvent<SVGElement>): void => {\n        this.stopDrag(e);\n    }\n\n    // mouseup event from outside (delegated from surrounding element)\n    public externalMouseUp = (e: React.MouseEvent<SVGElement>): void => {\n        this.stopDrag(e);\n    }\n\n    public applyConstraint = (p: Point2D) => {\n        const { constraint } = this.props;\n        if (constraint) {\n            return constraint(p);\n        } else {\n            return p;\n        }\n    }\n\n    public startDrag = (e: React.MouseEvent<SVGElement>): void => {\n        e.preventDefault();\n        const { parentOnDragStart } = this.props;\n        if (this.posRef.current) {\n            this.setState({\n                dragging: true,\n                drag: this.applyConstraint(relativeCoords(e, this.posRef.current)),\n            });\n            if (parentOnDragStart) {\n                parentOnDragStart(this);\n            }\n            if (this.focusRef.current && this.focusRef.current.focus) {\n                this.focusRef.current.focus();\n            }\n        } else {\n            throw new Error(\"startDrag without posRef\");\n        }\n    }\n\n    public move = (e: React.MouseEvent<SVGElement>): void => {\n        const { onDragMove } = this.props;\n        if (!this.state.dragging) {\n            return;\n        }\n        if (this.posRef.current) {\n            this.setState({\n                drag: this.applyConstraint(relativeCoords(e, this.posRef.current)),\n            }, () => {\n                if (onDragMove) {\n                    const constrained = this.applyConstraint(this.state.drag)\n                    onDragMove(constrained.x, constrained.y);\n                }\n            })\n        } else {\n            throw new Error(\"move without posRef\");\n        }\n    }\n\n    public stopDrag = (e: React.MouseEvent<SVGElement>): void => {\n        const { parentOnDrop } = this.props;\n        const { dragging, drag } = this.state;\n        if (!dragging) {\n            return;\n        }\n        this.setState({\n            dragging: false,\n        })\n        if (parentOnDrop) {\n            parentOnDrop(drag.x, drag.y);\n        }\n    }\n\n    public handleKeyDown = (e: React.KeyboardEvent<SVGElement>) => {\n        const update = (fn: ModifyCoords) => {\n            const { x, y, onDragMove } = this.props;\n            const newCoords = fn(x, y);\n            const constrained = this.applyConstraint(newCoords);\n            if (onDragMove) {\n                onDragMove(constrained.x, constrained.y);\n            }\n        }\n        handleKeyEvent(e, update);\n    }\n\n    public renderCommon(x: number, y: number) {\n        const { imageWidth } = this.props;\n        const scale = imageWidth === undefined ? 1 : imageWidth / 128;\n        // empty zero-size <rect> as relative position reference\n        return (\n            <g>\n                <rect\n                    style={{ visibility: \"hidden\" }}\n                    ref={this.posRef}\n                    x={0} y={0} width={0} height={0}\n                />\n                <Handle scale={scale} x={x + .5} y={y + .5} withCross={this.props.withCross}\n                    focusRef={this.focusRef}\n                    onMouseUp={this.stopDrag}\n                    onMouseMove={this.move}\n                    onMouseDown={this.startDrag}\n                    onKeyDown={this.handleKeyDown}\n                    tabIndex={0}\n                />\n            </g>\n        );\n    }\n\n    public renderDragging() {\n        const { x, y } = this.state.drag;\n        return this.renderCommon(x, y);\n    }\n\n    public render() {\n        const { x, y } = this.props;\n        // either render from state (when dragging) or from props\n        if (this.state.dragging) {\n            return this.renderDragging();\n        } else {\n            return this.renderCommon(x, y);\n        }\n    }\n}\n\nexport default DraggableHandle;","import { ActionsUnion, createAction } from \"../helpers/actionHelpers\";\nimport { AnalysisDetails, AnalysisTypes } from \"../messages\";\nimport { AnalysisState } from \"./types\";\n\n\nexport enum ActionTypes {\n    CREATE = 'ANALYSIS_CREATE',\n    CREATED = 'ANALYSIS_CREATED',\n    PREPARE_RUN = 'ANALYSIS_PREPARE_RUN',\n    RUN = 'ANALYSIS_RUN',\n    RUNNING = 'ANALYSIS_RUNNING',\n    REMOVE = 'ANALYSIS_REMOVE',\n    REMOVED = 'ANALYSIS_REMOVED',\n    ERROR = 'ANALYSIS_ERROR',\n}\n\nexport const Actions = {\n    create: (dataset: string, analysisType: AnalysisTypes) => createAction(ActionTypes.CREATE, { dataset, analysisType }),\n    created: (analysis: AnalysisState) => createAction(ActionTypes.CREATED, { analysis }),\n    prepareRun: (id: string, jobIndex: number, job: string) => createAction(ActionTypes.PREPARE_RUN, { id, jobIndex, job }),\n    run: (id: string, jobIndex: number, parameters: AnalysisDetails) => createAction(ActionTypes.RUN, { id, jobIndex, parameters }),\n    running: (id: string, job: string, jobIndex: number) => createAction(ActionTypes.RUNNING, { id, job, jobIndex }),\n    remove: (id: string) => createAction(ActionTypes.REMOVE, { id }),\n    removed: (id: string) => createAction(ActionTypes.REMOVED, { id }),\n    error: (msg: string, timestamp: number, id: string) => createAction(ActionTypes.ERROR, { msg, timestamp, id }),\n}\n\nexport type Actions = ActionsUnion<typeof Actions>;\n\nexport type ActionParts = {\n    [K in keyof typeof Actions]: ReturnType<typeof Actions[K]>\n}","import * as React from \"react\";\nimport { Grid, Header, Icon, Segment } from \"semantic-ui-react\";\n\ninterface AnalysisLayoutTwoColProps {\n    title: string,\n    subtitle: React.ReactNode,\n    left: React.ReactNode,\n    right: React.ReactNode,\n    toolbar?: React.ReactNode,\n}\n\ntype MergedProps = AnalysisLayoutTwoColProps;\n\nconst AnalysisLayoutTwoCol: React.SFC<MergedProps> = ({\n    title, subtitle,\n    left, right,\n    toolbar,\n}) => {\n\n    return (\n        <>\n            <Header as='h3' attached=\"top\">\n                <Icon name=\"cog\" />\n                <Header.Content>{title}</Header.Content>\n            </Header>\n            <Segment attached={true}>\n                <Grid columns={2}>\n                    <Grid.Row>\n                        <Grid.Column>\n                            {left}\n                            <p>{subtitle}</p>\n                        </Grid.Column>\n                        <Grid.Column>\n                            {right}\n                        </Grid.Column>\n                    </Grid.Row>\n                </Grid>\n            </Segment>\n            {toolbar}\n        </>\n    )\n}\n\nexport default AnalysisLayoutTwoCol","import React from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { AnalysisParameters, AnalysisTypes } from \"../../messages\";\nimport { inRectConstraint } from \"../../widgets/constraints\";\nimport DraggableHandle from \"../../widgets/DraggableHandle\";\nimport { HandleRenderFunction } from \"../../widgets/types\";\nimport * as analysisActions from \"../actions\";\n\nconst useFramePicker = ({\n    enabled, scanWidth, scanHeight, jobIndex, analysisId, cx, cy, setCx, setCy\n}: {\n    enabled: boolean, scanWidth: number, scanHeight: number,\n    jobIndex: number, analysisId: string,\n    cx: number, cy: number, setCx: (newCx: number) => void, setCy: (newCy: number) => void,\n}) => {\n\n    const dispatch = useDispatch();\n\n    React.useEffect(() => {\n        if (enabled) {\n            const params: AnalysisParameters = {\n                x: cx,\n                y: cy,\n            };\n\n            dispatch(analysisActions.Actions.run(analysisId, jobIndex, {\n                type: AnalysisTypes.PICK_FRAME,\n                parameters: params,\n            }))\n        }\n    }, [analysisId, cx, cy, enabled, jobIndex, dispatch]);\n\n    const onPickChange = (pickX: number, pickY: number) => {\n        const newX = Math.round(pickX);\n        const newY = Math.round(pickY);\n        if (cx === newX && cy === newY) {\n            return;\n        }\n        setCx(newX);\n        setCy(newY);\n    }\n\n    const renderPickHandle: HandleRenderFunction = (onDragStart, onDrop) => (\n        <DraggableHandle x={cx} y={cy} withCross={true}\n            imageWidth={scanWidth}\n            onDragMove={onPickChange}\n            parentOnDragStart={onDragStart}\n            parentOnDrop={onDrop}\n            constraint={inRectConstraint(scanWidth, scanHeight)} />\n    )\n\n    return { coords: { cx, cy }, handles: renderPickHandle };\n}\n\nexport default useFramePicker;","import * as React from \"react\";\nimport { Dropdown, DropdownProps } from \"semantic-ui-react\";\n\n\ntype ModeOptions = Array<{\n    text: string;\n    value: any;\n}>;\n\ninterface ModeSelectorProps {\n    modes: ModeOptions,\n    currentMode: any,\n    onModeChange: (mode: any) => void,\n    label: string,\n}\n\nconst ModeSelector: React.FunctionComponent<ModeSelectorProps> = ({\n    modes, currentMode, onModeChange, label\n}) => {\n\n    const onChange = (e: React.SyntheticEvent, data: DropdownProps) => {\n        onModeChange(data.value)\n    }\n\n    return (\n        <>\n            <div>\n                {label}:{' '}\n                <Dropdown\n                    inline={true}\n                    options={modes}\n                    value={currentMode}\n                    onChange={onChange}\n                />\n            </div>\n        </>\n    )\n}\n\nexport default ModeSelector;","import * as React from \"react\";\nimport { defaultMaskStyles } from \"./styles\";\n\nexport interface RectProps {\n    imageWidth: number,\n    imageHeight: number,\n    x: number,\n    y: number,\n    width: number,\n    height: number,\n}\n\nconst Rect: React.SFC<RectProps> = ({ imageWidth, imageHeight, x, y, width, height }) => {\n    let ymin: number;\n    let xmin: number;\n    if (height*width > 0) {\n    ymin = Math.min(y, y+height);\n    xmin = Math.min(x, x+width);}\n    else if (height > 0 && width < 0) \n    {ymin = y;\n    xmin = x+width;}\n    else \n    {ymin = y+height;\n    xmin = x;}\n    return (\n        <rect x={xmin + .5} y={ymin + .5} width={Math.abs(width)} height={Math.abs(height)} style={{ ...defaultMaskStyles(imageWidth) }} />\n    );\n}\n\nexport default Rect;\n\n","import * as React from \"react\";\nimport { useState } from \"react\";\nimport { AnalysisTypes } from \"../../messages\";\nimport { HandleRenderFunction } from \"../../widgets/types\";\nimport { useDiskROI } from \"./DiskROI\";\nimport useFramePicker from \"./FramePicker\";\nimport ModeSelector from \"./ModeSelector\";\nimport { useRectROI } from \"./RectROI\";\nimport { useRoiPicker } from \"./RoiPicker\";\n\n\nexport enum DefaultModes {\n    SUM = \"SUM\",\n    SD = \"SD\",\n    PICK = \"PICK\",\n}\n\nexport enum DefaultRois {\n\n    ALL = \"ALL\",\n    DISK = \"DISK\",\n    RECT = \"RECT\",\n\n}\n\nconst useDefaultFrameView = ({\n    scanWidth, scanHeight, analysisId,\n}: {\n    scanWidth: number, scanHeight: number, analysisId: string,\n}) => {\n    const availableModes = [\n        {\n            text: \"Average\",\n            value: DefaultModes.SUM,\n        },\n        {\n            text: \"Standard Deviation\",\n            value: DefaultModes.SD,\n        },\n        {\n            text: \"Pick\",\n            value: DefaultModes.PICK,\n        },\n    ]\n\n    const availableRois = [\n        {\n            text: \"All\",\n            value: DefaultRois.ALL,\n        },\n        {\n            text: \"Disk\",\n            value: DefaultRois.DISK,\n        },\n        {\n            text: \"Rect\",\n            value: DefaultRois.RECT,\n        },\n    ]\n\n    const [frameMode, setMode] = useState(DefaultModes.SUM);\n    const [roi, setRoi] = useState(DefaultRois.ALL)\n\n    const frameModeSelector = <ModeSelector modes={availableModes} currentMode={frameMode} onModeChange={setMode} label=\"Mode\"/>\n\n    const roiSelector = <ModeSelector modes={availableRois} currentMode={roi} onModeChange={setRoi} label=\"ROI\"/>\n\n    const [cx, setCx] = React.useState(Math.round(scanWidth / 2));\n    const [cy, setCy] = React.useState(Math.round(scanHeight / 2));\n\n\n    const { coords: pickCoords, handles: pickHandles } = useFramePicker({\n        enabled: frameMode === DefaultModes.PICK,\n        scanWidth, scanHeight,\n        jobIndex: 0,\n        analysisId,\n        cx, cy, setCx, setCy\n    });\n\n\n    const { rectRoiHandles, rectRoiWidgets, rectRoiParameters }  = useRectROI({ scanHeight, scanWidth })\n    const { diskRoiHandles, diskRoiWidgets, diskRoiParameters}  = useDiskROI({ scanHeight, scanWidth })\n\n    const nullHandles: HandleRenderFunction = (onDragStart, onDrop) => null\n    let handles = nullHandles;\n\n\n\n    let widgets;\n    let params = {roi:{}};\n    switch (roi) {\n        case DefaultRois.DISK:\n            handles = diskRoiHandles;\n            widgets = diskRoiWidgets;\n            params = diskRoiParameters;\n            break;\n        case DefaultRois.RECT:\n            handles = rectRoiHandles;\n            widgets = rectRoiWidgets;\n            params = rectRoiParameters;\n            break;\n    }\n\n    switch (frameMode) {\n        case DefaultModes.PICK:\n            handles = pickHandles;\n            widgets = undefined;\n            break;\n    }   \n\n    useRoiPicker({\n        enabled: frameMode === DefaultModes.SD,\n        scanWidth, scanHeight,\n        jobIndex: 0,\n        analysisId,\n        roiParameters: params,\n        analysis: AnalysisTypes.SD_FRAMES\n    })\n\n    \n\n    useRoiPicker({\n        enabled: frameMode === DefaultModes.SUM,\n        scanWidth, scanHeight,\n        jobIndex: 0,\n        analysisId,\n        roiParameters: params,\n        analysis: AnalysisTypes.SUM_FRAMES,\n    })\n\n\n    const frameViewTitle = (\n        frameMode !== DefaultModes.PICK ? null : <>Pick: x={pickCoords.cx}, y={pickCoords.cy} &emsp;</>\n    )\n\n    return {\n        frameViewTitle,\n        frameModeSelector: (<>{frameModeSelector} {roiSelector}</>),\n        roiSelector,\n        handles,\n        widgets,\n    }\n}\n\nexport default useDefaultFrameView;","import * as React from \"react\";\nimport { useState } from \"react\";\n\nimport { FrameParams } from \"../../messages\";\nimport DraggableHandle from \"../../widgets/DraggableHandle\";\nimport Rect from \"../../widgets/Rect\";\nimport { HandleRenderFunction } from \"../../widgets/types\";\n\n\nconst useRectROI = ({ scanWidth, scanHeight}: {\n    scanWidth: number;\n    scanHeight: number; \n}) => {\n    const minLength = Math.min(scanWidth, scanHeight);\n    const [x, setx] = useState(scanWidth / 2);\n    const [y, sety] = useState(scanHeight / 2);\n    const [width, setwidth] = useState(minLength / 8);\n    const [height, setheight] = useState(minLength / 8);\n\n\n    const rectRoiParameters: FrameParams = {\n        roi: {\n            shape: \"rect\",\n            x,\n            y,\n            width,\n            height,\n        },\n    }\n\n\n    const handleCornerChange = (newx: number, newy: number) => {\n        setx(newx);\n        sety(newy);\n    };\n\n    const handleShapeChange = (newx: number, newy: number) => {\n        setwidth(newx-x);\n        setheight(newy-y);\n    };\n\n    const smthHandle = {\n        x: x + width ,\n        y: y + height,\n    }\n\n    const rectRoiHandles: HandleRenderFunction = (handleDragStart, handleDrop) => (<>\n        <DraggableHandle x={x} y={y}\n            imageWidth={scanWidth}\n            onDragMove={handleCornerChange}\n            parentOnDragStart={handleDragStart}\n            parentOnDrop={handleDrop}/>\n        <DraggableHandle x={smthHandle.x} y={smthHandle.y}\n            imageWidth={scanWidth}\n            onDragMove={handleShapeChange}\n            parentOnDragStart={handleDragStart}\n            parentOnDrop={handleDrop}/>\n    </>);\n\n    const rectRoiWidgets = (\n        <Rect x={x} y={y} width={width} height={height}\n            imageWidth={scanWidth} imageHeight={scanHeight}\n        />\n    );\n\n    return {\n        rectRoiParameters,\n        rectRoiHandles,\n        rectRoiWidgets,\n    };\n};\n\nexport { useRectROI };\n\n","import * as React from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { AnalysisTypes, FrameParams } from \"../../messages\";\nimport * as analysisActions from \"../actions\";\n\n\nconst useRoiPicker = ({ analysisId, enabled, jobIndex, roiParameters, analysis }: {\n    scanWidth: number;\n    scanHeight: number;\n    enabled: boolean;\n    jobIndex: number,\n    analysisId: string;\n    roiParameters: FrameParams;\n    analysis: AnalysisTypes.SD_FRAMES | AnalysisTypes.SUM_FRAMES\n}) => {\n    const dispatch = useDispatch();\n\n    React.useEffect(() => {\n        const handle = setTimeout(() => {\n            if (enabled) {\n                const analysisDetails = {\n                    type: analysis,\n                    parameters: roiParameters,\n                };\n                dispatch(analysisActions.Actions.run(analysisId, jobIndex, analysisDetails))\n            }\n        }, 100);\n\n        return () => clearTimeout(handle);\n        // rules-of-hooks can't be statically validated here\n        // eslint-disable-next-line\n    }, [analysis, analysisId, enabled, jobIndex, JSON.stringify(roiParameters), dispatch]);\n\n    return {\n    };\n};\n\nexport { useRoiPicker };\n\n","import * as React from \"react\";\nimport { useState } from \"react\";\n\nimport { FrameParams } from \"../../messages\";\nimport { cbToRadius, inRectConstraint, keepOnCY } from \"../../widgets/constraints\";\nimport Disk from \"../../widgets/Disk\";\nimport DraggableHandle from \"../../widgets/DraggableHandle\";\nimport { HandleRenderFunction } from \"../../widgets/types\";\n\nconst useDiskROI = ({ scanWidth, scanHeight}: {\n    scanWidth: number;\n    scanHeight: number;\n}) => {\n    const minLength = Math.min(scanWidth, scanHeight);\n    const [cx, setCx] = useState(scanWidth / 2);\n    const [cy, setCy] = useState(scanHeight / 2);\n    const [r, setR] = useState(minLength / 8);\n\n\n    const diskRoiParameters: FrameParams = {\n        roi: {\n            shape: \"disk\",\n            cx,\n            cy,\n            r,\n        },\n    }\n\n\n    const handleCenterChange = (newCx: number, newCy: number) => {\n        setCx(newCx);\n        setCy(newCy);\n    };\n\n    const handleRChange = (newR: number) => {\n        setR(newR);\n    };\n\n    const rHandle = {\n        x: cx - r,\n        y: cy,\n    }\n\n    const diskRoiHandles: HandleRenderFunction = (handleDragStart, handleDrop) => (<>\n        <DraggableHandle x={cx} y={cy}\n            imageWidth={scanWidth}\n            onDragMove={handleCenterChange}\n            parentOnDragStart={handleDragStart}\n            parentOnDrop={handleDrop}\n            constraint={inRectConstraint(scanWidth, scanHeight)} />\n        <DraggableHandle x={rHandle.x} y={rHandle.y}\n            imageWidth={scanWidth}\n            onDragMove={cbToRadius(cx, cy, handleRChange)}\n            parentOnDragStart={handleDragStart}\n            parentOnDrop={handleDrop}\n            constraint={keepOnCY(cy)} />\n    </>);\n\n    const diskRoiWidgets = (\n        <Disk cx={cx} cy={cy} r={r}\n            imageWidth={scanWidth} imageHeight={scanHeight}\n        />\n    );\n\n    return {\n        diskRoiParameters,\n        diskRoiHandles,\n        diskRoiWidgets,\n    };\n};\n\nexport { useDiskROI };\n\n","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { Button, Icon, IconProps, Segment } from \"semantic-ui-react\";\nimport { RootReducer } from \"../../store\";\nimport * as analysisActions from \"../actions\";\nimport { getAnalysisStatus } from \"../helpers\";\nimport { AnalysisState } from \"../types\";\n\ninterface ToolbarProps {\n    analysis: AnalysisState,\n    busyIdxs: number[],\n    onApply: () => void,\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch, ownProps: ToolbarProps) => {\n    return {\n        handleRemove: () => dispatch(analysisActions.Actions.remove(ownProps.analysis.id)),\n    }\n}\n\ntype MergedProps = ToolbarProps & ReturnType<typeof mapDispatchToProps> & ReturnType<typeof mapStateToProps>;\n\nconst Toolbar: React.SFC<MergedProps> = ({ status, onApply, handleRemove }) => {\n    const running = status === \"busy\";\n    const applyIconProps: IconProps = running ? { name: 'cog', loading: true } : { name: 'check' }\n    return (\n        <Segment attached=\"bottom\">\n            <Button.Group>\n                <Button primary={true} onClick={onApply} icon={true}>\n                    <Icon {...applyIconProps} />\n                    Apply\n                </Button>\n                <Button onClick={handleRemove} icon={true}>\n                    <Icon name='remove' />\n                    Remove\n                </Button>\n            </Button.Group>\n        </Segment>\n    );\n}\n\nconst mapStateToProps = (state: RootReducer, ownProps: ToolbarProps) => {\n    const status = getAnalysisStatus(ownProps.analysis, state.jobs, ownProps.busyIdxs);\n    return {\n        status,\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Toolbar);","import { JobReducerState } from \"../job/reducers\";\nimport { JobRunning } from \"../job/types\";\nimport { AnalysisState } from \"./types\";\n\nexport const getAnalysisStatus = (analysis: AnalysisState, jobs: JobReducerState, jobIdxsToInclude: number[] = []): \"idle\" | \"busy\" => {\n    let filteredJobs = analysis.jobs;\n\n    if (jobIdxsToInclude.length > 0) {\n        filteredJobs = analysis.jobs.filter((jobId: string, idx: number) => {\n            return jobIdxsToInclude.indexOf(idx) !== -1;\n        })\n    }\n\n    return filteredJobs.reduce((prevValue: \"idle\" | \"busy\", jobId: string) => {\n        const isDone = jobs.byId[jobId].running === JobRunning.DONE;\n        return isDone ? prevValue : \"busy\";\n    }, \"idle\");\n}","import * as React from \"react\";\nimport { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { defaultDebounce } from \"../../helpers\";\nimport ResultList from \"../../job/components/ResultList\";\nimport { AnalysisTypes } from \"../../messages\";\nimport { cbToRadius, inRectConstraint, keepOnCY } from \"../../widgets/constraints\";\nimport Disk from \"../../widgets/Disk\";\nimport { DraggableHandle } from \"../../widgets/DraggableHandle\";\nimport { HandleRenderFunction } from \"../../widgets/types\";\nimport * as analysisActions from \"../actions\";\nimport { AnalysisProps } from \"../types\";\nimport AnalysisLayoutTwoCol from \"./AnalysisLayoutTwoCol\";\nimport useDefaultFrameView from \"./DefaultFrameView\";\nimport Toolbar from \"./Toolbar\";\n\nconst CenterOfMassAnalysis: React.SFC<AnalysisProps> = ({ analysis, dataset }) => {\n    const { shape } = dataset.params;\n    const [scanHeight, scanWidth, imageHeight, imageWidth] = shape;\n    const minLength = Math.min(imageWidth, imageHeight);\n    const [cx, setCx] = useState(imageWidth / 2);\n    const [cy, setCy] = useState(imageHeight / 2);\n    const [r, setR] = useState(minLength / 4);\n\n    const dispatch = useDispatch();\n\n    const rHandle = {\n        x: cx - r,\n        y: cy,\n    }\n\n    const handleCenterChange = defaultDebounce((newCx: number, newCy: number) => {\n        setCx(newCx);\n        setCy(newCy);\n    });\n    const handleRChange = defaultDebounce(setR);\n\n    const frameViewHandles: HandleRenderFunction = (handleDragStart, handleDrop) => (<>\n        <DraggableHandle x={cx} y={cy}\n            imageWidth={imageWidth}\n            onDragMove={handleCenterChange}\n            parentOnDragStart={handleDragStart}\n            parentOnDrop={handleDrop}\n            constraint={inRectConstraint(imageWidth, imageHeight)} />\n        <DraggableHandle x={rHandle.x} y={rHandle.y}\n            imageWidth={imageWidth}\n            onDragMove={cbToRadius(cx, cy, handleRChange)}\n            parentOnDragStart={handleDragStart}\n            parentOnDrop={handleDrop}\n            constraint={keepOnCY(cy)} />\n    </>);\n\n    const frameViewWidgets = (\n        <Disk cx={cx} cy={cy} r={r}\n            imageWidth={imageWidth} imageHeight={imageHeight} />\n    )\n\n    const {\n        frameViewTitle, frameModeSelector,\n        handles: resultHandles, widgets: resultWidgets\n    } = useDefaultFrameView({\n        scanWidth,\n        scanHeight,\n        analysisId: analysis.id,\n    })\n\n    const subtitle = <>{frameViewTitle} Disk: center=(x={cx.toFixed(2)}, y={cy.toFixed(2)}), r={r.toFixed(2)}</>;\n\n    const runAnalysis = () => {\n        dispatch(analysisActions.Actions.run(analysis.id, 1, {\n            type: AnalysisTypes.CENTER_OF_MASS,\n            parameters: {\n                shape: \"com\",\n                cx,\n                cy,\n                r\n            }\n        }));\n    };\n\n    const toolbar = <Toolbar analysis={analysis} onApply={runAnalysis} busyIdxs={[1]} />\n\n    return (\n        <AnalysisLayoutTwoCol\n            title=\"COM analysis\" subtitle={subtitle}\n            left={<>\n                <ResultList\n                    extraHandles={frameViewHandles} extraWidgets={frameViewWidgets}\n                    jobIndex={0} analysis={analysis.id}\n                    width={imageWidth} height={imageHeight}\n                    selectors={frameModeSelector}\n                />\n            </>}\n            right={<>\n                <ResultList\n                    jobIndex={1} analysis={analysis.id}\n                    width={scanWidth} height={scanHeight}\n                    extraHandles={resultHandles}\n                    extraWidgets={resultWidgets}\n                />\n            </>}\n            toolbar={toolbar}\n        />\n    );\n}\n\nexport default CenterOfMassAnalysis;","// from https://stackoverflow.com/a/45100420/540644\nexport function getPathArc(center: { x: number, y: number }, start: number, end: number, radius: number) {\n    if (end === start) { end += 360; }\n    let degree = end - start;\n    degree = degree < 0 ? (degree + 360) : degree;\n    const points = [];\n    points.push(getLocationFromAngle(start, radius, center));\n    points.push(getLocationFromAngle(start + degree / 3, radius, center));\n    points.push(getLocationFromAngle(start + degree * 2 / 3, radius, center));\n    points.push(getLocationFromAngle(end, radius, center));\n    return getCirclePath(points, radius, (degree < 180) ? 0 : 1);\n}\n\nfunction getCirclePath(points: Array<{ x: number, y: number }>, radius: number, clockWise: 0 | 1) {\n    return ['M', points[0].x, points[0].y,\n        'A', radius, radius, 0, 0, clockWise, points[1].x, points[1].y,\n        'A', radius, radius, 0, 0, clockWise, points[2].x, points[2].y,\n        'A', radius, radius, 0, 0, clockWise, points[3].x, points[3].y\n    ].join(' ');\n}\n\nfunction getLocationFromAngle(degree: number, radius: number, center: { x: number, y: number }) {\n    const radian = (degree * Math.PI) / 180;\n    return {\n        x: Math.cos(radian) * radius + center.x,\n        y: Math.sin(radian) * radius + center.y\n    }\n}\n","import * as React from \"react\";\nimport { getPathArc } from \"../helpers/svg\";\nimport { defaultMaskStyles } from \"./styles\";\n\nexport interface RingProps {\n    imageWidth: number,\n    cx: number,\n    cy: number,\n    ri: number,\n    ro: number,\n}\n\nconst Ring: React.SFC<RingProps> = ({ imageWidth, cx, cy, ri, ro }) => {\n    // see also: https://stackoverflow.com/a/37883328/540644\n    const pathSpecs = [\n        getPathArc({ x: cx + .5, y: cy + .5 }, 90, 90, ro),\n        getPathArc({ x: cx + .5, y: cy + .5 }, 90, 90, ri)\n    ]\n    const pathSpec = pathSpecs.join(' ');\n\n    return (\n        <path d={pathSpec} fillRule=\"evenodd\" style={{ ...defaultMaskStyles(imageWidth) }} />\n    );\n}\n\nexport default Ring;","import * as React from \"react\";\nimport { Grid, Header, Icon, Segment } from \"semantic-ui-react\";\n\ninterface AnalysisLayoutTwoResProps {\n    title: string,\n    subtitle: React.ReactNode,\n    left: React.ReactNode,\n    mid: React.ReactNode,\n    right: React.ReactNode,\n    clustparams: React.ReactNode,\n    toolbar?: React.ReactNode,\n    title1: string, \n    title2: React.ReactNode,\n    title3:string,\n\n}\n\ntype MergedProps = AnalysisLayoutTwoResProps;\n\nconst AnalysisLayoutTwoRes: React.SFC<MergedProps> = ({\n    title, subtitle,\n    left, mid, right,\n    toolbar, clustparams, title1, title2, title3\n}) => {\n    return (\n        <>\n            <Header as='h3' attached=\"top\">\n                <Icon name=\"cog\" />\n                <Header.Content>{title}</Header.Content>\n            </Header>\n            <Segment attached={true}>\n                <Grid columns={3}>\n                    <Grid.Row>\n                        <Grid.Column width={4}>\n                            <p>{title1}</p>\n                        </Grid.Column> \n\n                        <Grid.Column width={6}>\n                            <p>{title2}</p>   \n\n                        </Grid.Column>\n\n                        <Grid.Column width={6}>\n                            <p>{title3}</p>\n                        </Grid.Column>    \n                    </Grid.Row>\n\n                    <Grid.Row>\n                        <Grid.Column width={4}>\n                            {left}\n                        </Grid.Column>\n\n                        <Grid.Column width={6}>\n                            {mid}\n                        </Grid.Column>\n\n                        <Grid.Column width={6}>\n                            {right}\n                        </Grid.Column>\n\n                    </Grid.Row>\n\n                    <Grid.Row>\n                        <Grid.Column width={16}>\n\n                            <div>{clustparams}</div>\n                            <p>{subtitle}</p>\n\n                        </Grid.Column>\n\n                    </Grid.Row>\n                </Grid>\n                \n            </Segment>\n            \n            {toolbar}\n        </>\n    )\n}\n\nexport default AnalysisLayoutTwoRes","import * as React from \"react\";\nimport { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { Accordion, Form, Icon } from \"semantic-ui-react\";\nimport { defaultDebounce } from \"../../helpers\";\nimport ResultList from \"../../job/components/ResultList\";\nimport { AnalysisTypes } from \"../../messages\";\nimport { cbToRadius, inRectConstraint, riConstraint, roConstraints } from \"../../widgets/constraints\";\nimport DraggableHandle from \"../../widgets/DraggableHandle\";\nimport Ring from \"../../widgets/Ring\";\nimport { HandleRenderFunction } from \"../../widgets/types\";\nimport * as analysisActions from \"../actions\";\nimport { AnalysisProps } from \"../types\";\nimport AnalysisLayoutTwoRes from \"./AnalysisLayoutTwoRes\";\nimport useDefaultFrameView from \"./DefaultFrameView\";\nimport { useRectROI } from \"./RectROI\";\nimport Toolbar from \"./Toolbar\";\n\n\n\n\nconst ClustAnalysis: React.SFC<AnalysisProps> = ({ analysis, dataset }) => {\n\n    const { shape } = dataset.params;\n    const [scanHeight, scanWidth, imageHeight, imageWidth] = shape;\n    const minLength = Math.min(imageWidth, imageHeight);\n\n    const [cx, setCx] = useState(imageWidth / 2);\n    const [cy, setCy] = useState(imageHeight / 2);\n    const [ri, setRi] = useState(minLength / 4);\n    const [ro, setRo] = useState(minLength / 2);\n\n    const riHandle = {\n        x: cx - ri,\n        y: cy,\n    }\n    const roHandle = {\n        x: cx - ro,\n        y: cy,\n    }\n\n    const [delta, setDelta] = React.useState(0.05);\n\n    const deltaChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setDelta(event.target.valueAsNumber);\n    }\n\n    const [minDist, setMinDist] = React.useState(1);\n\n    const minDistChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setMinDist(event.target.valueAsNumber);\n    }\n\n    const [nPeaks, setNPeaks] = React.useState(50);\n\n    const peakChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setNPeaks(event.target.valueAsNumber);\n    }\n\n    const [nClust, setNClust] = React.useState(20);\n\n    const clustChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setNClust(event.target.valueAsNumber);\n    }\n\n    const handleCenterChange = defaultDebounce((newCx: number, newCy: number) => {\n        setCx(newCx);\n        setCy(newCy);\n    });\n    const handleRIChange = defaultDebounce(setRi);\n    const handleROChange = defaultDebounce(setRo);\n\n    const frameViewHandles: HandleRenderFunction = (handleDragStart, handleDrop) => (<>\n        <DraggableHandle x={cx} y={cy}\n            imageWidth={imageWidth}\n            onDragMove={handleCenterChange}\n            parentOnDrop={handleDrop}\n            parentOnDragStart={handleDragStart}\n            constraint={inRectConstraint(imageWidth, imageHeight)} />\n        <DraggableHandle x={roHandle.x} y={roHandle.y}\n            imageWidth={imageWidth}\n            onDragMove={cbToRadius(cx, cy, handleROChange)}\n            parentOnDrop={handleDrop}\n            parentOnDragStart={handleDragStart}\n            constraint={roConstraints(riHandle.x, cy)} />\n        <DraggableHandle x={riHandle.x} y={riHandle.y}\n            imageWidth={imageWidth}\n            parentOnDrop={handleDrop}\n            parentOnDragStart={handleDragStart}\n            onDragMove={cbToRadius(cx, cy, handleRIChange)}\n            constraint={riConstraint(roHandle.x, cy)} />\n    </>);\n\n    const frameViewWidgets = (\n        <Ring cx={cx} cy={cy} ri={ri} ro={ro}\n            imageWidth={imageWidth} />\n    )\n\n    const dispatch = useDispatch();\n    const { rectRoiParameters, rectRoiHandles, rectRoiWidgets } = useRectROI({ scanWidth, scanHeight });\n\n    React.useEffect(() => {\n        dispatch(analysisActions.Actions.run(analysis.id, 1, {\n            type: AnalysisTypes.SUM_SIG,\n            parameters: {},\n        }))\n    }, [analysis.id, dispatch]);\n\n    const runAnalysis = () => {\n        dispatch(analysisActions.Actions.run(analysis.id, 2, {\n            type: AnalysisTypes.CLUST,\n            parameters: {\n                roi: rectRoiParameters.roi,\n                cx,\n                cy,\n                ri,\n                ro,\n                delta,\n                n_clust: nClust,\n                n_peaks: nPeaks,\n                min_dist: minDist\n            }\n        }));\n    };\n\n    const {\n        frameViewTitle, frameModeSelector,\n        handles: resultHandles,\n        widgets: resultWidgets,\n    } = useDefaultFrameView({\n        scanWidth,\n        scanHeight,\n        analysisId: analysis.id,\n    })\n\n    const subtitle = (\n        <>{frameViewTitle} Ring: center=(x={cx.toFixed(2)}, y={cy.toFixed(2)}), ri={ri.toFixed(2)}, ro={ro.toFixed(2)}</>\n    )\n    const toolbar = <Toolbar analysis={analysis} onApply={runAnalysis} busyIdxs={[2]} />\n\n    const [paramsVisible, setParamsVisible] = React.useState(false);\n\n    const handleClick = (event: React.MouseEvent<HTMLDivElement>) => {\n        setParamsVisible(!paramsVisible);\n    }\n\n    const clustparams =\n        <Accordion>\n            <Accordion.Title active={paramsVisible} index={0} onClick={handleClick}>\n                <Icon name='dropdown' />\n                Parameters\n    </Accordion.Title>\n            <Accordion.Content active={paramsVisible}>\n                <Form>\n                    <Form.Field>\n                        <label> Delta. Relative intensity difference for decision making for feature vector value (delta = (x-ref)/ref, so, normally, value should be in range [0,1]) <input type=\"number\" value={delta} step=\"0.01\" min=\"0\" max=\"2\" onChange={deltaChange} /> </label>\n                    </Form.Field>\n                    <Form.Field>\n                        <label> Number of clusters  <input type=\"number\" value={nClust} step=\"1\" min=\"2\" max=\"100\" onChange={clustChange} /> </label>\n                    </Form.Field>\n                    <Form.Field>\n                        <label>  Maximal number of possible peak positions to detect (better put higher value,\n        the output is limited to the number of peaks the algorithm could find)  <input type=\"number\" value={nPeaks} step=\"1\" min=\"5\" max=\"200\" onChange={peakChange} /> </label>\n                    </Form.Field>\n                    <Form.Field>\n                        <label>  Minimal distance in pixels between peaks  <input type=\"number\" value={minDist} step=\"1\" min=\"0\" max=\"100\" onChange={minDistChange} />  </label>\n                    </Form.Field>\n                </Form>\n            </Accordion.Content>\n        </Accordion>\n    return (\n        <AnalysisLayoutTwoRes\n            title=\"Region clustering\" subtitle={subtitle}\n            left={<>\n                <ResultList\n                    extraHandles={frameViewHandles} extraWidgets={frameViewWidgets}\n                    jobIndex={0} analysis={analysis.id}\n                    width={imageWidth} height={imageHeight}\n                    selectors={frameModeSelector}\n                />\n            </>}\n            mid={<>\n                <ResultList\n                    jobIndex={1} analysis={analysis.id}\n                    width={scanWidth} height={scanHeight}\n                    extraHandles={rectRoiHandles}\n                    extraWidgets={rectRoiWidgets}\n                />\n            </>}\n\n            right={<>\n                <ResultList\n                    jobIndex={2} analysis={analysis.id}\n                    width={scanWidth} height={scanHeight}\n                    extraHandles={resultHandles}\n                    extraWidgets={resultWidgets}\n                />\n            </>}\n            toolbar={toolbar}\n            clustparams={clustparams}\n\n            title1=\"Peaks inside the ring will be considered\"\n            title2=\"Choose specimen region\"\n            title3=\"Clustering result\"\n\n        />\n    );\n\n}\n\n\nexport default ClustAnalysis;","import * as React from \"react\";\nimport { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport ResultList from \"../../job/components/ResultList\";\nimport { AnalysisTypes } from \"../../messages\";\nimport { cbToRadius, inRectConstraint, keepOnCY } from \"../../widgets/constraints\";\nimport Disk from \"../../widgets/Disk\";\nimport DraggableHandle from \"../../widgets/DraggableHandle\";\nimport { HandleRenderFunction } from \"../../widgets/types\";\nimport * as analysisActions from \"../actions\";\nimport { AnalysisProps } from \"../types\";\nimport AnalysisLayoutTwoCol from \"./AnalysisLayoutTwoCol\";\nimport useDefaultFrameView from \"./DefaultFrameView\";\nimport Toolbar from \"./Toolbar\";\n\n\nconst DiskMaskAnalysis: React.SFC<AnalysisProps> = ({ analysis, dataset }) => {\n    const { shape } = dataset.params;\n    const [scanHeight, scanWidth, imageHeight, imageWidth] = shape;\n\n    const minLength = Math.min(imageWidth, imageHeight);\n    const [cx, setCx] = useState(imageWidth / 2);\n    const [cy, setCy] = useState(imageHeight / 2);\n    const [r, setR] = useState(minLength / 4);\n\n    const handleCenterChange = (newCx: number, newCy: number) => {\n        setCx(newCx);\n        setCy(newCy);\n    };\n    const handleRChange = setR;\n\n    const rHandle = {\n        x: cx - r,\n        y: cy,\n    }\n\n    const frameViewHandles: HandleRenderFunction = (handleDragStart, handleDrop) => (<>\n        <DraggableHandle x={cx} y={cy}\n            imageWidth={imageWidth}\n            onDragMove={handleCenterChange}\n            parentOnDragStart={handleDragStart}\n            parentOnDrop={handleDrop}\n            constraint={inRectConstraint(imageWidth, imageHeight)} />\n        <DraggableHandle x={rHandle.x} y={rHandle.y}\n            imageWidth={imageWidth}\n            onDragMove={cbToRadius(cx, cy, handleRChange)}\n            parentOnDragStart={handleDragStart}\n            parentOnDrop={handleDrop}\n            constraint={keepOnCY(cy)} />\n    </>);\n\n    const frameViewWidgets = (\n        <Disk cx={cx} cy={cy} r={r}\n            imageWidth={imageWidth} imageHeight={imageHeight}\n        />\n    );\n\n    const dispatch = useDispatch();\n\n    const runAnalysis = () => {\n        dispatch(analysisActions.Actions.run(analysis.id, 1, {\n            type: AnalysisTypes.APPLY_DISK_MASK,\n            parameters: {\n                shape: \"disk\",\n                cx, cy, r\n            }\n        }));\n    };\n\n    const {\n        frameViewTitle, frameModeSelector,\n        handles: resultHandles, widgets: resultWidgets\n    } = useDefaultFrameView({\n        scanWidth,\n        scanHeight,\n        analysisId: analysis.id,\n    })\n\n    const subtitle = <>{frameViewTitle} Disk: center=(x={cx.toFixed(2)}, y={cy.toFixed(2)}), r={r.toFixed(2)}</>;\n\n    const toolbar = <Toolbar analysis={analysis} onApply={runAnalysis} busyIdxs={[1]} />\n\n    return (\n        <AnalysisLayoutTwoCol\n            title=\"Disk analysis\" subtitle={subtitle}\n            left={<>\n                <ResultList\n                    extraHandles={frameViewHandles} extraWidgets={frameViewWidgets}\n                    jobIndex={0} analysis={analysis.id}\n                    width={imageWidth} height={imageHeight}\n                    selectors={frameModeSelector}\n                />\n            </>}\n            right={<>\n                <ResultList\n                    jobIndex={1} analysis={analysis.id}\n                    width={scanWidth} height={scanHeight}\n                    extraHandles={resultHandles}\n                    extraWidgets={resultWidgets}\n                />\n            </>}\n            toolbar={toolbar}\n        />\n    );\n}\n\nexport default DiskMaskAnalysis;","import * as React from \"react\";\nimport { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { defaultDebounce } from \"../../helpers\";\nimport ResultList from \"../../job/components/ResultList\";\nimport { AnalysisTypes } from \"../../messages\";\nimport { cbToRadius, inRectConstraint, riConstraint, roConstraints } from \"../../widgets/constraints\";\nimport DraggableHandle from \"../../widgets/DraggableHandle\";\nimport Ring from \"../../widgets/Ring\";\nimport { HandleRenderFunction } from \"../../widgets/types\";\nimport * as analysisActions from \"../actions\";\nimport { AnalysisProps } from \"../types\";\nimport AnalysisLayoutTwoCol from \"./AnalysisLayoutTwoCol\";\nimport useDefaultFrameView from \"./DefaultFrameView\";\nimport Toolbar from \"./Toolbar\";\n\nconst FEMAnalysis: React.SFC<AnalysisProps> = ({ analysis, dataset }) => {\n    const { shape } = dataset.params;\n    const [scanHeight, scanWidth, imageHeight, imageWidth] = shape;\n    const minLength = Math.min(imageWidth, imageHeight);\n\n    const [cx, setCx] = useState(imageWidth / 2);\n    const [cy, setCy] = useState(imageHeight / 2);\n    const [ri, setRi] = useState(minLength / 4);\n    const [ro, setRo] = useState(minLength / 2);\n\n    const riHandle = {\n        x: cx - ri,\n        y: cy,\n    }\n    const roHandle = {\n        x: cx - ro,\n        y: cy,\n    }\n\n    const handleCenterChange = defaultDebounce((newCx: number, newCy: number) => {\n        setCx(newCx);\n        setCy(newCy);\n    });\n    const handleRIChange = defaultDebounce(setRi);\n    const handleROChange = defaultDebounce(setRo);\n\n    const frameViewHandles: HandleRenderFunction = (handleDragStart, handleDrop) => (<>\n        <DraggableHandle x={cx} y={cy}\n            imageWidth={imageWidth}\n            onDragMove={handleCenterChange}\n            parentOnDrop={handleDrop}\n            parentOnDragStart={handleDragStart}\n            constraint={inRectConstraint(imageWidth, imageHeight)} />\n        <DraggableHandle x={roHandle.x} y={roHandle.y}\n            imageWidth={imageWidth}\n            onDragMove={cbToRadius(cx, cy, handleROChange)}\n            parentOnDrop={handleDrop}\n            parentOnDragStart={handleDragStart}\n            constraint={roConstraints(riHandle.x, cy)} />\n        <DraggableHandle x={riHandle.x} y={riHandle.y}\n            imageWidth={imageWidth}\n            parentOnDrop={handleDrop}\n            parentOnDragStart={handleDragStart}\n            onDragMove={cbToRadius(cx, cy, handleRIChange)}\n            constraint={riConstraint(roHandle.x, cy)} />\n    </>);\n\n    const frameViewWidgets = (\n        <Ring cx={cx} cy={cy} ri={ri} ro={ro}\n            imageWidth={imageWidth} />\n    )\n\n    const dispatch = useDispatch();\n\n    const runAnalysis = () => {\n        dispatch(analysisActions.Actions.run(analysis.id, 1, {\n            type: AnalysisTypes.FEM,\n            parameters: {\n                shape: \"ring\",\n                cx, cy, ri, ro,\n            }\n        }));\n    };\n\n    const {\n        frameViewTitle, frameModeSelector,\n        handles: resultHandles,\n        widgets: resultWidgets,\n    } = useDefaultFrameView({\n        scanWidth,\n        scanHeight,\n        analysisId: analysis.id,\n    })\n\n    const subtitle = (\n        <>{frameViewTitle} Ring: center=(x={cx.toFixed(2)}, y={cy.toFixed(2)}), ri={ri.toFixed(2)}, ro={ro.toFixed(2)}</>\n    )\n\n    const toolbar = <Toolbar analysis={analysis} onApply={runAnalysis} busyIdxs={[1]} />\n\n    return (\n        <AnalysisLayoutTwoCol\n            title=\"Fluctuation EM (SD over Ring analysis)\" subtitle={subtitle}\n            left={<>\n                <ResultList\n                    extraHandles={frameViewHandles} extraWidgets={frameViewWidgets}\n                    jobIndex={0} analysis={analysis.id}\n                    width={imageWidth} height={imageHeight}\n                    selectors={frameModeSelector}\n                />\n            </>}\n            right={<>\n                <ResultList\n                    jobIndex={1} analysis={analysis.id}\n                    width={scanWidth} height={scanHeight}\n                    extraHandles={resultHandles}\n                    extraWidgets={resultWidgets}\n                />\n            </>}\n            toolbar={toolbar}\n        />\n    );\n}\n\nexport default FEMAnalysis;","import * as React from \"react\";\nimport { Grid, Header, Icon, Segment } from \"semantic-ui-react\";\n\ninterface AnalysisLayoutThreeColProps {\n    title: string,\n    subtitle: React.ReactNode,\n    left: React.ReactNode,\n    mid: React.ReactNode,\n    right: React.ReactNode,\n    toolbar?: React.ReactNode,\n    title1: string,\n    title2: React.ReactNode,\n    title3: string,\n\n}\n\ntype MergedProps = AnalysisLayoutThreeColProps;\n\nconst AnalysisLayoutThreeCol: React.SFC<MergedProps> = ({\n    title, subtitle,\n    left, mid, right,\n    toolbar, title1, title2, title3\n}) => {\n    // tslint:disable-next-line: no-console\n\n\n    // handleChange({target: {checked: true}})\n\n\n\n\n    return (\n        <>\n            <Header as='h3' attached=\"top\">\n                <Icon name=\"cog\" />\n                <Header.Content>{title}</Header.Content>\n            </Header>\n            <Segment attached={true}>\n                <Grid columns={3}>\n                    <Grid.Row>\n                        <Grid.Column width={5}>\n                            <p>{title1}</p>\n                        </Grid.Column>\n\n                        <Grid.Column width={5}>\n                            <p>{title2}</p>\n\n                        </Grid.Column>\n\n                        <Grid.Column width={6}>\n                            <p>{title3}</p>\n                        </Grid.Column>\n                    </Grid.Row>\n\n                    <Grid.Row>\n                        <Grid.Column width={5}>\n                            {left}\n                        </Grid.Column>\n\n                        <Grid.Column width={5}>\n                            {mid}\n                        </Grid.Column>\n\n                        <Grid.Column width={6}>\n                            {right}\n                        </Grid.Column>\n\n                    </Grid.Row>\n\n                    <Grid.Row>\n                        <Grid.Column width={10}>\n\n                            <p>{subtitle}</p>\n                        </Grid.Column>\n\n                        <Grid.Column width={6} />\n                    </Grid.Row>\n                </Grid>\n            </Segment>\n            {toolbar}\n        </>\n    )\n}\n\nexport default AnalysisLayoutThreeCol","import React from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { AnalysisTypes } from \"../../messages\";\nimport { inRectConstraint } from \"../../widgets/constraints\";\nimport DraggableHandle from \"../../widgets/DraggableHandle\";\nimport { HandleRenderFunction } from \"../../widgets/types\";\nimport * as analysisActions from \"../actions\";\n\nconst useFFTFramePicker = ({\n    enabled, scanWidth, scanHeight, jobIndex, analysisId, cx, cy, real_rad, real_centerx, real_centery, setCx, setCy\n}: {\n    enabled: boolean, scanWidth: number, scanHeight: number,\n    jobIndex: number, analysisId: string,\n    cx: number, cy: number, setCx: (newCx: number) => void, setCy: (newCy: number) => void,\n    real_rad: number | null, real_centerx: number | null, real_centery: number | null\n\n}) => {\n\n    const dispatch = useDispatch();\n\n    React.useEffect(() => {\n        if (enabled) {\n            dispatch(analysisActions.Actions.run(analysisId, jobIndex, {\n                type: AnalysisTypes.PICK_FFT_FRAME,\n                parameters: { x: cx, y: cy, real_rad, real_centerx, real_centery },\n            }))\n\n        }\n    }, [analysisId, cx, cy, enabled, jobIndex, real_rad, real_centerx, real_centery, dispatch]);\n\n    const onPickChange = (pickX: number, pickY: number) => {\n        const newX = Math.round(pickX);\n        const newY = Math.round(pickY);\n        if (cx === newX && cy === newY) {\n            return;\n        }\n        setCx(newX);\n        setCy(newY);\n    }\n\n    const renderPickHandle: HandleRenderFunction = (onDragStart, onDrop) => (\n        <DraggableHandle x={cx} y={cy} withCross={true}\n            imageWidth={scanWidth}\n            onDragMove={onPickChange}\n            parentOnDragStart={onDragStart}\n            parentOnDrop={onDrop}\n            constraint={inRectConstraint(scanWidth, scanHeight)} />\n    )\n\n    return { coords: { cx, cy }, handles: renderPickHandle };\n}\n\nexport default useFFTFramePicker;","import React from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { AnalysisTypes } from \"../../messages\";\nimport * as analysisActions from \"../actions\";\n\nconst useFFTSumFrames = ({\n    enabled, jobIndex, analysisId, real_rad, real_centerx, real_centery\n}: {\n    enabled: boolean, jobIndex: number, analysisId: string, real_rad: number | null, real_centerx: number | null, real_centery: number | null\n}) => {\n    const dispatch = useDispatch();\n\n    React.useEffect(() => {\n        if (enabled) {\n            dispatch(analysisActions.Actions.run(analysisId, jobIndex, {\n                type: AnalysisTypes.FFTSUM_FRAMES,\n                parameters: { real_rad, real_centerx, real_centery },\n            }));\n        }\n    }, [analysisId, enabled, jobIndex, real_rad, real_centerx, real_centery, dispatch]);\n};\n\nexport default useFFTSumFrames;\n","import * as React from \"react\";\nimport { useState } from \"react\";\nimport { AnalysisTypes } from \"../../messages\";\nimport { HandleRenderFunction } from \"../../widgets/types\";\nimport useFFTFramePicker from \"./FFTFramePicker\";\nimport useFFTSumFrames from \"./FFTSumFrames\";\nimport useFramePicker from \"./FramePicker\";\nimport ModeSelector from \"./ModeSelector\";\nimport { useRoiPicker } from \"./RoiPicker\";\n\nconst useFFTFrameView = ({\n    scanWidth, scanHeight, analysisId, real_rad, real_centerx, real_centery\n}: {\n    scanWidth: number, scanHeight: number,\n    analysisId: string, real_rad:number|null, real_centerx:number|null, real_centery:number|null\n}) => {\n    const availableModes = [\n\n        {\n            text: \"Pick\",\n            value: AnalysisTypes.PICK_FRAME,\n        },\n\n        {\n            text: \"Average\",\n            value: AnalysisTypes.SUM_FRAMES,\n        },\n    ];\n\n    const [frameMode, setMode] = useState(AnalysisTypes.SUM_FRAMES);\n\n    const frameModeSelector = <ModeSelector modes={availableModes} currentMode={frameMode} onModeChange={setMode} label=\"Mode\"/>\n\n    const [cx, setCx] = React.useState(Math.round(scanWidth / 2));\n    const [cy, setCy] = React.useState(Math.round(scanHeight / 2));\n\n    const { coords: pickCoords, handles: pickHandles } = useFramePicker({\n        enabled: frameMode === AnalysisTypes.PICK_FRAME,\n        scanWidth, scanHeight,\n        jobIndex: 1,\n        analysisId,\n        cx, cy, setCx, setCy\n    });\n    \n    useFFTFramePicker({\n        enabled: frameMode === AnalysisTypes.PICK_FRAME,\n        scanWidth, scanHeight,\n        jobIndex: 0,\n        analysisId,\n        cx, cy, setCx, setCy,real_rad, real_centerx, real_centery\n    });\n    \n\n    useRoiPicker({\n        enabled: frameMode === AnalysisTypes.SUM_FRAMES,\n        jobIndex: 1,\n        analysisId,\n        scanWidth, scanHeight,\n        roiParameters: {roi:{}},\n        analysis: AnalysisTypes.SUM_FRAMES,\n    })\n    useFFTSumFrames({\n        enabled: frameMode === AnalysisTypes.SUM_FRAMES,\n        jobIndex: 0,\n        analysisId,\n        real_rad,\n        real_centerx,\n        real_centery\n    })\n\n    const frameViewTitle = (\n        frameMode !== AnalysisTypes.PICK_FRAME ? null : <>Pick: x={pickCoords.cx}, y={pickCoords.cy} &emsp;</>\n    )\n\n\n\n    const nullHandles: HandleRenderFunction = (onDragStart, onDrop) => null\n\n    return {\n        frameViewTitle,\n        handles: frameMode !== AnalysisTypes.PICK_FRAME ? nullHandles : pickHandles,\n\n        frameModeSelector,\n    }\n}\n\nexport default useFFTFrameView;","import * as React from \"react\";\nimport { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { defaultDebounce } from \"../../helpers\";\nimport ResultList from \"../../job/components/ResultList\";\nimport { AnalysisTypes } from \"../../messages\";\nimport { cbToRadius, inRectConstraint, keepOnCY, riConstraint, roConstraints } from \"../../widgets/constraints\";\nimport Disk from \"../../widgets/Disk\";\nimport DraggableHandle from \"../../widgets/DraggableHandle\";\nimport Ring from \"../../widgets/Ring\";\nimport { HandleRenderFunction } from \"../../widgets/types\";\nimport * as analysisActions from \"../actions\";\nimport { AnalysisProps } from \"../types\";\nimport AnalysisLayoutThreeCol from \"./AnalysisLayoutThreeCol\";\nimport useFFTFrameView from \"./FFTFrameView\";\nimport Toolbar from \"./Toolbar\";\n\n\n\n\nconst FFTAnalysis: React.SFC<AnalysisProps> = ({ analysis, dataset }) => {\n    const { shape } = dataset.params;\n    const [scanHeight, scanWidth, imageHeight, imageWidth] = shape;\n    const minLength = Math.min(imageWidth, imageHeight);\n\n    const cx = imageWidth / 2;\n    const cy = imageHeight / 2;\n    const [radIn, setRi] = useState(minLength / 4);\n    const [radOut, setRo] = useState(minLength / 2);\n\n    const dispatch = useDispatch();\n    const riHandle = {\n        x: cx - radIn,\n        y: cy,\n    }\n    const roHandle = {\n        x: cx - radOut,\n        y: cy,\n    }\n\n\n    const handleRIChange = defaultDebounce(setRi);\n    const handleROChange = defaultDebounce(setRo);\n\n    const frameViewHandlesfft: HandleRenderFunction = (handleDragStart, handleDrop) => (<>\n\n        <DraggableHandle x={roHandle.x} y={roHandle.y}\n            imageWidth={imageWidth}\n            onDragMove={cbToRadius(cx, cy, handleROChange)}\n            parentOnDrop={handleDrop}\n            parentOnDragStart={handleDragStart}\n            constraint={roConstraints(riHandle.x, cy)} />\n        <DraggableHandle x={riHandle.x} y={riHandle.y}\n            imageWidth={imageWidth}\n            parentOnDrop={handleDrop}\n            parentOnDragStart={handleDragStart}\n            onDragMove={cbToRadius(cx, cy, handleRIChange)}\n            constraint={riConstraint(roHandle.x, cy)} />\n    </>);\n\n    const frameViewWidgetsfft = (\n        <Ring cx={cx} cy={cy} ri={radIn} ro={radOut}\n            imageWidth={imageWidth} />\n    )\n\n    const [check, setCheck] = React.useState(true);\n\n    const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setCheck(event.target.checked);\n    }\n\n\n\n    const [realCenterX, setCx] = useState(imageWidth / 2);\n    const [realCenterY, setCy] = useState(imageHeight / 2);\n    const [realRad, setR] = useState(minLength / 4);\n\n    const handleCenterChange = defaultDebounce((newCx: number, newCy: number) => {\n        setCx(newCx);\n        setCy(newCy);\n    });\n    const handleRChange = defaultDebounce(setR);\n\n    const rHandle = {\n        x: realCenterX - realRad,\n        y: realCenterY,\n    }\n\n    const frameViewHandlesreal: HandleRenderFunction = (handleDragStart, handleDrop) => (<>\n        <DraggableHandle x={realCenterX} y={realCenterY}\n            imageWidth={imageWidth}\n            onDragMove={handleCenterChange}\n            parentOnDragStart={handleDragStart}\n            parentOnDrop={handleDrop}\n            constraint={inRectConstraint(imageWidth, imageHeight)} />\n        <DraggableHandle x={rHandle.x} y={rHandle.y}\n            imageWidth={imageWidth}\n            onDragMove={cbToRadius(realCenterX, realCenterY, handleRChange)}\n            parentOnDragStart={handleDragStart}\n            parentOnDrop={handleDrop}\n            constraint={keepOnCY(realCenterY)} />\n    </>);\n\n    const frameViewWidgetsreal = (\n        <Disk cx={realCenterX} cy={realCenterY} r={realRad}\n            imageWidth={imageWidth} imageHeight={imageHeight}\n        />\n    );\n\n    const runAnalysis = () => {\n        dispatch(analysisActions.Actions.run(analysis.id, 2, {\n            type: AnalysisTypes.APPLY_FFT_MASK,\n            parameters: {\n                rad_in: radIn,\n                rad_out: radOut,\n                real_rad: check ? realRad : null,\n                real_centerx: check ? realCenterX : null,\n                real_centery: check ? realCenterY : null\n\n            }\n        }));\n    };\n\n    const { frameViewTitle, frameModeSelector, handles: resultHandles } = useFFTFrameView({\n        scanWidth,\n        scanHeight,\n        analysisId: analysis.id,\n        real_rad: check ? realRad : null,\n        real_centerx: check ? realCenterX : null,\n        real_centery: check ? realCenterY : null\n    })\n\n\n\n    const toolbar = <Toolbar analysis={analysis} onApply={runAnalysis} busyIdxs={[2]} />\n\n\n    let subtitle;\n    let mid: React.ReactNode;\n    if (check) {\n        mid = (<>\n            <ResultList\n                extraHandles={frameViewHandlesreal} extraWidgets={frameViewWidgetsreal}\n                jobIndex={1} analysis={analysis.id}\n                width={imageWidth} height={imageHeight}\n                selectors={frameModeSelector}\n            />\n        </>)\n        subtitle = (\n            <>{frameViewTitle} real_rad={radIn.toFixed(2)}, real_center=(x={realCenterX.toFixed(2)}, y={realCenterY.toFixed(2)}), fourier_rad_in={radIn.toFixed(2)}, fourier_rad_out={radOut.toFixed(2)}</>\n        )\n    }\n\n    else {\n        mid = (<>\n            <ResultList\n                jobIndex={1} analysis={analysis.id}\n                width={imageWidth} height={imageHeight}\n                selectors={frameModeSelector}\n            />\n        </>)\n        subtitle = (\n            <>{frameViewTitle} fourier_rad_in={radIn.toFixed(2)}, fourier_rad_out={radOut.toFixed(2)}</>\n        )\n    }\n\n\n    return (\n        <AnalysisLayoutThreeCol\n            title=\"FFT analysis\" subtitle={subtitle}\n            left={<>\n                <ResultList\n                    extraHandles={frameViewHandlesfft} extraWidgets={frameViewWidgetsfft}\n                    jobIndex={0} analysis={analysis.id}\n                    width={imageWidth} height={imageHeight}\n                />\n            </>}\n            mid={mid}\n\n            right={<>\n                <ResultList\n                    jobIndex={2} analysis={analysis.id}\n                    width={scanWidth} height={scanHeight}\n                    extraHandles={resultHandles}\n                />\n            </>}\n            toolbar={toolbar}\n\n            title2={<><label> Masking out of zero order diffraction peak <input type=\"checkbox\" name=\"check\" onChange={handleChange} checked={check} /> </label>\n            </>}\n            title1=\"Masking of intergation region in Fourier space\"\n            title3=\"Result of analysis\"\n\n        />\n    );\n}\n\n\nexport default FFTAnalysis;","import * as React from \"react\";\nimport { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { defaultDebounce } from \"../../helpers\";\nimport ResultList from \"../../job/components/ResultList\";\nimport { AnalysisTypes } from \"../../messages\";\nimport { inRectConstraint } from \"../../widgets/constraints\";\nimport DraggableHandle from \"../../widgets/DraggableHandle\";\nimport { HandleRenderFunction } from \"../../widgets/types\";\nimport * as analysisActions from \"../actions\";\nimport { AnalysisProps } from \"../types\";\nimport AnalysisLayoutTwoCol from \"./AnalysisLayoutTwoCol\";\nimport useDefaultFrameView from \"./DefaultFrameView\";\nimport Toolbar from \"./Toolbar\";\n\n\nconst PointSelectionAnalysis: React.SFC<AnalysisProps> = ({ analysis, dataset, }) => {\n    const { shape } = dataset.params;\n    const [scanHeight, scanWidth, imageHeight, imageWidth] = shape;\n\n    const [cx, setCx] = useState(imageWidth / 2);\n    const [cy, setCy] = useState(imageHeight / 2);\n    const handleCenterChange = defaultDebounce((newCx: number, newCy: number) => {\n        setCx(newCx);\n        setCy(newCy);\n    });\n\n    const frameViewHandles: HandleRenderFunction = (handleDragStart, handleDrop) => (<>\n        <DraggableHandle x={cx} y={cy} withCross={true}\n            onDragMove={handleCenterChange}\n            imageWidth={imageWidth}\n            parentOnDragStart={handleDragStart}\n            parentOnDrop={handleDrop}\n            constraint={inRectConstraint(imageWidth, imageHeight)} />\n    </>);\n\n    const {\n        frameViewTitle, frameModeSelector,\n        handles: resultHandles,\n        widgets: resultWidgets,\n    } = useDefaultFrameView({\n        scanWidth,\n        scanHeight,\n        analysisId: analysis.id,\n    })\n\n    const subtitle = (\n        <>{frameViewTitle} Point: center=(x={cx.toFixed(2)}, y={cy.toFixed(2)})</>\n    )\n\n    const dispatch = useDispatch();\n\n    const runAnalysis = () => {\n        dispatch(analysisActions.Actions.run(analysis.id, 1, {\n            type: AnalysisTypes.APPLY_POINT_SELECTOR,\n            parameters: {\n                shape: \"point\",\n                cx,\n                cy,\n            }\n        }));\n    };\n\n    const toolbar = <Toolbar analysis={analysis} onApply={runAnalysis} busyIdxs={[1]} />\n\n    return (\n        <AnalysisLayoutTwoCol\n            title=\"Point analysis\" subtitle={subtitle}\n            left={<>\n                <ResultList\n                    extraHandles={frameViewHandles}\n                    jobIndex={0} analysis={analysis.id}\n                    width={imageWidth} height={imageHeight}\n                    selectors={frameModeSelector}\n                />\n            </>}\n            right={<>\n                <ResultList\n                    jobIndex={1} analysis={analysis.id}\n                    width={scanWidth} height={scanHeight}\n                    extraHandles={resultHandles}\n                    extraWidgets={resultWidgets}\n                />\n            </>}\n            toolbar={toolbar}\n        />\n    );\n}\n\nexport default PointSelectionAnalysis;","import * as React from \"react\";\nimport { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { defaultDebounce } from \"../../helpers\";\nimport ResultList from \"../../job/components/ResultList\";\nimport { AnalysisTypes } from \"../../messages\";\nimport { cbToRadius, inRectConstraint, riConstraint, roConstraints } from \"../../widgets/constraints\";\nimport DraggableHandle from \"../../widgets/DraggableHandle\";\nimport Ring from \"../../widgets/Ring\";\nimport { HandleRenderFunction } from \"../../widgets/types\";\nimport * as analysisActions from \"../actions\";\nimport { AnalysisProps } from \"../types\";\nimport AnalysisLayoutTwoCol from \"./AnalysisLayoutTwoCol\";\nimport useDefaultFrameView from \"./DefaultFrameView\";\nimport Toolbar from \"./Toolbar\";\n\nconst RadialFourierAnalysis: React.SFC<AnalysisProps> = ({ analysis, dataset }) => {\n    const { shape } = dataset.params;\n    const [scanHeight, scanWidth, imageHeight, imageWidth] = shape;\n\n    const minLength = Math.min(imageWidth, imageHeight);\n    const [cx, setCx] = useState(imageWidth / 2);\n    const [cy, setCy] = useState(imageHeight / 2);\n    const [ri, setRi] = useState(minLength / 4);\n    const [ro, setRo] = useState(minLength / 2);\n    const [nBins] = useState(1);\n    const [maxOrder] = useState(8);\n\n    const riHandle = {\n        x: cx - ri,\n        y: cy,\n    }\n    const roHandle = {\n        x: cx - ro,\n        y: cy,\n    }\n\n    const handleCenterChange = defaultDebounce((newCx: number, newCy: number) => {\n        setCx(newCx);\n        setCy(newCy);\n    });\n    const handleRIChange = defaultDebounce(setRi);\n    const handleROChange = defaultDebounce(setRo);\n\n    const frameViewHandles: HandleRenderFunction = (handleDragStart, handleDrop) => (<>\n        <DraggableHandle x={cx} y={cy}\n            imageWidth={imageWidth}\n            onDragMove={handleCenterChange}\n            parentOnDrop={handleDrop}\n            parentOnDragStart={handleDragStart}\n            constraint={inRectConstraint(imageWidth, imageHeight)} />\n        <DraggableHandle x={roHandle.x} y={roHandle.y}\n            imageWidth={imageWidth}\n            onDragMove={cbToRadius(cx, cy, handleROChange)}\n            parentOnDrop={handleDrop}\n            parentOnDragStart={handleDragStart}\n            constraint={roConstraints(riHandle.x, cy)} />\n        <DraggableHandle x={riHandle.x} y={riHandle.y}\n            imageWidth={imageWidth}\n            parentOnDrop={handleDrop}\n            parentOnDragStart={handleDragStart}\n            onDragMove={cbToRadius(cx, cy, handleRIChange)}\n            constraint={riConstraint(roHandle.x, cy)} />\n    </>);\n\n    const frameViewWidgets = (\n        <Ring cx={cx} cy={cy} ri={ri} ro={ro}\n            imageWidth={imageWidth} />\n    )\n\n    const {\n        frameViewTitle, frameModeSelector,\n        handles: resultHandles,\n        widgets: resultWidgets,\n    } = useDefaultFrameView({\n        scanWidth,\n        scanHeight,\n        analysisId: analysis.id,\n    })\n\n    const subtitle = (\n        <>{frameViewTitle} Ring: center=(x={cx.toFixed(2)}, y={cy.toFixed(2)}), ri={ri.toFixed(2)}, ro={ro.toFixed(2)}</>\n    )\n\n    const dispatch = useDispatch();\n\n    const runAnalysis = () => {\n        dispatch(analysisActions.Actions.run(analysis.id, 1, {\n            type: AnalysisTypes.RADIAL_FOURIER,\n            parameters: {\n                shape: \"radial_fourier\",\n                cx, cy, ri, ro,\n                n_bins: nBins,\n                max_order: maxOrder,\n            }\n        }));\n    };\n\n    const toolbar = <Toolbar analysis={analysis} onApply={runAnalysis} busyIdxs={[1]} />\n\n    return (\n        <AnalysisLayoutTwoCol\n            title=\"Radial Fourier analysis\" subtitle={subtitle}\n            left={<>\n                <ResultList\n                    extraHandles={frameViewHandles} extraWidgets={frameViewWidgets}\n                    jobIndex={0} analysis={analysis.id}\n                    width={imageWidth} height={imageHeight}\n                    selectors={frameModeSelector}\n                />\n            </>}\n            right={<>\n                <ResultList\n                    jobIndex={1} analysis={analysis.id}\n                    width={scanWidth} height={scanHeight}\n                    extraHandles={resultHandles}\n                    extraWidgets={resultWidgets}\n                />\n            </>}\n            toolbar={toolbar}\n        />\n    );\n}\n\nexport default RadialFourierAnalysis;","import * as React from \"react\";\nimport { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { defaultDebounce } from \"../../helpers\";\nimport ResultList from \"../../job/components/ResultList\";\nimport { AnalysisTypes } from \"../../messages\";\nimport { cbToRadius, inRectConstraint, riConstraint, roConstraints } from \"../../widgets/constraints\";\nimport DraggableHandle from \"../../widgets/DraggableHandle\";\nimport Ring from \"../../widgets/Ring\";\nimport { HandleRenderFunction } from \"../../widgets/types\";\nimport * as analysisActions from \"../actions\";\nimport { AnalysisProps } from \"../types\";\nimport AnalysisLayoutTwoCol from \"./AnalysisLayoutTwoCol\";\nimport useDefaultFrameView from \"./DefaultFrameView\";\nimport Toolbar from \"./Toolbar\";\n\nconst RingMaskAnalysis: React.SFC<AnalysisProps> = ({ analysis, dataset }) => {\n    const { shape } = dataset.params;\n    const [scanHeight, scanWidth, imageHeight, imageWidth] = shape;\n    const minLength = Math.min(imageWidth, imageHeight);\n\n    const [cx, setCx] = useState(imageWidth / 2);\n    const [cy, setCy] = useState(imageHeight / 2);\n    const [ri, setRi] = useState(minLength / 4);\n    const [ro, setRo] = useState(minLength / 2);\n\n    const riHandle = {\n        x: cx - ri,\n        y: cy,\n    }\n    const roHandle = {\n        x: cx - ro,\n        y: cy,\n    }\n\n    const handleCenterChange = defaultDebounce((newCx: number, newCy: number) => {\n        setCx(newCx);\n        setCy(newCy);\n    });\n    const handleRIChange = defaultDebounce(setRi);\n    const handleROChange = defaultDebounce(setRo);\n\n    const frameViewHandles: HandleRenderFunction = (handleDragStart, handleDrop) => (<>\n        <DraggableHandle x={cx} y={cy}\n            imageWidth={imageWidth}\n            onDragMove={handleCenterChange}\n            parentOnDrop={handleDrop}\n            parentOnDragStart={handleDragStart}\n            constraint={inRectConstraint(imageWidth, imageHeight)} />\n        <DraggableHandle x={roHandle.x} y={roHandle.y}\n            imageWidth={imageWidth}\n            onDragMove={cbToRadius(cx, cy, handleROChange)}\n            parentOnDrop={handleDrop}\n            parentOnDragStart={handleDragStart}\n            constraint={roConstraints(riHandle.x, cy)} />\n        <DraggableHandle x={riHandle.x} y={riHandle.y}\n            imageWidth={imageWidth}\n            parentOnDrop={handleDrop}\n            parentOnDragStart={handleDragStart}\n            onDragMove={cbToRadius(cx, cy, handleRIChange)}\n            constraint={riConstraint(roHandle.x, cy)} />\n    </>);\n\n    const frameViewWidgets = (\n        <Ring cx={cx} cy={cy} ri={ri} ro={ro}\n            imageWidth={imageWidth} />\n    )\n\n    const dispatch = useDispatch();\n\n    const runAnalysis = () => {\n        dispatch(analysisActions.Actions.run(analysis.id, 1, {\n            type: AnalysisTypes.APPLY_RING_MASK,\n            parameters: {\n                shape: \"ring\",\n                cx, cy, ri, ro,\n            }\n        }));\n    };\n\n    const {\n        frameViewTitle, frameModeSelector,\n        handles: resultHandles,\n        widgets: resultWidgets,\n    } = useDefaultFrameView({\n        scanWidth,\n        scanHeight,\n        analysisId: analysis.id,\n    })\n\n    const subtitle = (\n        <>{frameViewTitle} Ring: center=(x={cx.toFixed(2)}, y={cy.toFixed(2)}), ri={ri.toFixed(2)}, ro={ro.toFixed(2)}</>\n    )\n\n    const toolbar = <Toolbar analysis={analysis} onApply={runAnalysis} busyIdxs={[1]} />\n\n    return (\n        <AnalysisLayoutTwoCol\n            title=\"Ring analysis\" subtitle={subtitle}\n            left={<>\n                <ResultList\n                    extraHandles={frameViewHandles} extraWidgets={frameViewWidgets}\n                    jobIndex={0} analysis={analysis.id}\n                    width={imageWidth} height={imageHeight}\n                    selectors={frameModeSelector}\n                />\n            </>}\n            right={<>\n                <ResultList\n                    jobIndex={1} analysis={analysis.id}\n                    width={scanWidth} height={scanHeight}\n                    extraHandles={resultHandles}\n                    extraWidgets={resultWidgets}\n                />\n            </>}\n            toolbar={toolbar}\n        />\n    );\n}\n\nexport default RingMaskAnalysis;","import { AnalysisTypes, DatasetOpen, PickFrameDetails, SumFramesDetails } from \"../messages\";\nimport CenterOfMassAnalysis from \"./components/CenterOfMassAnalysis\";\nimport ClustAnalysis from \"./components/Clustering\";\nimport DiskMaskAnalysis from \"./components/DiskMaskAnalysis\";\nimport FEM from \"./components/FEM\";\nimport FFTAnalysis from \"./components/FFTAnalysis\";\nimport PointSelectionAnalysis from \"./components/PointSelectionAnalysis\";\nimport RadialFourierAnalysis from \"./components/RadialFourierAnalysis\";\nimport RingMaskAnalysis from \"./components/RingMaskAnalysis\";\n\n\n\nexport type AnalysisStatus = \"busy\" | \"idle\";\n\nexport type JobList = string[];\n\nexport type JobHistory = string[][];\n\nexport type FrameAnalysisDetails = PickFrameDetails | SumFramesDetails;\n\nexport interface Analysis {\n    id: string,\n    dataset: string,\n    jobs: JobList,\n    jobHistory: JobHistory,\n    mainAnalysisType: AnalysisTypes,\n}\n\n\n/**\n * AnalysisProps is the interface you should implement with your Analysis, as a functional component.\n * For example:\n * \n * const MyAnalysis: React.FunctionalComponent<AnalysisProps> = ({ analysis, dataset }) = { ... }\n * \n */\nexport interface AnalysisProps {\n    analysis: AnalysisState,\n    dataset: DatasetOpen,\n}\n\nexport type AnalysisState = Analysis & {\n};\n\nexport interface AnalysisMetadataItem {\n    desc: string,\n    title: string,\n    component?: React.FunctionComponent<AnalysisProps>,\n}\n\n/**\n * list of all analyses; those having a component will be available for selection in the UI\n * \n * please fill in a title and description, and reference your component.\n */\nexport const AnalysisMetadata: { [s: string]: AnalysisMetadataItem } = {\n    [AnalysisTypes.APPLY_RING_MASK]: {\n        desc: \"Apply a ring mask with center cx, cy; inner radius ri, outer radius ro\",\n        title: \"Ring\",\n        component: RingMaskAnalysis,\n    },\n    [AnalysisTypes.APPLY_DISK_MASK]: {\n        desc: \"Apply a disk mask with center cx, cy; radius r\",\n        title: \"Disk\",\n        component: DiskMaskAnalysis,\n    },\n    [AnalysisTypes.FEM]: {\n        desc: \"Apply a ring mask with center cx, cy; radius r\",\n        title: \"FEM (SD over Ring)\",\n        component: FEM,\n    },\n    [AnalysisTypes.CENTER_OF_MASS]: {\n        desc: \"Compute the center of mass of all diffraction images\",\n        title: \"Center of mass\",\n        component: CenterOfMassAnalysis,\n    },\n    [AnalysisTypes.APPLY_POINT_SELECTOR]: {\n        desc: \"Create an image from a single pixel selected in the detector\",\n        title: \"Point selection\",\n        component: PointSelectionAnalysis,\n    },\n    [AnalysisTypes.SUM_FRAMES]: {\n        desc: \"Create a sum of all detector frames\",\n        title: \"Sum all frames\",\n    },\n    [AnalysisTypes.SD_FRAMES]: {\n        desc: \"Create a SD of all detector frames\",\n        title: \"SD all frames\",\n    },\n    [AnalysisTypes.PICK_FRAME]: {\n        desc: \"Pick a single frame\",\n        title: \"Pick frame\",\n    },\n    [AnalysisTypes.PICK_FFT_FRAME]: {\n        desc: \"Pick a single frame\",\n        title: \"Pick frame\",\n    },\n    [AnalysisTypes.APPLY_FFT_MASK]: {\n        desc: \"Apply a ring mask with inner radius fourier_rad_in and outer radius fourier_rad_out in Fourier space\",\n        title: \"FFT analysis\",\n        component: FFTAnalysis\n    },\n    [AnalysisTypes.FFTSUM_FRAMES]: {\n        desc: \"Fourier transform of sum of all detector frames\",\n        title: \"FFT of Sum all frames\",\n    },\n    [AnalysisTypes.RADIAL_FOURIER]: {\n        desc: \"Compute a radial Fourier analysis\",\n        title: \"Radial Fourier\",\n        component: RadialFourierAnalysis,\n    },\n    [AnalysisTypes.CLUST]: {\n        desc: \"Region clustering based on non-zero order diffraction peaks positions\",\n        title: \"Clustering\",\n        component: ClustAnalysis,\n    },\n    [AnalysisTypes.SUM_SIG]: {\n        desc: \"Frame integration\",\n        title: \"Sum\",\n    },\n}","import * as React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { DatasetStatus } from \"../../messages\";\nimport { RootReducer } from \"../../store\";\nimport { AnalysisMetadata, AnalysisState } from \"../types\";\n\ninterface AnalysisDispatcherProps {\n    analysis: AnalysisState,\n}\n\nconst AnalysisDispatcherComponent: React.SFC<AnalysisDispatcherProps> = ({ analysis }) => {\n    const dataset = useSelector((state: RootReducer) => state.datasets.byId[analysis.dataset])\n\n    if (dataset.status !== DatasetStatus.OPEN) {\n        return null;\n    }\n\n    const AnalysisComponent = AnalysisMetadata[analysis.mainAnalysisType].component;\n    if (!AnalysisComponent) {\n        throw new Error(\"unknown analysis type\");\n    }\n\n    return <AnalysisComponent dataset={dataset} analysis={analysis} />;\n}\n\nexport default AnalysisDispatcherComponent;","import * as React from \"react\";\nimport { AnalysisReducerState } from \"../reducers\";\nimport Analysis from \"./Analysis\";\n\ninterface AnalysisProps {\n    analyses: AnalysisReducerState,\n}\n\nconst AnalysisList: React.SFC<AnalysisProps> = ({ analyses }) => {\n    return (<>{\n        analyses.ids.map(analysisId => <Analysis key={analysisId} analysis={analyses.byId[analysisId]} />)\n    }</>);\n}\n\nexport default AnalysisList;","interface IdMap<R> {\n    [s: string]: R\n}\n\nexport interface ById<R> {\n    ids: string[],\n    byId: IdMap<R>,\n};\n\n// TODO: make ById DeepReadonly\n// import { DeepReadonly } from 'utility-types'\n\nexport function updateById<R>(state: ById<R>, id: string, partialRecord: Partial<R>): ById<R> {\n    const newObj = Object.assign({}, state.byId[id], partialRecord);\n    const newById = Object.assign({}, state.byId, { [id]: newObj });\n    return Object.assign({}, state, { byId: newById });\n}\n\nexport function insertById<R>(state: ById<R>, id: string, record: R): ById<R> {\n    const newById = Object.assign({}, state.byId, { [id]: record });\n    const newIds = [...state.ids, id];\n    return { byId: newById, ids: newIds };\n}\n\nexport function constructById<R>(items: R[], key: (k: R) => string): IdMap<R> {\n    const byId = items.reduce((acc, item) => Object.assign(acc, {\n        [key(item)]: item,\n    }), {} as IdMap<R>);\n    return byId;\n}\n\nexport type Predicate<R> = (item: R) => boolean;\n\nexport function filterWithPred<R>(state: ById<R>, pred: Predicate<R>): ById<R> {\n    const ids = state.ids.filter(id => pred(state.byId[id]));\n    const byId: IdMap<R> = ids.reduce((acc, id) => Object.assign(acc, {\n        [id]: state.byId[id],\n    }), {});\n    return {\n        byId,\n        ids,\n    };\n}","import * as React from \"react\";\nimport { Dropdown, DropdownItemProps } from \"semantic-ui-react\";\nimport { getEnumValues } from \"../../helpers\";\nimport { AnalysisTypes } from \"../../messages\";\nimport { AnalysisMetadata, AnalysisMetadataItem } from \"../types\";\n\n// keyof typeof: https://stackoverflow.com/a/42623905/540644\nconst getMetadata = (typeName: keyof typeof AnalysisTypes): AnalysisMetadataItem => {\n    const type: AnalysisTypes = AnalysisTypes[typeName];\n    return AnalysisMetadata[type]\n}\n\nconst analysisTypeKeys = getEnumValues(AnalysisTypes);\nconst analysisTypeOptions = analysisTypeKeys.filter(t => getMetadata(t).component !== undefined).map(t => ({\n    text: getMetadata(t).title,\n    value: AnalysisTypes[t],\n}));\n\ninterface AnalysisSelectProps {\n    onClick: (analysisType: AnalysisTypes) => void,\n    label: string,\n}\n\nconst selectData = (fn: (v: AnalysisTypes) => void) => (e: React.MouseEvent, data: DropdownItemProps) => {\n    return fn(data.value as AnalysisTypes);\n}\n\nconst AnalysisSelect: React.SFC<AnalysisSelectProps> = ({ onClick, label }) => {\n    return (\n        <Dropdown text={label} icon='add' floating={true} labeled={true} button={true} className='icon'>\n            <Dropdown.Menu>\n                <Dropdown.Header content='implemented analyses' />\n                {analysisTypeOptions.map(option => <Dropdown.Item key={option.value} onClick={selectData(onClick)} {...option} />)}\n            </Dropdown.Menu>\n        </Dropdown>\n    );\n}\n\nexport default AnalysisSelect;","import { ActionsUnion, createAction } from '../helpers/actionHelpers';\nimport { DatasetCreateParams, DatasetFormParams, DatasetState } from '../messages';\n\nexport enum ActionTypes {\n    OPEN = 'DATASET_OPEN',\n    CANCEL_OPEN = 'DATASET_CANCEL_OPEN',\n    CREATE = 'DATASET_CREATE',\n    CREATED = 'DATASET_CREATED',\n    ERROR = 'DATASET_ERROR',\n    DELETE = 'DATASET_DELETE',\n    DELETED = 'DATASET_DELETED',\n    DETECT = 'DATASET_DETECT',\n    DETECTED = 'DATASET_DETECTED',\n    DETECT_FAILED = 'DATASET_DETECT_FAILED',\n}\n\nexport const Actions = {\n    open: (path: string, cachedParams?: DatasetFormParams, detectedParams?: DatasetFormParams) => createAction(ActionTypes.OPEN, { path, cachedParams, detectedParams }),\n    cancelOpen: () => createAction(ActionTypes.CANCEL_OPEN),\n    create: (dataset: DatasetCreateParams) => createAction(ActionTypes.CREATE, { dataset }),\n    created: (dataset: DatasetState) => createAction(ActionTypes.CREATED, { dataset }),\n    error: (dataset: string, msg: string, timestamp: number, id: string) => createAction(ActionTypes.ERROR, { dataset, msg, timestamp, id }),\n    delete: (dataset: string) => createAction(ActionTypes.DELETE, { dataset }),\n    deleted: (dataset: string) => createAction(ActionTypes.DELETED, { dataset }),\n    detect: (path: string) => createAction(ActionTypes.DETECT, { path }),\n    detected: (path: string, params: DatasetFormParams) => createAction(ActionTypes.DETECTED, { path, params }),\n    detectFailed: (path: string) => createAction(ActionTypes.DETECT_FAILED, { path }),\n}\n\nexport type Actions = ActionsUnion<typeof Actions>;\n","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport * as analysisActions from \"../../analysis/actions\";\nimport AnalysisSelect from \"../../analysis/components/AnalysisSelect\";\nimport { AnalysisTypes, DatasetState } from \"../../messages\";\n\ninterface DatasetProps {\n    dataset: DatasetState\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch, ownProps: DatasetProps) => {\n    return {\n        handleAddAnalysis: (type: AnalysisTypes) => {\n            dispatch(analysisActions.Actions.create(ownProps.dataset.id, type));\n        },\n    }\n}\ntype MergedProps = DatasetProps & ReturnType<typeof mapDispatchToProps>;\n\nconst AddAnalysis: React.SFC<MergedProps> = ({ handleAddAnalysis }) => {\n    return <AnalysisSelect onClick={handleAddAnalysis} label='Add analysis' />\n}\n\n\nexport default connect(null, mapDispatchToProps)(AddAnalysis);","import * as React from \"react\";\nimport { Table } from \"semantic-ui-react\";\nimport { DatasetState } from \"../../messages\";\n\ninterface DatasetProps {\n    dataset: DatasetState\n}\n\nconst renderParamValue = (value: any) => {\n    if (value instanceof Array) {\n        return `(${value.join(\",\")})`;\n    } else {\n        return value;\n    }\n}\n\nconst renderParams = (params: any) => {\n    return Object.keys(params).map((key: string, idx: number) => {\n        return (\n            <Table.Row key={idx}>\n                <Table.Cell>{key}</Table.Cell>\n                <Table.Cell>{renderParamValue(params[key])}</Table.Cell>\n            </Table.Row>\n        );\n    })\n}\n\n\nconst DatasetParams: React.SFC<DatasetProps> = ({ dataset }) => {\n    return (\n        <Table>\n            <Table.Header>\n                <Table.Row>\n                    <Table.HeaderCell>Parameter</Table.HeaderCell>\n                    <Table.HeaderCell>Value</Table.HeaderCell>\n                </Table.Row>\n            </Table.Header>\n            <Table.Body>\n                {renderParams(dataset.params)}\n            </Table.Body>\n        </Table>\n    );\n}\n\n\nexport default DatasetParams;","import * as React from \"react\";\nimport { Table } from \"semantic-ui-react\";\nimport { DatasetOpen, DiagElemMsg } from \"../../messages\";\nimport DatasetParams from \"./DatasetParams\";\n\ninterface DatasetInfoProps {\n    dataset: DatasetOpen,\n}\n\nconst renderValue = (elem: DiagElemMsg) => {\n    if (elem.value instanceof Array) {\n        return <DiagElems diagnostics={elem.value} />\n    } else {\n        return elem.value;\n    }\n}\n\nconst DiagElem: React.SFC<{ elem: DiagElemMsg }> = ({ elem }) => {\n    return (\n        <Table.Row>\n            <Table.Cell>{elem.name}</Table.Cell>\n            <Table.Cell>{renderValue(elem)}</Table.Cell>\n        </Table.Row>\n    )\n}\n\nconst DiagElems: React.SFC<{ diagnostics: DiagElemMsg[] }> = ({ diagnostics }) => {\n    if (diagnostics.length === 0) {\n        return null;\n    }\n    return (\n        <Table>\n            <Table.Header>\n                <Table.Row>\n                    <Table.HeaderCell>Name</Table.HeaderCell>\n                    <Table.HeaderCell>Value</Table.HeaderCell>\n                </Table.Row>\n            </Table.Header>\n            <Table.Body>\n                {diagnostics.map((elem, idx) => (\n                    <DiagElem elem={elem} key={idx} />\n                ))}\n            </Table.Body>\n        </Table>\n    );\n}\n\nconst DatasetInfo: React.SFC<DatasetInfoProps> = ({ dataset }) => {\n    return (\n        <>\n            <DatasetParams dataset={dataset} />\n            <DiagElems diagnostics={dataset.diagnostics} />\n        </>\n    );\n}\n\nexport default DatasetInfo;","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { Button } from \"semantic-ui-react\";\nimport { DatasetState } from \"../../messages\";\nimport * as datasetActions from \"../actions\";\n\ninterface DatasetProps {\n    dataset: DatasetState,\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch, ownProps: DatasetProps) => {\n    return {\n        handleRemoveDataset: () => {\n            dispatch(datasetActions.Actions.delete(ownProps.dataset.id));\n        }\n    }\n}\n\ntype MergedProps = DatasetProps & ReturnType<typeof mapDispatchToProps>;\n\nconst DatasetToolbar: React.SFC<MergedProps> = ({ dataset, handleRemoveDataset }) => {\n    return (\n        <>\n            <Button icon=\"remove\" labelPosition=\"left\" onClick={handleRemoveDataset} content='Close Dataset' />\n        </>\n    );\n}\n\n\nexport default connect(null, mapDispatchToProps)(DatasetToolbar);","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Header, Icon, Message, Modal, Popup, Segment } from 'semantic-ui-react';\nimport AnalysisList from \"../../analysis/components/AnalysisList\";\nimport { AnalysisState } from \"../../analysis/types\";\nimport { filterWithPred } from \"../../helpers/reducerHelpers\";\nimport { DatasetState, DatasetStatus } from \"../../messages\";\nimport { RootReducer } from \"../../store\";\nimport AddAnalysis from \"./AddAnalysis\";\nimport DatasetInfo from \"./DatasetInfo\";\nimport DatasetToolbar from \"./DatasetToolbar\";\n\ninterface DatasetProps {\n    dataset: DatasetState\n}\n\nconst mapStateToProps = (state: RootReducer, ownProps: DatasetProps) => {\n    const p = (analysis: AnalysisState) => analysis.dataset === ownProps.dataset.id;\n    return {\n        analyses: filterWithPred(state.analyses, p),\n    }\n}\n\ntype MergedProps = DatasetProps & ReturnType<typeof mapStateToProps>;\n\nconst DatasetComponent: React.SFC<MergedProps> = ({ dataset, analyses }) => {\n    const msg = {\n        [DatasetStatus.OPENING]: `Opening dataset ${dataset.params.name}`,\n        [DatasetStatus.DELETING]: `Closing dataset ${dataset.params.name}`,\n    }\n    if (dataset.status === DatasetStatus.OPENING || dataset.status === DatasetStatus.DELETING) {\n        return (\n            <>\n                <Header as=\"h2\" dividing={true}>{dataset.params.name}</Header>\n                <Message icon={true}>\n                    <Icon name='cog' loading={true} />\n                    <Message.Content>\n                        <Message.Header>{msg[dataset.status]}</Message.Header>\n                    </Message.Content>\n                </Message>\n            </>\n        );\n    }\n\n    return (\n        <Segment.Group style={{ marginTop: \"3em\", marginBottom: \"3em\" }}>\n            <Segment.Group horizontal={true}>\n                <Segment>\n                    <Header as=\"h2\">\n                        <Icon name=\"database\" />\n                        <Modal trigger={\n                            <Header.Content>\n                                {dataset.params.name}\n                                {' '}\n                                <Icon name=\"info circle\" size=\"small\" link={true} />\n                            </Header.Content>\n                        }>\n                            <Popup.Header>{dataset.params.type} Dataset {dataset.params.name}</Popup.Header>\n                            <Popup.Content>\n                                <DatasetInfo dataset={dataset} />\n                            </Popup.Content>\n                        </Modal>\n                    </Header>\n                </Segment>\n                <Segment style={{ flexShrink: 1, flexGrow: 0 }}>\n                    <DatasetToolbar dataset={dataset} />\n                </Segment>\n            </Segment.Group>\n            {\n                analyses.ids.length > 0 ? (\n                    <>\n                        <Segment>\n                            <AnalysisList analyses={analyses} />\n                        </Segment>\n                    </>\n                ) : null\n            }\n            <Segment textAlign=\"center\">\n                <AddAnalysis dataset={dataset} />\n            </Segment>\n        </Segment.Group>\n    );\n}\n\nconst DatasetContainer = connect(mapStateToProps)(DatasetComponent);\n\nexport default DatasetContainer;","import { DataSetOpenSchemaResponse, DeleteDatasetResponse, DetectDatasetResponse, OpenDatasetRequest, OpenDatasetResponse } from \"../messages\";\n\nexport function openDataset(id: string, dataset: OpenDatasetRequest): Promise<OpenDatasetResponse> {\n    return fetch(`/api/datasets/${id}/`, {\n        body: JSON.stringify(dataset),\n        credentials: \"same-origin\",\n        method: \"PUT\",\n    }).then(r => r.json());\n}\n\nexport function deleteDataset(id: string): Promise<DeleteDatasetResponse> {\n    return fetch(`/api/datasets/${id}/`, {\n        credentials: \"same-origin\",\n        method: \"DELETE\",\n    }).then(r => r.json());\n}\n\n\nexport function detectDataset(path: string): Promise<DetectDatasetResponse> {\n    return fetch(`/api/datasets/detect/?path=${encodeURIComponent(path)}`, {\n        credentials: \"same-origin\",\n        method: \"GET\",\n    }).then(r => r.json());\n}\n\ninterface SchemaCache {\n    [type: string]: DataSetOpenSchemaResponse,\n}\n\nconst schemaCache: SchemaCache = {};\n\nexport async function getSchema(type: string): Promise<DataSetOpenSchemaResponse> {\n    const cached = schemaCache[type];\n    if (cached) {\n        return new Promise((resolve) => resolve(cached));\n    } else {\n        const r = await fetch(`/api/datasets/schema/?type=${encodeURIComponent(type)}`, {\n            credentials: \"same-origin\",\n            method: \"GET\",\n        });\n        const schemaResponse = await r.json();\n        schemaCache[type] = schemaResponse;\n        return schemaResponse;\n    }\n}","import Ajv, { ErrorObject } from 'ajv';\nimport { FormikErrors, FormikValues } from 'formik';\nimport { DataSetOpenSchemaResponse } from '../messages';\nimport { getSchema } from './api';\n\nexport function convertErrors(errors: ErrorObject[]): FormikErrors<FormikValues> {\n    const res: FormikErrors<FormikValues> = {};\n    errors.forEach(err => {\n        // flatten field names, convert from array to object\n        // FIXME: doesn't support multiple errors per field yet (formik limitation?)\n        const expr = /^\\.([^[]+)(\\[[^]+\\])?$/\n        const fieldName = err.dataPath.replace(expr, (match, plainName) => {\n            return plainName;\n        });\n        res[fieldName] = err.message;\n    });\n    return res;\n}\n\nexport async function validateOpen(type: string, data: object) {\n    return getSchema(type).then((schemaResponse: DataSetOpenSchemaResponse) => {\n        if (schemaResponse.status === \"error\") {\n            throw new Error(schemaResponse.msg);\n        }\n        // FIXME: cache compiled schema\n        const schema = schemaResponse.schema;\n        const ajv = new Ajv();\n        const validate = ajv.compile(schema);\n        const valid = validate(data);\n        if (!valid) {\n            if (validate.errors) {\n                const converted = convertErrors(validate.errors);\n                throw converted;\n            } else {\n                throw new Error(\"unspecified error while validating fields\");\n            }\n        }\n    })\n}","import { withFormik } from \"formik\";\nimport { DatasetTypes } from \"../messages\";\nimport { OpenFormProps } from \"./types\";\nimport { validateOpen } from \"./validate\";\n\nexport function parseNumList(nums: string) {\n    return nums.split(\",\").filter(part => part.trim() !== \"\").map(part => +part);\n}\n\nexport function getInitial<T extends object, K extends keyof T, V>(key: K, otherwise: V, values?: T): V | T[K] {\n    if (!values) {\n        return otherwise;\n    }\n    const res = values[key] !== undefined ? values[key] : otherwise;\n    return res;\n}\n\ntype FormToJsonFn<SubmitParams, FormParams> = (inParams: FormParams, path: string) => SubmitParams;\ntype PropsToValuesFn<SubmitParams, FormParams> = (props: OpenFormProps<SubmitParams>) => FormParams;\n\ninterface WithValidationOpts<SubmitParams extends object, FormParams> {\n    formToJson: FormToJsonFn<SubmitParams, FormParams>,\n    mapPropsToValues: PropsToValuesFn<SubmitParams, FormParams>,\n    type: DatasetTypes,\n    // WrappedComponent: React.FunctionComponent<FormikProps<FormParams> & OpenFormProps<SubmitParams>>\n}\n\nexport function withValidation<SubmitParams extends object, FormParams>(\n    opts: WithValidationOpts<SubmitParams, FormParams>\n) {\n    return withFormik<OpenFormProps<SubmitParams>, FormParams>({\n        mapPropsToValues: opts.mapPropsToValues,\n        handleSubmit: (values, formikBag) => {\n            const { onSubmit, path } = formikBag.props;\n            const submitData = opts.formToJson(values, path);\n            onSubmit(submitData);\n            formikBag.setSubmitting(false);\n        },\n        validate: (values, props) => {\n            return validateOpen(opts.type, opts.formToJson(values, props.path));\n        },\n        enableReinitialize: true,\n        validateOnChange: true,\n        validateOnBlur: true,\n    });\n}","import { ErrorMessage, Field, FormikProps } from \"formik\";\nimport * as React from \"react\";\nimport { Button, Form } from \"semantic-ui-react\";\nimport { Omit } from \"../../helpers/types\";\nimport { DatasetParamsBLO, DatasetTypes } from \"../../messages\";\nimport { getInitial, parseNumList, withValidation } from \"../helpers\";\nimport { OpenFormProps } from \"../types\";\n\n// some fields have different types in the form vs. in messages\ntype DatasetParamsBLOForForm = Omit<DatasetParamsBLO,\n    \"path\"\n    | \"type\"\n    | \"tileshape\"> & {\n        tileshape: string,\n    };\n\ntype MergedProps = FormikProps<DatasetParamsBLOForForm> & OpenFormProps<DatasetParamsBLO>;\n\nconst BLOFileParamsForm: React.SFC<MergedProps> = ({\n    values,\n    touched,\n    errors,\n    dirty,\n    isSubmitting,\n    handleChange,\n    handleBlur,\n    handleSubmit,\n    handleReset,\n    isValidating,\n    onCancel,\n}) => {\n    return (\n        <Form onSubmit={handleSubmit}>\n            <Form.Field>\n                <label htmlFor=\"id_name\">Name:</label>\n                <ErrorMessage name=\"name\" />\n                <Field name=\"name\" id=\"id_name\" />\n            </Form.Field>\n            <Form.Field>\n                <label htmlFor=\"id_tileshape\">Tileshape:</label>\n                <ErrorMessage name=\"tileshape\" />\n                <Field name=\"tileshape\" id=\"id_tileshape\" />\n            </Form.Field>\n\n            <Button primary={true} type=\"submit\" disabled={isSubmitting || isValidating}>Load Dataset</Button>\n            <Button type=\"button\" onClick={onCancel}>Cancel</Button>\n            <Button type=\"button\" onClick={handleReset}>Reset</Button>\n        </Form>\n    )\n}\n\nexport default withValidation<DatasetParamsBLO, DatasetParamsBLOForForm>({\n    mapPropsToValues: ({ initial }) => ({\n        name: getInitial(\"name\", \"\", initial),\n        tileshape: getInitial(\"tileshape\", \"1, 8, 128, 128\", initial).toString(),\n    }),\n    formToJson: (values, path) => {\n        return {\n            path,\n            type: DatasetTypes.BLO,\n            name: values.name,\n            tileshape: parseNumList(values.tileshape),\n        };\n    },\n    type: DatasetTypes.BLO,\n})(BLOFileParamsForm);\n","import * as React from \"react\";\nimport { Dropdown, DropdownProps } from \"semantic-ui-react\";\nimport { getEnumValues } from \"../../helpers\";\nimport { DatasetTypes } from \"../../messages\";\n\n\nconst datasetTypeKeys = getEnumValues(DatasetTypes);\nconst datasetTypeOptions = datasetTypeKeys.map(t => ({\n    // text: DatasetTypeMetadata[DatasetTypes[t as any]].short,\n    text: DatasetTypes[t],\n    value: DatasetTypes[t],\n}));\n\ninterface DatasetTypeSelectProps {\n    onClick: (e: React.SyntheticEvent, data: DropdownProps) => void,\n    currentType: DatasetTypes,\n}\n\nconst DatasetTypeSelect: React.SFC<DatasetTypeSelectProps> = ({ currentType, onClick }) => {\n    return (\n        <>\n            <Dropdown\n                inline={true}\n                options={datasetTypeOptions}\n                value={currentType}\n                onChange={onClick}\n            />\n        </>\n    );\n}\n\nexport default DatasetTypeSelect;","import { ErrorMessage, Field, FormikProps } from \"formik\";\nimport * as React from \"react\";\nimport { Button, Form } from \"semantic-ui-react\";\nimport { Omit } from \"../../helpers/types\";\nimport { DatasetParamsEMPAD, DatasetTypes } from \"../../messages\";\nimport { getInitial, parseNumList, withValidation } from \"../helpers\";\nimport { OpenFormProps } from \"../types\";\n\n// some fields have different types in the form vs. in messages\ntype DatasetParamsEMPADForForm = Omit<DatasetParamsEMPAD,\n    \"path\"\n    | \"type\"\n    | \"scan_size\"\n> & {\n    scan_size: string,\n};\n\ntype MergedProps = FormikProps<DatasetParamsEMPADForForm> & OpenFormProps<DatasetParamsEMPAD>;\n\nconst RawFileParamsForm: React.SFC<MergedProps> = ({\n    values,\n    touched,\n    errors,\n    dirty,\n    isSubmitting,\n    handleChange,\n    handleBlur,\n    handleSubmit,\n    handleReset,\n    onCancel,\n}) => {\n    return (\n        <Form onSubmit={handleSubmit}>\n            <Form.Field>\n                <label htmlFor=\"id_name\">Name:</label>\n                <ErrorMessage name=\"name\" />\n                <Field name=\"name\" id=\"id_name\" />\n            </Form.Field>\n            <Form.Field>\n                <label htmlFor=\"id_scan_size\">Scan Size:</label>\n                <ErrorMessage name=\"scan_size\" />\n                <Field name=\"scan_size\" id=\"id_scan_size\" />\n            </Form.Field>\n            <Button primary={true} type=\"submit\" disabled={isSubmitting}>Load Dataset</Button>\n            <Button type=\"button\" onClick={onCancel}>Cancel</Button>\n            <Button type=\"button\" onClick={handleReset}>Reset</Button>\n        </Form>\n    )\n}\n\nexport default withValidation<DatasetParamsEMPAD, DatasetParamsEMPADForForm>({\n    mapPropsToValues: ({ initial }) => ({\n        name: getInitial(\"name\", \"\", initial),\n        scan_size: getInitial(\"scan_size\", \"\", initial).toString(),\n    }),\n    formToJson: (values, path) => {\n        return {\n            path,\n            type: DatasetTypes.EMPAD,\n            name: values.name,\n            scan_size: parseNumList(values.scan_size),\n        };\n    },\n    type: DatasetTypes.EMPAD,\n})(RawFileParamsForm);\n\n","import { ErrorMessage, Field, FormikProps } from \"formik\";\nimport * as React from \"react\";\nimport { Button, Form } from \"semantic-ui-react\";\nimport { Omit } from \"../../helpers/types\";\nimport { DatasetParamsFRMS6, DatasetTypes } from \"../../messages\";\nimport { getInitial, withValidation } from \"../helpers\";\nimport { OpenFormProps } from \"../types\";\n\n\n// some fields have different types in the form vs. in messages\ntype DatasetParamsFRMS6ForForm = Omit<DatasetParamsFRMS6,\n    \"path\" | \"type\">;\n\ntype MergedProps = FormikProps<DatasetParamsFRMS6ForForm> & OpenFormProps<DatasetParamsFRMS6>;\nconst FRMS6ParamsForm: React.SFC<MergedProps> = ({\n    values,\n    touched,\n    errors,\n    dirty,\n    isSubmitting,\n    handleChange,\n    handleBlur,\n    handleSubmit,\n    handleReset,\n    onCancel,\n}) => {\n    return (\n        <Form onSubmit={handleSubmit}>\n            <Form.Field>\n                <label htmlFor=\"id_name\">Name:</label>\n                <ErrorMessage name=\"name\" />\n                <Field name=\"name\" id=\"id_name\" />\n            </Form.Field>\n\n            <Button primary={true} type=\"submit\" disabled={isSubmitting}>Load Dataset</Button>\n            <Button type=\"button\" onClick={onCancel}>Cancel</Button>\n            <Button type=\"button\" onClick={handleReset}>Reset</Button>\n        </Form>\n    )\n}\n\nexport default withValidation<DatasetParamsFRMS6, DatasetParamsFRMS6ForForm>({\n    mapPropsToValues: ({ initial }) => ({\n        name: getInitial(\"name\", \"\", initial),\n    }),\n    formToJson: (values, path) => {\n        return {\n            path,\n            type: DatasetTypes.FRMS6,\n            name: values.name,\n        };\n    },\n    type: DatasetTypes.FRMS6,\n})(FRMS6ParamsForm);\n","import { ErrorMessage, Field, FormikProps } from \"formik\";\nimport * as React from \"react\";\nimport { Button, Form } from \"semantic-ui-react\";\nimport { Omit } from \"../../helpers/types\";\nimport { DatasetParamsHDF5, DatasetTypes } from \"../../messages\";\nimport { getInitial, parseNumList, withValidation } from \"../helpers\";\nimport { OpenFormProps } from \"../types\";\n\ntype DatasetParamsHDF5ForForm = Omit<DatasetParamsHDF5, \"path\" | \"type\" | \"tileshape\"> & { tileshape: string, };\n\ntype MergedProps = FormikProps<DatasetParamsHDF5ForForm> & OpenFormProps<DatasetParamsHDF5>;\n\nconst HDF5ParamsForm: React.SFC<MergedProps> = ({\n    values,\n    touched,\n    errors,\n    dirty,\n    isSubmitting,\n    handleChange,\n    handleBlur,\n    handleSubmit,\n    handleReset,\n    onCancel,\n}) => {\n    return (\n        <Form onSubmit={handleSubmit}>\n            <Form.Field>\n                <label htmlFor=\"id_name\">Name:</label>\n                <ErrorMessage name=\"name\" />\n                <Field name=\"name\" id=\"id_name\" />\n            </Form.Field>\n            <Form.Field>\n                <label htmlFor=\"id_ds_path\">HDF5 Dataset Path:</label>\n                <ErrorMessage name=\"ds_path\" />\n                <Field name=\"ds_path\" id=\"id_ds_path\" />\n            </Form.Field>\n            <Form.Field>\n                <label htmlFor=\"id_tileshape\">Tileshape:</label>\n                <ErrorMessage name=\"tileshape\" />\n                <Field name=\"tileshape\" id=\"id_tileshape\" />\n            </Form.Field>\n            <Button primary={true} type=\"submit\" disabled={isSubmitting}>Load Dataset</Button>\n            <Button onClick={onCancel} >Cancel</Button>\n            <Button type=\"button\" onClick={handleReset}>Reset</Button>\n        </Form>\n    )\n}\n\nexport default withValidation<DatasetParamsHDF5, DatasetParamsHDF5ForForm>({\n    mapPropsToValues: ({ initial }) => ({\n        name: getInitial(\"name\", \"\", initial),\n        tileshape: getInitial(\"tileshape\", \"1, 8, 128, 128\", initial).toString(),\n        ds_path: getInitial(\"ds_path\", \"\", initial),\n    }),\n    formToJson: (values, path) => {\n        return {\n            path,\n            type: DatasetTypes.HDF5,\n            name: values.name,\n            ds_path: values.ds_path,\n            tileshape: parseNumList(values.tileshape),\n        };\n    },\n    type: DatasetTypes.HDF5,\n})(HDF5ParamsForm);","import { ErrorMessage, Field, FormikProps } from \"formik\";\nimport * as React from \"react\";\nimport { Button, Form } from \"semantic-ui-react\";\nimport { Omit } from \"../../helpers/types\";\nimport { DatasetParamsK2IS, DatasetTypes } from \"../../messages\";\nimport { getInitial, withValidation } from \"../helpers\";\nimport { OpenFormProps } from \"../types\";\n\n// some fields have different types in the form vs. in messages\ntype DatasetParamsK2ISForForm = Omit<DatasetParamsK2IS,\n    \"path\" | \"type\">;\n\ntype MergedProps = FormikProps<DatasetParamsK2ISForForm> & OpenFormProps<DatasetParamsK2IS>;\n\nconst K2ISFileParamsForm: React.SFC<MergedProps> = ({\n    values,\n    touched,\n    errors,\n    dirty,\n    isSubmitting,\n    handleChange,\n    handleBlur,\n    handleSubmit,\n    handleReset,\n    onCancel,\n}) => {\n    return (\n        <Form onSubmit={handleSubmit}>\n            <Form.Field>\n                <label htmlFor=\"id_name\">Name:</label>\n                <ErrorMessage name=\"name\" />\n                <Field name=\"name\" id=\"id_name\" />\n            </Form.Field>\n\n            <Button primary={true} type=\"submit\" disabled={isSubmitting}>Load Dataset</Button>\n            <Button type=\"button\" onClick={onCancel}>Cancel</Button>\n            <Button type=\"button\" onClick={handleReset}>Reset</Button>\n        </Form>\n    )\n}\n\nexport default withValidation<DatasetParamsK2IS, DatasetParamsK2ISForForm>({\n    mapPropsToValues: ({ initial }) => ({\n        name: getInitial(\"name\", \"\", initial),\n    }),\n    formToJson: (values, path) => {\n        return {\n            path,\n            type: DatasetTypes.K2IS,\n            name: values.name,\n        }\n    },\n    type: DatasetTypes.K2IS,\n})(K2ISFileParamsForm);\n","import { ErrorMessage, Field, FormikProps } from \"formik\";\nimport * as React from \"react\";\nimport { Button, Form } from \"semantic-ui-react\";\nimport { Omit } from \"../../helpers/types\";\nimport { DatasetParamsMIB, DatasetTypes } from \"../../messages\";\nimport { getInitial, parseNumList, withValidation } from \"../helpers\";\nimport { OpenFormProps } from \"../types\";\n\n// some fields have different types in the form vs. in messages\ntype DatasetParamsMIBForForm = Omit<DatasetParamsMIB,\n    \"path\"\n    | \"type\"\n    | \"tileshape\"\n    | \"scan_size\"\n> & {\n    tileshape: string,\n    scan_size: string,\n};\n\ntype FormValues = DatasetParamsMIBForForm\n\ntype MergedProps = FormikProps<FormValues> & OpenFormProps<DatasetParamsMIB>;\n\nconst MIBFileParamsForm: React.SFC<MergedProps> = ({\n    values,\n    touched,\n    errors,\n    dirty,\n    isSubmitting,\n    handleChange,\n    handleBlur,\n    handleSubmit,\n    handleReset,\n    isValidating,\n    onCancel,\n}) => {\n    return (\n        <Form onSubmit={handleSubmit}>\n            <Form.Field>\n                <label htmlFor=\"id_name\">Name:</label>\n                <ErrorMessage name=\"name\" />\n                <Field name=\"name\" id=\"id_name\" />\n            </Form.Field>\n            <Form.Field>\n                <label htmlFor=\"id_tileshape\">Tileshape:</label>\n                <ErrorMessage name=\"tileshape\" />\n                <Field name=\"tileshape\" id=\"id_tileshape\" />\n            </Form.Field>\n            <Form.Field>\n                <label htmlFor=\"id_scan_size\">Scan Size:</label>\n                <ErrorMessage name=\"scan_size\" />\n                <Field name=\"scan_size\" id=\"id_scan_size\" />\n            </Form.Field>\n            <Button primary={true} type=\"submit\" disabled={isSubmitting || isValidating}>Load Dataset</Button>\n            <Button type=\"button\" onClick={onCancel}>Cancel</Button>\n            <Button type=\"button\" onClick={handleReset}>Reset</Button>\n        </Form>\n    )\n}\n\nexport default withValidation<DatasetParamsMIB, DatasetParamsMIBForForm>({\n    formToJson: (values, path) => {\n        return {\n            path,\n            type: DatasetTypes.MIB,\n            name: values.name,\n            tileshape: parseNumList(values.tileshape),\n            scan_size: parseNumList(values.scan_size),\n        }\n    },\n    mapPropsToValues: ({ initial }) => ({\n        name: getInitial(\"name\", \"\", initial),\n        tileshape: getInitial(\"tileshape\", \"1, 8, 256, 256\", initial).toString(),\n        scan_size: getInitial(\"scan_size\", \"\", initial).toString(),\n    }),\n    type: DatasetTypes.MIB,\n})(MIBFileParamsForm);\n","import { ErrorMessage, Field, FormikProps } from \"formik\";\nimport * as React from \"react\";\nimport { Button, Form } from \"semantic-ui-react\";\nimport { Omit } from \"../../helpers/types\";\nimport { DatasetParamsRaw, DatasetTypes } from \"../../messages\";\nimport { getInitial, parseNumList, withValidation } from \"../helpers\";\nimport { OpenFormProps } from \"../types\";\n\n// some fields have different types in the form vs. in messages\ntype DatasetParamsRawForForm = Omit<DatasetParamsRaw,\n    \"type\"\n    | \"path\"\n    | \"tileshape\"\n    | \"scan_size\"\n    | \"detector_size\"> & {\n        tileshape: string,\n        scan_size: string\n        detector_size: string,\n    };\n\ntype MergedProps = FormikProps<DatasetParamsRawForForm> & OpenFormProps<DatasetParamsRaw>;\n\nconst RawFileParamsForm: React.SFC<MergedProps> = ({\n    values,\n    touched,\n    errors,\n    dirty,\n    isSubmitting,\n    handleChange,\n    handleBlur,\n    handleSubmit,\n    handleReset,\n    onCancel,\n}) => {\n    return (\n        <Form onSubmit={handleSubmit}>\n            <Form.Field>\n                <label htmlFor=\"id_name\">Name:</label>\n                <ErrorMessage name=\"name\" />\n                <Field name=\"name\" id=\"id_name\" />\n            </Form.Field>\n            <Form.Field>\n                <label htmlFor=\"id_tileshape\">Tileshape:</label>\n                <ErrorMessage name=\"tileshape\" />\n                <Field name=\"tileshape\" id=\"id_tileshape\" />\n            </Form.Field>\n            <Form.Field>\n                <label htmlFor=\"id_scan_size\">Scan Size:</label>\n                <ErrorMessage name=\"scan_size\" />\n                <Field name=\"scan_size\" id=\"id_scan_size\" />\n            </Form.Field>\n            <Form.Field>\n                <label htmlFor=\"id_dtype\">Datatype (uint16, uint32, float32, float64, &gt;u2, ..., can be anything that is <a href=\"https://docs.scipy.org/doc/numpy-1.15.1/reference/arrays.dtypes.html\">understood by numpy as a dtype</a>):</label>\n                <ErrorMessage name=\"dtype\" />\n                <Field name=\"dtype\" id=\"id_dtype\" />\n            </Form.Field>\n\n            <Form.Field>\n                <label htmlFor=\"id_detector_size\">Detector Size (pixels, example: 256,256):</label>\n                <ErrorMessage name=\"detector_size\" />\n                <Field name=\"detector_size\" id=\"id_detector_size\" />\n            </Form.Field>\n            <Form.Field>\n                <label htmlFor=\"id_enable_direct\">Enable Direct I/O (for usage with fast SSDs and files much larger than RAM):</label>\n                <ErrorMessage name=\"enable_direct\" />\n                <Field type=\"checkbox\" name=\"enable_direct\" id=\"id_enable_direct\" />\n            </Form.Field>\n            <Button primary={true} type=\"submit\" disabled={isSubmitting}>Load Dataset</Button>\n            <Button type=\"button\" onClick={onCancel}>Cancel</Button>\n            <Button type=\"button\" onClick={handleReset}>Reset</Button>\n        </Form>\n    )\n}\n\nexport default withValidation<DatasetParamsRaw, DatasetParamsRawForForm>({\n    mapPropsToValues: ({ initial }) => ({\n        name: getInitial(\"name\", \"\", initial),\n        enable_direct: getInitial(\"enable_direct\", false, initial),\n        tileshape: getInitial(\"tileshape\", \"1, 8, 128, 128\", initial).toString(),\n        detector_size: getInitial(\"detector_size\", \"\", initial).toString(),\n        scan_size: getInitial(\"scan_size\", \"\", initial).toString(),\n        dtype: getInitial(\"dtype\", \"float32\", initial),\n    }),\n    formToJson: (values, path) => {\n        return {\n            path,\n            type: DatasetTypes.RAW,\n            name: values.name,\n            dtype: values.dtype,\n            enable_direct: values.enable_direct,\n            tileshape: parseNumList(values.tileshape),\n            scan_size: parseNumList(values.scan_size),\n            detector_size: parseNumList(values.detector_size),\n        }\n    },\n    type: DatasetTypes.RAW,\n})(RawFileParamsForm);\n","import { ErrorMessage, Field, FormikProps } from \"formik\";\nimport * as React from \"react\";\nimport { Button, Form } from \"semantic-ui-react\";\nimport { Omit } from \"../../helpers/types\";\nimport { DatasetParamsSER, DatasetTypes } from \"../../messages\";\nimport { getInitial, withValidation } from \"../helpers\";\nimport { OpenFormProps } from \"../types\";\n\n\n// some fields have different types in the form vs. in messages\ntype DatasetParamsSERForForm = Omit<DatasetParamsSER,\n    \"path\" | \"type\">;\n\ntype MergedProps = FormikProps<DatasetParamsSERForForm> & OpenFormProps<DatasetParamsSER>;\nconst SERParamsForm: React.SFC<MergedProps> = ({\n    values,\n    touched,\n    errors,\n    dirty,\n    isSubmitting,\n    handleChange,\n    handleBlur,\n    handleSubmit,\n    handleReset,\n    onCancel,\n}) => {\n    return (\n        <Form onSubmit={handleSubmit}>\n            <Form.Field>\n                <label htmlFor=\"id_name\">Name:</label>\n                <ErrorMessage name=\"name\" />\n                <Field name=\"name\" id=\"id_name\" />\n            </Form.Field>\n\n            <Button primary={true} type=\"submit\" disabled={isSubmitting}>Load Dataset</Button>\n            <Button type=\"button\" onClick={onCancel}>Cancel</Button>\n            <Button type=\"button\" onClick={handleReset}>Reset</Button>\n        </Form>\n    )\n}\n\nexport default withValidation<DatasetParamsSER, DatasetParamsSERForForm>({\n    mapPropsToValues: ({ initial }) => ({\n        name: getInitial(\"name\", \"\", initial),\n    }),\n    formToJson: (values, path) => {\n        return {\n            path,\n            type: DatasetTypes.SER,\n            name: values.name,\n        }\n    },\n    type: DatasetTypes.SER,\n})(SERParamsForm);","import * as React from \"react\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport { DropdownProps, Header, Segment } from \"semantic-ui-react\";\nimport uuid from \"uuid/v4\";\nimport { assertNotReached } from \"../../helpers\";\nimport { DatasetFormParams, DatasetTypes } from '../../messages';\nimport { RootReducer } from \"../../store\";\nimport * as datasetActions from \"../actions\";\nimport { OpenDatasetState } from \"../types\";\nimport BLOParamsForm from \"./BLOParamsForm\";\nimport DatasetTypeSelect from \"./DatasetTypeSelect\";\nimport EMPADParamsForm from \"./EMPADParamsForm\";\nimport FRMS6ParamsForm from \"./FRMS6ParamsForm\";\nimport HDF5ParamsForm from \"./HDF5ParamsForm\";\nimport K2ISParamsForm from \"./K2ISParamsForm\";\nimport MIBParamsForm from \"./MIBParamsForm\";\nimport RawFileParamsForm from \"./RawFileParamsForm\";\nimport SERParamsForm from \"./SERParamsForm\";\n\n\n/**\n * Get the initial selection for the dataset type dropdown. If we have a previous\n * user selection, we use it, but only if the reset button was not pressed. If it was,\n * we use the detected dataset type, falling back to RAW.\n * \n * @param didReset flag: was the reset button pressed?\n * @param openState complete OpenDatasetState instance\n */\nconst getDefaultDSType = (didReset: boolean, openState: OpenDatasetState) => {\n    const { formCachedParams, formDetectedParams } = openState;\n    if (didReset) {\n        return formDetectedParams ? formDetectedParams.type : DatasetTypes.RAW;\n    }\n    if (formCachedParams) {\n        return formCachedParams.type;\n    }\n    if (formDetectedParams) {\n        return formDetectedParams.type;\n    }\n    return DatasetTypes.RAW;\n}\n\n\n/**\n * Get the initial form field values. If we have previously entered values, we\n * use these, otherwise we use the detected parameters. If the reset button was\n * clicked, we use the detected params, but keep the original name field,\n * \n * @param didReset flag: was the reset button pressed?\n * @param openState complete OpenDatasetState instance\n */\n\nconst getFormInitial = (didReset: boolean, openState: OpenDatasetState) => {\n    const { formCachedParams, formDetectedParams } = openState;\n    if (didReset) {\n        if (formDetectedParams) {\n            return {\n                name: formCachedParams ? formCachedParams.name : \"\",\n                ...formDetectedParams,\n            };\n        }\n        return undefined;\n    }\n    if (formCachedParams) {\n        return formCachedParams;\n    } else {\n        return formDetectedParams;\n    }\n}\n\n/**\n * Dispatch to specific dataset opening forms, including a selection of dataset type\n * via a dropdown.\n */\nconst DatasetOpen = () => {\n    const dispatch = useDispatch();\n    const openState = useSelector((state: RootReducer) => state.openDataset);\n\n    const [didReset, setReset] = React.useState(false);\n    const formInitial = getFormInitial(didReset, openState);\n    const defaultType = getDefaultDSType(didReset, openState);\n    const [datasetType, setDatasetType] = React.useState(defaultType);\n\n    const doSetType = (e: React.SyntheticEvent, data: DropdownProps) => setDatasetType(data.value as DatasetTypes);\n    // FIXME: find out how to make ts correctly correlate the types of FormComponent\n    // and initial and replace the huge switch below with something like:\n    // const initial = formInitial && datasetType === formInitial.type ? formInitial : undefined;\n    // const formComponentMap = {\n    //     [DatasetTypes.HDF5]: HDF5ParamsForm,\n    //     [DatasetTypes.RAW]: RawFileParamsForm,\n    //     [DatasetTypes.MIB]: MIBParamsForm,\n    //     [DatasetTypes.BLO]: BLOParamsForm,\n    //     [DatasetTypes.K2IS]: K2ISParamsForm,\n    //     [DatasetTypes.SER]: SERParamsForm,\n    //     [DatasetTypes.FRMS6]: FRMS6ParamsForm,\n    //     [DatasetTypes.EMPAD]: EMPADParamsForm,\n    // }\n    // const FormComponent = formComponentMap[datasetType];\n\n    const renderForm = (form: React.ReactNode) => {\n        return (\n            <Segment>\n                Type: <DatasetTypeSelect onClick={doSetType} currentType={datasetType} />\n                <Header as=\"h2\">Open: {openState.formPath}</Header>\n                {form}\n            </Segment>\n        );\n    }\n\n    const commonParams = {\n        path: openState.formPath,\n        onSubmit: (params: DatasetFormParams) => {\n            dispatch(datasetActions.Actions.create({\n                id: uuid(),\n                params,\n            }))\n        },\n        onCancel: () => dispatch(datasetActions.Actions.cancelOpen()),\n        onReset: () => {\n            setReset(true);\n            setDatasetType(getDefaultDSType(true, openState));\n        },\n    }\n\n    switch (datasetType) {\n        case DatasetTypes.HDF5: {\n            const initial = formInitial && datasetType === formInitial.type ? formInitial : undefined;\n            return renderForm(<HDF5ParamsForm {...commonParams} initial={initial} />);\n        }\n        case DatasetTypes.RAW: {\n            const initial = formInitial && datasetType === formInitial.type ? formInitial : undefined;\n            return renderForm(<RawFileParamsForm {...commonParams} initial={initial} />);\n        }\n        case DatasetTypes.MIB: {\n            const initial = formInitial && datasetType === formInitial.type ? formInitial : undefined;\n            return renderForm(<MIBParamsForm {...commonParams} initial={initial} />);\n        }\n        case DatasetTypes.BLO: {\n            const initial = formInitial && datasetType === formInitial.type ? formInitial : undefined;\n            return renderForm(<BLOParamsForm {...commonParams} initial={initial} />);\n        }\n        case DatasetTypes.K2IS: {\n            const initial = formInitial && datasetType === formInitial.type ? formInitial : undefined;\n            return renderForm(<K2ISParamsForm {...commonParams} initial={initial} />);\n        }\n        case DatasetTypes.SER: {\n            const initial = formInitial && datasetType === formInitial.type ? formInitial : undefined;\n            return renderForm(<SERParamsForm {...commonParams} initial={initial} />);\n        }\n        case DatasetTypes.FRMS6: {\n            const initial = formInitial && datasetType === formInitial.type ? formInitial : undefined;\n            return renderForm(<FRMS6ParamsForm {...commonParams} initial={initial} />);\n        }\n        case DatasetTypes.EMPAD: {\n            const initial = formInitial && datasetType === formInitial.type ? formInitial : undefined;\n            return renderForm(<EMPADParamsForm {...commonParams} initial={initial} />)\n        }\n    }\n    return assertNotReached(\"unknown dataset type\");\n}\n\nexport default DatasetOpen;","import { ActionsUnion, createAction } from \"../helpers/actionHelpers\";\n\nexport enum ActionTypes {\n    DISMISS = \"ERROR_DISMISS\",\n}\n\nexport const Actions = {\n    dismiss: (id: string) => createAction(ActionTypes.DISMISS, { id }),\n}\n\nexport type Actions = ActionsUnion<typeof Actions>;","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Header, Icon, Message } from \"semantic-ui-react\";\nimport { RootReducer } from \"../../store\";\n\nconst mapStateToProps = (state: RootReducer) => {\n    return {\n        busy: state.openDataset.busy,\n        path: state.openDataset.busyPath,\n    };\n}\n\ntype MergedProps = ReturnType<typeof mapStateToProps>;\n\nconst DatasetOpenSpinner: React.SFC<MergedProps> = ({ busy, path }) => {\n    if (!busy) {\n        return null;\n    }\n    return (\n        <>\n            <Header as=\"h2\" dividing={true}>Loading...</Header>\n            <Message icon={true}>\n                <Icon name='cog' loading={true} />\n                <Message.Content>\n                    <Message.Header>Detecting parameters for {path}</Message.Header>\n                </Message.Content>\n            </Message>\n        </>\n    );\n}\n\nexport default connect(mapStateToProps)(DatasetOpenSpinner);","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport BrowserWrapper from \"../../browser/components/BrowserWrapper\";\nimport { RootReducer } from \"../../store\";\nimport { DatasetsState } from \"../types\";\nimport Dataset from \"./Dataset\";\nimport DatasetOpen from \"./DatasetOpen\";\nimport DatasetOpenSpinner from \"./DatasetOpenSpinner\";\n\ninterface DatasetListProps {\n    datasets: DatasetsState\n}\n\nconst mapStateToProps = (state: RootReducer) => {\n    return {\n        datasets: state.datasets,\n        formVisible: state.openDataset.formVisible,\n        formPath: state.openDataset.formPath,\n    };\n}\n\ntype MergedProps = DatasetListProps & ReturnType<typeof mapStateToProps>;\n\nclass DatasetList extends React.Component<MergedProps> {\n    public render() {\n        const { formVisible, datasets } = this.props;\n\n        return (\n            <>\n                {datasets.ids.map((dsId: string) => <Dataset dataset={datasets.byId[dsId]} key={dsId} />)}\n                <DatasetOpenSpinner />\n                {formVisible && <DatasetOpen />}\n                <BrowserWrapper />\n            </>\n        );\n    }\n}\n\nexport default connect(mapStateToProps)(DatasetList);","import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { Dispatch } from 'redux';\nimport { Message } from 'semantic-ui-react';\nimport * as errorActions from '../actions';\nimport { ErrorMessage } from '../reducers';\n\nconst mapDispatchToProps = (dispatch: Dispatch, ownProps: ErrorProps) => {\n    return {\n        dismiss: () => dispatch(errorActions.Actions.dismiss(ownProps.error.id)),\n    }\n}\n\ninterface ErrorProps {\n    error: ErrorMessage,\n}\n\ntype MergedProps = ErrorProps & ReturnType<typeof mapDispatchToProps>;\n\nconst ErrorComponent: React.SFC<MergedProps> = ({ dismiss, error }) => {\n    return (\n        <Message negative={true} onDismiss={dismiss}>{error.msg}</Message>\n    )\n}\n\nexport default connect(null, mapDispatchToProps)(ErrorComponent);","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Modal } from \"semantic-ui-react\";\nimport { RootReducer } from \"../../store\";\nimport Error from \"./Error\";\n\nconst mapStateToProps = (state: RootReducer) => {\n    return {\n        errors: state.errors,\n        clusterConnected: state.clusterConnection.status === \"connected\",\n        channelConnected: (state.channelStatus.status === \"connected\" ||\n            state.channelStatus.status === \"ready\"),\n    }\n}\n\ntype MergedProps = ReturnType<typeof mapStateToProps>;\n\nconst ErrorList: React.SFC<MergedProps> = ({ errors, clusterConnected, channelConnected }) => {\n    const numShown = 3;\n    const latestErrors = errors.ids.slice(Math.max(0, errors.ids.length - numShown));\n    const showModal = errors.ids.length > 0 && clusterConnected && channelConnected;\n    return (\n        <Modal open={showModal}>\n            {latestErrors.map(error => <Error error={errors.byId[error]} key={error} />)}\n        </Modal>\n    );\n}\n\nexport default connect(mapStateToProps)(ErrorList);","import * as React from 'react';\nimport 'semantic-ui-css/semantic.min.css';\nimport { Container, Icon, Modal, Popup } from 'semantic-ui-react';\nimport About from './About';\nimport ChannelStatus from './channel/components/ChannelStatus';\nimport DatasetList from './dataset/components/DatasetList';\nimport ErrorList from './errors/components/ErrorList';\nimport logo from './images/LiberTEM logo-medium.png';\n\nclass App extends React.Component {\n    public render() {\n        return (\n            <Container style={{ margin: \"5em 1em 5em 1em\" }}>\n                <div style={{ display: \"flex\" }}>\n                    <img src={logo} width=\"200\" height=\"46\" alt=\"LiberTEM\" style={{ marginBottom: \"20px\" }} />\n                    {' '}\n                    <Modal trigger={\n                        <Icon name=\"info circle\" link={true} style={{ alignSelf: \"flex-start\" }} />\n                    }>\n                        <Popup.Header>About LiberTEM</Popup.Header>\n                        <Popup.Content>\n                            <About />\n                        </Popup.Content>\n                    </Modal>\n                </div>\n                <ErrorList />\n                <ChannelStatus>\n                    <DatasetList />\n                </ChannelStatus>\n            </Container>\n        );\n    }\n}\n\nexport default App;\n","// tslint:disable:no-console\n// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the 'N+1' visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL!,\n      window.location.toString()\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker) {\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the old content will have been purged and\n                // the fresh content will have been added to the cache.\n                // It's the perfect time to display a 'New content is\n                // available; please refresh.' message in your web app.\n                console.log('New content is available; please refresh.');\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // 'Content is cached for offline use.' message.\n                console.log('Content is cached for offline use.');\n              }\n            }\n          };\n        }\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type')!.indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { ActionsUnion, createAction } from \"../helpers/actionHelpers\";\n\nexport enum ActionTypes {\n    CREATE = 'JOB_CREATE',\n}\n\nexport const Actions = {\n    create: (id: string, dataset: string, timestamp: number) => createAction(ActionTypes.CREATE, { id, dataset, timestamp }),\n}\n\nexport type Actions = ActionsUnion<typeof Actions>;\n\nexport type ActionParts = {\n    [K in keyof typeof Actions]: ReturnType<typeof Actions[K]>\n}","import { AnalysisDetails, CancelJobResponse, StartJobRequest, StartJobResponse } from \"../messages\";\n\nexport function startJob(jobId: string, datasetId: string, analysis: AnalysisDetails): Promise<StartJobResponse> {\n    const payload: StartJobRequest = {\n        job: {\n            dataset: datasetId,\n            analysis,\n        }\n    }\n    return fetch(`/api/jobs/${jobId}/`, {\n        body: JSON.stringify(payload),\n        credentials: \"same-origin\",\n        method: \"PUT\",\n    }).then(r => r.json());\n}\n\nexport function cancelJob(jobId: string): Promise<CancelJobResponse> {\n    return fetch(`/api/jobs/${jobId}/`, {\n        method: \"DELETE\",\n        credentials: \"same-origin\",\n    }).then(r => r.json());\n}","import { buffers } from 'redux-saga';\nimport { actionChannel, call, cancel, fork, put, select, take, takeEvery } from 'redux-saga/effects';\nimport uuid from 'uuid/v4';\nimport * as jobActions from '../job/actions';\nimport { cancelJob, startJob } from '../job/api';\nimport { JobState } from '../job/types';\nimport { DatasetState, DatasetStatus } from '../messages';\nimport { RootReducer } from '../store';\nimport * as analysisActions from './actions';\nimport { AnalysisState } from './types';\n\nfunction selectDataset(state: RootReducer, dataset: string) {\n    return state.datasets.byId[dataset];\n}\n\nfunction selectAnalysis(state: RootReducer, id: string) {\n    return state.analyses.byId[id];\n}\n\nfunction selectJob(state: RootReducer, id: string) {\n    return state.jobs.byId[id];\n}\n\n\nexport function* createAnalysisSaga(action: ReturnType<typeof analysisActions.Actions.create>) {\n    try {\n        const datasetState: DatasetState = yield select(selectDataset, action.payload.dataset)\n        if (datasetState.status !== DatasetStatus.OPEN) {\n            throw new Error(\"invalid dataset status\");\n        }\n        const analysis: AnalysisState = {\n            id: uuid(),\n            dataset: action.payload.dataset,\n            mainAnalysisType: action.payload.analysisType,\n            jobs: [],\n            jobHistory: [],\n        }\n\n        const sidecarTask = yield fork(analysisSidecar, analysis.id);\n\n        yield put(analysisActions.Actions.created(analysis));\n\n        while (true) {\n            const removeAction: ReturnType<typeof analysisActions.Actions.remove> = yield take(analysisActions.ActionTypes.REMOVE);\n            if (removeAction.payload.id === analysis.id) {\n                yield cancel(sidecarTask);\n            }\n        }\n    } catch (e) {\n        const timestamp = Date.now();\n        const id = uuid();\n        yield put(analysisActions.Actions.error(`Error creating analysis: ${e.toString()}`, timestamp, id));\n    }\n}\n\nexport function* cancelOldJob(analysis: AnalysisState, jobIndex: number) {\n    const jobId = analysis.jobs[jobIndex];\n    if (jobId === undefined) {\n        return;\n    } else {\n        const job: JobState = yield select(selectJob, jobId);\n        if (job.running !== \"DONE\") {\n            yield call(cancelJob, jobId);\n        }\n    }\n}\n\nexport function* analysisSidecar(analysisId: string) {\n    // channel for incoming actions:\n    // all actions that arrive while we block in `call` will be buffered here.\n    // because the buffer is sliding of size 1, we only keep the latest action!\n    const runOrParamsChannel = yield actionChannel(analysisActions.ActionTypes.RUN, buffers.sliding(2));\n\n    while (true) {\n        try {\n            const action: analysisActions.ActionParts[\"run\"] = yield take(runOrParamsChannel);\n\n            // ignore actions meant for other analyses\n            if (action.payload.id !== analysisId) {\n                continue;\n            }\n\n            // get the current state incl. configuration\n            const analysis: AnalysisState = yield select(selectAnalysis, analysisId);\n            const { jobIndex, parameters } = action.payload;\n\n            // prepare running the job:\n            const jobId = uuid();\n            yield put(jobActions.Actions.create(jobId, analysis.dataset, Date.now()));\n            yield put(analysisActions.Actions.prepareRun(analysis.id, jobIndex, jobId));\n\n            const oldJobId = analysis.jobs[jobIndex];\n            if (oldJobId !== undefined) {\n                const job: JobState = yield select(selectJob, oldJobId);\n                if (job && job.running !== \"DONE\") {\n                    // wait until the job is cancelled:\n                    yield call(cancelJob, oldJobId);\n                }\n            }\n\n            // FIXME: we have a race here, as the websocket msg FINISH_JOB may\n            // arrive before call(startJob, ...) returns. this causes the apply button\n            // to feel unresponsive (the action gets done, but only after we finish here...)\n            // best reproduced in \"Slow 3G\" network simulation mode in devtools\n\n            // wait until the job is started\n            yield call(startJob, jobId, analysis.dataset, parameters);\n            yield put(analysisActions.Actions.running(analysis.id, jobId, jobIndex));\n        } catch (e) {\n            const timestamp = Date.now();\n            const id = uuid();\n            yield put(analysisActions.Actions.error(`Error running analysis: ${e.toString()}`, timestamp, id));\n        }\n    }\n}\n\nexport function* doRemoveAnalysisSaga(action: ReturnType<typeof analysisActions.Actions.remove>) {\n    // const analysis: AnalysisState = yield select(selectAnalysis, action.payload.id)\n    try {\n        // TODO: cancel all jobs! loop over all of them...\n        // yield call(cancelOldJob, analysis, \"RESULT\");\n        // yield call(cancelOldJob, analysis, \"FRAME\");\n    } finally {\n        yield put(analysisActions.Actions.removed(action.payload.id));\n    }\n}\n\nexport function* analysisRootSaga() {\n    yield takeEvery(analysisActions.ActionTypes.CREATE, createAnalysisSaga);\n    yield takeEvery(analysisActions.ActionTypes.REMOVE, doRemoveAnalysisSaga);\n}","import _ from 'lodash';\nimport { MsgPartConfig } from \"../messages\";\nimport { ConfigParams, ConfigState, LocalConfig } from \"./reducers\";\n\nconst CONFIG_KEY = \"LiberTEM.config\";\n\nexport function joinPaths(config: ConfigState, ...parts: string[]) {\n    const removeSep = (part: string) => part.replace(new RegExp(`${_.escapeRegExp(config.separator)}$`), \"\")\n    parts = [removeSep(parts[0]), ...parts.slice(1)];\n    return parts.map(part => part.trim()).join(config.separator);\n}\n\nexport function mergeLocalStorage(serverConfig: MsgPartConfig): ConfigParams {\n    const localSettings = window.localStorage.getItem(CONFIG_KEY);\n    if (localSettings === null) {\n        return Object.assign({}, serverConfig, getDefaultLocalConfig(serverConfig));\n    }\n    const localSettingsParsed = JSON.parse(localSettings);\n    const defaultConfig = getDefaultLocalConfig(serverConfig);\n    const mergedConfig = Object.assign({}, defaultConfig, serverConfig, localSettingsParsed);\n    return mergedConfig;\n}\n\nexport function setLocalStorage(config: ConfigState): void {\n    const localSettings: LocalConfig = {\n        cwd: config.cwd,\n        lastOpened: config.lastOpened,\n        fileHistory: config.fileHistory,\n    }\n\n    window.localStorage.setItem(CONFIG_KEY, JSON.stringify(localSettings));\n}\n\nexport function clearLocalStorage(): void {\n    window.localStorage.removeItem(CONFIG_KEY);\n}\n\nexport function getDefaultLocalConfig(config: MsgPartConfig): LocalConfig {\n    return {\n        lastOpened: {},\n        fileHistory: [],\n        cwd: \"/\",\n    };\n}\n\nexport function makeUnique<T>(inp: T[]): T[] {\n    return inp.reduce((acc: T[], curr: T) => {\n        if (acc.indexOf(curr) === -1) {\n            return [...acc, curr];\n        } else {\n            return acc;\n        }\n    }, [] as T[]);\n}","import { DirectoryListingResponse } from \"../messages\";\n\nexport function getDirectoryListing(path: string): Promise<DirectoryListingResponse> {\n    const url = `/api/browse/localfs/?path=${encodeURIComponent(path)}`;\n    return fetch(url, {\n        method: 'GET',\n        credentials: \"same-origin\",\n    }).then(r => r.json());\n}","import { ActionsUnion, createAction } from '../helpers/actionHelpers';\nimport { JobResultType } from '../job/types';\nimport { MsgPartInitialDataset, MsgPartJob } from '../messages';\n\n\nexport type PartialResultType = JobResultType;\n\nexport enum ActionTypes {\n    INITIAL_STATE = 'CHANNEL_INITIAL_STATE',\n    JOB_STARTED = 'CHANNEL_JOB_STARTED',\n    FINISH_JOB = 'CHANNEL_FINISH_JOB',\n    TASK_RESULT = 'CHANNEL_TASK_RESULT',\n    JOB_ERROR = 'CHANNEL_JOB_ERROR',\n    OPEN = \"CHANNEL_OPEN\",\n    CLOSE = \"CHANNEL_CLOSE\",\n    ERROR = \"CHANNEL_ERROR\",\n    CANCELLED = \"CANCELLED\",\n}\n\nexport const Actions = {\n    initialState: (jobs: MsgPartJob[], datasets: MsgPartInitialDataset[], timestamp: number) => createAction(ActionTypes.INITIAL_STATE, { jobs, datasets, timestamp }),\n    jobStarted: (job: string, dataset: string, timestamp: number) => createAction(ActionTypes.JOB_STARTED, { job, timestamp, dataset }),\n    finishJob: (job: string, results: JobResultType[], timestamp: number) => createAction(ActionTypes.FINISH_JOB, { job, results, timestamp }),\n    taskResult: (job: string, results: PartialResultType[], timestamp: number) => createAction(ActionTypes.TASK_RESULT, { job, results, timestamp }),\n    jobError: (job: string, msg: string, id: string, timestamp: number) => createAction(ActionTypes.JOB_ERROR, { job, msg, id, timestamp }),\n    open: (timestamp: number) => createAction(ActionTypes.OPEN, { timestamp }),\n    close: (timestamp: number) => createAction(ActionTypes.CLOSE, { timestamp }),\n    error: (msg: string, timestamp: number, id: string) => createAction(ActionTypes.ERROR, { msg, timestamp, id }),\n    cancelled: (job: string) => createAction(ActionTypes.CANCELLED, { job }),\n}\n\nexport type Actions = ActionsUnion<typeof Actions>;","import { call, fork, put, select, take } from \"redux-saga/effects\";\nimport uuid from 'uuid/v4';\nimport { joinPaths } from \"../config/helpers\";\nimport { ConfigState } from \"../config/reducers\";\nimport { DirectoryListingResponse } from \"../messages\";\nimport { RootReducer } from \"../store\";\nimport * as browserActions from './actions';\nimport { getDirectoryListing } from \"./api\";\nimport { DirectoryBrowserState } from \"./types\";\n\nexport function* directoryListingSaga() {\n    yield fork(fetchOnRequest);\n    yield fork(fetchDirectoryListOnOpen);\n}\n\nfunction* fetchOnRequest() {\n    while (true) {\n        const action: ReturnType<typeof browserActions.Actions.list> = yield take(browserActions.ActionTypes.LIST_DIRECTORY);\n\n        const { name, path } = action.payload;\n        const config: ConfigState = yield select((state: RootReducer) => state.config)\n        const newPath = name !== undefined ? joinPaths(config, path, name) : path;\n        yield fork(fetchDirectoryListing, newPath);\n    }\n}\n\nfunction* fetchDirectoryListing(path: string) {\n    try {\n        const result: DirectoryListingResponse = yield call(getDirectoryListing, path);\n        if (result.status === \"ok\") {\n            yield put(browserActions.Actions.dirListing(result.path, result.dirs, result.files, result.drives, result.places));\n        } else if (result.status === \"error\") {\n            const browserState: DirectoryBrowserState = yield select((state: RootReducer) => state.browser);\n            const timestamp = Date.now();\n            const id = uuid();\n            const alternative = result.alternative ? result.alternative : browserState.places.home.path;\n            yield put(browserActions.Actions.error(`Error browsing directory: ${result.msg}`, timestamp, id));\n            yield put(browserActions.Actions.list(alternative));\n        }\n    } catch (e) {\n        const browserState: DirectoryBrowserState = yield select((state: RootReducer) => state.browser);\n        const timestamp = Date.now();\n        const id = uuid();\n        yield put(browserActions.Actions.error(`Error browsing directory: ${e.toString()}`, timestamp, id));\n        yield put(browserActions.Actions.list(browserState.places.home.path));\n    }\n}\n\nfunction* fetchDirectoryListOnOpen() {\n    while (true) {\n        yield take(browserActions.ActionTypes.OPEN);\n        const config: ConfigState = yield select((state: RootReducer) => state.config)\n        yield put(browserActions.Actions.list(config.cwd));\n    }\n}","import { ActionCreatorsMapObject } from \"redux\";\nimport { FollowupPart, MsgPartInitialDataset, MsgPartJob } from \"../messages\";\n\nexport interface Message<T extends string> {\n    messageType: T\n}\n\nexport function createMessage<T extends string, O>(messageType: T, attribs: O) {\n    return Object.assign({ messageType }, attribs);\n}\n\nexport enum MessageTypes {\n    INITIAL_STATE = \"INITIAL_STATE\",\n    JOB_STARTED = \"JOB_STARTED\",\n    FINISH_JOB = \"FINISH_JOB\",\n    TASK_RESULT = \"TASK_RESULT\",\n    JOB_ERROR = \"JOB_ERROR\",\n    BINARY = \"BINARY\",\n    OPEN = \"OPEN\",\n    CLOSE = \"CLOSE\",\n    ERROR = \"ERROR\",\n    DELETE_DATASET = \"DELETE_DATASET\",\n    CANCEL_JOB_DONE = \"CANCEL_JOB_DONE\",\n}\n\nexport const Messages = {\n    initialState: (jobs: MsgPartJob[], datasets: MsgPartInitialDataset[]) => createMessage(MessageTypes.INITIAL_STATE, { jobs, datasets }),\n    startJob: (job: string, dataset: string) => createMessage(MessageTypes.JOB_STARTED, { job, dataset }),\n    finishJob: (job: string, followup: FollowupPart) => createMessage(MessageTypes.FINISH_JOB, { job, followup }),\n    taskResult: (job: string, followup: FollowupPart) => createMessage(MessageTypes.TASK_RESULT, { job, followup }),\n    jobError: (job: string, msg: string) => createMessage(MessageTypes.JOB_ERROR, { job, msg }),\n    binary: (objectURL: string) => createMessage(MessageTypes.BINARY, { objectURL }),\n    open: () => createMessage(MessageTypes.OPEN, {}),\n    close: () => createMessage(MessageTypes.CLOSE, {}),\n    error: (msg: string) => createMessage(MessageTypes.ERROR, { msg }),\n    deleteDataset: (dataset: string) => createMessage(MessageTypes.DELETE_DATASET, { dataset }),\n    cancelled: (job: string) => createMessage(MessageTypes.CANCEL_JOB_DONE, { job }),\n}\n\nexport type MessagesUnion<A extends ActionCreatorsMapObject> = ReturnType<A[keyof A]>\nexport type Messages = MessagesUnion<typeof Messages>;\n\n// types of messages sent by the server:\n/*\nexport type InitialStateMessage = ReturnType<typeof Messages.initialState>;\nexport type StartJobMessage = ReturnType<typeof Messages.startJob>;\nexport type FinishJobMessage = ReturnType<typeof Messages.finishJob>;\nexport type TaskResultMessage = ReturnType<typeof Messages.taskResult>;\n*/\n\nexport type BinaryMessage = ReturnType<typeof Messages.binary>;","import { END, eventChannel, EventChannel } from \"redux-saga\";\nimport { call, delay, fork, put, take } from \"redux-saga/effects\";\nimport uuid from 'uuid/v4';\nimport * as datasetActions from '../dataset/actions';\nimport * as channelActions from \"./actions\";\nimport * as channelMessages from './messages';\n\ntype SocketChannel = EventChannel<channelMessages.Messages>;\n\n\n/**\n * create typesafe messages from the websocket messages\n * \n * also creates some synthetic events like open, close, error\n */\nfunction createWebSocketChannel(/* addr */): SocketChannel {\n    return eventChannel(emit => {\n        function onMessage(msg: MessageEvent) {\n            if (msg.data instanceof Blob) {\n                // TODO: cleanup createObjectURL results somewhere\n                emit(channelMessages.Messages.binary(URL.createObjectURL(msg.data)));\n            } else {\n                const parsed = JSON.parse(msg.data) as channelMessages.Messages;\n                emit(parsed);\n            }\n        }\n\n        function onOpen() {\n            emit(channelMessages.Messages.open());\n        }\n\n        function onClose() {\n            emit(channelMessages.Messages.close());\n            emit(END);\n        }\n\n        function onError(err: Event) {\n            emit(channelMessages.Messages.error(\"Error in weboscket connection\"));\n        }\n\n        const ws = new WebSocket(`ws://${window.location.hostname}:${window.location.port}/api/events/`);\n        ws.addEventListener(\"message\", onMessage);\n        ws.addEventListener(\"open\", onOpen);\n        ws.addEventListener(\"close\", onClose);\n        ws.addEventListener(\"error\", onError);\n\n        // return cleanup function:\n        return () => {\n            ws.removeEventListener(\"message\", onMessage);\n            ws.removeEventListener(\"open\", onOpen);\n            ws.removeEventListener(\"close\", onClose);\n            ws.removeEventListener(\"error\", onError);\n            // TODO: close connection if still open\n            // (or is it guaranteed that if an error was thrown, the connection is closed?)\n        };\n    });\n}\n\n/**\n * handles the connection lifecycle for our websocket\n */\nexport function* webSocketSaga() {\n    while (true) {\n        const socketChannel = yield call(createWebSocketChannel);\n        yield fork(actionsFromChannel, socketChannel);\n        const action: channelActions.Actions = yield take([\n            channelActions.ActionTypes.OPEN,\n            channelActions.ActionTypes.CLOSE,\n        ]);\n        if (action.type === channelActions.ActionTypes.OPEN) {\n            yield take([\n                channelActions.ActionTypes.CLOSE,\n                channelActions.ActionTypes.ERROR,\n            ]);\n        }\n        yield delay(1000);\n    }\n}\n\n/**\n * translates the messages from the channel to redux actions, handles aggregation etc.\n */\nexport function* actionsFromChannel(socketChannel: SocketChannel) {\n    try {\n        while (true) {\n            const msg = yield take(socketChannel);\n            const timestamp = Date.now();\n            switch (msg.messageType) {\n                case channelMessages.MessageTypes.OPEN: {\n                    yield put(channelActions.Actions.open(timestamp));\n                    break;\n                }\n                case channelMessages.MessageTypes.CLOSE: {\n                    yield put(channelActions.Actions.close(timestamp));\n                    break;\n                }\n                case channelMessages.MessageTypes.ERROR: {\n                    const id = uuid();\n                    yield put(channelActions.Actions.error(msg.msg, timestamp, id));\n                    break;\n                }\n                case channelMessages.MessageTypes.INITIAL_STATE: {\n                    yield put(channelActions.Actions.initialState(msg.jobs, msg.datasets, timestamp));\n                    break;\n                }\n                case channelMessages.MessageTypes.JOB_STARTED: {\n                    yield put(channelActions.Actions.jobStarted(msg.job, msg.details.dataset, timestamp));\n                    break;\n                }\n                case channelMessages.MessageTypes.FINISH_JOB: {\n                    yield call(handleFinishJob, msg, socketChannel, timestamp);\n                    break;\n                }\n                case channelMessages.MessageTypes.TASK_RESULT: {\n                    yield call(handleTaskResult, msg, socketChannel, timestamp);\n                    break;\n                }\n                case channelMessages.MessageTypes.DELETE_DATASET: {\n                    yield put(datasetActions.Actions.deleted(msg.dataset));\n                    break;\n                }\n                case channelMessages.MessageTypes.JOB_ERROR: {\n                    const id = uuid();\n                    yield put(channelActions.Actions.jobError(msg.job, msg.msg, id, timestamp));\n                    break;\n                }\n                case channelMessages.MessageTypes.CANCEL_JOB_DONE: {\n                    yield put(channelActions.Actions.cancelled(msg.job));\n                    break;\n                }\n            }\n        }\n    } finally {\n        // disconnected\n    }\n}\n\nexport function* handleBinaryParts(numParts: number, socketChannel: SocketChannel) {\n    const parts: channelMessages.BinaryMessage[] = [];\n    while (parts.length < numParts) {\n        const binMsg = yield take(socketChannel)\n        parts.push(binMsg);\n    }\n    return parts;\n}\n\nexport function* handleTaskResult(msg: ReturnType<typeof channelMessages.Messages.taskResult>, socketChannel: SocketChannel, timestamp: number) {\n    const parts: channelMessages.BinaryMessage[] = yield call(handleBinaryParts, msg.followup.numMessages, socketChannel);\n    const images = parts.map((part, idx) => ({ imageURL: part.objectURL, description: msg.followup.descriptions[idx] }));\n    yield put(channelActions.Actions.taskResult(msg.job, images, timestamp));\n}\n\nexport function* handleFinishJob(msg: ReturnType<typeof channelMessages.Messages.finishJob>, socketChannel: SocketChannel, timestamp: number) {\n    const parts: channelMessages.BinaryMessage[] = yield call(handleBinaryParts, msg.followup.numMessages, socketChannel);\n    const images = parts.map((part, idx) => ({ imageURL: part.objectURL, description: msg.followup.descriptions[idx] }));\n    yield put(channelActions.Actions.finishJob(msg.job, images, timestamp));\n}","import { ConnectRequest, ConnectRequestParams, ConnectResponse } from \"../messages\";\n\nexport function connectToCluster(params: ConnectRequestParams): Promise<ConnectResponse> {\n    const payload: ConnectRequest = {\n        connection: params\n    }\n    return fetch(`/api/config/connection/`, {\n        body: JSON.stringify(payload),\n        credentials: \"same-origin\",\n        method: \"PUT\",\n    }).then(r => r.json());\n}\n\nexport function checkClusterConnection(): Promise<ConnectResponse> {\n    return fetch(`/api/config/connection/`, {\n        method: 'GET',\n    }).then(r => r.json());\n}","import { ActionsUnion, createAction } from \"../helpers/actionHelpers\";\nimport { ConfigParams } from \"./reducers\";\n\nexport enum ActionTypes {\n    FETCHED = \"CONFIG_FETCHED\",\n    FETCH = \"CONFIG_FETCH\",\n    FETCH_FAILED = \"CONFIG_FETCH_FAILED\",\n}\n\nexport const Actions = {\n    fetch: () => createAction(ActionTypes.FETCH),\n    fetched: (config: ConfigParams) => createAction(ActionTypes.FETCHED, { config }),\n    fetchFailed: (msg: string, timestamp: number, id: string) => createAction(ActionTypes.FETCH_FAILED, { msg, timestamp, id }),\n}\n\nexport type Actions = ActionsUnion<typeof Actions>;","import { all, call, put, take, takeEvery } from \"redux-saga/effects\";\nimport * as channelActions from '../channel/actions';\nimport { ConnectResponse } from \"../messages\";\nimport * as clusterActions from './actions';\nimport { checkClusterConnection, connectToCluster } from \"./api\";\n\nfunction* connectSaga(action: ReturnType<typeof clusterActions.Actions.connect>) {\n    const conn: ConnectResponse = yield call(connectToCluster, action.payload.params);\n    yield call(putClusterStatus, conn);\n}\n\nfunction* putClusterStatus(conn: ConnectResponse) {\n    if (conn.status === \"ok\") {\n        yield put(clusterActions.Actions.connected(conn.connection.connection));\n    } else {\n        yield put(clusterActions.Actions.notConnected());\n    }\n}\n\n/**\n * when the channel is connected, check if cluster is connected and update status accordingly\n */\nfunction* trackClusterConnection() {\n    while (true) {\n        yield take(channelActions.ActionTypes.OPEN)\n        const conn: ConnectResponse = yield call(checkClusterConnection);\n        yield call(putClusterStatus, conn);\n    }\n}\n\nexport function* clusterConnectionSaga() {\n    yield takeEvery(clusterActions.ActionTypes.CONNECT, connectSaga);\n    yield all([\n        trackClusterConnection(),\n    ])\n}","import { GetConfigResponse } from \"../messages\";\n\nexport function getConfig(): Promise<GetConfigResponse> {\n    return fetch(`/api/config/`, {\n        method: \"GET\",\n        credentials: \"same-origin\",\n    }).then(r => r.json());\n}","import { call, fork, put, select, take, takeEvery } from 'redux-saga/effects';\nimport uuid from 'uuid/v4';\nimport * as browserActions from '../browser/actions';\nimport * as channelActions from '../channel/actions';\nimport * as datasetActions from '../dataset/actions';\nimport { GetConfigResponse } from '../messages';\nimport { RootReducer } from '../store';\nimport * as configActions from './actions';\nimport { getConfig } from './api';\nimport { clearLocalStorage, getDefaultLocalConfig, mergeLocalStorage, setLocalStorage } from './helpers';\nimport { ConfigState } from './reducers';\n\nfunction* getConfigOnReconnect() {\n    yield takeEvery(channelActions.ActionTypes.OPEN, getConfigSaga);\n}\n\n/**\n * get config from server and try to merge in the localStorage config\n */\nfunction* getConfigSaga() {\n    yield put(configActions.Actions.fetch());\n    const configResponse: GetConfigResponse = yield call(getConfig);\n    try {\n        const mergedConfig = mergeLocalStorage(configResponse.config);\n        yield put(configActions.Actions.fetched(mergedConfig));\n    } catch (e) {\n        try {\n            clearLocalStorage();\n            // tslint:disable-next-line:no-empty\n        } catch (e) { }\n        const defaultConfig = Object.assign({}, configResponse.config, getDefaultLocalConfig(configResponse.config));\n        yield put(configActions.Actions.fetched(defaultConfig));\n    }\n}\n\n/**\n * update localStorage config on opening files or using the file browser\n */\nfunction* updateLocalStorageConfig() {\n    while (true) {\n        yield take([\n            datasetActions.ActionTypes.CREATE,\n            browserActions.ActionTypes.DIRECTORY_LISTING\n        ]);\n        const config: ConfigState = yield select((state: RootReducer) => state.config);\n        setLocalStorage(config);\n    }\n}\n\nexport function* firstConfigFetch() {\n    try {\n        yield call(getConfigSaga);\n    } catch (e) {\n        const timestamp = Date.now();\n        const id = uuid();\n        yield put(configActions.Actions.fetchFailed(`failed to fetch config: ${e.toString()}`, timestamp, id));\n    }\n}\n\nexport function* configRootSaga() {\n    yield fork(firstConfigFetch);\n    yield fork(getConfigOnReconnect);\n    yield fork(updateLocalStorageConfig);\n}","import { call, put, select, takeEvery } from 'redux-saga/effects';\nimport uuid from 'uuid/v4';\nimport * as browserActions from '../browser/actions';\nimport { joinPaths } from '../config/helpers';\nimport { ConfigState } from '../config/reducers';\nimport { DetectDatasetResponse, OpenDatasetResponse } from '../messages';\nimport { RootReducer } from '../store';\nimport * as datasetActions from \"./actions\";\nimport { deleteDataset, detectDataset, openDataset } from './api';\n\n\nexport function* createDatasetSaga(action: ReturnType<typeof datasetActions.Actions.create>) {\n    try {\n        const resp: OpenDatasetResponse = yield call(openDataset, action.payload.dataset.id, { dataset: action.payload.dataset });\n        if (resp.status === \"ok\") {\n            yield put(datasetActions.Actions.created(resp.details));\n        } else if (resp.status === \"error\") {\n            const timestamp = Date.now();\n            const id = uuid();\n            yield put(datasetActions.Actions.error(resp.dataset, resp.msg, timestamp, id));\n        }\n    } catch (e) {\n        const timestamp = Date.now();\n        const id = uuid();\n        yield put(datasetActions.Actions.error(action.payload.dataset.id, `Error loading dataset: ${e.toString()}`, timestamp, id));\n    }\n}\n\nexport function* deleteDatasetSaga(action: ReturnType<typeof datasetActions.Actions.delete>) {\n    try {\n        yield call(deleteDataset, action.payload.dataset);\n    } catch (e) {\n        const timestamp = Date.now();\n        const id = uuid();\n        yield put(datasetActions.Actions.error(action.payload.dataset, `Error closing dataset: ${e.toString()}`, timestamp, id));\n    }\n}\n\nexport function* doOpenDataset(fullPath: string) {\n    const config: ConfigState = yield select((state: RootReducer) => state.config);\n    const cachedParams = config.lastOpened[fullPath];\n    let detectedParams;\n    try {\n        yield put(datasetActions.Actions.detect(fullPath));\n        const detectResult: DetectDatasetResponse = yield call(detectDataset, fullPath);\n        if (detectResult.status === \"ok\") {\n            detectedParams = detectResult.datasetParams;\n            yield put(datasetActions.Actions.detected(fullPath, detectResult.datasetParams));\n        } else {\n            yield put(datasetActions.Actions.detectFailed(fullPath));\n        }\n    } catch (e) {\n        yield put(datasetActions.Actions.detectFailed(fullPath));\n    }\n    yield put(datasetActions.Actions.open(fullPath, cachedParams, detectedParams));\n}\n\nexport function* openDatasetSagaFullPath(action: ReturnType<typeof browserActions.Actions.selectFullPath>) {\n    const fullPath = action.payload.path;\n    yield call(doOpenDataset, fullPath);\n}\n\nexport function* openDatasetSaga(action: ReturnType<typeof browserActions.Actions.select>) {\n    const config: ConfigState = yield select((state: RootReducer) => state.config);\n    const fullPath = joinPaths(config, action.payload.path, action.payload.name);\n    yield call(doOpenDataset, fullPath);\n}\n\nexport function* datasetRootSaga() {\n    yield takeEvery(datasetActions.ActionTypes.CREATE, createDatasetSaga);\n    yield takeEvery(datasetActions.ActionTypes.DELETE, deleteDatasetSaga);\n    yield takeEvery(browserActions.ActionTypes.SELECT, openDatasetSaga);\n    yield takeEvery(browserActions.ActionTypes.SELECT_FULL_PATH, openDatasetSagaFullPath);\n}","import { all } from 'redux-saga/effects';\nimport { analysisRootSaga } from './analysis/sagas';\nimport { directoryListingSaga } from './browser/sagas';\nimport { webSocketSaga } from './channel/sagas';\nimport { clusterConnectionSaga } from './cluster/sagas';\nimport { configRootSaga } from './config/sagas';\nimport { datasetRootSaga } from './dataset/sagas';\n\nexport function* rootSaga() {\n    yield all([\n        configRootSaga(),\n        webSocketSaga(),\n        analysisRootSaga(),\n        datasetRootSaga(),\n        clusterConnectionSaga(),\n        directoryListingSaga(),\n    ]);\n}","import { AllActions } from \"../actions\";\nimport * as datasetActions from \"../dataset/actions\";\nimport { ById, filterWithPred, insertById, updateById } from \"../helpers/reducerHelpers\";\nimport * as analysisActions from \"./actions\";\nimport { AnalysisState, JobList } from \"./types\";\n\nexport type AnalysisReducerState = ById<AnalysisState>;\n\nconst initialAnalysisState: AnalysisReducerState = {\n    byId: {},\n    ids: [],\n}\n\nexport function analysisReducer(state = initialAnalysisState, action: AllActions): AnalysisReducerState {\n    switch (action.type) {\n        case analysisActions.ActionTypes.CREATED: {\n            return insertById(state, action.payload.analysis.id, action.payload.analysis);\n        }\n        case analysisActions.ActionTypes.PREPARE_RUN: {\n            const { jobIndex, id } = action.payload;\n            const analysis = state.byId[id];\n            const oldJob = analysis.jobs[jobIndex];\n            const jobHistory = [...analysis.jobHistory];\n            if (oldJob !== undefined) {\n                // TODO: length restriction?\n                const hist = jobHistory[jobIndex] ? jobHistory[jobIndex] : [];\n                jobHistory[jobIndex] = [oldJob, ...hist];\n            }\n            const newJobs: JobList = [...analysis.jobs];\n            newJobs[jobIndex] = action.payload.job;\n            return updateById(state, action.payload.id, { jobs: newJobs, jobHistory })\n        }\n        case analysisActions.ActionTypes.REMOVED: {\n            return filterWithPred(state, (r: AnalysisState) => r.id !== action.payload.id);\n        }\n        case datasetActions.ActionTypes.DELETE: {\n            return filterWithPred(state, (r: AnalysisState) => r.dataset !== action.payload.dataset);\n        }\n    }\n    return state;\n}","import { AllActions } from \"../actions\";\nimport * as configActions from '../config/actions';\nimport { DirectoryListingDetails, FSPlace } from \"../messages\";\nimport * as browserActions from './actions';\nimport { DirectoryBrowserState } from \"./types\";\n\nconst initialBrowserState: DirectoryBrowserState = {\n    isOpen: false,\n    isLoading: true,\n    path: \"/\",\n    drives: [],\n    places: {},\n    files: [] as DirectoryListingDetails[],\n    dirs: [] as DirectoryListingDetails[],\n}\n\nexport function directoryBrowserReducer(state: DirectoryBrowserState = initialBrowserState, action: AllActions): DirectoryBrowserState {\n    switch (action.type) {\n        case configActions.ActionTypes.FETCHED: {\n            return Object.assign({}, state, {\n                path: action.payload.config.cwd,\n            })\n        }\n        case browserActions.ActionTypes.OPEN: {\n            return Object.assign({}, state, {\n                isOpen: true,\n            })\n        }\n        case browserActions.ActionTypes.CANCEL: {\n            return Object.assign({}, state, {\n                isOpen: false,\n            })\n        }\n        case browserActions.ActionTypes.LIST_DIRECTORY: {\n            return Object.assign({}, state, {\n                isLoading: true,\n            })\n        }\n        case browserActions.ActionTypes.DIRECTORY_LISTING: {\n            const places = action.payload.places.reduce((acc, place: FSPlace) => {\n                return Object.assign({}, acc, {\n                    [place.key]: place,\n                })\n            }, {});\n            return Object.assign({}, state, {\n                isLoading: false,\n                path: action.payload.path,\n                files: action.payload.files,\n                dirs: action.payload.dirs,\n                drives: action.payload.drives,\n                places,\n            })\n        }\n        case browserActions.ActionTypes.SELECT_FULL_PATH:\n        case browserActions.ActionTypes.SELECT: {\n            return Object.assign({}, state, {\n                isLoading: false,\n                isOpen: false,\n            });\n        }\n    }\n    return state;\n}","import { AllActions } from \"../actions\";\nimport * as channelActions from './actions';\n\nexport interface ChannelStatusReducer {\n    status: ChannelStatusCodes,\n}\n\nexport enum ChannelStatusCodes {\n    CONNECTING = \"connecting\",\n    CONNECTED = \"connected\",\n    READY = \"ready\",\n    WAITING = \"waiting\",\n}\n\nconst initialChannelState: ChannelStatusReducer = {\n    status: ChannelStatusCodes.WAITING,\n}\n\nexport function channelStatusReducer(state = initialChannelState, action: AllActions): ChannelStatusReducer {\n    switch (action.type) {\n        case channelActions.ActionTypes.OPEN: {\n            return { status: ChannelStatusCodes.CONNECTED };\n        }\n        case channelActions.ActionTypes.INITIAL_STATE: {\n            return { status: ChannelStatusCodes.READY };\n        }\n        case channelActions.ActionTypes.CLOSE: {\n            return { status: ChannelStatusCodes.WAITING };\n        }\n    }\n    return state;\n}","import { AllActions } from \"../actions\";\nimport { ConnectRequestParams } from \"../messages\";\nimport * as clusterActions from './actions';\n\nexport type ClusterConnectionState = {\n    status: \"connected\",\n    params: ConnectRequestParams,\n} | {\n    status: \"disconnected\",\n} | {\n    status: \"unknown\",\n}\n\nconst initialClusterConnectionState: ClusterConnectionState = {\n    status: \"unknown\"\n}\n\nexport function clusterConnectionReducer(state = initialClusterConnectionState, action: AllActions): ClusterConnectionState {\n    switch (action.type) {\n        case clusterActions.ActionTypes.NOT_CONNECTED: {\n            return {\n                status: \"disconnected\"\n            };\n        }\n        case clusterActions.ActionTypes.CONNECTED: {\n            return {\n                status: \"connected\",\n                params: action.payload.params,\n            }\n        }\n    }\n    return state;\n}","import { AllActions } from \"../actions\";\nimport * as browserActions from '../browser/actions';\nimport * as datasetActions from '../dataset/actions';\nimport { DatasetFormParams, MsgPartConfig } from \"../messages\";\nimport * as configActions from './actions';\nimport { makeUnique } from \"./helpers\";\n\nexport interface LocalConfig {\n    cwd: string,\n    fileHistory: string[],\n    lastOpened: {\n        [path: string]: DatasetFormParams\n    }\n}\n\nexport interface ConfigMeta {\n    haveConfig: boolean,\n}\n\nexport type ConfigParams = MsgPartConfig & LocalConfig;\nexport type ConfigState = ConfigParams & ConfigMeta;\n\nconst initialConfigState: ConfigState = {\n    version: \"\",\n    revision: \"\",\n    localCores: 0,\n    cwd: \"/\",\n    separator: \"/\",\n    lastOpened: {},\n    fileHistory: [],\n    haveConfig: false,\n}\n\nexport function configReducer(state = initialConfigState, action: AllActions): ConfigState {\n    switch (action.type) {\n        case configActions.ActionTypes.FETCHED: {\n            return Object.assign({}, action.payload.config, { haveConfig: true });\n        }\n        case browserActions.ActionTypes.DIRECTORY_LISTING: {\n            return Object.assign({}, state, {\n                cwd: action.payload.path,\n            });\n        }\n        case datasetActions.ActionTypes.CREATE: {\n            const newLastOpened = Object.assign({}, state.lastOpened, { [action.payload.dataset.params.path]: action.payload.dataset.params });\n            const newFileHistory = makeUnique([\n                action.payload.dataset.params.path, ...state.fileHistory\n            ]).slice(0, 11);\n            return Object.assign({}, state, {\n                lastOpened: newLastOpened,\n                fileHistory: newFileHistory,\n            });\n        }\n    }\n    return state;\n}","import { AllActions } from \"../actions\";\nimport * as channelActions from '../channel/actions';\nimport { constructById, filterWithPred, insertById, updateById } from \"../helpers/reducerHelpers\";\nimport { Dataset, DatasetState, DatasetStatus } from \"../messages\";\nimport * as datasetActions from './actions';\nimport { DatasetsState, OpenDatasetState } from \"./types\";\n\nconst initialDatasetState: DatasetsState = {\n    byId: {},\n    ids: [],\n};\n\nexport function datasetReducer(state = initialDatasetState, action: AllActions): DatasetsState {\n    switch (action.type) {\n        case channelActions.ActionTypes.INITIAL_STATE: {\n            const datasets = action.payload.datasets.map(ds => Object.assign({}, ds, { status: DatasetStatus.OPEN }));\n            return {\n                byId: constructById(datasets, ds => ds.id),\n                ids: datasets.map(ds => ds.id),\n            }\n        }\n        case datasetActions.ActionTypes.CREATE: {\n            const ds: Dataset = {\n                ...action.payload.dataset,\n                status: DatasetStatus.OPENING\n            };\n            return insertById(state, action.payload.dataset.id, ds);\n        }\n        case datasetActions.ActionTypes.CREATED: {\n            const ds = Object.assign({}, action.payload.dataset, { status: DatasetStatus.OPEN });\n            return updateById(state, action.payload.dataset.id, ds);\n        }\n        case datasetActions.ActionTypes.ERROR: {\n            return filterWithPred(state, (r: DatasetState) => r.id !== action.payload.dataset);\n        }\n        case datasetActions.ActionTypes.DELETE: {\n            return updateById(state, action.payload.dataset, { status: DatasetStatus.DELETING });\n        }\n        case datasetActions.ActionTypes.DELETED: {\n            return filterWithPred(state, (r: DatasetState) => r.id !== action.payload.dataset);\n        }\n    }\n    return state;\n}\n\nconst initialOpenDatasetState: OpenDatasetState = {\n    busy: false,\n    busyPath: \"\",\n    formVisible: false,\n    formPath: \"/\",\n    formCachedParams: undefined,\n    formDetectedParams: undefined,\n}\n\nexport function openDatasetReducer(state = initialOpenDatasetState, action: AllActions): OpenDatasetState {\n    switch (action.type) {\n        case datasetActions.ActionTypes.OPEN: {\n            return {\n                ...state,\n                formVisible: true,\n                formPath: action.payload.path,\n                formCachedParams: action.payload.cachedParams,\n                formDetectedParams: action.payload.detectedParams,\n            };\n        }\n        case datasetActions.ActionTypes.CANCEL_OPEN: {\n            return {\n                ...state,\n                formVisible: false,\n            }\n        }\n        case datasetActions.ActionTypes.CREATE: {\n            return {\n                ...state,\n                formVisible: false,\n            }\n        }\n        case datasetActions.ActionTypes.DETECT: {\n            return {\n                ...state,\n                busyPath: action.payload.path,\n                busy: true,\n            }\n        }\n        case datasetActions.ActionTypes.DETECTED:\n        case datasetActions.ActionTypes.DETECT_FAILED: {\n            return {\n                ...state,\n                busyPath: \"\",\n                busy: false,\n            }\n        }\n    }\n    return state;\n}","import { AllActions } from \"../actions\";\nimport * as analysisActions from '../analysis/actions';\nimport * as browserActions from '../browser/actions';\nimport * as channelActions from '../channel/actions';\nimport * as datasetActions from '../dataset/actions';\nimport { ById, filterWithPred, insertById } from \"../helpers/reducerHelpers\";\nimport * as errorActions from './actions';\n\nexport interface ErrorMessage {\n    id: string,\n    msg: string,\n    timestamp: number,\n}\n\nexport type ErrorState = ById<ErrorMessage>;\n\nconst initialErrorState: ErrorState = {\n    byId: {},\n    ids: [],\n};\n\nexport function errorReducer(state = initialErrorState, action: AllActions): ErrorState {\n    switch (action.type) {\n        case browserActions.ActionTypes.ERROR:\n        case datasetActions.ActionTypes.ERROR:\n        case channelActions.ActionTypes.ERROR:\n        case analysisActions.ActionTypes.ERROR:\n        case channelActions.ActionTypes.JOB_ERROR: {\n            return insertById(state, action.payload.id, {\n                id: action.payload.id,\n                msg: action.payload.msg,\n                timestamp: action.payload.timestamp,\n            });\n        }\n        case channelActions.ActionTypes.OPEN: {\n            return initialErrorState;\n        }\n        case errorActions.ActionTypes.DISMISS: {\n            return filterWithPred(state, (r: ErrorMessage) => r.id !== action.payload.id);\n        }\n    }\n    return state;\n}","import { AllActions } from \"../actions\";\nimport * as channelActions from '../channel/actions';\nimport { ById, insertById, updateById } from \"../helpers/reducerHelpers\";\nimport * as jobActions from './actions';\nimport { JobRunning, JobState, JobStatus } from \"./types\";\n\nexport type JobReducerState = ById<JobState>;\n\nconst initialJobState: JobReducerState = {\n    byId: {},\n    ids: [],\n};\n\nexport function jobReducer(state = initialJobState, action: AllActions): JobReducerState {\n    switch (action.type) {\n        case jobActions.ActionTypes.CREATE: {\n            const createResult = insertById(\n                state,\n                action.payload.id,\n                {\n                    id: action.payload.id,\n                    dataset: action.payload.dataset,\n                    running: JobRunning.CREATING,\n                    status: JobStatus.CREATING,\n                    results: [],\n                    startTimestamp: action.payload.timestamp,\n                }\n            )\n            return createResult;\n        }\n        case channelActions.ActionTypes.JOB_STARTED: {\n            return updateById(\n                state,\n                action.payload.job,\n                {\n                    running: JobRunning.RUNNING,\n                    status: JobStatus.IN_PROGRESS,\n                    startTimestamp: action.payload.timestamp,\n                }\n            )\n        }\n        case channelActions.ActionTypes.TASK_RESULT: {\n            return updateById(\n                state,\n                action.payload.job,\n                {\n                    results: action.payload.results,\n                }\n            );\n        }\n        case channelActions.ActionTypes.FINISH_JOB: {\n            const { job, timestamp, results } = action.payload;\n            return updateById(\n                state,\n                job,\n                {\n                    running: JobRunning.DONE,\n                    status: JobStatus.SUCCESS,\n                    results,\n                    endTimestamp: timestamp,\n                }\n            );\n        }\n        case channelActions.ActionTypes.JOB_ERROR: {\n            const { job, timestamp } = action.payload;\n            return updateById(\n                state,\n                job,\n                {\n                    running: JobRunning.DONE,\n                    status: JobStatus.ERROR,\n                    endTimestamp: timestamp,\n                }\n            )\n        }\n    }\n    return state;\n}","import { combineReducers } from \"redux\";\nimport { analysisReducer } from \"./analysis/reducers\";\nimport { directoryBrowserReducer } from './browser/reducers';\nimport { channelStatusReducer } from \"./channel/reducers\";\nimport { clusterConnectionReducer } from \"./cluster/reducers\";\nimport { configReducer } from \"./config/reducers\";\nimport { datasetReducer, openDatasetReducer } from \"./dataset/reducers\";\nimport { errorReducer } from \"./errors/reducers\";\nimport { jobReducer } from \"./job/reducers\";\n\nexport const rootReducer = combineReducers({\n    analyses: analysisReducer,\n    channelStatus: channelStatusReducer,\n    clusterConnection: clusterConnectionReducer,\n    datasets: datasetReducer,\n    openDataset: openDatasetReducer,\n    jobs: jobReducer,\n    errors: errorReducer,\n    config: configReducer,\n    browser: directoryBrowserReducer,\n})\n\nexport type RootReducer = ReturnType<typeof rootReducer>;","// tslint:disable:ordered-imports\nimport \"core-js/fn/symbol/iterator.js\";\nimport \"core-js/es6/symbol.js\";\nimport 'react-app-polyfill/ie11';\n// tslint:enable:ordered-imports\n\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { applyMiddleware, compose, createStore } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\nimport { rootSaga } from './sagas';\nimport { rootReducer } from './store';\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst composeEnhancers = (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(rootReducer, composeEnhancers(\n    applyMiddleware(\n        sagaMiddleware,\n    )\n));\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root') as HTMLElement\n);\nregisterServiceWorker();\n\nsagaMiddleware.run(rootSaga);"],"sourceRoot":""}