{"version":3,"sources":["job/components/ResultImage.module.css","images/LiberTEM logo-medium.png","cluster/actions.ts","helpers/actionHelpers.ts","helpers/index.ts","messages.ts","browser/actions.ts","cluster/components/LocalConnectionForm.tsx","cluster/components/TCPConnectionForm.tsx","cluster/components/ClusterConnectionForm.tsx","channel/components/ChannelConnecting.tsx","channel/components/ChannelShutdown.tsx","channel/components/ChannelStatus.tsx","browser/components/FileBrowserEntry.tsx","config/actions.ts","browser/components/FileBrowserHeader.tsx","browser/components/FileEntry.tsx","browser/components/FolderEntry.tsx","browser/components/PathDropDownItem.tsx","browser/components/PathInput.tsx","browser/components/RecentFiles.tsx","browser/components/PathBar.tsx","browser/components/FileBrowser.tsx","job/types.ts","browser/components/BrowserWrapper.tsx","widgets/BusySpinner.tsx","widgets/BusyWrapper.tsx","widgets/HandleParent.tsx","job/components/ResultImage.tsx","job/components/Result.tsx","job/components/Selectors.tsx","job/components/ResultList.tsx","widgets/constraints.ts","widgets/styles.ts","widgets/Disk.tsx","widgets/DraggableHandle.tsx","compoundAnalysis/actions.ts","widgets/kbdHandler.ts","compoundAnalysis/components/DefaultFrameView.tsx","compoundAnalysis/components/FramePicker.tsx","compoundAnalysis/components/ModeSelector.tsx","widgets/Rect.tsx","compoundAnalysis/components/roi/RectROI.tsx","compoundAnalysis/components/roi/RoiPicker.tsx","compoundAnalysis/components/roi/DiskROI.tsx","compoundAnalysis/components/layouts/AnalysisLayoutTwoCol.tsx","helpers/apiHelpers.ts","compoundAnalysis/getMetadata.tsx","compoundAnalysis/components/Download.tsx","compoundAnalysis/components/Toolbar.tsx","compoundAnalysis/helpers.ts","compoundAnalysis/components/CenterOfMassAnalysis.tsx","helpers/svg.ts","widgets/Ring.tsx","compoundAnalysis/components/layouts/AnalysisLayoutTwoRes.tsx","compoundAnalysis/components/Clustering.tsx","compoundAnalysis/components/DiskMaskAnalysis.tsx","compoundAnalysis/components/FEM.tsx","compoundAnalysis/components/FFTFramePicker.tsx","compoundAnalysis/components/FFTSumFrames.tsx","compoundAnalysis/components/FFTFrameView.tsx","compoundAnalysis/components/layouts/AnalysisLayoutThreeCol.tsx","compoundAnalysis/components/FFTAnalysis.tsx","compoundAnalysis/components/PointSelectionAnalysis.tsx","compoundAnalysis/components/RadialFourierAnalysis.tsx","compoundAnalysis/components/RingMaskAnalysis.tsx","compoundAnalysis/types.ts","compoundAnalysis/components/base/Analysis.tsx","compoundAnalysis/components/base/AnalysisList.tsx","helpers/reducerHelpers.ts","compoundAnalysis/components/base/AnalysisSelect.tsx","dataset/components/AddAnalysis.tsx","dataset/api.ts","dataset/validate.ts","dataset/helpers.ts","dataset/components/DatasetParams.tsx","dataset/actions.ts","dataset/components/DatasetInfo.tsx","errors/actions.ts","dataset/components/DatasetToolbar.tsx","dataset/components/Dataset.tsx","dataset/components/BLOParamsForm.tsx","dataset/components/DatasetTypeSelect.tsx","dataset/components/EMPADParamsForm.tsx","dataset/components/FRMS6ParamsForm.tsx","dataset/components/HDF5ParamsForm.tsx","dataset/components/K2ISParamsForm.tsx","dataset/components/TupleInputPart.tsx","dataset/components/TupleInput.tsx","dataset/components/MIBParamsForm.tsx","dataset/components/RawFileParamsForm.tsx","dataset/components/SEQParamsForm.tsx","dataset/components/SERParamsForm.tsx","dataset/components/DatasetOpen.tsx","dataset/components/DatasetOpenSpinner.tsx","dataset/components/DatasetList.tsx","channel/actions.ts","errors/components/Error.tsx","errors/components/ErrorList.tsx","helpers/hooks.ts","About.tsx","shutdown/api.ts","shutdown/components/ShutdownButton.tsx","Menu.tsx","App.tsx","registerServiceWorker.ts","config/helpers.ts","browser/api.ts","channel/messages.ts","browser/sagas.ts","channel/sagas.ts","cluster/api.ts","analysis/actions.ts","cluster/sagas.ts","job/actions.ts","job/api.ts","compoundAnalysis/api.ts","compoundAnalysis/sagas.ts","config/api.ts","config/sagas.ts","dataset/sagas.ts","sagas.ts","analysis/reducers.ts","browser/reducers.ts","channel/reducers.ts","cluster/reducers.ts","compoundAnalysis/reducers.ts","config/reducers.ts","dataset/reducers.ts","errors/reducers.ts","job/reducers.ts","store.ts","index.tsx"],"names":["module","exports","ActionTypes","createAction","type","payload","meta","undefined","Actions","notConnected","NOT_CONNECTED","connect","params","CONNECT","connecting","CONNECTING","connected","CONNECTED","error","msg","timestamp","id","ERROR","assertNotReached","message","Error","defaultDebounce","fn","delay","_","maxWait","getEnumValues","e","Object","keys","ClusterTypes","DatasetTypes","AdditionalInfo","DatasetStatus","AnalysisTypes","ClusterTypeMetadata","LOCAL","label","TCP","helpText","withFormik","mapPropsToValues","ownProps","numWorkers","config","localCores","handleSubmit","values","formikBag","onSubmit","props","touched","errors","isSubmitting","dirty","handleChange","handleBlur","handleReset","Form","Field","htmlFor","name","value","onChange","onBlur","Button","primary","disabled","address","lastConnection","mapDispatchToProps","connectToCluster","clusterActions","clusterTypeOptions","map","t","text","ClusterConnectionForm","state","clusterType","lastConnectionType","setType","setState","data","this","Dropdown","inline","options","Segment","renderForm","React","ChannelConnecting","Message","icon","Icon","loading","Content","Header","ChannelShutdown","negative","messages","waiting","clusterMessages","ConnectedNotReady","haveConfig","useSelector","clusterConnection","status","ChannelStatus","children","channelStatus","list","path","LIST_DIRECTORY","dirListing","dirs","files","drives","places","DIRECTORY_LISTING","open","OPEN","cancel","CANCEL","select","SELECT","selectFullPath","SELECT_FULL_PATH","detectParams","DETECT_PARAMS","paramsDetected","PARAMS_DETECTED","TimeStamp","ts","date","Date","fmtDate","toLocaleDateString","fmtTime","toLocaleTimeString","title","style","display","whiteSpace","width","marginRight","FileSize","fmtSize","bytes","si","thresh","Math","abs","size","unit","units","u","length","toFixed","humanFileSize","textAlign","Cell","overflow","textOverflow","FileBrowserEntry","onClick","details","myStyle","cursor","tsStyles","paddingRight","flexGrow","owner","ctime","mtime","FileBrowserHeader","alignRight","paddingBottom","FileEntry","dispatch","browserActions","window","setTimeout","FETCH","FETCHED","FETCH_FAILED","TOGGLE_STAR","toString","newProps","Item","initialPath","enableReinitialize","Input","autoComplete","lastOpened","fileHistory","separator","recentFiles","filter","item","floating","Menu","content","option","idx","key","refresh","currentPath","handleInputChange","goUp","toggleStar","configActions","starred","driveOptions","placeOptions","starOptions","isStarred","includes","starredIcon","bookmarkTitle","listRef","scrollToTop","current","scrollToItem","sortByKey","array","getKey","sort","a","b","x","y","JobRunning","JobStatus","browser","isLoading","getSortKey","toLowerCase","dirEntries","dir","fileEntries","f","entries","concat","overflowY","ref","height","itemCount","itemSize","index","Group","as","isOpen","busy","openDataset","formVisible","labelPosition","BusySpinner","margin","padding","position","bottom","right","color","opacity","BusyWrapper","HandleParent","currentHandle","handleDragStart","h","handleDrop","handleMouseMove","externalMouseMove","handleMouseLeave","externalLeave","handleMouseUp","externalMouseUp","onMouseMove","onMouseLeave","onMouseUp","onKeyDown","onKeyboardEvent","outline","tabIndex","fill","renderHandles","handles","i","elem","ResultImage","job","channel","result","results","className","styles","fallback","viewBox","default","xlinkHref","imageURL","ResultWrapper","styled","svg","Result","extraHandles","extraWidgets","running","DONE","Selectors","div","ResultListPlaceholder","border","ResultList","selectedChannel","selectChannel","analysis","jobsById","displayedJob","dt","endTimestamp","startTimestamp","currentResult","subtitle","selectors","getMsg","selectedImg","getJob","genericRender","ResultImageSelector","availableImages","description","compoundAnalysis","compoundAnalyses","byId","analyses","analysisIndex","jobs","inRectConstraint","p","max","min","cbToRadius","cx","cy","cb","dx","dy","sqrt","dist","keepOnCY","riConstraint","outerPos","otherX","roConstraints","innerPos","defaultMaskStyles","imageWidth","fillOpacity","strokeOpacity","stroke","strokeWidth","Disk","imageHeight","r","StyledCircle","circle","Cross","FocusGroup","g","Handle","scale","withCross","focusRef","args","transform","crossSpec","cross","d","relativeCoords","parent","ownerSVGElement","inWidthAttr","getAttribute","inWidth","getBoundingClientRect","getScalingFactor","parentPos","pageX","left","pageXOffset","pageY","top","pageYOffset","DraggableHandle","posRef","dragging","drag","move","stopDrag","applyConstraint","constraint","startDrag","preventDefault","parentOnDragStart","focus","onDragMove","constrained","parentOnDrop","handleKeyDown","update","delta","shiftKey","handleKeyEvent","newCoords","visibility","onMouseDown","renderCommon","renderDragging","DefaultModes","DefaultRois","dataset","analysisType","CREATE","autoStart","CREATED","compoundAnalysisId","ENABLE_AUTOSTART","RUN","RUNNING","jobIndex","REMOVE","REMOVED","useFramePicker","enabled","scanWidth","scanHeight","setCx","setCy","useDispatch","useEffect","compoundAnalysisActions","PICK_FRAME","parameters","onPickChange","pickX","pickY","newX","round","newY","coords","onDragStart","onDrop","ModeSelector","modes","currentMode","onModeChange","Rect","ymin","xmin","useRectROI","minLength","useState","setx","sety","setwidth","setheight","handleCornerChange","newx","newy","handleShapeChange","smthHandle","rectRoiParameters","roi","shape","rectRoiHandles","rectRoiWidgets","useRoiPicker","roiParameters","handle","analysisActions","clearTimeout","JSON","stringify","useDefaultFrameView","doAutoStart","availableModes","SUM","SD","PICK","availableRois","ALL","DISK","RECT","frameMode","setMode","setRoi","frameModeSelector","newMode","roiSelector","newRoi","widgets","pickCoords","pickHandles","setR","handleCenterChange","newCx","newCy","handleRChange","newR","rHandle","diskRoiParameters","diskRoiHandles","diskRoiWidgets","useDiskROI","SD_FRAMES","SUM_FRAMES","frameViewTitle","AnalysisLayoutTwoCol","toolbar","attached","Grid","columns","Row","Column","getApiBasePath","loc","location","pathname","endsWith","genericDelete","basePath","fetch","credentials","method","json","genericPut","body","getMetadata","typeName","CompoundAnalysisMetadata","DownloadItems","currentFormat","analysesById","some","jobId","SUCCESS","href","analysisId","desc","getAnalysisDescription","includeInDownload","getDownloadChannels","join","Download","formats","resultFileFormats","formatOptions","identifier","setFormat","Modal","trigger","Popup","Toolbar","busyIdxs","onApply","applyIconProps","analysisIdxsToInclude","filteredAnalyses","indexOf","reduce","prevValue","every","getAnalysisStatus","CenterOfMassAnalysis","frameViewWidgets","resultHandles","resultWidgets","CENTER_OF_MASS","getPathArc","center","start","end","radius","degree","points","push","getLocationFromAngle","clockWise","getCirclePath","radian","PI","cos","sin","Ring","ri","pathSpec","ro","fillRule","AnalysisLayoutTwoRes","mid","clustparams","title1","title2","title3","ClustAnalysis","setRi","setRo","riHandle","roHandle","minDist","setMinDist","nPeaks","setNPeaks","nClust","setNClust","handleRIChange","handleROChange","SUM_SIG","CLUST","n_clust","n_peaks","min_dist","paramsVisible","setParamsVisible","Accordion","Title","active","event","step","target","valueAsNumber","DiskMaskAnalysis","APPLY_DISK_MASK","FEMAnalysis","FEM","useFFTFramePicker","real_rad","real_centerx","real_centery","PICK_FFT_FRAME","useFFTSumFrames","FFTSUM_FRAMES","useFFTFrameView","AnalysisLayoutThreeCol","FFTAnalysis","radIn","radOut","frameViewWidgetsfft","check","setCheck","realCenterX","realCenterY","realRad","frameViewWidgetsreal","APPLY_FFT_MASK","rad_in","rad_out","checked","PointSelectionAnalysis","APPLY_POINT_SELECTOR","RadialFourierAnalysis","nBins","maxOrder","RADIAL_FOURIER","n_bins","max_order","RingMaskAnalysis","APPLY_RING_MASK","component","AnalysisDispatcherComponent","datasets","AnalysisComponent","mainType","AnalysisList","ids","Analysis","updateById","partialRecord","newObj","assign","newById","insertById","record","constructById","items","acc","filterWithPred","pred","toggleItemInList","analysisTypeOptions","AnalysisSelect","labeled","button","handleAddAnalysis","deleteDataset","detectDataset","encodeURIComponent","schemaCache","getSchema","cached","Promise","resolve","schemaResponse","convertErrors","res","forEach","err","fieldName","dataPath","replace","match","plainName","then","schema","validate","Ajv","compile","parseNumList","nums","split","part","trim","getInitial","otherwise","getInitialName","pathfind","isKnownDatasetType","detectedType","v","isAdditionalInfo","param","withValidation","opts","formToJson","setSubmitting","validateOpen","validateOnChange","validateOnBlur","renderParams","Table","Array","DatasetParams","HeaderCell","Body","DiagElem","diagnostics","renderValue","DiagElems","DatasetInfo","cachedParams","detectedParams","CANCEL_OPEN","DELETE","DELETED","DETECT","DETECTED","DETECT_FAILED","handleRemoveDataset","datasetActions","DatasetContainer","OPENING","DELETING","dividing","marginTop","marginBottom","horizontal","link","flexShrink","initial","BLO","isValidating","onCancel","datasetTypeOptions","DatasetTypeSelect","currentType","scan_size","EMPAD","FRMS6","dataset_paths","ds_path","HDF5","dsPathInput","setFieldValue","dsPathOptions","dsPath","placeholder","fluid","search","selection","defaultValue","K2IS","TupleInputPart","tupleKey","tupleInputChangeHandle","commaPressHandle","tupleRef","keyCode","TupleInput","minLen","maxLen","tupleInputValue","initialList","parseNumListWithPadding","tupleInputRefsArray","val","newTupleInputValue","newTupleDim","hidden","basic","pop","MIB","enable_direct","detector_size","dtype","RAW","SEQ","SER","getDefaultDSType","didReset","openState","formCachedParams","formDetectedParams","getFormInitial","additionalInfo","allInfo","info","getAdditionalInfo","DatasetOpen","setReset","formInitial","defaultType","datasetType","setDatasetType","doSetType","form","formPath","commonParams","uuid","onReset","MIBParamsForm","BLOParamsForm","K2ISParamsForm","SEQParamsForm","busyPath","DatasetList","dsId","Dataset","DISMISS","DISMISS_ALL","dismiss","errorActions","onDismiss","channelConnected","latestErrors","slice","showModal","handleEsc","ev","code","document","addEventListener","removeEventListener","version","revision","List","src","alt","initialState","INITIAL_STATE","jobStarted","JOB_STARTED","finishJob","FINISH_JOB","taskResult","TASK_RESULT","jobError","JOB_ERROR","close","CLOSE","shutdown","SHUTDOWN","closeloop","CLOSE_LOOP","cancelled","CANCELLED","analysisCreated","ANALYSIS_CREATED","analysisUpdated","ANALYSIS_UPDATED","analysisRemoved","ANALYSIS_REMOVED","doShutdown","closeLoopAction","channelActions","shutdownAction","ShutdownButton","modal","modalOpen","modalClose","handleShutdown","response","now","floated","closeOnDimmerClick","onClose","HeaderMenu","fixed","App","Container","logo","isLocalhost","Boolean","hostname","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","joinPaths","parts","removeSep","RegExp","escapeRegExp","mergeLocalStorage","serverConfig","localSettings","localStorage","getItem","getDefaultLocalConfig","localSettingsParsed","parse","defaultConfig","setLocalStorage","cwd","setItem","makeUnique","inp","curr","getDirectoryListing","url","MessageTypes","directoryListingSaga","fetchOnRequest","fetchDirectoryListing","fetchDirectoryListOnOpen","fork","take","action","newPath","call","put","browserState","alternative","home","createMessage","messageType","attribs","Messages","objectURL","BINARY","webSocketSaga","actionsFromChannel","handleBinaryParts","handleTaskResult","handleFinishJob","createWebSocketChannel","eventChannel","emit","onMessage","Blob","channelMessages","URL","createObjectURL","parsed","onOpen","END","onError","ws","WebSocket","port","getApiWSURL","socketChannel","CREATE_DATASET","DELETE_DATASET","CANCEL_JOB_DONE","numParts","binMsg","followup","numMessages","images","descriptions","connection","checkClusterConnection","connectSaga","putClusterStatus","trackClusterConnection","clusterConnectionSaga","conn","takeEvery","all","UPDATED","startJob","cancelJob","createOrUpdateAnalysis","removeAnalysis","createOrUpdateCompoundAnalysis","removeCompoundAnalysis","cleanupOnRemove","createCompoundAnalysisSaga","createFromServerState","createOrUpdate","analysisSidecar","removeJobsForAnalysis","doRemoveAnalysisSaga","analysisRootSaga","selectDataset","selectCompoundAnalysis","selectAnalysis","selectJob","sidecarTask","msgPart","oldJobId","newAnalysisId","updatedCompoundAnalysis","actionChannel","buffers","sliding","runOrParamsChannel","existingAnalysisId","jobActions","getConfig","getConfigOnReconnect","getConfigSaga","updateLocalStorageConfig","firstConfigFetch","configRootSaga","configResponse","mergedConfig","removeItem","createDatasetSaga","deleteDatasetSaga","doDetectDataset","doOpenDataset","openDatasetSagaFullPath","openDatasetSaga","datasetRootSaga","resp","fullPath","detectResult","shouldOpen","datasetParams","doDetectDatasetRes","rootSaga","initialAnalysisState","ChannelStatusCodes","initialBrowserState","initialChannelState","WAITING","initialClusterConnectionState","initialCompoundAnalysisState","initialConfigState","initialDatasetState","initialOpenDatasetState","initialErrorState","initialJobState","rootReducer","combineReducers","newCompoundAnalysis","newAnalyses","ca","oldJobs","analysisState","analysisIdForJob","find","READY","DISCONNECTED","ds","createResult","CREATING","IN_PROGRESS","jobState","newLastOpened","newFileHistory","newLastConnection","place","sagaMiddleware","createSagaMiddleware","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","ReactDOM","getElementById","process","origin","headers","get","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker","run"],"mappings":"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","file":"static/js/main.5993bb95.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"default\":\"ResultImage_default__1X7FO\",\"fallback\":\"ResultImage_fallback__kO3cw\"};","module.exports = __webpack_public_path__ + \"static/media/LiberTEM logo-medium.7999e0dc.png\";","import { ActionsUnion, createAction } from '../helpers/actionHelpers';\nimport { ConnectRequestParams } from '../messages';\n\nexport enum ActionTypes {\n    NOT_CONNECTED = 'CLUSTER_NOT_CONNECTED',\n    CONNECT = 'CLUSTER_CONNECT',\n    CONNECTING = 'CLUSTER_CONNECTING',\n    CONNECTED = 'CLUSTER_CONNECTED',\n    ERROR = 'CLUSTER_ERROR'\n    \n}\n\nexport const Actions = {\n    notConnected: () => createAction(ActionTypes.NOT_CONNECTED),\n    connect: (params: ConnectRequestParams) => createAction(ActionTypes.CONNECT, { params },),\n    connecting: () => createAction(ActionTypes.CONNECTING),\n    connected: (params: ConnectRequestParams) => createAction(ActionTypes.CONNECTED, { params }),\n    error: (msg: string, timestamp: number, id: string) => createAction(ActionTypes.ERROR, { msg, timestamp, id }),\n\n}\n\nexport type Actions = ActionsUnion<typeof Actions>;\n","import { ActionCreatorsMapObject } from \"redux\";\n\nexport interface Action<T extends string> {\n    type: T\n}\n\nexport interface ActionWithPayload<T extends string, P> extends Action<T> {\n    payload: P\n}\n\nexport interface ActionWithMeta<T extends string, P, M> extends ActionWithPayload<T, P> {\n    meta: M\n}\n\nexport function createAction<T extends string>(type: T): Action<T>\nexport function createAction<T extends string, P, M>(type: T, payload?: P): ActionWithPayload<T, P>\nexport function createAction<T extends string, P, M>(type: T, payload?: P, meta?: M): ActionWithMeta<T, P, M>\nexport function createAction<T extends string, P, M>(type: T, payload?: P, meta?: M) {\n    if (meta === undefined && payload === undefined) {\n        return { type };\n    } else if (meta === undefined) {\n        return { type, payload };\n    } else {\n        return { type, payload, meta }\n    }\n}\n\nexport type ActionsUnion<A extends ActionCreatorsMapObject> = ReturnType<A[keyof A]>","import * as _ from \"lodash\";\n\nexport function assertNotReached(message: string): never {\n    throw new Error(message);\n}\n\nexport function defaultDebounce<T extends (...args: any[]) => any>(fn: T, delay: number = 50) {\n    return _.debounce(fn, delay, { maxWait: delay });\n}\n\nexport function getEnumValues<E>(e: E): Array<keyof E> {\n    return Object.keys(e) as Array<keyof E>;\n}","import { JobList } from \"./analysis/types\"\n\n/*\n * Common\n */\n\nexport interface FollowupPart {\n    numMessages: number,\n    descriptions: Array<{ title: string, desc: string, includeInDownload: boolean }>,\n}\n\nexport interface MsgPartConfig {\n    version: string,\n    revision: string,\n    localCores: number,\n    cwd: string,\n    separator: string,\n    resultFileFormats: {\n        [id: string]: {\n            identifier: string,\n            description: string,\n        }\n    },\n}\n\nexport interface GetConfigResponse {\n    status: \"ok\",\n    config: MsgPartConfig,\n}\n\n/*\n * Connection\n */\n\nexport enum ClusterTypes {\n    LOCAL = \"LOCAL\",\n    TCP = \"TCP\",\n}\n\nexport const ClusterTypeMetadata: { [s: string]: { [s: string]: string } } = {\n    [ClusterTypes.LOCAL]: {\n        label: \"Create local cluster\",\n    },\n    [ClusterTypes.TCP]: {\n        label: \"Connect to cluster\",\n        helpText: \"can be either local or remote, connection via TCP\",\n    }\n}\n\nexport interface ConnectRequestLocalCluster {\n    type: ClusterTypes.LOCAL,\n    numWorkers?: number,\n}\n\nexport interface ConnectRequestTCP {\n    type: ClusterTypes.TCP,\n    address: string,\n}\n\nexport type ConnectRequestParams = ConnectRequestLocalCluster | ConnectRequestTCP\n\nexport interface ConnectRequest {\n    connection: ConnectRequestParams\n}\n\nexport type ConnectResponse = {\n    status: \"ok\",\n    connection: ConnectRequest,\n} | {\n    status: \"disconnected\",\n    connection: {},\n} | {\n    status: \"error\",\n    messageType: string,\n    msg: string,\n}\n\n/*\n * Dataset\n */\n\nexport enum DatasetTypes {\n    HDF5 = \"HDF5\",\n    RAW = \"RAW\",\n    MIB = \"MIB\",\n    BLO = \"BLO\",\n    K2IS = \"K2IS\",\n    SER = \"SER\",\n    FRMS6 = \"FRMS6\",\n    EMPAD = \"EMPAD\",\n    SEQ = \"SEQ\",\n}\n\nexport interface DatasetParamsCommon {\n    name: string,\n}\n\nexport enum AdditionalInfo {\n    dataset_paths = \"dataset_paths\",\n}\n\nexport type DatasetParamsHDF5 = {\n    type: DatasetTypes.HDF5,\n    path: string,\n    ds_path: string,\n    dataset_paths: string[],\n} & DatasetParamsCommon\n\nexport type DatasetParamsRaw = {\n    type: DatasetTypes.RAW,\n    path: string,\n    dtype: string,\n    detector_size: number[],\n    enable_direct: boolean,\n    scan_size: number[],\n} & DatasetParamsCommon\n\nexport type DatasetParamsMIB = {\n    type: DatasetTypes.MIB,\n    path: string,\n    scan_size: number[],\n} & DatasetParamsCommon\n\nexport type DatasetParamsBLO = {\n    type: DatasetTypes.BLO,\n    path: string,\n} & DatasetParamsCommon\n\nexport type DatasetParamsK2IS = {\n    type: DatasetTypes.K2IS,\n    path: string,\n} & DatasetParamsCommon\n\nexport type DatasetParamsSER = {\n    type: DatasetTypes.SER,\n    path: string,\n} & DatasetParamsCommon\n\nexport type DatasetParamsFRMS6 = {\n    type: DatasetTypes.FRMS6,\n    path: string,\n} & DatasetParamsCommon\n\nexport type DatasetParamsEMPAD = {\n    type: DatasetTypes.EMPAD,\n    path: string,\n    scan_size: number[],\n} & DatasetParamsCommon\n\nexport type DatasetParamsSEQ = {\n    type: DatasetTypes.SEQ,\n    path: string,\n    scan_size: number[],\n} & DatasetParamsCommon\n\nexport type DatasetFormParams = DatasetParamsHDF5 | DatasetParamsRaw | DatasetParamsMIB | DatasetParamsBLO | DatasetParamsK2IS | DatasetParamsSER | DatasetParamsFRMS6 | DatasetParamsEMPAD | DatasetParamsSEQ\n\nexport interface DatasetCreateParams {\n    id: string,\n    params: DatasetFormParams,\n}\n\nexport enum DatasetStatus {\n    OPEN = \"OPEN\",\n    OPENING = \"OPENING\",\n    DELETING = \"DELETING\",\n}\n\nexport interface DiagElemMsg {\n    name: string,\n    value: string | DiagElemMsg[],\n}\n\ninterface DatasetCommon {\n    id: string,\n    params: DatasetFormParams,\n}\n\nexport type DatasetOpening = DatasetCommon & {\n    status: DatasetStatus.OPENING,\n}\n\nexport type DatasetDeleting = DatasetCommon & {\n    status: DatasetStatus.DELETING,\n}\n\nexport type DatasetOpen = DatasetCommon & {\n    status: DatasetStatus.OPEN,\n    params: {\n        shape: number[],\n    }\n    diagnostics: DiagElemMsg[],\n}\n\nexport type Dataset = DatasetOpening | DatasetOpen | DatasetDeleting;\n\nexport interface OpenDatasetRequest {\n    dataset: DatasetCreateParams\n}\n\nexport interface OpenDatasetResponseOk {\n    status: \"ok\",\n    dataset: string,  // TODO: uuid type?\n    details: Dataset,\n}\n\nexport interface OpenDatasetResponseError {\n    status: \"error\",\n    dataset: string,\n    msg: string,\n}\n\nexport type OpenDatasetResponse = OpenDatasetResponseOk | OpenDatasetResponseError\n\nexport interface DeleteDatasetResponse {\n    status: \"ok\",\n    dataset: string,\n}\n\nexport interface DetectDatasetSuccessResponse {\n    status: \"ok\",\n    datasetParams: DatasetFormParams,\n}\n\nexport interface DetectDatasetErrorResponse {\n    status: \"error\",\n    path: string,\n    msg: string,\n}\n\nexport type DetectDatasetResponse = DetectDatasetSuccessResponse | DetectDatasetErrorResponse;\n\nexport interface DataSetOpenSchemaSuccessResponse {\n    status: \"ok\",\n    ds_type: string,\n    schema: object,\n}\n\nexport interface DataSetOpenSchemaErrorResponse {\n    status: \"error\",\n    ds_type: string,\n    msg: string,\n}\n\nexport type DataSetOpenSchemaResponse = DataSetOpenSchemaSuccessResponse | DataSetOpenSchemaErrorResponse;\n\nexport type MsgPartInitialDataset = DatasetOpen\n\n// type alias to add client-side state to datasets\nexport type DatasetState = Dataset & {}\n\n/*\n * Job\n */\nexport interface MsgPartJob {\n    id: string,\n    analysis: string,\n}\n\nexport interface MaskDefRing {\n    shape: \"ring\",\n    cx: number,\n    cy: number,\n    ri: number,\n    ro: number\n}\n\n\nexport interface MaskDefDisk {\n    shape: \"disk\",\n    cx: number,\n    cy: number,\n    r: number,\n}\n\nexport interface PointDef {\n    shape: \"point\",\n    cx: number,\n    cy: number,\n}\n\n// TODO: shape doesn't really make sense here, needs to be restructured\nexport interface CenterOfMassParams {\n    shape: \"com\",\n    cx: number,\n    cy: number,\n    r: number,\n}\n\nexport interface PickFrameParams {\n    x: number,\n    y: number,\n}\n\nexport interface FFTSumFramesParams {\n    real_rad: number | null,\n    real_centerx: number | null,\n    real_centery: number | null,\n}\n\nexport interface PickFFTFrameParams {\n    x: number,\n    y: number,\n    real_rad: number | null,\n    real_centerx: number | null,\n    real_centery: number | null,\n}\nexport interface RadialFourierParams {\n    shape: \"radial_fourier\",\n    cx: number,\n    cy: number,\n    ri: number,\n    ro: number,\n    n_bins: number,\n    max_order: number\n}\n\nexport interface FFTParams {\n    rad_in: number,\n    rad_out: number,\n    real_rad: number | null,\n    real_centerx: number | null,\n    real_centery: number | null,\n}\n\n\nexport interface FrameParams {\n    roi: {\n        shape: \"rect\",\n        x: number,\n        y: number,\n        width: number,\n        height: number,\n    } | {\n        shape: \"disk\",\n        cx: number,\n        cy: number,\n        r: number,\n    } |\n    {}\n}\n\nexport interface ClustParams {\n    roi: {\n        shape: \"rect\",\n        x: number,\n        y: number,\n        width: number,\n        height: number,\n    } | {}\n    cx: number,\n    cy: number,\n    ri: number,\n    ro: number,\n    n_peaks: number,\n    n_clust: number,\n    min_dist: number,\n}\n\nexport enum AnalysisTypes {\n    APPLY_RING_MASK = \"APPLY_RING_MASK\",\n    APPLY_DISK_MASK = \"APPLY_DISK_MASK\",\n    APPLY_POINT_SELECTOR = \"APPLY_POINT_SELECTOR\",\n    CENTER_OF_MASS = \"CENTER_OF_MASS\",\n    SUM_FRAMES = \"SUM_FRAMES\",\n    SD_FRAMES = \"SD_FRAMES\",\n    PICK_FRAME = \"PICK_FRAME\",\n    PICK_FFT_FRAME = \"PICK_FFT_FRAME\",\n    APPLY_FFT_MASK = \"APPLY_FFT_MASK\",\n    FFTSUM_FRAMES = \"FFTSUM_FRAMES\",\n    RADIAL_FOURIER = \"RADIAL_FOURIER\",\n    FEM = \"FEM\",\n    CLUST = \"CLUST\",\n    SUM_SIG = \"SUM_SIG\",\n}\n\nexport interface RingMaskDetails {\n    analysisType: AnalysisTypes.APPLY_RING_MASK,\n    parameters: MaskDefRing,\n}\n\nexport interface FFTDetails {\n    analysisType: AnalysisTypes.APPLY_FFT_MASK,\n    parameters: FFTParams,\n}\n\nexport interface FEMDetails {\n    analysisType: AnalysisTypes.FEM,\n    parameters: MaskDefRing,\n}\n\nexport interface DiskMaskDetails {\n    analysisType: AnalysisTypes.APPLY_DISK_MASK,\n    parameters: MaskDefDisk,\n}\n\nexport interface PointDefDetails {\n    analysisType: AnalysisTypes.APPLY_POINT_SELECTOR,\n    parameters: PointDef,\n}\n\nexport interface CenterOfMassDetails {\n    analysisType: AnalysisTypes.CENTER_OF_MASS,\n    parameters: CenterOfMassParams,\n}\n\nexport interface SumFramesDetails {\n    analysisType: AnalysisTypes.SUM_FRAMES,\n    parameters: FrameParams\n}\n\nexport interface SDFramesDetails {\n    analysisType: AnalysisTypes.SD_FRAMES,\n    parameters: FrameParams\n}\n\nexport interface SumSigDetails {\n    analysisType: AnalysisTypes.SUM_SIG,\n    parameters: {}\n}\n\nexport interface FFTSumFramesDetails {\n    analysisType: AnalysisTypes.FFTSUM_FRAMES,\n    parameters: FFTSumFramesParams,\n}\n\nexport interface PickFrameDetails {\n    analysisType: AnalysisTypes.PICK_FRAME,\n    parameters: PickFrameParams,\n}\n\nexport interface PickFFTFrameDetails {\n    analysisType: AnalysisTypes.PICK_FFT_FRAME,\n    parameters: PickFFTFrameParams,\n}\n\nexport interface RadialFourierDetails {\n    analysisType: AnalysisTypes.RADIAL_FOURIER,\n    parameters: RadialFourierParams,\n}\n\nexport interface ClustDetails {\n    analysisType: AnalysisTypes.CLUST,\n    parameters: ClustParams,\n}\n\nexport type AnalysisParameters = MaskDefRing | MaskDefDisk | CenterOfMassParams | PointDef | PickFrameParams | RadialFourierParams | FFTParams | PickFFTFrameParams | FFTSumFramesParams | ClustParams;\nexport type AnalysisDetails = RingMaskDetails | DiskMaskDetails | CenterOfMassDetails | PointDefDetails | SumFramesDetails | SDFramesDetails | PickFrameDetails | RadialFourierDetails | FEMDetails | FFTDetails | FFTSumFramesDetails | PickFFTFrameDetails | SumSigDetails | ClustDetails;\n\nexport interface MsgPartAnalysis {\n    analysis: string,\n    dataset: string,\n    details: AnalysisDetails,\n    jobs: JobList,\n}\n\nexport type CreateOrUpdateAnalysisRequest = Omit<MsgPartAnalysis, \"analysis\" | \"jobs\">;\n\nexport type CreateAnalysisResponse = {\n    status: \"ok\",\n    messageType: \"ANALYSIS_CREATED\",\n} & MsgPartAnalysis\n\nexport type UpdateAnalysisResponse = {\n    status: \"ok\",\n    messageType: \"ANALYSIS_UPDATED\",\n} & MsgPartAnalysis\n\nexport type RemoveAnalysisResponse = {\n    status: \"ok\"\n    messageType: \"ANALYSIS_REMOVED\",\n    analysis: string,\n} | {\n    status: \"error\",\n    messageType: \"ANALYSIS_REMOVAL_FAILED\",\n    msg: string,\n    analysis: string,\n}\n\nexport interface CompoundAnalysisDetails {\n    mainType: AnalysisTypes,\n    analyses: string[],\n}\n\nexport interface MsgPartCompoundAnalysis {\n    compoundAnalysis: string,\n    dataset: string,\n    details: CompoundAnalysisDetails,\n}\n\nexport interface CreateOrUpdateCompoundAnalysisRequest {\n    dataset: string,\n    details: CompoundAnalysisDetails,\n}\n\nexport type CreateCompoundAnalysisResponse = {\n    status: \"ok\",\n    messageType: \"COMPOUND_ANALYSIS_CREATED\",\n} & MsgPartCompoundAnalysis;\n\nexport type RemoveCompoundAnalysisResponse = {\n    status: \"ok\"\n    messageType: \"COMPOUND_ANALYSIS_REMOVED\",\n    analysis: string,\n} | {\n    status: \"error\",\n    messageType: \"COMPOUND_ANALYSIS_REMOVAL_FAILED\",\n    msg: string,\n    analysis: string,\n}\n\nexport interface StartJobRequest {\n    job: {\n        analysis: string,\n    }\n}\n\nexport interface StartJobResponse {\n    status: \"ok\",\n    job: string,\n    details: MsgPartJob,\n}\n\nexport interface CancelJobResponse {\n    status: \"ok\",\n    job: string,\n}\n\n/*\n * fs browser\n */\n\n// some named place, i.e. \"Documents\", \"Home\", ...\nexport interface FSPlace {\n    title: string,\n    path: string,\n    key: string,\n}\n\nexport interface DirectoryListingDetails {\n    name: string,\n    size: number,\n    ctime: number,\n    mtime: number,\n    owner: string,\n}\n\nexport interface DirectoryListingResponseOK {\n    status: \"ok\",\n    path: string,\n    files: DirectoryListingDetails[],\n    dirs: DirectoryListingDetails[],\n    drives: string[],\n    places: FSPlace[],\n}\n\nexport interface DirectoryListingResponseError {\n    status: \"error\",\n    path: string,\n    code: string,\n    msg: string,\n    alternative?: string,\n}\n\nexport type DirectoryListingResponse = DirectoryListingResponseOK | DirectoryListingResponseError;\n\nexport interface ShutdownResponse {\n    status: \"ok\",\n    messageType: \"SERVER_SHUTDOWN\",\n}\n","import { ActionsUnion, createAction } from \"../helpers/actionHelpers\";\nimport { DatasetFormParams, DirectoryListingDetails, FSPlace } from \"../messages\";\n\nexport enum ActionTypes {\n    LIST_DIRECTORY = 'BROWSER_LIST_DIRECTORY',\n    LIST_FULL_PATH = 'BROWSER_LIST_DIRECTORY_FULL',\n    DIRECTORY_LISTING = 'BROWSER_DIRECTORY_LISTING',\n    DETECT_PARAMS = 'BROWSER_DETECT_PARAMS',\n    PARAMS_DETECTED = 'BROWSER_PARAMS_DETECTED',\n    ERROR = 'BROWSER_ERROR',\n    OPEN = 'BROWSER_OPEN',\n    CANCEL = 'BROWSER_CANCEL',\n    SELECT = 'BROWSER_SELECT',\n    SELECT_FULL_PATH = 'BROWSER_SELECT_FULL_PATH',\n}\n\nexport const Actions = {\n    list: (path: string, name?: string) => createAction(ActionTypes.LIST_DIRECTORY, { path, name }),\n    dirListing: (path: string, dirs: DirectoryListingDetails[], files: DirectoryListingDetails[], drives: string[], places: FSPlace[]) => createAction(ActionTypes.DIRECTORY_LISTING, { path, dirs, files, drives, places }),\n    open: () => createAction(ActionTypes.OPEN),\n    cancel: () => createAction(ActionTypes.CANCEL),\n    select: (path: string, name: string) => createAction(ActionTypes.SELECT, { path, name }),\n    selectFullPath: (path: string) => createAction(ActionTypes.SELECT_FULL_PATH, { path }),\n    error: (msg: string, timestamp: number, id: string) => createAction(ActionTypes.ERROR, { msg, timestamp, id }),\n    detectParams: (path: string) => createAction(ActionTypes.DETECT_PARAMS, { path }),\n    paramsDetected: (path: string, params: DatasetFormParams) => createAction(ActionTypes.PARAMS_DETECTED, { path, params }),\n}\n\nexport type Actions = ActionsUnion<typeof Actions>;","import { FormikProps, withFormik } from \"formik\";\nimport * as React from \"react\";\nimport { Button, Form } from \"semantic-ui-react\";\nimport { ConfigState } from \"../../config/reducers\";\nimport { Omit } from \"../../helpers/types\";\nimport { ClusterTypes, ConnectRequestLocalCluster } from \"../../messages\";\n\ntype FormValues = Omit<ConnectRequestLocalCluster, \"type\">;\n\ninterface FormProps {\n    onSubmit: (params: ConnectRequestLocalCluster) => void,\n    config: ConfigState,\n}\n\ntype MergedProps = FormikProps<FormValues> & FormProps;\n\nconst LocalConnectionForm: React.SFC<MergedProps> = ({\n    values,\n    touched,\n    errors,\n    dirty,\n    isSubmitting,\n    handleChange,\n    handleBlur,\n    handleSubmit,\n    handleReset,\n}) => {\n    return (\n        <Form onSubmit={handleSubmit}>\n            <Form.Field>\n                <label htmlFor=\"numWorkers\">Number of Workers:</label>\n                <input type=\"number\" name=\"numWorkers\" value={values.numWorkers}\n                    onChange={handleChange}\n                    onBlur={handleBlur} />\n                {errors.numWorkers && touched.numWorkers && errors.numWorkers}\n            </Form.Field>\n            <Button primary={true} type=\"submit\" disabled={isSubmitting}>Connect</Button>\n        </Form>\n    )\n}\n\nexport default withFormik<FormProps, FormValues>({\n    mapPropsToValues: (ownProps: FormProps) => ({\n        numWorkers: ownProps.config.localCores,\n    }),\n    handleSubmit: (values, formikBag) => {\n        const { onSubmit } = formikBag.props;\n        onSubmit({\n            type: ClusterTypes.LOCAL,\n            ...values,\n        });\n    }\n})(LocalConnectionForm);\n","\nimport { FormikProps, withFormik } from \"formik\";\nimport * as React from \"react\";\nimport { Button, Form } from \"semantic-ui-react\";\nimport { ConfigState } from \"../../config/reducers\";\nimport { Omit } from \"../../helpers/types\";\nimport { ClusterTypes, ConnectRequestTCP } from \"../../messages\";\n\ntype FormValues = Omit<ConnectRequestTCP, \"type\">;\n\ninterface FormProps {\n    onSubmit: (params: ConnectRequestTCP) => void,\n    config: ConfigState,\n}\n\ntype MergedProps = FormikProps<FormValues> & FormProps;\n\nconst TCPConnectionForm: React.SFC<MergedProps> = ({\n    values,\n    touched,\n    errors,\n    dirty,\n    isSubmitting,\n    handleChange,\n    handleBlur,\n    handleSubmit,\n    handleReset,\n}) => {\n    return (\n        <Form onSubmit={handleSubmit}>\n            <Form.Field>\n                <label htmlFor=\"address\">Scheduler URI</label>\n                <input type=\"text\" name=\"address\" value={values.address}\n                    onChange={handleChange}\n                    onBlur={handleBlur} />\n                {errors.address && touched.address && errors.address}\n            </Form.Field>\n            <Button primary={true} type=\"submit\" disabled={isSubmitting}>Connect</Button>\n        </Form>\n    )\n}\n\nexport default withFormik<FormProps, FormValues>({\n    mapPropsToValues: (ownProps: FormProps) => ({\n        address: ownProps.config.lastConnection.address,\n    }),\n    handleSubmit: (values, formikBag) => {\n        const { onSubmit } = formikBag.props;\n        onSubmit({\n            type: ClusterTypes.TCP,\n            ...values\n        });\n    }\n})(TCPConnectionForm);\n","\nimport * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Dropdown, DropdownProps, Segment } from \"semantic-ui-react\";\nimport * as clusterActions from \"../../cluster/actions\";\nimport { getEnumValues } from \"../../helpers\";\nimport { ClusterTypeMetadata, ClusterTypes, ConnectRequestParams } from \"../../messages\";\nimport { RootReducer } from \"../../store\";\nimport LocalConnectionForm from \"./LocalConnectionForm\";\nimport TCPConnectionForm from \"./TCPConnectionForm\";\n\n\nconst mapDispatchToProps = {\n    connectToCluster: clusterActions.Actions.connect,\n};\n\nconst mapStateToProps = (state: RootReducer) => {\n    return {\n        config: state.config,\n        lastConnectionType: state.config.lastConnection.type\n    }\n}\n\ntype MergedProps = DispatchProps<typeof mapDispatchToProps> & ReturnType<typeof mapStateToProps>;\n\nconst clusterTypeKeys = getEnumValues(ClusterTypes);\nconst clusterTypeOptions = clusterTypeKeys.map(t => ({\n    text: ClusterTypeMetadata[ClusterTypes[t]].label,\n    value: ClusterTypes[t],\n}));\n\ninterface ConnectionParamsState {\n    clusterType: ClusterTypes\n}\n\nclass ClusterConnectionForm extends React.Component<MergedProps, ConnectionParamsState> {\n    public state = {\n        clusterType: this.props.lastConnectionType,\n    }\n\n    public setType = (type: ClusterTypes) => {\n        this.setState({\n            clusterType: type,\n        });\n    }\n\n    public handleChange = (e: React.SyntheticEvent, data: DropdownProps) => {\n        const value = data.value as ClusterTypes;\n        this.setType(value);\n    }\n\n    public handleSubmit = (params: ConnectRequestParams) => {\n        this.props.connectToCluster(params);\n    }\n\n    public renderForm() {\n        const { clusterType } = this.state;\n        const { config } = this.props;\n\n        switch (clusterType) {\n            case ClusterTypes.LOCAL: {\n                return <LocalConnectionForm config={config} onSubmit={this.handleSubmit} />\n            }\n            case ClusterTypes.TCP: {\n                return <TCPConnectionForm config={config} onSubmit={this.handleSubmit} />\n            }\n        }\n    }\n\n    public render() {\n        return (\n            <>\n                <div>\n                    <Dropdown\n                        inline={true}\n                        options={clusterTypeOptions}\n                        value={this.state.clusterType}\n                        onChange={this.handleChange}\n                    />\n                </div>\n                <Segment>\n                    {this.renderForm()}\n                </Segment>\n            </>\n        )\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ClusterConnectionForm);","import * as React from 'react';\nimport { Icon, Message } from 'semantic-ui-react';\n\ninterface ChannelConnectingProps {\n    msg: string,\n}\n\nconst ChannelConnecting: React.SFC<ChannelConnectingProps> = ({ msg }) => (\n    <Message icon={true}>\n        <Icon name='cog' loading={true} />\n        <Message.Content>\n            <Message.Header>Connecting to LiberTEM</Message.Header>\n            {msg}\n        </Message.Content>\n    </Message>\n)\n\nexport default ChannelConnecting;","import * as React from \"react\";\nimport { Icon, Message } from \"semantic-ui-react\";\n\nconst ChannelShutdown: React.SFC = () => (\n    <Message negative={true} icon={true}>\n        <Icon name=\"shutdown\" />\n        <Message.Content>\n            <Message.Header>Connection is closed</Message.Header>\n            <p>please close the tab</p>\n        </Message.Content>\n    </Message>\n);\n\nexport default ChannelShutdown;\n","import * as React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport ClusterConnectionForm from \"../../cluster/components/ClusterConnectionForm\";\nimport { assertNotReached } from \"../../helpers\";\nimport { RootReducer } from \"../../store\";\nimport ChannelConnecting from \"./ChannelConnecting\";\nimport ChannelShutdown from './ChannelShutdown'\n\nconst messages = {\n    waiting: \"Waiting...\",\n    connecting: \"Connecting...\",\n}\n\nconst clusterMessages = {\n    connected: \"Connected, waiting for initial state...\",\n    unknown: \"Connected, fetching cluster status...\",\n    connecting: \"Connecting to cluster\"\n}\n\nconst ConnectedNotReady: React.SFC = () => {\n    const haveConfig = useSelector((state: RootReducer) => state.config.haveConfig);\n    const clusterConnection = useSelector((state: RootReducer) => state.clusterConnection);\n\n    if (!haveConfig) {\n        return <ChannelConnecting msg=\"waiting for configuration...\" />;\n    }\n    if (clusterConnection.status === \"disconnected\") {\n        return <ClusterConnectionForm />\n    } else if (clusterConnection.status === \"connected\") {\n        return <ChannelConnecting msg={clusterMessages.connected} />;\n    } else if (clusterConnection.status === \"unknown\") {\n        return <ChannelConnecting msg={clusterMessages.unknown} />;\n    } else if (clusterConnection.status === \"connecting\") {\n        return <ChannelConnecting msg={clusterMessages.connecting} />\n    }\n    assertNotReached(\"should not happen\");\n}\n\nconst ChannelStatus: React.SFC = ({ children }) => {\n    const channelStatus = useSelector((state: RootReducer) => state.channelStatus);\n\n    switch (channelStatus.status) {\n        case \"waiting\":\n        case \"connecting\": {\n            return <ChannelConnecting msg={messages[channelStatus.status]} />;\n        }\n        case \"connected\": {\n            return <ConnectedNotReady />\n        }\n        case \"ready\":\n            return <>{children}</>;\n        case \"disconnected\":\n            return <ChannelShutdown />\n        default:\n            assertNotReached(\"should not happen\");\n    }\n}\n\nexport default ChannelStatus;","import * as React from \"react\";\nimport { Icon, SemanticICONS } from \"semantic-ui-react\";\nimport { DirectoryListingDetails } from \"../../messages\";\n\n\ninterface FileBrowserEntryProps {\n    style: object,\n    details: DirectoryListingDetails,\n    onClick?: () => void,\n    icon?: SemanticICONS,\n}\n\ninterface TimeStampProps {\n    ts: number,\n}\n\nexport const TimeStamp: React.SFC<TimeStampProps> = ({ ts }) => {\n    const date = new Date(ts * 1000);\n    const fmtDate = date.toLocaleDateString();\n    const fmtTime = date.toLocaleTimeString();\n    const title = `${fmtDate} ${fmtTime}`;\n    return (\n        <div style={{ display: \"flex\", whiteSpace: \"nowrap\" }} title={title}>\n            <div style={{ width: \"50%\", marginRight: \"10px\" }}>{fmtDate}</div>\n            <div style={{ width: \"45%\" }}>{fmtTime}</div>\n        </div>\n    )\n}\n\n// adapted from https://stackoverflow.com/a/14919494/540644\nfunction humanFileSize(bytes: number, si: boolean = false) {\n    const thresh = si ? 1000 : 1024;\n    if (Math.abs(bytes) < thresh) {\n        return {\n            size: bytes,\n            unit: 'B',\n        }\n    }\n    const units = si\n        ? ['kB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB']\n        : ['KiB', 'MiB', 'GiB', 'TiB', 'PiB', 'EiB', 'ZiB', 'YiB'];\n    let u = -1;\n    do {\n        bytes /= thresh;\n        ++u;\n    } while (Math.abs(bytes) >= thresh && u < units.length - 1);\n\n    return {\n        size: bytes.toFixed(1),\n        unit: units[u],\n    }\n}\n\ninterface FileSizeProps {\n    size: number,\n    si?: boolean,\n}\n\nexport const FileSize: React.SFC<FileSizeProps> = ({ size, si }) => {\n    const fmtSize = humanFileSize(size, si)\n    return (\n        <div style={{ textAlign: \"right\" }}>\n            {fmtSize.size} {fmtSize.unit}\n        </div>\n    );\n}\n\nexport const Cell: React.SFC<{ title?: string }> = ({ children, title }) => {\n    const styles: React.CSSProperties = {\n        whiteSpace: \"nowrap\",\n        overflow: \"hidden\",\n        textOverflow: \"ellipsis\",\n        marginRight: \"10px\",\n    }\n    return (\n        <div style={styles} title={title}>{children}</div>\n    );\n}\n\n\nclass FileBrowserEntry extends React.Component<FileBrowserEntryProps> {\n    public onClick = (e: React.MouseEvent) => {\n        const { onClick } = this.props;\n        if (onClick) {\n            onClick();\n        }\n    }\n\n    public render() {\n        const { details, style, icon } = this.props;\n        const myStyle: React.CSSProperties = {\n            cursor: \"pointer\",\n            ...style,\n        };\n\n        const tsStyles: React.CSSProperties = {\n            textAlign: \"right\",\n        };\n\n        return (\n            <div onClick={this.onClick} style={myStyle}>\n                <div style={{ display: \"flex\", paddingRight: \"10px\" }}>\n                    <div style={{ width: \"20%\", flexGrow: 1 }}>\n                        <Cell title={details.name}>\n                            {icon && <Icon name={icon} />}\n                            {details.name}\n                        </Cell>\n                    </div>\n                    <div style={{ width: \"10%\" }}><Cell><FileSize size={details.size} si={false} /></Cell></div>\n                    <div style={{ width: \"10%\" }}><Cell>{details.owner}</Cell></div>\n                    <div style={{ width: \"18%\", ...tsStyles }}>\n                        <Cell><TimeStamp ts={details.ctime} /></Cell>\n                    </div>\n                    <div style={{ width: \"18%\", ...tsStyles }}>\n                        <Cell><TimeStamp ts={details.mtime} /></Cell>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default FileBrowserEntry;","import { ActionsUnion, createAction } from \"../helpers/actionHelpers\";\nimport { ConfigParams } from \"./reducers\";\n\nexport enum ActionTypes {\n    FETCHED = \"CONFIG_FETCHED\",\n    FETCH = \"CONFIG_FETCH\",\n    FETCH_FAILED = \"CONFIG_FETCH_FAILED\",\n    TOGGLE_STAR = \"CONFIG_TOGGLE_STAR\",\n}\n\nexport const Actions = {\n    fetch: () => createAction(ActionTypes.FETCH),\n    fetched: (config: ConfigParams) => createAction(ActionTypes.FETCHED, { config }),\n    fetchFailed: (msg: string, timestamp: number, id: string) => createAction(ActionTypes.FETCH_FAILED, { msg, timestamp, id }),\n    toggleStar: (path: string) => createAction(ActionTypes.TOGGLE_STAR, { path }),\n}\n\nexport type Actions = ActionsUnion<typeof Actions>;","import * as React from \"react\";\nimport { Cell } from \"./FileBrowserEntry\";\n\nconst FileBrowserHeader: React.SFC = () => {\n    const alignRight: React.CSSProperties = {\n        textAlign: \"right\",\n    };\n\n    // ugly hack: padding-right to compensate for scrollbar size\n    return (\n        <div style={{ paddingRight: \"20px\", paddingBottom: \"10px\" }}>\n            <div style={{ display: \"flex\" }}>\n                <div style={{ width: \"20%\", flexGrow: 1 }}>\n                    <Cell>Name</Cell>\n                </div>\n                <div style={{ width: \"10%\", ...alignRight }}>\n                    <Cell>Size</Cell>\n                </div>\n                <div style={{ width: \"10%\" }}>\n                    <Cell>Owner</Cell>\n                </div>\n                <div style={{ width: \"18%\", ...alignRight }}>\n                    <Cell>Created</Cell>\n                </div>\n                <div style={{ width: \"18%\", ...alignRight }}>\n                    <Cell>Modified</Cell>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default FileBrowserHeader;","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { DirectoryListingDetails } from \"../../messages\";\nimport * as browserActions from '../actions';\nimport FileBrowserEntry from \"./FileBrowserEntry\";\n\ninterface FileEntryProps {\n    path: string,\n    style: object,\n    details: DirectoryListingDetails,\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch, ownProps: FileEntryProps) => {\n    return {\n        select: () => dispatch(browserActions.Actions.select(ownProps.path, ownProps.details.name)),\n    };\n}\n\ntype MergedProps = FileEntryProps & ReturnType<typeof mapDispatchToProps>;\n\nclass FileEntry extends React.Component<MergedProps> {\n    public render() {\n        const { details, style, select } = this.props;\n\n        return (\n            <FileBrowserEntry onClick={select} style={style} details={details}\n                icon=\"file outline\" />\n        )\n    }\n}\n\nexport default connect(null, mapDispatchToProps)(FileEntry);","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { DirectoryListingDetails } from \"../../messages\";\nimport * as browserActions from '../actions';\nimport FileBrowserEntry from \"./FileBrowserEntry\";\n\nconst mapDispatchToProps = (dispatch: Dispatch, ownProps: FolderEntryProps) => {\n    return {\n        list: () => {\n            dispatch(browserActions.Actions.list(ownProps.path, ownProps.details.name));\n            window.setTimeout(() => ownProps.onChange(), 0);\n        },\n    };\n}\n\ninterface FolderEntryProps {\n    path: string,\n    style: object,\n    details: DirectoryListingDetails,\n    onChange: () => void,\n}\n\ntype MergedProps = FolderEntryProps & ReturnType<typeof mapDispatchToProps>;\n\nconst FolderEntry: React.SFC<MergedProps> = ({ list, details, style, onChange }) => {\n    return (\n        <FileBrowserEntry onClick={list} style={style} details={details} icon=\"folder\" />\n    )\n}\n\nexport default connect(null, mapDispatchToProps)(FolderEntry);\n","import * as React from 'react';\nimport { connect } from \"react-redux\";\nimport { Dispatch } from 'redux';\nimport { Dropdown, DropdownItemProps } from \"semantic-ui-react\";\nimport * as browserActions from '../actions';\n\nconst mapDispatchToProps = (dispatch: Dispatch, ownProps: DropdownItemProps) => {\n    return {\n        list: () => {\n            if (ownProps.value !== undefined) {\n                dispatch(browserActions.Actions.list(ownProps.value.toString()));\n                window.setTimeout(() => ownProps.onChange(), 0);\n            }\n        },\n    };\n}\n\ntype MergedProps = ReturnType<typeof mapDispatchToProps> & DropdownItemProps & {\n    onChange: () => void,\n};\n\nconst PathDropDownItem: React.SFC<MergedProps> = ({ list, ...props }) => {\n    const newProps = {\n        onClick: list,\n        ...props,\n    }\n    return <Dropdown.Item {...newProps} />;\n}\n\nexport default connect(null, mapDispatchToProps)(PathDropDownItem);","import { FormikProps, withFormik } from \"formik\";\nimport * as React from \"react\";\nimport { Form, Input } from \"semantic-ui-react\";\n\ninterface FormValues {\n    path: string,\n}\n\ninterface PathInputProps {\n    onChange: (path: string) => void,\n    initialPath: string,\n}\n\ntype MergedProps = FormikProps<FormValues> & PathInputProps;\n\nconst PathInput: React.SFC<MergedProps> = ({\n    values,\n    touched,\n    errors,\n    dirty,\n    isSubmitting,\n    handleChange,\n    handleBlur,\n    handleSubmit,\n    handleReset,\n}) => {\n    return (\n        <Form onSubmit={handleSubmit} style={{ flexGrow: 1 }}>\n            <Form.Field>\n                <Input autoComplete=\"off\" onBlur={handleBlur} onChange={handleChange} value={values.path} name=\"path\" />\n            </Form.Field>\n        </Form>\n    )\n}\n\nexport default withFormik<PathInputProps, FormValues>({\n    mapPropsToValues: ({ initialPath }) => ({\n        path: initialPath,\n    }),\n    handleSubmit: (values, formikBag) => {\n        const { onChange } = formikBag.props;\n        onChange(values.path);\n    },\n    enableReinitialize: true,\n})(PathInput);","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { Dropdown, DropdownItemProps } from \"semantic-ui-react\";\nimport { DatasetTypes } from \"../../messages\";\nimport { RootReducer } from \"../../store\";\nimport * as browserActions from '../actions';\n\n\ntype DropdownOptions = Array<{\n    text: string,\n    value: {\n        type: DatasetTypes,\n        path: string,\n    },\n}>;\n\nconst mapStateToProps = (state: RootReducer) => {\n    return {\n        lastOpened: state.config.lastOpened,\n        fileHistory: state.config.fileHistory,\n        separator: state.config.separator,\n    };\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch) => {\n    return {\n        select: (path: string) => dispatch(browserActions.Actions.selectFullPath(path)),\n    };\n}\n\ntype MergedProps = ReturnType<typeof mapStateToProps> & ReturnType<typeof mapDispatchToProps>;\n\nconst RecentFiles: React.SFC<MergedProps> = ({ lastOpened, fileHistory, select }) => {\n\n    const recentFiles: DropdownOptions = fileHistory.filter((path: string) => lastOpened[path]).map((path: string) => {\n        const item = lastOpened[path];\n        return {\n            text: item.path,\n            value: {\n                type: item.type,\n                path: item.path,\n            },\n        };\n    });\n\n    const onClick = (e: React.MouseEvent<HTMLDivElement>, data: DropdownItemProps) => data.value && select(data.value.toString())\n\n    return (\n        <Dropdown item={true} text=\"Recent\" floating={true}>\n            <Dropdown.Menu>\n                <Dropdown.Header content=\"recent datasets\" />\n                {recentFiles.map((option, idx) => (\n                    <Dropdown.Item key={idx} value={option.value.path} content={option.text} onClick={onClick} />\n                ))}\n            </Dropdown.Menu>\n        </Dropdown>\n    );\n}\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RecentFiles);","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { Dropdown, Menu } from \"semantic-ui-react\";\nimport * as configActions from '../../config/actions';\nimport * as browserActions from '../actions';\nimport { FSPlaces } from \"../types\";\nimport PathDropDownItem from \"./PathDropDownItem\";\nimport PathInput from \"./PathInput\";\nimport RecentFiles from \"./RecentFiles\";\n\nconst mapDispatchToProps = (dispatch: Dispatch, ownProps: PathBarProps) => {\n    return {\n        refresh: () => {\n            dispatch(browserActions.Actions.list(ownProps.currentPath));\n            window.setTimeout(() => ownProps.onChange(), 0);\n        },\n        handleInputChange: (path: string) => {\n            dispatch(browserActions.Actions.list(path));\n            window.setTimeout(() => ownProps.onChange(), 0);\n        },\n        goUp: () => {\n            dispatch(browserActions.Actions.list(ownProps.currentPath, '..'));\n            window.setTimeout(() => ownProps.onChange(), 0);\n        },\n        toggleStar: () => {\n            dispatch(configActions.Actions.toggleStar(ownProps.currentPath));\n        }\n    };\n}\n\ninterface PathBarProps {\n    currentPath: string,\n    onChange: () => void,\n    drives: string[],\n    places: FSPlaces,\n    starred: string[],\n}\n\ntype MergedProps = ReturnType<typeof mapDispatchToProps> & PathBarProps;\n\nconst PathBar: React.SFC<MergedProps> = ({ currentPath, drives, places, starred, onChange, refresh, goUp, handleInputChange, toggleStar }) => {\n    const driveOptions = drives.map((path) => ({ key: path, text: path }));\n    const placeOptions = Object.keys(places).map((key) => ({ key: places[key].path, text: places[key].title }));\n    const starOptions = starred.map((path) => ({ key: path, text: path }));\n    const isStarred = starred.includes(currentPath);\n    const starredIcon = isStarred ? \"star\" : \"star outline\";\n    const bookmarkTitle = isStarred ? \"Remove from bookmarks\" : \"Bookmark this location\";\n\n    return (\n        <Menu>\n            <RecentFiles />\n            <Dropdown text=\"Go to...\" floating={true} item={true}>\n                <Dropdown.Menu>\n                    <Dropdown.Header content=\"Drives\" />\n                    {driveOptions.map((option) => {\n                        return <PathDropDownItem key={option.key} value={option.key} content={option.text} onChange={onChange} />\n                    })}\n                    <Dropdown.Header content=\"Places\" />\n                    {placeOptions.map((option) => {\n                        return <PathDropDownItem key={option.key} value={option.key} content={option.text} onChange={onChange} />\n                    })}\n                    <Dropdown.Header content=\"Starred\" />\n                    {starOptions.length === 0 && \n                        <Dropdown.Item key=\"empty\" value=\"empty\" content=\"No bookmarks yet\" />\n                    }\n                    {starOptions.map((option) => {\n                        return <PathDropDownItem key={option.key} value={option.key} content={option.text} onChange={onChange} />\n                    })}\n                </Dropdown.Menu>\n            </Dropdown>\n            <Menu.Item title={bookmarkTitle} icon={starredIcon} onClick={toggleStar} />\n            <Menu.Item icon=\"arrow up\" onClick={goUp} />\n            <Menu.Item style={{ flexGrow: 1 }}>\n                <PathInput onChange={handleInputChange} initialPath={currentPath} />\n            </Menu.Item>\n            <Menu.Item icon=\"refresh\" onClick={refresh} />\n        </Menu>\n    );\n}\n\n\nexport default connect(null, mapDispatchToProps)(PathBar);","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { FixedSizeList as List } from \"react-window\";\nimport { Dispatch } from \"redux\";\nimport { Button, Header, Segment } from \"semantic-ui-react\";\nimport { DirectoryListingDetails } from \"../../messages\";\nimport { RootReducer } from \"../../store\";\nimport * as browserActions from '../actions';\nimport FileBrowserHeader from \"./FileBrowserHeader\";\nimport FileEntry from \"./FileEntry\";\nimport FolderEntry from \"./FolderEntry\";\nimport PathBar from \"./PathBar\";\n\nconst mapStateToProps = (state: RootReducer) => {\n    const { browser, config } = state;\n    return {\n        files: browser.files,\n        dirs: browser.dirs,\n        path: browser.path,\n        drives: browser.drives,\n        places: browser.places,\n        isLoading: browser.isLoading,\n        starred: config.starred,\n    };\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch) => {\n    return {\n        cancel: () => dispatch(browserActions.Actions.cancel()),\n    };\n}\n\ntype MergedProps = ReturnType<typeof mapStateToProps> & ReturnType<typeof mapDispatchToProps>;\n\ninterface EntryFnArgs {\n    index: number,\n    style: object\n}\ntype EntryFn = (arg: EntryFnArgs) => void\n\nconst listRef = React.createRef<List>();\n\nconst scrollToTop = () => {\n    if (listRef.current === null) {\n        return;\n    }\n    listRef.current.scrollToItem(0);\n}\n\nfunction sortByKey<T extends object>(array: T[], getKey: (item: T) => any) {\n    return array.sort((a, b) => {\n        const x = getKey(a);\n        const y = getKey(b);\n        return ((x < y) ? -1 : ((x > y) ? 1 : 0));\n    });\n}\n\nconst FileBrowser: React.SFC<MergedProps> = ({ files, dirs, path, drives, places, starred, cancel, isLoading }) => {\n    const getSortKey = (item: DirectoryListingDetails) => item.name.toLowerCase();\n    const dirEntries = sortByKey(dirs, getSortKey).map((dir) => (style: object) => <FolderEntry style={style} onChange={scrollToTop} path={path} details={dir} />);\n    const fileEntries = sortByKey(files, getSortKey).map((f) => ((style: object) => <FileEntry style={style} path={path} details={f} />));\n    const entries = dirEntries.concat(fileEntries);\n\n    const cellFn: EntryFn = ({ index, style }) => {\n        return entries[index](style)\n    }\n\n    let list = (\n        <List style={{ overflowY: \"scroll\" }} ref={listRef} height={300} width=\"100%\" itemCount={entries.length} itemSize={35}>\n            {cellFn}\n        </List>\n    );\n\n    if (isLoading) {\n        // FIXME: hardcoded height\n        list = (\n            <Segment loading={true} style={{ height: \"300px\" }} />\n        )\n    }\n\n    return (\n        <Segment.Group>\n            <Segment>\n                <Header as=\"h2\">Open dataset</Header>\n            </Segment>\n            <Segment>\n                <PathBar currentPath={path} drives={drives} places={places} starred={starred} onChange={scrollToTop} />\n            </Segment>\n            <Segment>\n                <FileBrowserHeader />\n                {list}\n            </Segment>\n            <Segment>\n                <Button onClick={cancel}>Cancel</Button>\n            </Segment>\n        </Segment.Group>\n    );\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FileBrowser);","\nexport interface JobResultType {\n    imageURL: string,\n    description: { title: string, desc: string, includeInDownload: boolean },\n}\n\nexport enum JobRunning {\n    CREATING = 'CREATING',\n    RUNNING = 'RUNNING',\n    DONE = 'DONE',\n}\n\nexport enum JobStatus {\n    CREATING = 'CREATING',\n    IN_PROGRESS = 'IN_PROGRESS',\n    CANCELLED = 'CANCELLED',\n    SUCCESS = 'SUCCESS',\n    ERROR = 'ERROR',\n}\n\nexport interface JobStateCommon {\n    id: string,\n    analysis: string,\n    status: JobStatus,\n    startTimestamp: number,\n    results: JobResultType[],\n}\n\nexport type JobStateStart = JobStateCommon & {\n    running: JobRunning.CREATING | JobRunning.RUNNING,\n}\n\nexport type JobStateDone = JobStateCommon & {\n    running: JobRunning.DONE,\n    endTimestamp: number,\n}\n\nexport type JobState = JobStateStart | JobStateDone;","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Button, Icon } from \"semantic-ui-react\";\nimport { RootReducer } from \"../../store\";\nimport * as browserActions from '../actions';\nimport FileBrowser from \"./FileBrowser\";\n\nexport const mapStateToProps = (state: RootReducer) => {\n    return {\n        isOpen: state.browser.isOpen,\n        busy: state.openDataset.busy,\n        formVisible: state.openDataset.formVisible,\n    }\n}\n\nexport const mapDispatchToProps = {\n    open: browserActions.Actions.open,\n}\n\ntype MergedProps = ReturnType<typeof mapStateToProps> & DispatchProps<typeof mapDispatchToProps>;\n\nconst BrowserWrapper: React.SFC<MergedProps> = ({ formVisible, isOpen, open, busy }) => {\n    if(formVisible || busy) {\n        return null;\n    } else if (!isOpen) {\n        return (\n            <Button icon={true} labelPosition=\"left\" onClick={open}>\n                <Icon name='add' />\n                Browse\n            </Button>\n        );\n    } else {\n        return (\n            <FileBrowser />\n        );\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(BrowserWrapper)\n","import * as React from \"react\";\nimport { Icon } from \"semantic-ui-react\";\n\nconst BusySpinner: React.SFC = () => {\n    const styles: React.CSSProperties = {\n        margin: 0,\n        padding: 0,\n        position: \"absolute\",\n        bottom: \"10px\",\n        right: \"10px\",\n        color: \"white\",\n        opacity: 0.7,\n        filter: \"drop-shadow(0 0 3px #000)\",\n    };\n    return (\n        <Icon name=\"cog\" loading={true} style={styles} />\n    )\n}\n\nexport default BusySpinner;","import * as React from \"react\";\nimport BusySpinner from \"./BusySpinner\";\n\ninterface BusyWrapperProps {\n    busy: boolean,\n}\n\nconst BusyWrapper: React.SFC<BusyWrapperProps> = ({ children, busy }) => {\n    const styles: React.CSSProperties = {\n        position: \"relative\",\n    };\n    return (\n        <div style={styles}>\n            {children}\n            {busy && <BusySpinner />}\n        </div>\n    )\n}\n\nexport default BusyWrapper;","import * as React from \"react\";\nimport { DraggableHandle } from \"./DraggableHandle\";\nimport { HandleRenderFunction } from \"./types\";\n\nexport interface HandleParentProps {\n    width: number,\n    height: number,\n    onKeyboardEvent?: React.KeyboardEventHandler<SVGElement>,\n    handles: HandleRenderFunction[],\n}\n\nexport class HandleParent extends React.Component<HandleParentProps> {\n    public currentHandle: DraggableHandle | undefined;\n\n    public handleDragStart = (h: DraggableHandle): void => {\n        this.currentHandle = h;\n    }\n\n    public handleDrop = (): void => {\n        this.currentHandle = undefined;\n    }\n\n    public handleMouseMove = (e: React.MouseEvent<SVGElement>): void => {\n        if (this.currentHandle) {\n            return this.currentHandle.externalMouseMove(e);\n        }\n    }\n\n    public handleMouseLeave = (e: React.MouseEvent<SVGElement>): void => {\n        if (this.currentHandle) {\n            this.currentHandle.externalLeave(e);\n        }\n    }\n\n    public handleMouseUp = (e: React.MouseEvent<SVGElement>): void => {\n        if (this.currentHandle) {\n            this.currentHandle.externalMouseUp(e);\n        }\n    }\n\n    public render() {\n        const { width, height } = this.props;\n        const styles = {\n            outline: \"1px dashed black\"\n        }\n        return (\n            <g\n                onMouseMove={this.handleMouseMove}\n                onMouseLeave={this.handleMouseLeave}\n                onMouseUp={this.handleMouseUp}\n                onKeyDown={this.props.onKeyboardEvent}\n                style={styles}\n                tabIndex={0}\n            >\n                <rect style={{ fill: \"transparent\" }}\n                    x={0} y={0} width={width} height={height}\n                />\n                {this.renderHandles()}\n            </g>\n        );\n    }\n\n    public renderHandles() {\n        const { handles, onKeyboardEvent } = this.props;\n        // we need to inform the handle when there are move/up/leave events\n        // on this parent element, for which we need to know the current handle.\n        // so we pass the handle a dragstart/drop function and kindly ask it\n        // to call us if it starts to be dragged or is dropped.\n        return handles.map((h, i) => {\n            const elem = h(this.handleDragStart, this.handleDrop, onKeyboardEvent);\n            if (React.isValidElement(elem)) {\n                return React.cloneElement(elem, { key: i });\n            }\n            return null;\n        });\n    }\n}\n\nexport default HandleParent;","import * as React from \"react\";\nimport { JobState } from \"../types\";\nimport styles from \"./ResultImage.module.css\";\n\ninterface ResultImageProps {\n    job: JobState,\n    channel: number,\n    width: number,\n    height: number,\n}\n\nconst ResultImage: React.SFC<ResultImageProps> = ({ job, channel, width, height }) => {\n    const result = job.results[channel];\n    if (result === undefined) {\n        return (\n            <svg className={styles.fallback} width={width} height={height} viewBox={`0 0 ${width} ${height}`} key={-1} />\n        )\n    }\n    return (\n        <image className={styles.default} xlinkHref={result.imageURL} width={width} height={height} />\n    );\n}\n\nexport default ResultImage;","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport styled from 'styled-components';\nimport BusyWrapper from \"../../widgets/BusyWrapper\";\nimport HandleParent from \"../../widgets/HandleParent\";\nimport { HandleRenderFunction } from \"../../widgets/types\";\nimport { JobRunning, JobState } from \"../types\";\nimport ResultImage from \"./ResultImage\";\n\ninterface ResultProps {\n    width: number,\n    height: number,\n    job: JobState,\n    extraHandles?: HandleRenderFunction,\n    extraWidgets?: React.ReactElement<SVGElement>,\n    channel: number,\n}\n\nconst ResultWrapper = styled.svg`\n    display: block;\n    border: 1px solid black;\n    width: 100%;\n    height: auto;\n`;\n\ntype MergedProps = ResultProps;\n\nclass Result extends React.Component<MergedProps> {\n    public renderHandles() {\n        const { width, height, extraHandles } = this.props;\n        let handles: HandleRenderFunction[] = [];\n        if (extraHandles) {\n            handles = [...handles, extraHandles];\n        }\n\n        return (\n            <HandleParent width={width} height={height} handles={handles} />\n        )\n    }\n\n    public render() {\n        const { job, channel, width, height, extraWidgets } = this.props;\n        const busy = job.running !== JobRunning.DONE;\n\n        return (\n            <BusyWrapper busy={busy}>\n                <ResultWrapper width={width} height={height} viewBox={`0 0 ${width} ${height}`}>\n                    <ResultImage job={job} channel={channel} width={width} height={height} />\n                    {extraWidgets}\n                    {this.renderHandles()}\n                </ResultWrapper>\n            </BusyWrapper>\n        );\n    }\n};\n\nexport default connect(null, null)(Result);","import styled from 'styled-components';\n\n\nconst Selectors = styled.div`\n    display: flex;\n    & > * {\n        margin-right: 10px;\n    }\n`;\n\n\n\nexport default Selectors;","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Dropdown, DropdownProps } from \"semantic-ui-react\";\nimport { RootReducer } from \"../../store\";\nimport { HandleRenderFunction } from \"../../widgets/types\";\nimport { JobRunning, JobState } from \"../types\";\nimport Result from \"./Result\";\nimport Selectors from \"./Selectors\";\n\ninterface ResultListProps {\n    width: number,\n    height: number,\n    selectors?: React.ReactElement<any>,\n    extraHandles?: HandleRenderFunction,\n    extraWidgets?: React.ReactElement<SVGElement>,\n    subtitle?: React.ReactNode,\n}\n\ninterface ExternalResultListProps {\n    compoundAnalysis: string,\n    analysisIndex: number,\n}\n\nconst mapStateToProps = (state: RootReducer, ownProps: ExternalResultListProps) => {\n    const compoundAnalysis = state.compoundAnalyses.byId[ownProps.compoundAnalysis];\n    const analysis = state.analyses.byId[compoundAnalysis.details.analyses[ownProps.analysisIndex]];\n\n    return {\n        jobsById: state.jobs.byId,\n        analysis,\n        compoundAnalysis,\n        analysisIndex: ownProps.analysisIndex,\n    };\n};\n\ntype MergedProps = ResultListProps & ReturnType<typeof mapStateToProps>;\n\ninterface ResultListState {\n    selectedChannel: number,\n}\n\nconst ResultListPlaceholder: React.SFC<{ width: number, height: number }> = ({ width, height }) => {\n    return (\n        <svg\n            style={{\n                display: \"block\",\n                border: \"1px solid black\",\n                width: \"100%\",\n                height: \"auto\"\n            }}\n            width={width} height={height}\n            viewBox={`0 0 ${width} ${height}`} key={-1} />\n    );\n}\n\n\nclass ResultList extends React.Component<MergedProps, ResultListState> {\n    public state: ResultListState = { selectedChannel: 0 };\n\n    public selectChannel = (e: React.SyntheticEvent, data: DropdownProps) => {\n        const value = data.value as number;\n        this.setState({ selectedChannel: value });\n    }\n\n    public getJob() {\n        const {\n            analysis, jobsById,\n        } = this.props;\n        if (!analysis || !analysis.displayedJob || !jobsById[analysis.displayedJob]) {\n            return undefined;\n        }\n        return jobsById[analysis.displayedJob];\n    }\n\n    public getMsg(job?: JobState) {\n        if (!job) {\n            return <>&nbsp;</>;\n        }\n        if (job.running === JobRunning.DONE) {\n            const dt = (job.endTimestamp - job.startTimestamp) / 1000;\n            return <>Analysis done in {dt.toFixed(3)}s</>;\n        } else {\n            return <>Analysis running...</>;\n        }\n    }\n\n    public genericRender(currentResult: React.ReactElement, job?: JobState) {\n        const { subtitle, children, selectors } = this.props;\n        const msg = this.getMsg(job);\n        return (\n            <div>\n                {currentResult}\n                {children}\n                <Selectors>\n                    <ResultImageSelector job={job} handleChange={this.selectChannel} selectedImg={this.state.selectedChannel} />\n                    {selectors}\n                </Selectors>\n                <p>{subtitle} {msg}</p>\n            </div>\n        );\n    }\n\n    public render() {\n        const job = this.getJob();\n        const {\n            width, height,\n            extraHandles, extraWidgets\n        } = this.props;\n\n        if (!job) {\n            return this.genericRender(<ResultListPlaceholder width={width} height={height} />, job);\n        }\n\n        return this.genericRender(\n            <Result job={job}\n                extraHandles={extraHandles}\n                extraWidgets={extraWidgets}\n                width={width} height={height}\n                channel={this.state.selectedChannel}\n            />,\n            job\n        );\n    }\n}\n\ninterface ImageSelectorProps {\n    job?: JobState,\n    handleChange: (e: React.SyntheticEvent, data: DropdownProps) => void,\n    selectedImg: number,\n}\n\nconst ResultImageSelector: React.SFC<ImageSelectorProps> = ({ job, handleChange, selectedImg }) => {\n    if (!job) {\n        return null;\n    }\n    const availableImages = job.results.map((result, idx) => ({ text: result.description.title, value: idx }));\n    return (\n        <>\n            <div>\n                Channel:{' '}\n                <Dropdown\n                    inline={true}\n                    options={availableImages}\n                    value={selectedImg}\n                    onChange={handleChange}\n                />\n            </div>\n        </>\n    )\n}\n\n\nexport default connect(mapStateToProps)(ResultList);\n","export const inRectConstraint = (width: number, height: number) => (p: Point2D) => {\n    return {\n        x: Math.max(0, Math.min(width - 1, p.x)),\n        y: Math.max(0, Math.min(height - 1, p.y)),\n    }\n}\n\nexport const dist = (cx: number, cy: number, x: number, y: number) => {\n    const dx = cx - x;\n    const dy = cy - y;\n    return Math.sqrt(dx * dx + dy * dy);\n}\n\nexport const cbToRadius = (cx: number, cy: number, cb: ((r: number) => void) | undefined) => (x: number, y: number) => cb && cb(dist(cx, cy, x, y))\n\nexport const keepOnCY = (cy: number) => (p: Point2D) => {\n    return {\n        x: p.x,\n        y: cy,\n    }\n}\n\nexport const keepXLargerThan = (otherX: number) => (p: Point2D) => {\n    return {\n        x: otherX > p.x ? otherX : p.x,\n        y: p.y,\n    }\n}\n\nexport const keepXSmallerThan = (otherX: number) => (p: Point2D) => {\n    return {\n        x: otherX < p.x ? otherX : p.x,\n        y: p.y,\n    }\n}\n\nexport const riConstraint = (outerPos: number, cy: number) => (p: Point2D) => {\n    return keepXLargerThan(outerPos)(\n        keepOnCY(cy)(p)\n    );\n}\n\nexport const roConstraints = (innerPos: number, cy: number) => (p: Point2D) => {\n    return keepXSmallerThan(innerPos)(\n        keepOnCY(cy)(p)\n    );\n}","import { CSSProperties } from \"react\";\n\nexport const defaultMaskStyles = (imageWidth: number): CSSProperties => ({\n    fillOpacity: 0.3,\n    fill: \"red\",\n    strokeOpacity: 0.7,\n    stroke: \"red\",\n    strokeWidth: imageWidth / 128 / 3,\n});","import * as React from \"react\";\nimport { defaultMaskStyles } from \"./styles\";\n\nexport interface DiskProps {\n    imageWidth: number,\n    imageHeight: number,\n    cx: number,\n    cy: number,\n    r: number,\n}\n\nconst Disk: React.SFC<DiskProps> = ({ imageWidth, imageHeight, cx, cy, r }) => {\n    return (\n        <circle cx={cx + .5} cy={cy + .5} r={r} style={{ ...defaultMaskStyles(imageWidth) }} />\n    );\n}\n\nexport default Disk;","import * as React from \"react\";\nimport styled from 'styled-components';\nimport { handleKeyEvent, ModifyCoords } from \"./kbdHandler\";\n\nexport type HandleProps = {\n    x: number,\n    y: number,\n    scale: number,\n    withCross?: boolean,\n    focusRef: React.RefObject<SVGGElement>,\n} & React.SVGProps<SVGGElement>;\n\nconst StyledCircle = styled.circle`\n    stroke: red;\n    stroke-width: 1;\n    fill: transparent;\n    g:focus > & {\n        stroke: lightgreen;\n    }\n`;\n\nconst Cross = styled.path`\n    stroke: red;\n    stroke-width: 1;\n    fill: transparent;\n    g:focus > & {\n        stroke: lightgreen;\n    }\n`;\n\nconst FocusGroup = styled.g`\n    &:focus { outline: none; }\n`;\n\nconst Handle: React.SFC<HandleProps> = ({ scale, x, y, withCross, focusRef, ...args }) => {\n    const r = 3;\n    // scaleMatrix is needed to set the origin of the scale\n    const scaleMatrix = `matrix(${scale}, 0, 0, ${scale}, ${x - scale * x}, ${y - scale * y})`;\n    const style: React.CSSProperties = { transform: scaleMatrix };\n    const crossSpec = `\n        M${x - 4 - r / 2} ${y} L ${x - r / 2} ${y} M${x + r / 2} ${y} L ${x + 4 + r / 2} ${y}\n        M${x} ${y - 4 - r / 2} L ${x} ${y - r / 2} M${x} ${y + r / 2} L ${x} ${y + 4 + r / 2}\n    `;\n    const cross = withCross ? <Cross d={crossSpec} style={style} /> : null;\n    return (\n        <FocusGroup {...args} ref={focusRef}>\n            <StyledCircle cx={x} cy={y} r={r} style={style} />\n            {cross}\n        </FocusGroup>\n    )\n}\n\nexport interface DraggableHandleProps {\n    x: number,\n    y: number,\n    withCross?: boolean,\n    imageWidth?: number,\n    onDragMove?: (x: number, y: number) => void,\n    parentOnDragStart: (h: DraggableHandle) => void,\n    parentOnDrop: (x: number, y: number) => void,\n    onKeyboardEvent?: (e: React.KeyboardEvent<SVGElement>) => void,\n    constraint?: (p: Point2D) => Point2D,\n}\n\nexport function getScalingFactor(elem: SVGElement): number {\n    const svg = elem.ownerSVGElement;\n    if (svg === null) {\n        throw new Error(\"no owner SVG element?\");\n    }\n    const inWidthAttr = svg.getAttribute(\"width\");\n    if (inWidthAttr === null) {\n        throw new Error(\"no width on SVG element?\");\n    }\n    const inWidth = +inWidthAttr;\n    const svgMeasurements = svg.getBoundingClientRect();\n    return svgMeasurements.width / inWidth;\n}\n\nfunction relativeCoords(e: React.MouseEvent, parent: SVGElement) {\n    const f = getScalingFactor(parent);\n    const parentPos = parent.getBoundingClientRect();\n    const res = {\n        x: (e.pageX - (parentPos.left + window.pageXOffset)) / f,\n        y: (e.pageY - (parentPos.top + window.pageYOffset)) / f,\n    }\n    return res;\n}\n\n/**\n * stateful draggable handle, to be used as part of <svg/>\n */\nexport class DraggableHandle extends React.Component<DraggableHandleProps> {\n    public posRef: React.RefObject<SVGRectElement>;\n    public focusRef: React.RefObject<SVGGElement>;\n\n    public state = {\n        dragging: false,\n        drag: { x: 0, y: 0 },\n    }\n\n    constructor(props: DraggableHandleProps) {\n        super(props);\n        this.posRef = React.createRef<SVGRectElement>();\n        this.focusRef = React.createRef<SVGGElement>();\n    }\n\n    // mousemove event from outside (delegated from surrounding element)\n    public externalMouseMove = (e: React.MouseEvent<SVGElement>): void => {\n        this.move(e);\n    }\n\n    // mouseleave event from outside (delegated from surrounding element)\n    public externalLeave = (e: React.MouseEvent<SVGElement>): void => {\n        this.stopDrag(e);\n    }\n\n    // mouseup event from outside (delegated from surrounding element)\n    public externalMouseUp = (e: React.MouseEvent<SVGElement>): void => {\n        this.stopDrag(e);\n    }\n\n    public applyConstraint = (p: Point2D) => {\n        const { constraint } = this.props;\n        if (constraint) {\n            return constraint(p);\n        } else {\n            return p;\n        }\n    }\n\n    public startDrag = (e: React.MouseEvent<SVGElement>): void => {\n        e.preventDefault();\n        const { parentOnDragStart } = this.props;\n        if (this.posRef.current) {\n            this.setState({\n                dragging: true,\n                drag: this.applyConstraint(relativeCoords(e, this.posRef.current)),\n            });\n            if (parentOnDragStart) {\n                parentOnDragStart(this);\n            }\n            if (this.focusRef.current && this.focusRef.current.focus) {\n                this.focusRef.current.focus();\n            }\n        } else {\n            throw new Error(\"startDrag without posRef\");\n        }\n    }\n\n    public move = (e: React.MouseEvent<SVGElement>): void => {\n        const { onDragMove } = this.props;\n        if (!this.state.dragging) {\n            return;\n        }\n        if (this.posRef.current) {\n            this.setState({\n                drag: this.applyConstraint(relativeCoords(e, this.posRef.current)),\n            }, () => {\n                if (onDragMove) {\n                    const constrained = this.applyConstraint(this.state.drag)\n                    onDragMove(constrained.x, constrained.y);\n                }\n            })\n        } else {\n            throw new Error(\"move without posRef\");\n        }\n    }\n\n    public stopDrag = (e: React.MouseEvent<SVGElement>): void => {\n        const { parentOnDrop } = this.props;\n        const { dragging, drag } = this.state;\n        if (!dragging) {\n            return;\n        }\n        this.setState({\n            dragging: false,\n        })\n        if (parentOnDrop) {\n            parentOnDrop(drag.x, drag.y);\n        }\n    }\n\n    public handleKeyDown = (e: React.KeyboardEvent<SVGElement>) => {\n        const update = (fn: ModifyCoords) => {\n            const { x, y, onDragMove } = this.props;\n            const newCoords = fn(x, y);\n            const constrained = this.applyConstraint(newCoords);\n            if (onDragMove) {\n                onDragMove(constrained.x, constrained.y);\n            }\n        }\n        handleKeyEvent(e, update);\n    }\n\n    public renderCommon(x: number, y: number) {\n        const { imageWidth } = this.props;\n        const scale = imageWidth === undefined ? 1 : imageWidth / 128;\n        // empty zero-size <rect> as relative position reference\n        return (\n            <g>\n                <rect\n                    style={{ visibility: \"hidden\" }}\n                    ref={this.posRef}\n                    x={0} y={0} width={0} height={0}\n                />\n                <Handle scale={scale} x={x + .5} y={y + .5} withCross={this.props.withCross}\n                    focusRef={this.focusRef}\n                    onMouseUp={this.stopDrag}\n                    onMouseMove={this.move}\n                    onMouseDown={this.startDrag}\n                    onKeyDown={this.handleKeyDown}\n                    tabIndex={0}\n                />\n            </g>\n        );\n    }\n\n    public renderDragging() {\n        const { x, y } = this.state.drag;\n        return this.renderCommon(x, y);\n    }\n\n    public render() {\n        const { x, y } = this.props;\n        // either render from state (when dragging) or from props\n        if (this.state.dragging) {\n            return this.renderDragging();\n        } else {\n            return this.renderCommon(x, y);\n        }\n    }\n}\n\nexport default DraggableHandle;\n","import { ActionsUnion, createAction } from \"../helpers/actionHelpers\";\nimport { AnalysisDetails, AnalysisTypes, CompoundAnalysisDetails } from \"../messages\";\nimport { CompoundAnalysis } from \"./types\";\n\n\nexport enum ActionTypes {\n    CREATE = 'COMPOUND_ANALYSIS_CREATE',\n    CREATED = 'COMPOUND_ANALYSIS_CREATED',\n    UPDATED = 'COMPOUND_ANALYSIS_UPDATED',\n    RUN = 'COMPOUND_ANALYSIS_RUN',\n    RUNNING = 'COMPOUND_ANALYSIS_RUNNING',\n    REMOVE = 'COMPOUND_ANALYSIS_REMOVE',\n    REMOVED = 'COMPOUND_ANALYSIS_REMOVED',\n    ERROR = 'COMPOUND_ANALYSIS_ERROR',\n    ENABLE_AUTOSTART = 'COMPOUND_ANALYSIS_ENABLE_AUTOSTART',\n}\n\nexport const Actions = {\n    create: (dataset: string, analysisType: AnalysisTypes) => createAction(ActionTypes.CREATE, { dataset, analysisType }),\n    created: (\n        compoundAnalysis: CompoundAnalysis, autoStart: boolean\n    ) => createAction(ActionTypes.CREATED, { compoundAnalysis, autoStart }),\n    enableAutoStart: (\n        compoundAnalysisId: string\n    ) => createAction(ActionTypes.ENABLE_AUTOSTART, { compoundAnalysisId }),\n    updated: (id: string, details: CompoundAnalysisDetails) => createAction(ActionTypes.UPDATED, { id, details }),\n    run: (id: string, analysisIndex: number, details: AnalysisDetails) => createAction(ActionTypes.RUN, { id, analysisIndex, details }),\n    running: (id: string, job: string, analysisIndex: number) => createAction(ActionTypes.RUNNING, { id, job, jobIndex: analysisIndex }),\n    remove: (id: string) => createAction(ActionTypes.REMOVE, { id }),\n    removed: (id: string) => createAction(ActionTypes.REMOVED, { id }),\n    error: (msg: string, timestamp: number, id: string) => createAction(ActionTypes.ERROR, { msg, timestamp, id }),\n}\n\nexport type Actions = ActionsUnion<typeof Actions>;\n\nexport type ActionParts = {\n    [K in keyof typeof Actions]: ReturnType<typeof Actions[K]>\n}","export type ModifyCoords = ((x: number, y: number) => ({ x: number, y: number }));\n\n/**\n * Call this function whenever a keyboard event happens. The keyboard event is then translated\n * to a coordinate transformation, which is passed to the update callback. The update callback is\n * only called if relevant keys were pressed (example: arrow keys).\n * \n * @param e keyboard event\n * @param update a callback to handle coordinate updates\n */\nexport const handleKeyEvent = (e: React.KeyboardEvent<SVGElement>, update: (fn: ModifyCoords) => void) => {\n    let delta = 1;\n    if (e.shiftKey) {\n        delta = 10;\n    }\n    switch (e.key) {\n        case \"ArrowUp\":\n            update((x: number, y: number) => ({ x, y: y - delta }));\n            break;\n        case \"ArrowDown\":\n            update((x: number, y: number) => ({ x, y: y + delta }));\n            break;\n        case \"ArrowLeft\":\n            update((x: number, y: number) => ({ x: x - delta, y }));\n            break;\n        case \"ArrowRight\":\n            update((x: number, y: number) => ({ x: x + delta, y }));\n            break;\n        default:\n            return;\n    }\n    e.preventDefault();\n}\n","import * as React from \"react\";\nimport { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { AnalysisTypes } from \"../../messages\";\nimport { HandleRenderFunction } from \"../../widgets/types\";\nimport * as compoundAnalysisActions from \"../actions\";\nimport useFramePicker from \"./FramePicker\";\nimport ModeSelector from \"./ModeSelector\";\nimport { useDiskROI } from \"./roi/DiskROI\";\nimport { useRectROI } from \"./roi/RectROI\";\nimport { useRoiPicker } from \"./roi/RoiPicker\";\n\n\nexport enum DefaultModes {\n    SUM = \"SUM\",\n    SD = \"SD\",\n    PICK = \"PICK\",\n}\n\nexport enum DefaultRois {\n    ALL = \"ALL\",\n    DISK = \"DISK\",\n    RECT = \"RECT\",\n}\n\nconst useDefaultFrameView = ({\n    scanWidth, scanHeight, compoundAnalysisId, doAutoStart,\n}: {\n    scanWidth: number, scanHeight: number, compoundAnalysisId: string,\n    doAutoStart: boolean,\n}) => {\n    const availableModes = [\n        {\n            text: \"Average\",\n            value: DefaultModes.SUM,\n        },\n        {\n            text: \"Standard Deviation\",\n            value: DefaultModes.SD,\n        },\n        {\n            text: \"Pick\",\n            value: DefaultModes.PICK,\n        },\n    ]\n\n    const availableRois = [\n        {\n            text: \"All\",\n            value: DefaultRois.ALL,\n        },\n        {\n            text: \"Disk\",\n            value: DefaultRois.DISK,\n        },\n        {\n            text: \"Rect\",\n            value: DefaultRois.RECT,\n        },\n    ]\n\n    const [frameMode, setMode] = useState(DefaultModes.SUM);\n    const [roi, setRoi] = useState(DefaultRois.ALL);\n\n    const dispatch = useDispatch();\n\n    const updateFrameMode = (newMode: DefaultModes) => {\n        dispatch(compoundAnalysisActions.Actions.enableAutoStart(compoundAnalysisId));\n        setMode(newMode);\n    }\n\n    const updateRoi = (newRoi: DefaultRois) => {\n        dispatch(compoundAnalysisActions.Actions.enableAutoStart(compoundAnalysisId));\n        setRoi(newRoi);\n    }\n\n    const frameModeSelector = <ModeSelector modes={availableModes} currentMode={frameMode} onModeChange={updateFrameMode} label=\"Mode\" />\n\n    let roiSelector = <ModeSelector modes={availableRois} currentMode={roi} onModeChange={updateRoi} label=\"ROI\" />\n\n    if (frameMode === DefaultModes.PICK) {\n        roiSelector = <></>;\n    }\n\n    const [cx, setCx] = React.useState(Math.round(scanWidth / 2));\n    const [cy, setCy] = React.useState(Math.round(scanHeight / 2));\n\n    const { coords: pickCoords, handles: pickHandles } = useFramePicker({\n        enabled: frameMode === DefaultModes.PICK,\n        scanWidth, scanHeight,\n        analysisIndex: 0,\n        compoundAnalysisId,\n        cx, cy, setCx, setCy\n    });\n\n    const { rectRoiHandles, rectRoiWidgets, rectRoiParameters } = useRectROI({ scanHeight, scanWidth })\n    const { diskRoiHandles, diskRoiWidgets, diskRoiParameters } = useDiskROI({ scanHeight, scanWidth })\n\n    const nullHandles: HandleRenderFunction = (onDragStart, onDrop) => null\n    let handles = nullHandles;\n\n    let widgets;\n    let params = { roi: {} };\n    switch (roi) {\n        case DefaultRois.DISK:\n            handles = diskRoiHandles;\n            widgets = diskRoiWidgets;\n            params = diskRoiParameters;\n            break;\n        case DefaultRois.RECT:\n            handles = rectRoiHandles;\n            widgets = rectRoiWidgets;\n            params = rectRoiParameters;\n            break;\n    }\n\n    switch (frameMode) {\n        case DefaultModes.PICK:\n            handles = pickHandles;\n            widgets = undefined;\n            break;\n    }\n\n    useRoiPicker({\n        enabled: frameMode === DefaultModes.SD && doAutoStart,\n        scanWidth, scanHeight,\n        analysisIndex: 0,\n        compoundAnalysisId,\n        roiParameters: params,\n        analysisType: AnalysisTypes.SD_FRAMES\n    })\n\n    useRoiPicker({\n        enabled: frameMode === DefaultModes.SUM && doAutoStart,\n        scanWidth, scanHeight,\n        analysisIndex: 0,\n        compoundAnalysisId,\n        roiParameters: params,\n        analysisType: AnalysisTypes.SUM_FRAMES,\n    })\n\n    const frameViewTitle = (\n        frameMode !== DefaultModes.PICK ? null : <>Pick: x={pickCoords.cx}, y={pickCoords.cy} &emsp;</>\n    )\n\n    return {\n        frameViewTitle,\n        frameModeSelector: (<>{frameModeSelector} {roiSelector}</>),\n        roiSelector,\n        handles,\n        widgets,\n    }\n}\n\nexport default useDefaultFrameView;","import React from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { AnalysisParameters, AnalysisTypes } from \"../../messages\";\nimport { inRectConstraint } from \"../../widgets/constraints\";\nimport DraggableHandle from \"../../widgets/DraggableHandle\";\nimport { HandleRenderFunction } from \"../../widgets/types\";\nimport * as compoundAnalysisActions from \"../actions\";\n\nconst useFramePicker = ({\n    enabled, scanWidth, scanHeight, analysisIndex, compoundAnalysisId, cx, cy, setCx, setCy\n}: {\n    enabled: boolean, scanWidth: number, scanHeight: number,\n    analysisIndex: number, compoundAnalysisId: string,\n    cx: number, cy: number, setCx: (newCx: number) => void, setCy: (newCy: number) => void,\n}) => {\n\n    const dispatch = useDispatch();\n\n    React.useEffect(() => {\n        if (enabled) {\n            const params: AnalysisParameters = {\n                x: cx,\n                y: cy,\n            };\n\n            dispatch(compoundAnalysisActions.Actions.run(compoundAnalysisId, analysisIndex, {\n                analysisType: AnalysisTypes.PICK_FRAME,\n                parameters: params,\n            }))\n        }\n    }, [compoundAnalysisId, cx, cy, enabled, analysisIndex, dispatch]);\n\n    const onPickChange = (pickX: number, pickY: number) => {\n        const newX = Math.round(pickX);\n        const newY = Math.round(pickY);\n        if (cx === newX && cy === newY) {\n            return;\n        }\n        setCx(newX);\n        setCy(newY);\n    }\n\n    const renderPickHandle: HandleRenderFunction = (onDragStart, onDrop) => (\n        <DraggableHandle x={cx} y={cy} withCross={true}\n            imageWidth={scanWidth}\n            onDragMove={onPickChange}\n            parentOnDragStart={onDragStart}\n            parentOnDrop={onDrop}\n            constraint={inRectConstraint(scanWidth, scanHeight)} />\n    )\n\n    return { coords: { cx, cy }, handles: renderPickHandle };\n}\n\nexport default useFramePicker;","import * as React from \"react\";\nimport { Dropdown, DropdownProps } from \"semantic-ui-react\";\n\n\ntype ModeOptions = Array<{\n    text: string;\n    value: any;\n}>;\n\ninterface ModeSelectorProps {\n    modes: ModeOptions,\n    currentMode: any,\n    onModeChange: (mode: any) => void,\n    label: string,\n}\n\nconst ModeSelector: React.FunctionComponent<ModeSelectorProps> = ({\n    modes, currentMode, onModeChange, label\n}) => {\n\n    const onChange = (e: React.SyntheticEvent, data: DropdownProps) => {\n        onModeChange(data.value)\n    }\n\n    return (\n        <>\n            <div>\n                {label}:{' '}\n                <Dropdown\n                    inline={true}\n                    options={modes}\n                    value={currentMode}\n                    onChange={onChange}\n                />\n            </div>\n        </>\n    )\n}\n\nexport default ModeSelector;","import * as React from \"react\";\nimport { defaultMaskStyles } from \"./styles\";\n\nexport interface RectProps {\n    imageWidth: number,\n    imageHeight: number,\n    x: number,\n    y: number,\n    width: number,\n    height: number,\n}\n\nconst Rect: React.SFC<RectProps> = ({ imageWidth, imageHeight, x, y, width, height }) => {\n    let ymin: number;\n    let xmin: number;\n    if (height*width > 0) {\n    ymin = Math.min(y, y+height);\n    xmin = Math.min(x, x+width);}\n    else if (height > 0 && width < 0) \n    {ymin = y;\n    xmin = x+width;}\n    else \n    {ymin = y+height;\n    xmin = x;}\n    return (\n        <rect x={xmin + .5} y={ymin + .5} width={Math.abs(width)} height={Math.abs(height)} style={{ ...defaultMaskStyles(imageWidth) }} />\n    );\n}\n\nexport default Rect;\n\n","import * as React from \"react\";\nimport { useState } from \"react\";\n\nimport { FrameParams } from \"../../../messages\";\nimport DraggableHandle from \"../../../widgets/DraggableHandle\";\nimport Rect from \"../../../widgets/Rect\";\nimport { HandleRenderFunction } from \"../../../widgets/types\";\n\n\nconst useRectROI = ({ scanWidth, scanHeight }: {\n    scanWidth: number;\n    scanHeight: number;\n}) => {\n    const minLength = Math.min(scanWidth, scanHeight);\n    const [x, setx] = useState(scanWidth / 2);\n    const [y, sety] = useState(scanHeight / 2);\n    const [width, setwidth] = useState(minLength / 8);\n    const [height, setheight] = useState(minLength / 8);\n\n\n    const rectRoiParameters: FrameParams = {\n        roi: {\n            shape: \"rect\",\n            x,\n            y,\n            width,\n            height,\n        },\n    }\n\n\n    const handleCornerChange = (newx: number, newy: number) => {\n        setx(newx);\n        sety(newy);\n    };\n\n    const handleShapeChange = (newx: number, newy: number) => {\n        setwidth(newx - x);\n        setheight(newy - y);\n    };\n\n    const smthHandle = {\n        x: x + width,\n        y: y + height,\n    }\n\n    const rectRoiHandles: HandleRenderFunction = (handleDragStart, handleDrop) => (<>\n        <DraggableHandle x={x} y={y}\n            imageWidth={scanWidth}\n            onDragMove={handleCornerChange}\n            parentOnDragStart={handleDragStart}\n            parentOnDrop={handleDrop} />\n        <DraggableHandle x={smthHandle.x} y={smthHandle.y}\n            imageWidth={scanWidth}\n            onDragMove={handleShapeChange}\n            parentOnDragStart={handleDragStart}\n            parentOnDrop={handleDrop} />\n    </>);\n\n    const rectRoiWidgets = (\n        <Rect x={x} y={y} width={width} height={height}\n            imageWidth={scanWidth} imageHeight={scanHeight}\n        />\n    );\n\n    return {\n        rectRoiParameters,\n        rectRoiHandles,\n        rectRoiWidgets,\n    };\n};\n\nexport { useRectROI };\n\n","import * as React from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { AnalysisTypes, FrameParams } from \"../../../messages\";\nimport * as analysisActions from \"../../actions\";\n\n\nconst useRoiPicker = ({ compoundAnalysisId, enabled, analysisIndex, roiParameters, analysisType }: {\n    scanWidth: number;\n    scanHeight: number;\n    enabled: boolean;\n    analysisIndex: number,\n    compoundAnalysisId: string;\n    roiParameters: FrameParams;\n    analysisType: AnalysisTypes.SD_FRAMES | AnalysisTypes.SUM_FRAMES\n}) => {\n    const dispatch = useDispatch();\n\n    React.useEffect(() => {\n        const handle = setTimeout(() => {\n            if (enabled) {\n                const analysisDetails = {\n                    analysisType,\n                    parameters: roiParameters,\n                };\n                dispatch(analysisActions.Actions.run(compoundAnalysisId, analysisIndex, analysisDetails))\n            }\n        }, 100);\n\n        return () => clearTimeout(handle);\n        // rules-of-hooks can't be statically validated here\n        // eslint-disable-next-line\n    }, [analysisType, compoundAnalysisId, enabled, analysisIndex, JSON.stringify(roiParameters), dispatch]);\n\n    return {\n    };\n};\n\nexport { useRoiPicker };\n\n","import * as React from \"react\";\nimport { useState } from \"react\";\n\nimport { FrameParams } from \"../../../messages\";\nimport { cbToRadius, inRectConstraint, keepOnCY } from \"../../../widgets/constraints\";\nimport Disk from \"../../../widgets/Disk\";\nimport DraggableHandle from \"../../../widgets/DraggableHandle\";\nimport { HandleRenderFunction } from \"../../../widgets/types\";\n\nconst useDiskROI = ({ scanWidth, scanHeight }: {\n    scanWidth: number;\n    scanHeight: number;\n}) => {\n    const minLength = Math.min(scanWidth, scanHeight);\n    const [cx, setCx] = useState(scanWidth / 2);\n    const [cy, setCy] = useState(scanHeight / 2);\n    const [r, setR] = useState(minLength / 8);\n\n\n    const diskRoiParameters: FrameParams = {\n        roi: {\n            shape: \"disk\",\n            cx,\n            cy,\n            r,\n        },\n    }\n\n\n    const handleCenterChange = (newCx: number, newCy: number) => {\n        setCx(newCx);\n        setCy(newCy);\n    };\n\n    const handleRChange = (newR: number) => {\n        setR(newR);\n    };\n\n    const rHandle = {\n        x: cx - r,\n        y: cy,\n    }\n\n    const diskRoiHandles: HandleRenderFunction = (handleDragStart, handleDrop) => (<>\n        <DraggableHandle x={cx} y={cy}\n            imageWidth={scanWidth}\n            onDragMove={handleCenterChange}\n            parentOnDragStart={handleDragStart}\n            parentOnDrop={handleDrop}\n            constraint={inRectConstraint(scanWidth, scanHeight)} />\n        <DraggableHandle x={rHandle.x} y={rHandle.y}\n            imageWidth={scanWidth}\n            onDragMove={cbToRadius(cx, cy, handleRChange)}\n            parentOnDragStart={handleDragStart}\n            parentOnDrop={handleDrop}\n            constraint={keepOnCY(cy)} />\n    </>);\n\n    const diskRoiWidgets = (\n        <Disk cx={cx} cy={cy} r={r}\n            imageWidth={scanWidth} imageHeight={scanHeight}\n        />\n    );\n\n    return {\n        diskRoiParameters,\n        diskRoiHandles,\n        diskRoiWidgets,\n    };\n};\n\nexport { useDiskROI };\n\n","import * as React from \"react\";\nimport { Grid, Header, Icon, Segment } from \"semantic-ui-react\";\n\ninterface AnalysisLayoutTwoColProps {\n    title: string,\n    subtitle: React.ReactNode,\n    left: React.ReactNode,\n    right: React.ReactNode,\n    toolbar?: React.ReactNode,\n}\n\ntype MergedProps = AnalysisLayoutTwoColProps;\n\nconst AnalysisLayoutTwoCol: React.SFC<MergedProps> = ({\n    title, subtitle,\n    left, right,\n    toolbar,\n}) => {\n    return (\n        <>\n            <Header as='h3' attached=\"top\">\n                <Icon name=\"cog\" />\n                <Header.Content>{title}</Header.Content>\n            </Header>\n            <Segment attached={true}>\n                <Grid columns={2}>\n                    <Grid.Row>\n                        <Grid.Column>\n                            {left}\n                            <p>{subtitle}</p>\n                        </Grid.Column>\n                        <Grid.Column>\n                            {right}\n                        </Grid.Column>\n                    </Grid.Row>\n                </Grid>\n            </Segment>\n            {toolbar}\n        </>\n    )\n}\n\nexport default AnalysisLayoutTwoCol","export function getApiBasePath() {\n    const loc = window.location.pathname;\n\n    if(loc.endsWith('/')) {\n        return `${loc}api/`;\n    } else {\n        return `${loc}/api/`;\n    }\n}\n\nexport function getApiWSURL() {\n    const basePath = getApiBasePath();\n    return `ws://${window.location.hostname}:${window.location.port}${basePath}events/`;\n}\n\nexport async function genericDelete(path: string) {\n    const basePath = getApiBasePath();\n    const r = await fetch(`${basePath}${path}`, {\n        credentials: \"same-origin\",\n        method: \"DELETE\",\n    });\n    return await r.json();\n}\n\nexport async function genericPut(path: string, payload: object) {\n    const basePath = getApiBasePath();\n    const r = await fetch(`${basePath}${path}`, {\n        body: JSON.stringify(payload),\n        credentials: \"same-origin\",\n        method: \"PUT\",\n    });\n    return await r.json();\n}","import { AnalysisTypes } from \"../messages\";\nimport { CompoundAnalysisMetadata, CompoundAnalysisMetadataItem } from \"./types\";\n// keyof typeof: https://stackoverflow.com/a/42623905/540644\nexport const getMetadata = (typeName: keyof typeof AnalysisTypes): CompoundAnalysisMetadataItem => {\n    const type: AnalysisTypes = AnalysisTypes[typeName];\n    return CompoundAnalysisMetadata[type];\n};\n","import * as React from \"react\";\nimport { useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { Button, Dropdown, DropdownProps, Header, Icon, Modal, Popup } from \"semantic-ui-react\";\nimport { AnalysisState } from \"../../analysis/types\";\nimport { getApiBasePath } from \"../../helpers/apiHelpers\";\nimport { JobStatus } from \"../../job/types\";\nimport { RootReducer } from \"../../store\";\nimport { getMetadata } from \"../getMetadata\";\nimport { CompoundAnalysisState } from \"../types\";\n\ninterface DownloadItemsProps {\n    compoundAnalysis: CompoundAnalysisState,\n    currentFormat?: string,\n}\n\nconst DownloadItems: React.SFC<DownloadItemsProps> = ({\n    compoundAnalysis, currentFormat\n}) => {\n\n    const basePath = getApiBasePath();\n    const downloadUrl = (analysisId: string) => (\n        `${basePath}compoundAnalyses/${compoundAnalysis.compoundAnalysis}/analyses/${analysisId}/download/${currentFormat}/`\n    )\n\n    const analysesById = useSelector((state: RootReducer) => {\n        return state.analyses.byId;\n    });\n\n    const jobsById = useSelector((state: RootReducer) => {\n        return state.jobs.byId;\n    });\n\n    const analyses = compoundAnalysis.details.analyses.map(analysis => {\n        return analysesById[analysis];\n    }).filter(analysis => {\n        return analysis.jobs.some(jobId => jobsById[jobId].status === JobStatus.SUCCESS);\n    })\n\n    const getAnalysisDescription = (analysis: AnalysisState) => {\n        return getMetadata(analysis.details.analysisType).desc;\n    }\n\n    const getDownloadChannels = (analysis: AnalysisState) => {\n        if(!analysis.displayedJob) {\n            return [];\n        }\n        return jobsById[analysis.displayedJob].results.filter(\n            result => result.description.includeInDownload\n        ).map(\n            result => result.description.title\n        )\n    }\n\n    return (\n        <ul>\n            {analyses.map((analysis) => {\n                return (\n                    <li key={analysis.id}>\n                        <a href={downloadUrl(analysis.id)}>\n                            {getAnalysisDescription(analysis)} (channels: {getDownloadChannels(analysis).join(\", \")})\n                        </a>\n                    </li>\n                );\n            })}\n        </ul>\n    )\n}\n\ninterface DownloadProps {\n    compoundAnalysis: CompoundAnalysisState,\n}\n\ntype FormatOptions = Array<{\n    text: string;\n    value: any;\n}>;\n\nconst Download: React.SFC<DownloadProps> = ({ compoundAnalysis }) => {\n    const formats = useSelector((state: RootReducer) => state.config.resultFileFormats);\n    const formatOptions: FormatOptions = Object.keys(formats).map(identifier => {\n        return {\n            value: identifier,\n            text: formats[identifier].description,\n        }\n    });\n\n    const [currentFormat, setFormat] = useState(formatOptions[0]?.value);\n\n    // we may be called before the config is completely loaded, so we\n    // need to set the format after the list of formats is available\n    React.useEffect(() => {\n        if(formatOptions.length !== 0 && !currentFormat) {\n            setFormat(formatOptions[0].value);\n        }\n    }, [formatOptions, currentFormat])\n\n    const onFormatChange = (e: React.SyntheticEvent, data: DropdownProps) => {\n        setFormat(data.value);\n    }\n\n    return (\n        <Modal trigger={\n            <Button icon={true}>\n                <Icon name='download' />\n                Download\n            </Button>\n        }>\n            <Popup.Header>\n                Download Results, format: <Dropdown inline={true} options={formatOptions} onChange={onFormatChange} value={currentFormat} />\n            </Popup.Header>\n            <Popup.Content>\n                <Header as=\"h3\">Available results:</Header>\n                <DownloadItems compoundAnalysis={compoundAnalysis} currentFormat={currentFormat} />\n            </Popup.Content>\n        </Modal>\n    );\n}\n\nexport default Download;","import * as React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Button, Icon, IconProps, Segment } from \"semantic-ui-react\";\nimport { RootReducer } from \"../../store\";\nimport * as analysisActions from \"../actions\";\nimport { getAnalysisStatus } from \"../helpers\";\nimport { CompoundAnalysisState } from \"../types\";\nimport Download from \"./Download\";\n\ninterface ToolbarProps {\n    compoundAnalysis: CompoundAnalysisState,\n    busyIdxs: number[],\n    onApply: () => void,\n}\n\n\ntype MergedProps = ToolbarProps;\n\nconst Toolbar: React.SFC<MergedProps> = ({ busyIdxs, onApply, compoundAnalysis }) => {\n    const dispatch = useDispatch();\n    const handleRemove = () => dispatch(analysisActions.Actions.remove(compoundAnalysis.compoundAnalysis));\n    const analyses = useSelector((state: RootReducer) => state.analyses);\n    const jobs = useSelector((state: RootReducer) => state.jobs);\n    const status = getAnalysisStatus(\n        compoundAnalysis, analyses, jobs,\n        busyIdxs\n    );\n    const running = status === \"busy\";\n    const applyIconProps: IconProps = running ? { name: 'cog', loading: true } : { name: 'check' }\n\n    return (\n        <Segment attached=\"bottom\">\n            <Button.Group>\n                <Button primary={true} onClick={onApply} icon={true}>\n                    <Icon {...applyIconProps} />\n                    Apply\n                </Button>\n                <Download compoundAnalysis={compoundAnalysis} />\n                <Button onClick={handleRemove} icon={true}>\n                    <Icon name='remove' />\n                    Remove\n                </Button>\n            </Button.Group>\n        </Segment>\n    );\n}\n\nexport default Toolbar;","import { AnalysisReducerState } from \"../analysis/reducers\";\nimport { JobReducerState } from \"../job/reducers\";\nimport { JobRunning } from \"../job/types\";\nimport { CompoundAnalysisState } from \"./types\";\n\nexport const getAnalysisStatus = (compoundAnalysis: CompoundAnalysisState, analyses: AnalysisReducerState, jobs: JobReducerState, analysisIdxsToInclude: number[] = []): \"idle\" | \"busy\" => {\n    let filteredAnalyses = compoundAnalysis.details.analyses;\n\n    if (analysisIdxsToInclude.length > 0) {\n        filteredAnalyses = filteredAnalyses.filter((analysisId: string, idx: number) => {\n            return analysisIdxsToInclude.indexOf(idx) !== -1;\n        })\n    }\n\n    return filteredAnalyses.reduce((prevValue: \"idle\" | \"busy\", analysisId: string) => {\n        const analysis = analyses.byId[analysisId];\n        if(!analysis) {\n            return prevValue; // no analysis, so \"all jobs\" are done\n        }\n        const allDone = analysis.jobs.every(\n            jobId => jobs.byId[jobId].running === JobRunning.DONE\n        );\n        return allDone ? prevValue : \"busy\";\n    }, \"idle\");\n}","import * as React from \"react\";\nimport { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { defaultDebounce } from \"../../helpers\";\nimport ResultList from \"../../job/components/ResultList\";\nimport { AnalysisTypes } from \"../../messages\";\nimport { cbToRadius, inRectConstraint, keepOnCY } from \"../../widgets/constraints\";\nimport Disk from \"../../widgets/Disk\";\nimport { DraggableHandle } from \"../../widgets/DraggableHandle\";\nimport { HandleRenderFunction } from \"../../widgets/types\";\nimport * as compoundAnalysisActions from \"../actions\";\nimport { CompoundAnalysisProps } from \"../types\";\nimport useDefaultFrameView from \"./DefaultFrameView\";\nimport AnalysisLayoutTwoCol from \"./layouts/AnalysisLayoutTwoCol\";\nimport Toolbar from \"./Toolbar\";\n\nconst CenterOfMassAnalysis: React.SFC<CompoundAnalysisProps> = ({ compoundAnalysis, dataset }) => {\n    const { shape } = dataset.params;\n    const [scanHeight, scanWidth, imageHeight, imageWidth] = shape;\n    const minLength = Math.min(imageWidth, imageHeight);\n    const [cx, setCx] = useState(imageWidth / 2);\n    const [cy, setCy] = useState(imageHeight / 2);\n    const [r, setR] = useState(minLength / 4);\n\n    const dispatch = useDispatch();\n\n    const rHandle = {\n        x: cx - r,\n        y: cy,\n    }\n\n    const handleCenterChange = defaultDebounce((newCx: number, newCy: number) => {\n        setCx(newCx);\n        setCy(newCy);\n    });\n    const handleRChange = defaultDebounce(setR);\n\n    const frameViewHandles: HandleRenderFunction = (handleDragStart, handleDrop) => (<>\n        <DraggableHandle x={cx} y={cy}\n            imageWidth={imageWidth}\n            onDragMove={handleCenterChange}\n            parentOnDragStart={handleDragStart}\n            parentOnDrop={handleDrop}\n            constraint={inRectConstraint(imageWidth, imageHeight)} />\n        <DraggableHandle x={rHandle.x} y={rHandle.y}\n            imageWidth={imageWidth}\n            onDragMove={cbToRadius(cx, cy, handleRChange)}\n            parentOnDragStart={handleDragStart}\n            parentOnDrop={handleDrop}\n            constraint={keepOnCY(cy)} />\n    </>);\n\n    const frameViewWidgets = (\n        <Disk cx={cx} cy={cy} r={r}\n            imageWidth={imageWidth} imageHeight={imageHeight} />\n    )\n\n    const {\n        frameViewTitle, frameModeSelector,\n        handles: resultHandles, widgets: resultWidgets\n    } = useDefaultFrameView({\n        scanWidth,\n        scanHeight,\n        compoundAnalysisId: compoundAnalysis.compoundAnalysis,\n        doAutoStart: compoundAnalysis.doAutoStart,\n    })\n\n    const subtitle = <>{frameViewTitle} Disk: center=(x={cx.toFixed(2)}, y={cy.toFixed(2)}), r={r.toFixed(2)}</>;\n\n    const runAnalysis = () => {\n        dispatch(compoundAnalysisActions.Actions.run(compoundAnalysis.compoundAnalysis, 1, {\n            analysisType: AnalysisTypes.CENTER_OF_MASS,\n            parameters: {\n                shape: \"com\",\n                cx,\n                cy,\n                r\n            }\n        }));\n    };\n\n    const toolbar = <Toolbar compoundAnalysis={compoundAnalysis} onApply={runAnalysis} busyIdxs={[1]} />\n\n    return (\n        <AnalysisLayoutTwoCol\n            title=\"COM analysis\" subtitle={subtitle}\n            left={<>\n                <ResultList\n                    extraHandles={frameViewHandles} extraWidgets={frameViewWidgets}\n                    analysisIndex={0} compoundAnalysis={compoundAnalysis.compoundAnalysis}\n                    width={imageWidth} height={imageHeight}\n                    selectors={frameModeSelector}\n                />\n            </>}\n            right={<>\n                <ResultList\n                    analysisIndex={1} compoundAnalysis={compoundAnalysis.compoundAnalysis}\n                    width={scanWidth} height={scanHeight}\n                    extraHandles={resultHandles}\n                    extraWidgets={resultWidgets}\n                />\n            </>}\n            toolbar={toolbar}\n        />\n    );\n}\n\nexport default CenterOfMassAnalysis;","// from https://stackoverflow.com/a/45100420/540644\nexport function getPathArc(center: { x: number, y: number }, start: number, end: number, radius: number) {\n    if (end === start) { end += 360; }\n    let degree = end - start;\n    degree = degree < 0 ? (degree + 360) : degree;\n    const points = [];\n    points.push(getLocationFromAngle(start, radius, center));\n    points.push(getLocationFromAngle(start + degree / 3, radius, center));\n    points.push(getLocationFromAngle(start + degree * 2 / 3, radius, center));\n    points.push(getLocationFromAngle(end, radius, center));\n    return getCirclePath(points, radius, (degree < 180) ? 0 : 1);\n}\n\nfunction getCirclePath(points: Array<{ x: number, y: number }>, radius: number, clockWise: 0 | 1) {\n    return ['M', points[0].x, points[0].y,\n        'A', radius, radius, 0, 0, clockWise, points[1].x, points[1].y,\n        'A', radius, radius, 0, 0, clockWise, points[2].x, points[2].y,\n        'A', radius, radius, 0, 0, clockWise, points[3].x, points[3].y\n    ].join(' ');\n}\n\nfunction getLocationFromAngle(degree: number, radius: number, center: { x: number, y: number }) {\n    const radian = (degree * Math.PI) / 180;\n    return {\n        x: Math.cos(radian) * radius + center.x,\n        y: Math.sin(radian) * radius + center.y\n    }\n}\n","import * as React from \"react\";\nimport { getPathArc } from \"../helpers/svg\";\nimport { defaultMaskStyles } from \"./styles\";\n\nexport interface RingProps {\n    imageWidth: number,\n    cx: number,\n    cy: number,\n    ri: number,\n    ro: number,\n}\n\nconst Ring: React.SFC<RingProps> = ({ imageWidth, cx, cy, ri, ro }) => {\n    // see also: https://stackoverflow.com/a/37883328/540644\n    const pathSpecs = [\n        getPathArc({ x: cx + .5, y: cy + .5 }, 90, 90, ro),\n        getPathArc({ x: cx + .5, y: cy + .5 }, 90, 90, ri)\n    ]\n    const pathSpec = pathSpecs.join(' ');\n\n    return (\n        <path d={pathSpec} fillRule=\"evenodd\" style={{ ...defaultMaskStyles(imageWidth) }} />\n    );\n}\n\nexport default Ring;","import * as React from \"react\";\nimport { Grid, Header, Icon, Segment } from \"semantic-ui-react\";\n\ninterface AnalysisLayoutTwoResProps {\n    title: string,\n    subtitle: React.ReactNode,\n    left: React.ReactNode,\n    mid: React.ReactNode,\n    right: React.ReactNode,\n    clustparams: React.ReactNode,\n    toolbar?: React.ReactNode,\n    title1: string, \n    title2: React.ReactNode,\n    title3:string,\n\n}\n\ntype MergedProps = AnalysisLayoutTwoResProps;\n\nconst AnalysisLayoutTwoRes: React.SFC<MergedProps> = ({\n    title, subtitle,\n    left, mid, right,\n    toolbar, clustparams, title1, title2, title3\n}) => {\n    return (\n        <>\n            <Header as='h3' attached=\"top\">\n                <Icon name=\"cog\" />\n                <Header.Content>{title}</Header.Content>\n            </Header>\n            <Segment attached={true}>\n                <Grid columns={3}>\n                    <Grid.Row>\n                        <Grid.Column width={4}>\n                            <p>{title1}</p>\n                        </Grid.Column> \n\n                        <Grid.Column width={6}>\n                            <p>{title2}</p>   \n\n                        </Grid.Column>\n\n                        <Grid.Column width={6}>\n                            <p>{title3}</p>\n                        </Grid.Column>    \n                    </Grid.Row>\n\n                    <Grid.Row>\n                        <Grid.Column width={4}>\n                            {left}\n                        </Grid.Column>\n\n                        <Grid.Column width={6}>\n                            {mid}\n                        </Grid.Column>\n\n                        <Grid.Column width={6}>\n                            {right}\n                        </Grid.Column>\n\n                    </Grid.Row>\n\n                    <Grid.Row>\n                        <Grid.Column width={16}>\n\n                            <div>{clustparams}</div>\n                            <p>{subtitle}</p>\n\n                        </Grid.Column>\n\n                    </Grid.Row>\n                </Grid>\n                \n            </Segment>\n            \n            {toolbar}\n        </>\n    )\n}\n\nexport default AnalysisLayoutTwoRes","import * as React from \"react\";\nimport { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { Accordion, Form, Icon } from \"semantic-ui-react\";\nimport { defaultDebounce } from \"../../helpers\";\nimport ResultList from \"../../job/components/ResultList\";\nimport { AnalysisTypes } from \"../../messages\";\nimport { cbToRadius, inRectConstraint, riConstraint, roConstraints } from \"../../widgets/constraints\";\nimport DraggableHandle from \"../../widgets/DraggableHandle\";\nimport Ring from \"../../widgets/Ring\";\nimport { HandleRenderFunction } from \"../../widgets/types\";\nimport * as compoundAnalysisActions from \"../actions\";\nimport { CompoundAnalysisProps } from \"../types\";\nimport useDefaultFrameView from \"./DefaultFrameView\";\nimport AnalysisLayoutTwoRes from \"./layouts/AnalysisLayoutTwoRes\";\nimport { useRectROI } from \"./roi/RectROI\";\nimport Toolbar from \"./Toolbar\";\n\n\nconst ClustAnalysis: React.SFC<CompoundAnalysisProps> = ({ compoundAnalysis, dataset }) => {\n    const { shape } = dataset.params;\n    const [scanHeight, scanWidth, imageHeight, imageWidth] = shape;\n    const minLength = Math.min(imageWidth, imageHeight);\n\n    const [cx, setCx] = useState(imageWidth / 2);\n    const [cy, setCy] = useState(imageHeight / 2);\n    const [ri, setRi] = useState(minLength / 4);\n    const [ro, setRo] = useState(minLength / 2);\n\n    const riHandle = {\n        x: cx - ri,\n        y: cy,\n    }\n    const roHandle = {\n        x: cx - ro,\n        y: cy,\n    }\n\n    const [minDist, setMinDist] = React.useState(1);\n\n    const minDistChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setMinDist(event.target.valueAsNumber);\n    }\n\n    const [nPeaks, setNPeaks] = React.useState(500);\n\n    const peakChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setNPeaks(event.target.valueAsNumber);\n    }\n\n    const [nClust, setNClust] = React.useState(20);\n\n    const clustChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setNClust(event.target.valueAsNumber);\n    }\n\n    const handleCenterChange = defaultDebounce((newCx: number, newCy: number) => {\n        setCx(newCx);\n        setCy(newCy);\n    });\n    const handleRIChange = defaultDebounce(setRi);\n    const handleROChange = defaultDebounce(setRo);\n\n    const frameViewHandles: HandleRenderFunction = (handleDragStart, handleDrop) => (<>\n        <DraggableHandle x={cx} y={cy}\n            imageWidth={imageWidth}\n            onDragMove={handleCenterChange}\n            parentOnDrop={handleDrop}\n            parentOnDragStart={handleDragStart}\n            constraint={inRectConstraint(imageWidth, imageHeight)} />\n        <DraggableHandle x={roHandle.x} y={roHandle.y}\n            imageWidth={imageWidth}\n            onDragMove={cbToRadius(cx, cy, handleROChange)}\n            parentOnDrop={handleDrop}\n            parentOnDragStart={handleDragStart}\n            constraint={roConstraints(riHandle.x, cy)} />\n        <DraggableHandle x={riHandle.x} y={riHandle.y}\n            imageWidth={imageWidth}\n            parentOnDrop={handleDrop}\n            parentOnDragStart={handleDragStart}\n            onDragMove={cbToRadius(cx, cy, handleRIChange)}\n            constraint={riConstraint(roHandle.x, cy)} />\n    </>);\n\n    const frameViewWidgets = (\n        <Ring cx={cx} cy={cy} ri={ri} ro={ro}\n            imageWidth={imageWidth} />\n    )\n\n    const dispatch = useDispatch();\n    const { rectRoiParameters, rectRoiHandles, rectRoiWidgets } = useRectROI({ scanWidth, scanHeight });\n\n    React.useEffect(() => {\n        if (compoundAnalysis.doAutoStart) {\n            dispatch(compoundAnalysisActions.Actions.run(compoundAnalysis.compoundAnalysis, 1, {\n                analysisType: AnalysisTypes.SUM_SIG,\n                parameters: {},\n            }))\n        }\n    }, [compoundAnalysis.compoundAnalysis, dispatch, compoundAnalysis.doAutoStart]);\n\n    const runAnalysis = () => {\n        dispatch(compoundAnalysisActions.Actions.run(compoundAnalysis.compoundAnalysis, 2, {\n            analysisType: AnalysisTypes.CLUST,\n            parameters: {\n                roi: rectRoiParameters.roi,\n                cx,\n                cy,\n                ri,\n                ro,\n                n_clust: nClust,\n                n_peaks: nPeaks,\n                min_dist: minDist\n            }\n        }));\n    };\n\n    const {\n        frameViewTitle, frameModeSelector,\n        handles: resultHandles,\n        widgets: resultWidgets,\n    } = useDefaultFrameView({\n        scanWidth,\n        scanHeight,\n        compoundAnalysisId: compoundAnalysis.compoundAnalysis,\n        doAutoStart: compoundAnalysis.doAutoStart,\n    })\n\n    const subtitle = (\n        <>{frameViewTitle} Ring: center=(x={cx.toFixed(2)}, y={cy.toFixed(2)}), ri={ri.toFixed(2)}, ro={ro.toFixed(2)}</>\n    )\n    const toolbar = <Toolbar compoundAnalysis={compoundAnalysis} onApply={runAnalysis} busyIdxs={[2]} />\n\n    const [paramsVisible, setParamsVisible] = React.useState(false);\n\n    const handleClick = (event: React.MouseEvent<HTMLDivElement>) => {\n        setParamsVisible(!paramsVisible);\n    }\n\n    const clustparams =\n        <Accordion>\n            <Accordion.Title active={paramsVisible} index={0} onClick={handleClick}>\n                <Icon name='dropdown' />\n                Parameters\n            </Accordion.Title>\n            <Accordion.Content active={paramsVisible}>\n                <Form>\n                    <Form.Field>\n                        <label> Number of clusters  <input type=\"number\" value={nClust} step=\"1\" min=\"2\" max=\"100\" onChange={clustChange} /> </label>\n                    </Form.Field>\n                    <Form.Field>\n                        <label>  Maximal number of possible peak positions to detect (better put higher value,\n        the output is limited to the number of peaks the algorithm could find)  <input type=\"number\" value={nPeaks} step=\"1\" min=\"5\" max=\"200\" onChange={peakChange} /> </label>\n                    </Form.Field>\n                    <Form.Field>\n                        <label>  Minimal distance in pixels between peaks  <input type=\"number\" value={minDist} step=\"1\" min=\"0\" max=\"100\" onChange={minDistChange} />  </label>\n                    </Form.Field>\n                </Form>\n            </Accordion.Content>\n        </Accordion>\n    return (\n        <AnalysisLayoutTwoRes\n            title=\"Region clustering\" subtitle={subtitle}\n            left={<>\n                <ResultList\n                    extraHandles={frameViewHandles} extraWidgets={frameViewWidgets}\n                    analysisIndex={0} compoundAnalysis={compoundAnalysis.compoundAnalysis}\n                    width={imageWidth} height={imageHeight}\n                    selectors={frameModeSelector}\n                />\n            </>}\n            mid={<>\n                <ResultList\n                    analysisIndex={1} compoundAnalysis={compoundAnalysis.compoundAnalysis}\n                    width={scanWidth} height={scanHeight}\n                    extraHandles={rectRoiHandles}\n                    extraWidgets={rectRoiWidgets}\n                />\n            </>}\n\n            right={<>\n                <ResultList\n                    analysisIndex={2} compoundAnalysis={compoundAnalysis.compoundAnalysis}\n                    width={scanWidth} height={scanHeight}\n                    extraHandles={resultHandles}\n                    extraWidgets={resultWidgets}\n                />\n            </>}\n            toolbar={toolbar}\n            clustparams={clustparams}\n\n            title1=\"Peaks inside the ring will be considered\"\n            title2=\"Choose specimen region\"\n            title3=\"Clustering result\"\n\n        />\n    );\n}\n\nexport default ClustAnalysis;","import * as React from \"react\";\nimport { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport ResultList from \"../../job/components/ResultList\";\nimport { AnalysisTypes } from \"../../messages\";\nimport { cbToRadius, inRectConstraint, keepOnCY } from \"../../widgets/constraints\";\nimport Disk from \"../../widgets/Disk\";\nimport DraggableHandle from \"../../widgets/DraggableHandle\";\nimport { HandleRenderFunction } from \"../../widgets/types\";\nimport * as compoundAnalysisActions from \"../actions\";\nimport { CompoundAnalysisProps } from \"../types\";\nimport useDefaultFrameView from \"./DefaultFrameView\";\nimport AnalysisLayoutTwoCol from \"./layouts/AnalysisLayoutTwoCol\";\nimport Toolbar from \"./Toolbar\";\n\nconst DiskMaskAnalysis: React.SFC<CompoundAnalysisProps> = ({ compoundAnalysis, dataset }) => {\n    const { shape } = dataset.params;\n    const [scanHeight, scanWidth, imageHeight, imageWidth] = shape;\n\n    const minLength = Math.min(imageWidth, imageHeight);\n    const [cx, setCx] = useState(imageWidth / 2);\n    const [cy, setCy] = useState(imageHeight / 2);\n    const [r, setR] = useState(minLength / 4);\n\n    const handleCenterChange = (newCx: number, newCy: number) => {\n        setCx(newCx);\n        setCy(newCy);\n    };\n    const handleRChange = setR;\n\n    const rHandle = {\n        x: cx - r,\n        y: cy,\n    }\n\n    const frameViewHandles: HandleRenderFunction = (handleDragStart, handleDrop) => (<>\n        <DraggableHandle x={cx} y={cy}\n            imageWidth={imageWidth}\n            onDragMove={handleCenterChange}\n            parentOnDragStart={handleDragStart}\n            parentOnDrop={handleDrop}\n            constraint={inRectConstraint(imageWidth, imageHeight)} />\n        <DraggableHandle x={rHandle.x} y={rHandle.y}\n            imageWidth={imageWidth}\n            onDragMove={cbToRadius(cx, cy, handleRChange)}\n            parentOnDragStart={handleDragStart}\n            parentOnDrop={handleDrop}\n            constraint={keepOnCY(cy)} />\n    </>);\n\n    const frameViewWidgets = (\n        <Disk cx={cx} cy={cy} r={r}\n            imageWidth={imageWidth} imageHeight={imageHeight}\n        />\n    );\n\n    const dispatch = useDispatch();\n\n    const runAnalysis = () => {\n        dispatch(compoundAnalysisActions.Actions.run(compoundAnalysis.compoundAnalysis, 1, {\n            analysisType: AnalysisTypes.APPLY_DISK_MASK,\n            parameters: {\n                shape: \"disk\",\n                cx, cy, r\n            }\n        }));\n    };\n\n    const {\n        frameViewTitle, frameModeSelector,\n        handles: resultHandles, widgets: resultWidgets,\n    } = useDefaultFrameView({\n        scanWidth,\n        scanHeight,\n        compoundAnalysisId: compoundAnalysis.compoundAnalysis,\n        doAutoStart: compoundAnalysis.doAutoStart,\n    });\n\n    const subtitle = <>{frameViewTitle} Disk: center=(x={cx.toFixed(2)}, y={cy.toFixed(2)}), r={r.toFixed(2)}</>;\n\n    const toolbar = <Toolbar compoundAnalysis={compoundAnalysis} onApply={runAnalysis} busyIdxs={[1]} />\n\n    return (\n        <AnalysisLayoutTwoCol\n            title=\"Disk analysis\" subtitle={subtitle}\n            left={<>\n                <ResultList\n                    extraHandles={frameViewHandles} extraWidgets={frameViewWidgets}\n                    analysisIndex={0} compoundAnalysis={compoundAnalysis.compoundAnalysis}\n                    width={imageWidth} height={imageHeight}\n                    selectors={frameModeSelector}\n                />\n            </>}\n            right={<>\n                <ResultList\n                    analysisIndex={1} compoundAnalysis={compoundAnalysis.compoundAnalysis}\n                    width={scanWidth} height={scanHeight}\n                    extraHandles={resultHandles}\n                    extraWidgets={resultWidgets}\n                />\n            </>}\n            toolbar={toolbar}\n        />\n    );\n}\n\nexport default DiskMaskAnalysis;","import * as React from \"react\";\nimport { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { defaultDebounce } from \"../../helpers\";\nimport ResultList from \"../../job/components/ResultList\";\nimport { AnalysisTypes } from \"../../messages\";\nimport { cbToRadius, inRectConstraint, riConstraint, roConstraints } from \"../../widgets/constraints\";\nimport DraggableHandle from \"../../widgets/DraggableHandle\";\nimport Ring from \"../../widgets/Ring\";\nimport { HandleRenderFunction } from \"../../widgets/types\";\nimport * as compoundAnalysisActions from \"../actions\";\nimport { CompoundAnalysisProps } from \"../types\";\nimport useDefaultFrameView from \"./DefaultFrameView\";\nimport AnalysisLayoutTwoCol from \"./layouts/AnalysisLayoutTwoCol\";\nimport Toolbar from \"./Toolbar\";\n\nconst FEMAnalysis: React.SFC<CompoundAnalysisProps> = ({ compoundAnalysis, dataset }) => {\n    const { shape } = dataset.params;\n    const [scanHeight, scanWidth, imageHeight, imageWidth] = shape;\n    const minLength = Math.min(imageWidth, imageHeight);\n\n    const [cx, setCx] = useState(imageWidth / 2);\n    const [cy, setCy] = useState(imageHeight / 2);\n    const [ri, setRi] = useState(minLength / 4);\n    const [ro, setRo] = useState(minLength / 2);\n\n    const riHandle = {\n        x: cx - ri,\n        y: cy,\n    }\n    const roHandle = {\n        x: cx - ro,\n        y: cy,\n    }\n\n    const handleCenterChange = defaultDebounce((newCx: number, newCy: number) => {\n        setCx(newCx);\n        setCy(newCy);\n    });\n    const handleRIChange = defaultDebounce(setRi);\n    const handleROChange = defaultDebounce(setRo);\n\n    const frameViewHandles: HandleRenderFunction = (handleDragStart, handleDrop) => (<>\n        <DraggableHandle x={cx} y={cy}\n            imageWidth={imageWidth}\n            onDragMove={handleCenterChange}\n            parentOnDrop={handleDrop}\n            parentOnDragStart={handleDragStart}\n            constraint={inRectConstraint(imageWidth, imageHeight)} />\n        <DraggableHandle x={roHandle.x} y={roHandle.y}\n            imageWidth={imageWidth}\n            onDragMove={cbToRadius(cx, cy, handleROChange)}\n            parentOnDrop={handleDrop}\n            parentOnDragStart={handleDragStart}\n            constraint={roConstraints(riHandle.x, cy)} />\n        <DraggableHandle x={riHandle.x} y={riHandle.y}\n            imageWidth={imageWidth}\n            parentOnDrop={handleDrop}\n            parentOnDragStart={handleDragStart}\n            onDragMove={cbToRadius(cx, cy, handleRIChange)}\n            constraint={riConstraint(roHandle.x, cy)} />\n    </>);\n\n    const frameViewWidgets = (\n        <Ring cx={cx} cy={cy} ri={ri} ro={ro}\n            imageWidth={imageWidth} />\n    )\n\n    const dispatch = useDispatch();\n\n    const runAnalysis = () => {\n        dispatch(compoundAnalysisActions.Actions.run(compoundAnalysis.compoundAnalysis, 1, {\n            analysisType: AnalysisTypes.FEM,\n            parameters: {\n                shape: \"ring\",\n                cx, cy, ri, ro,\n            }\n        }));\n    };\n\n    const {\n        frameViewTitle, frameModeSelector,\n        handles: resultHandles,\n        widgets: resultWidgets,\n    } = useDefaultFrameView({\n        scanWidth,\n        scanHeight,\n        compoundAnalysisId: compoundAnalysis.compoundAnalysis,\n        doAutoStart: compoundAnalysis.doAutoStart,\n    })\n\n    const subtitle = (\n        <>{frameViewTitle} Ring: center=(x={cx.toFixed(2)}, y={cy.toFixed(2)}), ri={ri.toFixed(2)}, ro={ro.toFixed(2)}</>\n    )\n\n    const toolbar = <Toolbar compoundAnalysis={compoundAnalysis} onApply={runAnalysis} busyIdxs={[1]} />\n\n    return (\n        <AnalysisLayoutTwoCol\n            title=\"Fluctuation EM (SD over Ring analysis)\" subtitle={subtitle}\n            left={<>\n                <ResultList\n                    extraHandles={frameViewHandles} extraWidgets={frameViewWidgets}\n                    analysisIndex={0} compoundAnalysis={compoundAnalysis.compoundAnalysis}\n                    width={imageWidth} height={imageHeight}\n                    selectors={frameModeSelector}\n                />\n            </>}\n            right={<>\n                <ResultList\n                    analysisIndex={1} compoundAnalysis={compoundAnalysis.compoundAnalysis}\n                    width={scanWidth} height={scanHeight}\n                    extraHandles={resultHandles}\n                    extraWidgets={resultWidgets}\n                />\n            </>}\n            toolbar={toolbar}\n        />\n    );\n}\n\nexport default FEMAnalysis;","import React from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { AnalysisTypes } from \"../../messages\";\nimport { inRectConstraint } from \"../../widgets/constraints\";\nimport DraggableHandle from \"../../widgets/DraggableHandle\";\nimport { HandleRenderFunction } from \"../../widgets/types\";\nimport * as compoundAnalysisActions from \"../actions\";\n\nconst useFFTFramePicker = ({\n    enabled, scanWidth, scanHeight, analysisIndex, compoundAnalysisId,\n    cx, cy, real_rad, real_centerx, real_centery, setCx, setCy\n}: {\n    enabled: boolean, scanWidth: number, scanHeight: number,\n    analysisIndex: number, compoundAnalysisId: string,\n    cx: number, cy: number, setCx: (newCx: number) => void, setCy: (newCy: number) => void,\n    real_rad: number | null, real_centerx: number | null, real_centery: number | null\n}) => {\n\n    const dispatch = useDispatch();\n\n    React.useEffect(() => {\n        if (enabled) {\n            dispatch(compoundAnalysisActions.Actions.run(compoundAnalysisId, analysisIndex, {\n                analysisType: AnalysisTypes.PICK_FFT_FRAME,\n                parameters: { x: cx, y: cy, real_rad, real_centerx, real_centery },\n            }));\n        }\n    }, [compoundAnalysisId, cx, cy, enabled, analysisIndex, real_rad, real_centerx, real_centery, dispatch]);\n\n    const onPickChange = (pickX: number, pickY: number) => {\n        const newX = Math.round(pickX);\n        const newY = Math.round(pickY);\n        if (cx === newX && cy === newY) {\n            return;\n        }\n        setCx(newX);\n        setCy(newY);\n    }\n\n    const renderPickHandle: HandleRenderFunction = (onDragStart, onDrop) => (\n        <DraggableHandle x={cx} y={cy} withCross={true}\n            imageWidth={scanWidth}\n            onDragMove={onPickChange}\n            parentOnDragStart={onDragStart}\n            parentOnDrop={onDrop}\n            constraint={inRectConstraint(scanWidth, scanHeight)} />\n    )\n\n    return { coords: { cx, cy }, handles: renderPickHandle };\n}\n\nexport default useFFTFramePicker;","import React from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { AnalysisTypes } from \"../../messages\";\nimport * as analysisActions from \"../actions\";\n\nconst useFFTSumFrames = ({\n    enabled, analysisIndex: jobIndex, compoundAnalysisId: analysisId, real_rad, real_centerx, real_centery\n}: {\n    enabled: boolean, analysisIndex: number, compoundAnalysisId: string, real_rad: number | null, real_centerx: number | null, real_centery: number | null\n}) => {\n    const dispatch = useDispatch();\n\n    React.useEffect(() => {\n        if (enabled) {\n            dispatch(analysisActions.Actions.run(analysisId, jobIndex, {\n                analysisType: AnalysisTypes.FFTSUM_FRAMES,\n                parameters: { real_rad, real_centerx, real_centery },\n            }));\n        }\n    }, [analysisId, enabled, jobIndex, real_rad, real_centerx, real_centery, dispatch]);\n};\n\nexport default useFFTSumFrames;\n","import * as React from \"react\";\nimport { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { AnalysisTypes } from \"../../messages\";\nimport { HandleRenderFunction } from \"../../widgets/types\";\nimport * as compoundAnalysisActions from \"../actions\";\nimport useFFTFramePicker from \"./FFTFramePicker\";\nimport useFFTSumFrames from \"./FFTSumFrames\";\nimport useFramePicker from \"./FramePicker\";\nimport ModeSelector from \"./ModeSelector\";\nimport { useRoiPicker } from \"./roi/RoiPicker\";\n\nconst useFFTFrameView = ({\n    scanWidth, scanHeight, compoundAnalysisId, real_rad, real_centerx,\n    real_centery, doAutoStart,\n}: {\n    scanWidth: number, scanHeight: number, compoundAnalysisId: string,\n    real_rad: number | null, real_centerx: number | null, real_centery: number | null,\n    doAutoStart: boolean,\n}) => {\n    const availableModes = [\n        {\n            text: \"Pick\",\n            value: AnalysisTypes.PICK_FRAME,\n        },\n        {\n            text: \"Average\",\n            value: AnalysisTypes.SUM_FRAMES,\n        },\n    ];\n\n    const [frameMode, setMode] = useState(AnalysisTypes.SUM_FRAMES);\n\n    const dispatch = useDispatch();\n\n    const updateMode = (newMode: AnalysisTypes) => {\n        dispatch(compoundAnalysisActions.Actions.enableAutoStart(compoundAnalysisId));\n        setMode(newMode);\n    }\n\n    const frameModeSelector = <ModeSelector modes={availableModes} currentMode={frameMode} onModeChange={updateMode} label=\"Mode\" />\n\n    const [cx, setCx] = React.useState(Math.round(scanWidth / 2));\n    const [cy, setCy] = React.useState(Math.round(scanHeight / 2));\n\n    const { coords: pickCoords, handles: pickHandles } = useFramePicker({\n        enabled: frameMode === AnalysisTypes.PICK_FRAME && doAutoStart,\n        scanWidth, scanHeight,\n        analysisIndex: 1,\n        compoundAnalysisId,\n        cx, cy, setCx, setCy\n    });\n\n    useFFTFramePicker({\n        enabled: frameMode === AnalysisTypes.PICK_FRAME && doAutoStart,\n        scanWidth, scanHeight,\n        analysisIndex: 0,\n        compoundAnalysisId,\n        cx, cy, setCx, setCy, real_rad, real_centerx, real_centery\n    });\n\n    useRoiPicker({\n        enabled: frameMode === AnalysisTypes.SUM_FRAMES && doAutoStart,\n        analysisIndex: 1,\n        compoundAnalysisId,\n        scanWidth, scanHeight,\n        roiParameters: { roi: {} },\n        analysisType: AnalysisTypes.SUM_FRAMES,\n    })\n    useFFTSumFrames({\n        enabled: frameMode === AnalysisTypes.SUM_FRAMES && doAutoStart,\n        analysisIndex: 0,\n        compoundAnalysisId,\n        real_rad,\n        real_centerx,\n        real_centery\n    })\n\n    const frameViewTitle = (\n        frameMode !== AnalysisTypes.PICK_FRAME ? null : <>Pick: x={pickCoords.cx}, y={pickCoords.cy} &emsp;</>\n    )\n\n    const nullHandles: HandleRenderFunction = (onDragStart, onDrop) => null\n\n    return {\n        frameViewTitle,\n        handles: frameMode !== AnalysisTypes.PICK_FRAME ? nullHandles : pickHandles,\n\n        frameModeSelector,\n    }\n}\n\nexport default useFFTFrameView;","import * as React from \"react\";\nimport { Grid, Header, Icon, Segment } from \"semantic-ui-react\";\n\ninterface AnalysisLayoutThreeColProps {\n    title: string,\n    subtitle: React.ReactNode,\n    left: React.ReactNode,\n    mid: React.ReactNode,\n    right: React.ReactNode,\n    toolbar?: React.ReactNode,\n    title1: string,\n    title2: React.ReactNode,\n    title3: string,\n}\n\ntype MergedProps = AnalysisLayoutThreeColProps;\n\nconst AnalysisLayoutThreeCol: React.SFC<MergedProps> = ({\n    title, subtitle,\n    left, mid, right,\n    toolbar, title1, title2, title3\n}) => {\n    return (\n        <>\n            <Header as='h3' attached=\"top\">\n                <Icon name=\"cog\" />\n                <Header.Content>{title}</Header.Content>\n            </Header>\n            <Segment attached={true}>\n                <Grid columns={3}>\n                    <Grid.Row>\n                        <Grid.Column width={5}>\n                            <p>{title1}</p>\n                        </Grid.Column>\n\n                        <Grid.Column width={5}>\n                            <p>{title2}</p>\n                        </Grid.Column>\n\n                        <Grid.Column width={6}>\n                            <p>{title3}</p>\n                        </Grid.Column>\n                    </Grid.Row>\n\n                    <Grid.Row>\n                        <Grid.Column width={5}>\n                            {left}\n                        </Grid.Column>\n\n                        <Grid.Column width={5}>\n                            {mid}\n                        </Grid.Column>\n\n                        <Grid.Column width={6}>\n                            {right}\n                        </Grid.Column>\n\n                    </Grid.Row>\n\n                    <Grid.Row>\n                        <Grid.Column width={10}>\n                            <p>{subtitle}</p>\n                        </Grid.Column>\n\n                        <Grid.Column width={6} />\n                    </Grid.Row>\n                </Grid>\n            </Segment>\n            {toolbar}\n        </>\n    )\n}\n\nexport default AnalysisLayoutThreeCol","import * as React from \"react\";\nimport { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { defaultDebounce } from \"../../helpers\";\nimport ResultList from \"../../job/components/ResultList\";\nimport { AnalysisTypes } from \"../../messages\";\nimport { cbToRadius, inRectConstraint, keepOnCY, riConstraint, roConstraints } from \"../../widgets/constraints\";\nimport Disk from \"../../widgets/Disk\";\nimport DraggableHandle from \"../../widgets/DraggableHandle\";\nimport Ring from \"../../widgets/Ring\";\nimport { HandleRenderFunction } from \"../../widgets/types\";\nimport * as compoundAnalysisActions from \"../actions\";\nimport { CompoundAnalysisProps } from \"../types\";\nimport useFFTFrameView from \"./FFTFrameView\";\nimport AnalysisLayoutThreeCol from \"./layouts/AnalysisLayoutThreeCol\";\nimport Toolbar from \"./Toolbar\";\n\n\nconst FFTAnalysis: React.SFC<CompoundAnalysisProps> = ({ compoundAnalysis, dataset }) => {\n    const { shape } = dataset.params;\n    const [scanHeight, scanWidth, imageHeight, imageWidth] = shape;\n    const minLength = Math.min(imageWidth, imageHeight);\n\n    const cx = imageWidth / 2;\n    const cy = imageHeight / 2;\n    const [radIn, setRi] = useState(minLength / 4);\n    const [radOut, setRo] = useState(minLength / 2);\n\n    const dispatch = useDispatch();\n    const riHandle = {\n        x: cx - radIn,\n        y: cy,\n    }\n    const roHandle = {\n        x: cx - radOut,\n        y: cy,\n    }\n\n\n    const handleRIChange = defaultDebounce(setRi);\n    const handleROChange = defaultDebounce(setRo);\n\n    const frameViewHandlesfft: HandleRenderFunction = (handleDragStart, handleDrop) => (<>\n\n        <DraggableHandle x={roHandle.x} y={roHandle.y}\n            imageWidth={imageWidth}\n            onDragMove={cbToRadius(cx, cy, handleROChange)}\n            parentOnDrop={handleDrop}\n            parentOnDragStart={handleDragStart}\n            constraint={roConstraints(riHandle.x, cy)} />\n        <DraggableHandle x={riHandle.x} y={riHandle.y}\n            imageWidth={imageWidth}\n            parentOnDrop={handleDrop}\n            parentOnDragStart={handleDragStart}\n            onDragMove={cbToRadius(cx, cy, handleRIChange)}\n            constraint={riConstraint(roHandle.x, cy)} />\n    </>);\n\n    const frameViewWidgetsfft = (\n        <Ring cx={cx} cy={cy} ri={radIn} ro={radOut}\n            imageWidth={imageWidth} />\n    )\n\n    const [check, setCheck] = React.useState(true);\n\n    const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        dispatch(compoundAnalysisActions.Actions.enableAutoStart(compoundAnalysis.compoundAnalysis));\n        setCheck(event.target.checked);\n    }\n\n    const [realCenterX, setCx] = useState(imageWidth / 2);\n    const [realCenterY, setCy] = useState(imageHeight / 2);\n    const [realRad, setR] = useState(minLength / 4);\n\n    const handleCenterChange = defaultDebounce((newCx: number, newCy: number) => {\n        dispatch(compoundAnalysisActions.Actions.enableAutoStart(compoundAnalysis.compoundAnalysis));\n        setCx(newCx);\n        setCy(newCy);\n    });\n    const handleRChange = defaultDebounce(setR);\n\n    const rHandle = {\n        x: realCenterX - realRad,\n        y: realCenterY,\n    }\n\n    const frameViewHandlesreal: HandleRenderFunction = (handleDragStart, handleDrop) => (<>\n        <DraggableHandle x={realCenterX} y={realCenterY}\n            imageWidth={imageWidth}\n            onDragMove={handleCenterChange}\n            parentOnDragStart={handleDragStart}\n            parentOnDrop={handleDrop}\n            constraint={inRectConstraint(imageWidth, imageHeight)} />\n        <DraggableHandle x={rHandle.x} y={rHandle.y}\n            imageWidth={imageWidth}\n            onDragMove={cbToRadius(realCenterX, realCenterY, handleRChange)}\n            parentOnDragStart={handleDragStart}\n            parentOnDrop={handleDrop}\n            constraint={keepOnCY(realCenterY)} />\n    </>);\n\n    const frameViewWidgetsreal = (\n        <Disk cx={realCenterX} cy={realCenterY} r={realRad}\n            imageWidth={imageWidth} imageHeight={imageHeight}\n        />\n    );\n\n    const runAnalysis = () => {\n        dispatch(compoundAnalysisActions.Actions.run(compoundAnalysis.compoundAnalysis, 2, {\n            analysisType: AnalysisTypes.APPLY_FFT_MASK,\n            parameters: {\n                rad_in: radIn,\n                rad_out: radOut,\n                real_rad: check ? realRad : null,\n                real_centerx: check ? realCenterX : null,\n                real_centery: check ? realCenterY : null\n            }\n        }));\n    };\n\n    const { frameViewTitle, frameModeSelector, handles: resultHandles } = useFFTFrameView({\n        scanWidth,\n        scanHeight,\n        compoundAnalysisId: compoundAnalysis.compoundAnalysis,\n        real_rad: check ? realRad : null,\n        real_centerx: check ? realCenterX : null,\n        real_centery: check ? realCenterY : null,\n        doAutoStart: compoundAnalysis.doAutoStart,\n    });\n\n    const toolbar = <Toolbar compoundAnalysis={compoundAnalysis} onApply={runAnalysis} busyIdxs={[2]} />\n\n    let subtitle;\n    let mid: React.ReactNode;\n    if (check) {\n        mid = (<>\n            <ResultList\n                extraHandles={frameViewHandlesreal} extraWidgets={frameViewWidgetsreal}\n                analysisIndex={1} compoundAnalysis={compoundAnalysis.compoundAnalysis}\n                width={imageWidth} height={imageHeight}\n                selectors={frameModeSelector}\n            />\n        </>)\n        subtitle = (\n            <>{frameViewTitle} real_rad={radIn.toFixed(2)}, real_center=(x={realCenterX.toFixed(2)}, y={realCenterY.toFixed(2)}), fourier_rad_in={radIn.toFixed(2)}, fourier_rad_out={radOut.toFixed(2)}</>\n        )\n    }\n    else {\n        mid = (<>\n            <ResultList\n                analysisIndex={1} compoundAnalysis={compoundAnalysis.compoundAnalysis}\n                width={imageWidth} height={imageHeight}\n                selectors={frameModeSelector}\n            />\n        </>)\n        subtitle = (\n            <>{frameViewTitle} fourier_rad_in={radIn.toFixed(2)}, fourier_rad_out={radOut.toFixed(2)}</>\n        )\n    }\n\n\n    return (\n        <AnalysisLayoutThreeCol\n            title=\"FFT analysis\" subtitle={subtitle}\n            left={<>\n                <ResultList\n                    extraHandles={frameViewHandlesfft} extraWidgets={frameViewWidgetsfft}\n                    analysisIndex={0} compoundAnalysis={compoundAnalysis.compoundAnalysis}\n                    width={imageWidth} height={imageHeight}\n                />\n            </>}\n            mid={mid}\n\n            right={<>\n                <ResultList\n                    analysisIndex={2} compoundAnalysis={compoundAnalysis.compoundAnalysis}\n                    width={scanWidth} height={scanHeight}\n                    extraHandles={resultHandles}\n                />\n            </>}\n            toolbar={toolbar}\n\n            title2={<><label> Masking out of zero order diffraction peak <input type=\"checkbox\" name=\"check\" onChange={handleChange} checked={check} /> </label>\n            </>}\n            title1=\"Masking of integration region in Fourier space\"\n            title3=\"Result of analysis\"\n\n        />\n    );\n}\n\n\nexport default FFTAnalysis;\n","import * as React from \"react\";\nimport { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { defaultDebounce } from \"../../helpers\";\nimport ResultList from \"../../job/components/ResultList\";\nimport { AnalysisTypes } from \"../../messages\";\nimport { inRectConstraint } from \"../../widgets/constraints\";\nimport DraggableHandle from \"../../widgets/DraggableHandle\";\nimport { HandleRenderFunction } from \"../../widgets/types\";\nimport * as analysisActions from \"../actions\";\nimport { CompoundAnalysisProps } from \"../types\";\nimport useDefaultFrameView from \"./DefaultFrameView\";\nimport AnalysisLayoutTwoCol from \"./layouts/AnalysisLayoutTwoCol\";\nimport Toolbar from \"./Toolbar\";\n\n\nconst PointSelectionAnalysis: React.SFC<CompoundAnalysisProps> = ({ compoundAnalysis, dataset, }) => {\n    const { shape } = dataset.params;\n    const [scanHeight, scanWidth, imageHeight, imageWidth] = shape;\n\n    const [cx, setCx] = useState(imageWidth / 2);\n    const [cy, setCy] = useState(imageHeight / 2);\n    const handleCenterChange = defaultDebounce((newCx: number, newCy: number) => {\n        setCx(newCx);\n        setCy(newCy);\n    });\n\n    const frameViewHandles: HandleRenderFunction = (handleDragStart, handleDrop) => (<>\n        <DraggableHandle x={cx} y={cy} withCross={true}\n            onDragMove={handleCenterChange}\n            imageWidth={imageWidth}\n            parentOnDragStart={handleDragStart}\n            parentOnDrop={handleDrop}\n            constraint={inRectConstraint(imageWidth, imageHeight)} />\n    </>);\n\n    const {\n        frameViewTitle, frameModeSelector,\n        handles: resultHandles,\n        widgets: resultWidgets,\n    } = useDefaultFrameView({\n        scanWidth,\n        scanHeight,\n        compoundAnalysisId: compoundAnalysis.compoundAnalysis,\n        doAutoStart: compoundAnalysis.doAutoStart,\n    })\n\n    const subtitle = (\n        <>{frameViewTitle} Point: center=(x={cx.toFixed(2)}, y={cy.toFixed(2)})</>\n    )\n\n    const dispatch = useDispatch();\n\n    const runAnalysis = () => {\n        dispatch(analysisActions.Actions.run(compoundAnalysis.compoundAnalysis, 1, {\n            analysisType: AnalysisTypes.APPLY_POINT_SELECTOR,\n            parameters: {\n                shape: \"point\",\n                cx,\n                cy,\n            }\n        }));\n    };\n\n    const toolbar = <Toolbar compoundAnalysis={compoundAnalysis} onApply={runAnalysis} busyIdxs={[1]} />\n\n    return (\n        <AnalysisLayoutTwoCol\n            title=\"Point analysis\" subtitle={subtitle}\n            left={<>\n                <ResultList\n                    extraHandles={frameViewHandles}\n                    analysisIndex={0} compoundAnalysis={compoundAnalysis.compoundAnalysis}\n                    width={imageWidth} height={imageHeight}\n                    selectors={frameModeSelector}\n                />\n            </>}\n            right={<>\n                <ResultList\n                    analysisIndex={1} compoundAnalysis={compoundAnalysis.compoundAnalysis}\n                    width={scanWidth} height={scanHeight}\n                    extraHandles={resultHandles}\n                    extraWidgets={resultWidgets}\n                />\n            </>}\n            toolbar={toolbar}\n        />\n    );\n}\n\nexport default PointSelectionAnalysis;","import * as React from \"react\";\nimport { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { defaultDebounce } from \"../../helpers\";\nimport ResultList from \"../../job/components/ResultList\";\nimport { AnalysisTypes } from \"../../messages\";\nimport { cbToRadius, inRectConstraint, riConstraint, roConstraints } from \"../../widgets/constraints\";\nimport DraggableHandle from \"../../widgets/DraggableHandle\";\nimport Ring from \"../../widgets/Ring\";\nimport { HandleRenderFunction } from \"../../widgets/types\";\nimport * as analysisActions from \"../actions\";\nimport { CompoundAnalysisProps } from \"../types\";\nimport useDefaultFrameView from \"./DefaultFrameView\";\nimport AnalysisLayoutTwoCol from \"./layouts/AnalysisLayoutTwoCol\";\nimport Toolbar from \"./Toolbar\";\n\nconst RadialFourierAnalysis: React.SFC<CompoundAnalysisProps> = ({ compoundAnalysis, dataset }) => {\n    const { shape } = dataset.params;\n    const [scanHeight, scanWidth, imageHeight, imageWidth] = shape;\n\n    const minLength = Math.min(imageWidth, imageHeight);\n    const [cx, setCx] = useState(imageWidth / 2);\n    const [cy, setCy] = useState(imageHeight / 2);\n    const [ri, setRi] = useState(minLength / 4);\n    const [ro, setRo] = useState(minLength / 2);\n    const [nBins] = useState(1);\n    const [maxOrder] = useState(8);\n\n    const riHandle = {\n        x: cx - ri,\n        y: cy,\n    }\n    const roHandle = {\n        x: cx - ro,\n        y: cy,\n    }\n\n    const handleCenterChange = defaultDebounce((newCx: number, newCy: number) => {\n        setCx(newCx);\n        setCy(newCy);\n    });\n    const handleRIChange = defaultDebounce(setRi);\n    const handleROChange = defaultDebounce(setRo);\n\n    const frameViewHandles: HandleRenderFunction = (handleDragStart, handleDrop) => (<>\n        <DraggableHandle x={cx} y={cy}\n            imageWidth={imageWidth}\n            onDragMove={handleCenterChange}\n            parentOnDrop={handleDrop}\n            parentOnDragStart={handleDragStart}\n            constraint={inRectConstraint(imageWidth, imageHeight)} />\n        <DraggableHandle x={roHandle.x} y={roHandle.y}\n            imageWidth={imageWidth}\n            onDragMove={cbToRadius(cx, cy, handleROChange)}\n            parentOnDrop={handleDrop}\n            parentOnDragStart={handleDragStart}\n            constraint={roConstraints(riHandle.x, cy)} />\n        <DraggableHandle x={riHandle.x} y={riHandle.y}\n            imageWidth={imageWidth}\n            parentOnDrop={handleDrop}\n            parentOnDragStart={handleDragStart}\n            onDragMove={cbToRadius(cx, cy, handleRIChange)}\n            constraint={riConstraint(roHandle.x, cy)} />\n    </>);\n\n    const frameViewWidgets = (\n        <Ring cx={cx} cy={cy} ri={ri} ro={ro}\n            imageWidth={imageWidth} />\n    )\n\n    const {\n        frameViewTitle, frameModeSelector,\n        handles: resultHandles,\n        widgets: resultWidgets,\n    } = useDefaultFrameView({\n        scanWidth,\n        scanHeight,\n        compoundAnalysisId: compoundAnalysis.compoundAnalysis,\n        doAutoStart: compoundAnalysis.doAutoStart,\n    })\n\n    const subtitle = (\n        <>{frameViewTitle} Ring: center=(x={cx.toFixed(2)}, y={cy.toFixed(2)}), ri={ri.toFixed(2)}, ro={ro.toFixed(2)}</>\n    )\n\n    const dispatch = useDispatch();\n\n    const runAnalysis = () => {\n        dispatch(analysisActions.Actions.run(compoundAnalysis.compoundAnalysis, 1, {\n            analysisType: AnalysisTypes.RADIAL_FOURIER,\n            parameters: {\n                shape: \"radial_fourier\",\n                cx, cy, ri, ro,\n                n_bins: nBins,\n                max_order: maxOrder,\n            }\n        }));\n    };\n\n    const toolbar = <Toolbar compoundAnalysis={compoundAnalysis} onApply={runAnalysis} busyIdxs={[1]} />\n\n    return (\n        <AnalysisLayoutTwoCol\n            title=\"Radial Fourier analysis\" subtitle={subtitle}\n            left={<>\n                <ResultList\n                    extraHandles={frameViewHandles} extraWidgets={frameViewWidgets}\n                    analysisIndex={0} compoundAnalysis={compoundAnalysis.compoundAnalysis}\n                    width={imageWidth} height={imageHeight}\n                    selectors={frameModeSelector}\n                />\n            </>}\n            right={<>\n                <ResultList\n                    analysisIndex={1} compoundAnalysis={compoundAnalysis.compoundAnalysis}\n                    width={scanWidth} height={scanHeight}\n                    extraHandles={resultHandles}\n                    extraWidgets={resultWidgets}\n                />\n            </>}\n            toolbar={toolbar}\n        />\n    );\n}\n\nexport default RadialFourierAnalysis;","import * as React from \"react\";\nimport { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { defaultDebounce } from \"../../helpers\";\nimport ResultList from \"../../job/components/ResultList\";\nimport { AnalysisTypes } from \"../../messages\";\nimport { cbToRadius, inRectConstraint, riConstraint, roConstraints } from \"../../widgets/constraints\";\nimport DraggableHandle from \"../../widgets/DraggableHandle\";\nimport Ring from \"../../widgets/Ring\";\nimport { HandleRenderFunction } from \"../../widgets/types\";\nimport * as analysisActions from \"../actions\";\nimport { CompoundAnalysisProps } from \"../types\";\nimport useDefaultFrameView from \"./DefaultFrameView\";\nimport AnalysisLayoutTwoCol from \"./layouts/AnalysisLayoutTwoCol\";\nimport Toolbar from \"./Toolbar\";\n\nconst RingMaskAnalysis: React.SFC<CompoundAnalysisProps> = ({ compoundAnalysis, dataset }) => {\n    const { shape } = dataset.params;\n    const [scanHeight, scanWidth, imageHeight, imageWidth] = shape;\n    const minLength = Math.min(imageWidth, imageHeight);\n\n    const [cx, setCx] = useState(imageWidth / 2);\n    const [cy, setCy] = useState(imageHeight / 2);\n    const [ri, setRi] = useState(minLength / 4);\n    const [ro, setRo] = useState(minLength / 2);\n\n    const riHandle = {\n        x: cx - ri,\n        y: cy,\n    }\n    const roHandle = {\n        x: cx - ro,\n        y: cy,\n    }\n\n    const handleCenterChange = defaultDebounce((newCx: number, newCy: number) => {\n        setCx(newCx);\n        setCy(newCy);\n    });\n    const handleRIChange = defaultDebounce(setRi);\n    const handleROChange = defaultDebounce(setRo);\n\n    const frameViewHandles: HandleRenderFunction = (handleDragStart, handleDrop) => (<>\n        <DraggableHandle x={cx} y={cy}\n            imageWidth={imageWidth}\n            onDragMove={handleCenterChange}\n            parentOnDrop={handleDrop}\n            parentOnDragStart={handleDragStart}\n            constraint={inRectConstraint(imageWidth, imageHeight)} />\n        <DraggableHandle x={roHandle.x} y={roHandle.y}\n            imageWidth={imageWidth}\n            onDragMove={cbToRadius(cx, cy, handleROChange)}\n            parentOnDrop={handleDrop}\n            parentOnDragStart={handleDragStart}\n            constraint={roConstraints(riHandle.x, cy)} />\n        <DraggableHandle x={riHandle.x} y={riHandle.y}\n            imageWidth={imageWidth}\n            parentOnDrop={handleDrop}\n            parentOnDragStart={handleDragStart}\n            onDragMove={cbToRadius(cx, cy, handleRIChange)}\n            constraint={riConstraint(roHandle.x, cy)} />\n    </>);\n\n    const frameViewWidgets = (\n        <Ring cx={cx} cy={cy} ri={ri} ro={ro}\n            imageWidth={imageWidth} />\n    )\n\n    const dispatch = useDispatch();\n\n    const runAnalysis = () => {\n        dispatch(analysisActions.Actions.run(compoundAnalysis.compoundAnalysis, 1, {\n            analysisType: AnalysisTypes.APPLY_RING_MASK,\n            parameters: {\n                shape: \"ring\",\n                cx, cy, ri, ro,\n            }\n        }));\n    };\n\n    const {\n        frameViewTitle, frameModeSelector,\n        handles: resultHandles,\n        widgets: resultWidgets,\n    } = useDefaultFrameView({\n        scanWidth,\n        scanHeight,\n        compoundAnalysisId: compoundAnalysis.compoundAnalysis,\n        doAutoStart: compoundAnalysis.doAutoStart,\n    })\n\n    const subtitle = (\n        <>{frameViewTitle} Ring: center=(x={cx.toFixed(2)}, y={cy.toFixed(2)}), ri={ri.toFixed(2)}, ro={ro.toFixed(2)}</>\n    )\n\n    const toolbar = <Toolbar compoundAnalysis={compoundAnalysis} onApply={runAnalysis} busyIdxs={[1]} />\n\n    return (\n        <AnalysisLayoutTwoCol\n            title=\"Ring analysis\" subtitle={subtitle}\n            left={<>\n                <ResultList\n                    extraHandles={frameViewHandles} extraWidgets={frameViewWidgets}\n                    analysisIndex={0} compoundAnalysis={compoundAnalysis.compoundAnalysis}\n                    width={imageWidth} height={imageHeight}\n                    selectors={frameModeSelector}\n                />\n            </>}\n            right={<>\n                <ResultList\n                    analysisIndex={1} compoundAnalysis={compoundAnalysis.compoundAnalysis}\n                    width={scanWidth} height={scanHeight}\n                    extraHandles={resultHandles}\n                    extraWidgets={resultWidgets}\n                />\n            </>}\n            toolbar={toolbar}\n        />\n    );\n}\n\nexport default RingMaskAnalysis;","import { AnalysisTypes, DatasetOpen, PickFrameDetails, SumFramesDetails } from \"../messages\";\nimport CenterOfMassAnalysis from \"./components/CenterOfMassAnalysis\";\nimport ClustAnalysis from \"./components/Clustering\";\nimport DiskMaskAnalysis from \"./components/DiskMaskAnalysis\";\nimport FEM from \"./components/FEM\";\nimport FFTAnalysis from \"./components/FFTAnalysis\";\nimport PointSelectionAnalysis from \"./components/PointSelectionAnalysis\";\nimport RadialFourierAnalysis from \"./components/RadialFourierAnalysis\";\nimport RingMaskAnalysis from \"./components/RingMaskAnalysis\";\n\n\nexport type CompoundAnalysisStatus = \"busy\" | \"idle\";\n\nexport type JobHistory = string[][];\n\nexport type FrameAnalysisDetails = PickFrameDetails | SumFramesDetails;\n\nexport interface CompoundAnalysis {\n    compoundAnalysis: string,\n    dataset: string,\n    details: {\n        mainType: AnalysisTypes,\n        analyses: string[],\n    }\n}\n\n\n/**\n * CompoundAnalysisProps is the interface you should implement with your\n * CompoundAnalysis, as a functional component. For example:\n * \n * const MyAnalysis: React.FunctionalComponent<CompoundAnalysisProps> = ({ analysis, dataset }) = { ... }\n * \n */\n\nexport type CompoundAnalysisState = CompoundAnalysis & {\n    doAutoStart: boolean,\n};\n\nexport interface CompoundAnalysisProps {\n    compoundAnalysis: CompoundAnalysisState,\n    dataset: DatasetOpen,\n}\n\nexport interface CompoundAnalysisMetadataItem {\n    desc: string,\n    title: string,\n    component?: React.FunctionComponent<CompoundAnalysisProps>,\n}\n\n\n/**\n * list of all analyses; those having a component will be available for selection in the UI\n * \n * please fill in a title and description, and reference your component.\n */\nexport const CompoundAnalysisMetadata: { [s: string]: CompoundAnalysisMetadataItem } = {\n    [AnalysisTypes.APPLY_RING_MASK]: {\n        desc: \"Application of a ring mask\",\n        title: \"Ring\",\n        component: RingMaskAnalysis,\n    },\n    [AnalysisTypes.APPLY_DISK_MASK]: {\n        desc: \"Application of a disk mask\",\n        title: \"Disk\",\n        component: DiskMaskAnalysis,\n    },\n    [AnalysisTypes.FEM]: {\n        desc: \"Application of a ring mask\",\n        title: \"FEM (SD over Ring)\",\n        component: FEM,\n    },\n    [AnalysisTypes.CENTER_OF_MASS]: {\n        desc: \"The center of mass of all diffraction images\",\n        title: \"Center of mass\",\n        component: CenterOfMassAnalysis,\n    },\n    [AnalysisTypes.APPLY_POINT_SELECTOR]: {\n        desc: \"Image from a single pixel selected in the detector\",\n        title: \"Point selection\",\n        component: PointSelectionAnalysis,\n    },\n    [AnalysisTypes.SUM_FRAMES]: {\n        desc: \"A sum of all (or selected) detector frames\",\n        title: \"Sum all frames\",\n    },\n    [AnalysisTypes.SD_FRAMES]: {\n        desc: \"A SD of all (or selected) detector frames\",\n        title: \"SD all frames\",\n    },\n    [AnalysisTypes.PICK_FRAME]: {\n        desc: \"A single picked frame\",\n        title: \"Pick frame\",\n    },\n    [AnalysisTypes.PICK_FFT_FRAME]: {\n        desc: \"Fourier transform of a picked frame\",\n        title: \"Pick frame\",\n    },\n    [AnalysisTypes.APPLY_FFT_MASK]: {\n        desc: \"Application of a ring mask in Fourier space\",\n        title: \"FFT analysis\",\n        component: FFTAnalysis\n    },\n    [AnalysisTypes.FFTSUM_FRAMES]: {\n        desc: \"Fourier transform of sum of all detector frames\",\n        title: \"FFT of Sum all frames\",\n    },\n    [AnalysisTypes.RADIAL_FOURIER]: {\n        desc: \"Radial Fourier analysis over the selected ring\",\n        title: \"Radial Fourier\",\n        component: RadialFourierAnalysis,\n    },\n    [AnalysisTypes.CLUST]: {\n        desc: \"Region clustering based on non-zero order diffraction peaks positions\",\n        title: \"Clustering\",\n        component: ClustAnalysis,\n    },\n    [AnalysisTypes.SUM_SIG]: {\n        desc: \"Frame integration\",\n        title: \"Sum\",\n    },\n}","import * as React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { DatasetStatus } from \"../../../messages\";\nimport { RootReducer } from \"../../../store\";\nimport { CompoundAnalysisMetadata, CompoundAnalysisState } from \"../../types\";\n\ninterface AnalysisDispatcherProps {\n    analysis: CompoundAnalysisState,\n}\n\nconst AnalysisDispatcherComponent: React.SFC<AnalysisDispatcherProps> = ({ analysis }) => {\n    const dataset = useSelector((state: RootReducer) => state.datasets.byId[analysis.dataset])\n\n    if (dataset.status !== DatasetStatus.OPEN) {\n        return null;\n    }\n\n    const AnalysisComponent = CompoundAnalysisMetadata[analysis.details.mainType].component;\n    if (!AnalysisComponent) {\n        throw new Error(\"unknown analysis type\");\n    }\n\n    return <AnalysisComponent dataset={dataset} compoundAnalysis={analysis} />;\n}\n\nexport default AnalysisDispatcherComponent;","import * as React from \"react\";\nimport { CompoundAnalysisReducerState } from \"../../reducers\";\nimport Analysis from \"./Analysis\";\n\ninterface AnalysisProps {\n    analyses: CompoundAnalysisReducerState,\n}\n\nconst AnalysisList: React.SFC<AnalysisProps> = ({ analyses }) => {\n    return (<>{\n        analyses.ids.map(analysisId => <Analysis key={analysisId} analysis={analyses.byId[analysisId]} />)\n    }</>);\n}\n\nexport default AnalysisList;","// tslint:disable-next-line:ban-types\ntype ImmutablePrimitive = undefined | null | boolean | string | number | Function;\n\nexport type Immutable<T> =\n    T extends ImmutablePrimitive ? T :\n    T extends Array<infer U> ? ImmutableArray<U> :\n    T extends Map<infer K, infer V> ? ImmutableMap<K, V> :\n    T extends Set<infer M> ? ImmutableSet<M> : ImmutableObject<T>;\n\nexport type ImmutableArray<T> = ReadonlyArray<Immutable<T>>;\nexport type ImmutableMap<K, V> = ReadonlyMap<Immutable<K>, Immutable<V>>;\nexport type ImmutableSet<T> = ReadonlySet<Immutable<T>>;\nexport type ImmutableObject<T> = { readonly [K in keyof T]: Immutable<T[K]> };\n\n\ntype DeepReadonly<T> =\n    T extends Array<infer R> ? DeepReadonlyArray<R> :\n    // tslint:disable-next-line:ban-types\n    T extends Function ? T :\n    T extends object ? DeepReadonlyObject<T> :\n    T;\n\ninterface DeepReadonlyArray<T> extends ReadonlyArray<DeepReadonly<T>> { }\n\ntype DeepReadonlyObject<T> = {\n    readonly [P in keyof T]: DeepReadonly<T[P]>;\n};\n\ninterface IdMap<R> {\n    [s: string]: R\n}\n\nexport interface ById<R> {\n    ids: string[],\n    byId: IdMap<R>,\n};\n\nexport type ByIdReadOnly<R> = DeepReadonly<ById<R>>;\n\nexport function updateById<R>(state: ById<R>, id: string, partialRecord: Partial<R>): ById<R> {\n    const newObj = Object.assign({}, state.byId[id], partialRecord);\n    const newById = Object.assign({}, state.byId, { [id]: newObj });\n    return Object.assign({}, state, { byId: newById });\n}\n\nexport function insertById<R>(state: ById<R>, id: string, record: R): ById<R> {\n    const newById = Object.assign({}, state.byId, { [id]: record });\n    const newIds = [...state.ids, id];\n    return { byId: newById, ids: newIds };\n}\n\nexport function constructById<R>(items: R[], key: (k: R) => string): IdMap<R> {\n    const byId = items.reduce((acc, item) => Object.assign(acc, {\n        [key(item)]: item,\n    }), {} as IdMap<R>);\n    return byId;\n}\n\nexport type Predicate<R> = (item: R) => boolean;\n\nexport function filterWithPred<R>(state: ById<R>, pred: Predicate<R>): ById<R> {\n    const ids: string[] = state.ids.filter(id => pred(state.byId[id]));\n    const byId: IdMap<R> = ids.reduce((acc, id) => Object.assign(acc, {\n        [id]: state.byId[id],\n    }), {});\n    return {\n        byId,\n        ids,\n    };\n}\n\nexport function filterWithPredReadOnly<R>(state: ByIdReadOnly<R>, pred: Predicate<DeepReadonly<R>>): ByIdReadOnly<R> {\n    const ids: DeepReadonly<string[]> = state.ids.filter(id => pred(state.byId[id]));\n    const byId: DeepReadonly<IdMap<R>> = ids.reduce((acc, id) => Object.assign(acc, {\n        [id]: state.byId[id],\n    }), {});\n    return {\n        byId,\n        ids,\n    };\n}\n\nexport function toggleItemInList<T>(list: T[], item: T): T[] {\n    if (list.includes(item)) {\n        return list.filter(i => i !== item)\n    } else {\n        return [item, ...list];\n    }\n}","import * as React from \"react\";\nimport { Dropdown, DropdownItemProps } from \"semantic-ui-react\";\nimport { getEnumValues } from \"../../../helpers\";\nimport { AnalysisTypes } from \"../../../messages\";\nimport { getMetadata } from \"../../getMetadata\";\n\nconst analysisTypeKeys = getEnumValues(AnalysisTypes);\nconst analysisTypeOptions = analysisTypeKeys.filter(t => getMetadata(t).component !== undefined).map(t => ({\n    text: getMetadata(t).title,\n    value: AnalysisTypes[t],\n}));\n\ninterface AnalysisSelectProps {\n    onClick: (analysisType: AnalysisTypes) => void,\n    label: string,\n}\n\nconst selectData = (fn: (v: AnalysisTypes) => void) => (e: React.MouseEvent, data: DropdownItemProps) => {\n    return fn(data.value as AnalysisTypes);\n}\n\nconst AnalysisSelect: React.SFC<AnalysisSelectProps> = ({ onClick, label }) => {\n    return (\n        <Dropdown text={label} icon='add' floating={true} labeled={true} button={true} className='icon'>\n            <Dropdown.Menu>\n                <Dropdown.Header content='implemented analyses' />\n                {analysisTypeOptions.map(option => <Dropdown.Item key={option.value} onClick={selectData(onClick)} {...option} />)}\n            </Dropdown.Menu>\n        </Dropdown>\n    );\n}\n\nexport default AnalysisSelect;","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport * as compoundAnalysisActions from \"../../compoundAnalysis/actions\";\nimport AnalysisSelect from \"../../compoundAnalysis/components/base/AnalysisSelect\";\nimport { AnalysisTypes, DatasetState } from \"../../messages\";\n\ninterface DatasetProps {\n    dataset: DatasetState\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch, ownProps: DatasetProps) => {\n    return {\n        handleAddAnalysis: (type: AnalysisTypes) => {\n            dispatch(compoundAnalysisActions.Actions.create(ownProps.dataset.id, type));\n        },\n    }\n}\ntype MergedProps = DatasetProps & ReturnType<typeof mapDispatchToProps>;\n\nconst AddAnalysis: React.SFC<MergedProps> = ({ handleAddAnalysis }) => {\n    return <AnalysisSelect onClick={handleAddAnalysis} label='Add analysis' />\n}\n\n\nexport default connect(null, mapDispatchToProps)(AddAnalysis);","import { genericDelete, genericPut, getApiBasePath } from \"../helpers/apiHelpers\";\nimport { DataSetOpenSchemaResponse, DeleteDatasetResponse, DetectDatasetResponse, OpenDatasetRequest, OpenDatasetResponse } from \"../messages\";\n\nexport async function openDataset(id: string, dataset: OpenDatasetRequest): Promise<OpenDatasetResponse> {\n    return await genericPut(`datasets/${id}/`, dataset);\n}\n\nexport async function deleteDataset(id: string): Promise<DeleteDatasetResponse> {\n    return await genericDelete(`datasets/${id}/`);\n}\n\n\nexport async function detectDataset(path: string): Promise<DetectDatasetResponse> {\n    const basePath = getApiBasePath();\n    const r = await fetch(`${basePath}datasets/detect/?path=${encodeURIComponent(path)}`, {\n        credentials: \"same-origin\",\n        method: \"GET\",\n    });\n    return await r.json();\n}\n\ninterface SchemaCache {\n    [type: string]: DataSetOpenSchemaResponse,\n}\n\nconst schemaCache: SchemaCache = {};\n\nexport async function getSchema(type: string): Promise<DataSetOpenSchemaResponse> {\n    const basePath = getApiBasePath();\n    const cached = schemaCache[type];\n    if (cached) {\n        return new Promise((resolve) => resolve(cached));\n    } else {\n        const r = await fetch(`${basePath}datasets/schema/?type=${encodeURIComponent(type)}`, {\n            credentials: \"same-origin\",\n            method: \"GET\",\n        });\n        const schemaResponse = await r.json();\n        schemaCache[type] = schemaResponse;\n        return schemaResponse;\n    }\n}","import Ajv, { ErrorObject } from 'ajv';\nimport { FormikErrors, FormikValues } from 'formik';\nimport { DataSetOpenSchemaResponse } from '../messages';\nimport { getSchema } from './api';\n\nexport function convertErrors(errors: ErrorObject[]): FormikErrors<FormikValues> {\n    const res: FormikErrors<FormikValues> = {};\n    errors.forEach(err => {\n        // flatten field names, convert from array to object\n        // FIXME: doesn't support multiple errors per field yet (formik limitation?)\n        const expr = /^\\.([^[]+)(\\[[^]+\\])?$/\n        const fieldName = err.dataPath.replace(expr, (match, plainName) => {\n            return plainName;\n        });\n        res[fieldName] = err.message;\n    });\n    return res;\n}\n\nexport async function validateOpen(type: string, data: object) {\n    return getSchema(type).then((schemaResponse: DataSetOpenSchemaResponse) => {\n        if (schemaResponse.status === \"error\") {\n            throw new Error(schemaResponse.msg);\n        }\n        // FIXME: cache compiled schema\n        const schema = schemaResponse.schema;\n        const ajv = new Ajv();\n        const validate = ajv.compile(schema);\n        const valid = validate(data);\n        if (!valid) {\n            if (validate.errors) {\n                const converted = convertErrors(validate.errors);\n                throw converted;\n            } else {\n                throw new Error(\"unspecified error while validating fields\");\n            }\n        }\n    })\n}","import { withFormik } from \"formik\";\nimport * as pathfind from 'path';\nimport { AdditionalInfo, DatasetTypes } from \"../messages\";\nimport { OpenFormProps } from \"./types\";\nimport { validateOpen } from \"./validate\";\n\nexport function parseNumList(nums: string) {\n    return nums.split(\",\").filter(part => part.trim() !== \"\").map(part => +part);\n}\n\nexport function parseNumListWithPadding(nums: string, minLength: number) {\n    let initialList = new Array(minLength).fill(\"\");\n    if(nums) {\n      const value = nums.split(\",\");\n      if((minLength - value.length)>0) {\n        initialList = [...value, ...Array(minLength - value.length).fill(\"\")];\n      } else {\n          initialList = [...value];\n      }\n    }\n    return initialList;\n}\n\nexport function getInitial<T extends object, K extends keyof T, V>(key: K, otherwise: V, values?: T): V | T[K] {\n    if (!values) {\n        return otherwise;\n    }\n    const res = values[key] !== undefined ? values[key] : otherwise;\n    return res;\n}\n\nexport function getInitialName<T extends object, K extends keyof T>(key: K, otherwise: string, values?: T): string | T[K] {\n    if (!values) {\n        return pathfind.basename(otherwise);\n    }\n    const res = values[key] !== undefined ? values[key] : pathfind.basename(otherwise);\n    return res;\n}\n\nexport function isKnownDatasetType(detectedType: string) {\n  return (Object.keys(DatasetTypes).some((v) => v === detectedType) ? true : false);\n}\n\nexport function isAdditionalInfo(param: string) {\n  return (Object.keys(AdditionalInfo).some((v) => v === param) ? true : false);\n}\n\nexport function hasKey<O>(obj: O, key: keyof any): key is keyof O {\n  return key in obj\n}\n\ntype FormToJsonFn<SubmitParams, FormParams> = (inParams: FormParams, path: string) => SubmitParams;\ntype PropsToValuesFn<SubmitParams, FormParams> = (props: OpenFormProps<SubmitParams>) => FormParams;\n\ninterface WithValidationOpts<SubmitParams extends object, FormParams> {\n    formToJson: FormToJsonFn<SubmitParams, FormParams>,\n    mapPropsToValues: PropsToValuesFn<SubmitParams, FormParams>,\n    type: DatasetTypes,\n    // WrappedComponent: React.FunctionComponent<FormikProps<FormParams> & OpenFormProps<SubmitParams>>\n}\n\nexport function withValidation<SubmitParams extends object, FormParams>(\n    opts: WithValidationOpts<SubmitParams, FormParams>\n) {\n    return withFormik<OpenFormProps<SubmitParams>, FormParams>({\n        mapPropsToValues: opts.mapPropsToValues,\n        handleSubmit: (values, formikBag) => {\n            const { onSubmit, path } = formikBag.props;\n            const submitData = opts.formToJson(values, path);\n            onSubmit(submitData);\n            formikBag.setSubmitting(false);\n        },\n        validate: (values, props) => {\n            return validateOpen(opts.type, opts.formToJson(values, props.path));\n        },\n        enableReinitialize: true,\n        validateOnChange: true,\n        validateOnBlur: true,\n    });\n}\n","import * as React from \"react\";\nimport { Table } from \"semantic-ui-react\";\nimport { DatasetState } from \"../../messages\";\nimport { isAdditionalInfo } from \"../helpers\";\n\ninterface DatasetProps {\n    dataset: DatasetState\n}\n\nconst renderParamValue = (value: any) => {\n    if (value instanceof Array) {\n        return `(${value.join(\",\")})`;\n    } else {\n        return value;\n    }\n}\n\nconst renderParams = (params: any) => {\n    return Object.keys(params).map((key: string, idx: number) => {\n        // Only show parameters, not additional info\n        if(!isAdditionalInfo(key)) {\n            return (\n                <Table.Row key={idx}>\n                    <Table.Cell>{key}</Table.Cell>\n                    <Table.Cell>{renderParamValue(params[key])}</Table.Cell>\n                </Table.Row>\n            );\n        }\n        else {\n          return null;\n        }\n    })\n}\n\n\nconst DatasetParams: React.SFC<DatasetProps> = ({ dataset }) => {\n    return (\n        <Table>\n            <Table.Header>\n                <Table.Row>\n                    <Table.HeaderCell>Parameter</Table.HeaderCell>\n                    <Table.HeaderCell>Value</Table.HeaderCell>\n                </Table.Row>\n            </Table.Header>\n            <Table.Body>\n                {renderParams(dataset.params)}\n            </Table.Body>\n        </Table>\n    );\n}\n\n\nexport default DatasetParams;\n","import { ActionsUnion, createAction } from '../helpers/actionHelpers';\nimport { DatasetCreateParams, DatasetFormParams, DatasetState } from '../messages';\n\nexport enum ActionTypes {\n    OPEN = 'DATASET_OPEN',\n    CANCEL_OPEN = 'DATASET_CANCEL_OPEN',\n    CREATE = 'DATASET_CREATE',\n    CREATED = 'DATASET_CREATED',\n    ERROR = 'DATASET_ERROR',\n    DELETE = 'DATASET_DELETE',\n    DELETED = 'DATASET_DELETED',\n    DETECT = 'DATASET_DETECT',\n    DETECTED = 'DATASET_DETECTED',\n    DETECT_FAILED = 'DATASET_DETECT_FAILED',\n}\n\nexport const Actions = {\n    open: (path: string, cachedParams?: DatasetFormParams, detectedParams?: DatasetFormParams) => createAction(ActionTypes.OPEN, { path, cachedParams, detectedParams }),\n    cancelOpen: () => createAction(ActionTypes.CANCEL_OPEN),\n    create: (dataset: DatasetCreateParams) => createAction(ActionTypes.CREATE, { dataset }),\n    created: (dataset: DatasetState) => createAction(ActionTypes.CREATED, { dataset }),\n    error: (dataset: string, msg: string, timestamp: number, id: string) => createAction(ActionTypes.ERROR, { dataset, msg, timestamp, id }),\n    delete: (dataset: string) => createAction(ActionTypes.DELETE, { dataset }),\n    deleted: (dataset: string) => createAction(ActionTypes.DELETED, { dataset }),\n    detect: (path: string) => createAction(ActionTypes.DETECT, { path }),\n    detected: (path: string, params: DatasetFormParams) => createAction(ActionTypes.DETECTED, { path, params }),\n    detectFailed: (path: string) => createAction(ActionTypes.DETECT_FAILED, { path }),\n}\n\nexport type Actions = ActionsUnion<typeof Actions>;\n","import * as React from \"react\";\nimport { Table } from \"semantic-ui-react\";\nimport { DatasetOpen, DiagElemMsg } from \"../../messages\";\nimport DatasetParams from \"./DatasetParams\";\n\ninterface DatasetInfoProps {\n    dataset: DatasetOpen,\n}\n\nconst renderValue = (elem: DiagElemMsg) => {\n    if (elem.value instanceof Array) {\n        return <DiagElems diagnostics={elem.value} />\n    } else {\n        return elem.value;\n    }\n}\n\nconst DiagElem: React.SFC<{ elem: DiagElemMsg }> = ({ elem }) => {\n    return (\n        <Table.Row>\n            <Table.Cell>{elem.name}</Table.Cell>\n            <Table.Cell>{renderValue(elem)}</Table.Cell>\n        </Table.Row>\n    )\n}\n\nconst DiagElems: React.SFC<{ diagnostics: DiagElemMsg[] }> = ({ diagnostics }) => {\n    if (diagnostics.length === 0) {\n        return null;\n    }\n    return (\n        <Table>\n            <Table.Header>\n                <Table.Row>\n                    <Table.HeaderCell>Name</Table.HeaderCell>\n                    <Table.HeaderCell>Value</Table.HeaderCell>\n                </Table.Row>\n            </Table.Header>\n            <Table.Body>\n                {diagnostics.map((elem, idx) => (\n                    <DiagElem elem={elem} key={idx} />\n                ))}\n            </Table.Body>\n        </Table>\n    );\n}\n\nconst DatasetInfo: React.SFC<DatasetInfoProps> = ({ dataset }) => {\n    return (\n        <>\n            <DatasetParams dataset={dataset} />\n            <DiagElems diagnostics={dataset.diagnostics} />\n        </>\n    );\n}\n\nexport default DatasetInfo;","import { ActionsUnion, createAction } from \"../helpers/actionHelpers\";\n\nexport enum ActionTypes {\n    DISMISS = \"ERROR_DISMISS\",\n    DISMISS_ALL = \"ERROR_DISMISS_ALL\",\n}\n\nexport const Actions = {\n    dismiss: (id: string) => createAction(ActionTypes.DISMISS, { id }),\n    dismissAll: () => createAction(ActionTypes.DISMISS_ALL),\n}\n\nexport type Actions = ActionsUnion<typeof Actions>;","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { Button } from \"semantic-ui-react\";\nimport { DatasetState } from \"../../messages\";\nimport * as datasetActions from \"../actions\";\n\ninterface DatasetProps {\n    dataset: DatasetState,\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch, ownProps: DatasetProps) => {\n    return {\n        handleRemoveDataset: () => {\n            dispatch(datasetActions.Actions.delete(ownProps.dataset.id));\n        }\n    }\n}\n\ntype MergedProps = DatasetProps & ReturnType<typeof mapDispatchToProps>;\n\nconst DatasetToolbar: React.SFC<MergedProps> = ({ dataset, handleRemoveDataset }) => {\n    return (\n        <>\n            <Button icon=\"remove\" labelPosition=\"left\" onClick={handleRemoveDataset} content='Close Dataset' />\n        </>\n    );\n}\n\n\nexport default connect(null, mapDispatchToProps)(DatasetToolbar);","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Header, Icon, Message, Modal, Popup, Segment } from 'semantic-ui-react';\nimport AnalysisList from \"../../compoundAnalysis/components/base/AnalysisList\";\nimport { CompoundAnalysisState } from \"../../compoundAnalysis/types\";\nimport { filterWithPred, Immutable, Predicate } from \"../../helpers/reducerHelpers\";\nimport { DatasetState, DatasetStatus } from \"../../messages\";\nimport { RootReducer } from \"../../store\";\nimport AddAnalysis from \"./AddAnalysis\";\nimport DatasetInfo from \"./DatasetInfo\";\nimport DatasetToolbar from \"./DatasetToolbar\";\n\ninterface DatasetProps {\n    dataset: DatasetState\n}\n\nconst mapStateToProps = (state: RootReducer, ownProps: DatasetProps) => {\n    const p: Predicate<Immutable<CompoundAnalysisState>> = (analysis: Immutable<CompoundAnalysisState>) => analysis.dataset === ownProps.dataset.id;\n    return {\n        analyses: filterWithPred(state.compoundAnalyses, p),\n    }\n}\n\ntype MergedProps = DatasetProps & ReturnType<typeof mapStateToProps>;\n\nconst DatasetComponent: React.SFC<MergedProps> = ({ dataset, analyses }) => {\n    const msg = {\n        [DatasetStatus.OPENING]: `Opening dataset ${dataset.params.name}`,\n        [DatasetStatus.DELETING]: `Closing dataset ${dataset.params.name}`,\n    }\n    if (dataset.status === DatasetStatus.OPENING || dataset.status === DatasetStatus.DELETING) {\n        return (\n            <>\n                <Header as=\"h2\" dividing={true}>{dataset.params.name}</Header>\n                <Message icon={true}>\n                    <Icon name='cog' loading={true} />\n                    <Message.Content>\n                        <Message.Header>{msg[dataset.status]}</Message.Header>\n                    </Message.Content>\n                </Message>\n            </>\n        );\n    }\n\n    return (\n        <Segment.Group style={{ marginTop: \"3em\", marginBottom: \"3em\" }}>\n            <Segment.Group horizontal={true}>\n                <Segment>\n                    <Header as=\"h2\">\n                        <Icon name=\"database\" />\n                        <Modal trigger={\n                            <Header.Content>\n                                {dataset.params.name}\n                                {' '}\n                                <Icon name=\"info circle\" size=\"small\" link={true} />\n                            </Header.Content>\n                        }>\n                            <Popup.Header>{dataset.params.type} Dataset {dataset.params.name}</Popup.Header>\n                            <Popup.Content>\n                                <DatasetInfo dataset={dataset} />\n                            </Popup.Content>\n                        </Modal>\n                    </Header>\n                </Segment>\n                <Segment style={{ flexShrink: 1, flexGrow: 0 }}>\n                    <DatasetToolbar dataset={dataset} />\n                </Segment>\n            </Segment.Group>\n            {\n                analyses.ids.length > 0 ? (\n                    <>\n                        <Segment>\n                            <AnalysisList analyses={analyses} />\n                        </Segment>\n                    </>\n                ) : null\n            }\n            <Segment textAlign=\"center\">\n                <AddAnalysis dataset={dataset} />\n            </Segment>\n        </Segment.Group>\n    );\n}\n\nconst DatasetContainer = connect(mapStateToProps)(DatasetComponent);\n\nexport default DatasetContainer;","import { ErrorMessage, Field, FormikProps } from \"formik\";\nimport * as React from \"react\";\nimport { Button, Form } from \"semantic-ui-react\";\nimport { Omit } from \"../../helpers/types\";\nimport { DatasetParamsBLO, DatasetTypes } from \"../../messages\";\nimport { getInitialName, withValidation } from \"../helpers\";\nimport { OpenFormProps } from \"../types\";\n\n// some fields have different types in the form vs. in messages\ntype DatasetParamsBLOForForm = Omit<DatasetParamsBLO, \"path\" | \"type\">;\n\ntype MergedProps = FormikProps<DatasetParamsBLOForForm> & OpenFormProps<DatasetParamsBLO>;\n\nconst BLOFileParamsForm: React.SFC<MergedProps> = ({\n    values,\n    touched,\n    errors,\n    dirty,\n    isSubmitting,\n    handleChange,\n    handleBlur,\n    handleSubmit,\n    handleReset,\n    isValidating,\n    onCancel,\n}) => {\n    return (\n        <Form onSubmit={handleSubmit}>\n            <Form.Field>\n                <label htmlFor=\"id_name\">Name:</label>\n                <ErrorMessage name=\"name\" />\n                <Field name=\"name\" id=\"id_name\" />\n            </Form.Field>\n\n            <Button primary={true} type=\"submit\" disabled={isSubmitting || isValidating}>Load Dataset</Button>\n            <Button type=\"button\" onClick={onCancel}>Cancel</Button>\n            <Button type=\"button\" onClick={handleReset}>Reset</Button>\n        </Form>\n    )\n}\n\nexport default withValidation<DatasetParamsBLO, DatasetParamsBLOForForm>({\n    mapPropsToValues: ({path, initial }) => ({\n        name: getInitialName(\"name\",path,initial),\n    }),\n    formToJson: (values, path) => {\n        return {\n            path,\n            type: DatasetTypes.BLO,\n            name: values.name,\n        };\n    },\n    type: DatasetTypes.BLO,\n})(BLOFileParamsForm);\n","import * as React from \"react\";\nimport { Dropdown, DropdownProps } from \"semantic-ui-react\";\nimport { getEnumValues } from \"../../helpers\";\nimport { DatasetTypes } from \"../../messages\";\n\n\nconst datasetTypeKeys = getEnumValues(DatasetTypes);\nconst datasetTypeOptions = datasetTypeKeys.map(t => ({\n    // text: DatasetTypeMetadata[DatasetTypes[t as any]].short,\n    text: DatasetTypes[t],\n    value: DatasetTypes[t],\n}));\n\ninterface DatasetTypeSelectProps {\n    onClick: (e: React.SyntheticEvent, data: DropdownProps) => void,\n    currentType: DatasetTypes,\n}\n\nconst DatasetTypeSelect: React.SFC<DatasetTypeSelectProps> = ({ currentType, onClick }) => {\n    return (\n        <>\n            <Dropdown\n                inline={true}\n                options={datasetTypeOptions}\n                value={currentType}\n                onChange={onClick}\n            />\n        </>\n    );\n}\n\nexport default DatasetTypeSelect;","import { ErrorMessage, Field, FormikProps } from \"formik\";\nimport * as React from \"react\";\nimport { Button, Form } from \"semantic-ui-react\";\nimport { Omit } from \"../../helpers/types\";\nimport { DatasetParamsEMPAD, DatasetTypes } from \"../../messages\";\nimport { getInitial, getInitialName, parseNumList, withValidation } from \"../helpers\";\nimport { OpenFormProps } from \"../types\";\n\n// some fields have different types in the form vs. in messages\ntype DatasetParamsEMPADForForm = Omit<DatasetParamsEMPAD,\n    \"path\"\n    | \"type\"\n    | \"scan_size\"\n> & {\n    scan_size: string,\n};\n\ntype MergedProps = FormikProps<DatasetParamsEMPADForForm> & OpenFormProps<DatasetParamsEMPAD>;\n\nconst EMPADParamsForm: React.SFC<MergedProps> = ({\n    values,\n    touched,\n    errors,\n    dirty,\n    isSubmitting,\n    handleChange,\n    handleBlur,\n    handleSubmit,\n    handleReset,\n    onCancel,\n}) => {\n    return (\n        <Form onSubmit={handleSubmit}>\n            <Form.Field>\n                <label htmlFor=\"id_name\">Name:</label>\n                <ErrorMessage name=\"name\" />\n                <Field name=\"name\" id=\"id_name\" />\n            </Form.Field>\n            <Form.Field>\n                <label htmlFor=\"id_scan_size\">Scan Size:</label>\n                <ErrorMessage name=\"scan_size\" />\n                <Field name=\"scan_size\" id=\"id_scan_size\" />\n            </Form.Field>\n            <Button primary={true} type=\"submit\" disabled={isSubmitting}>Load Dataset</Button>\n            <Button type=\"button\" onClick={onCancel}>Cancel</Button>\n            <Button type=\"button\" onClick={handleReset}>Reset</Button>\n        </Form>\n    )\n}\n\nexport default withValidation<DatasetParamsEMPAD, DatasetParamsEMPADForForm>({\n    mapPropsToValues: ({path, initial }) => ({\n        name: getInitialName(\"name\",path,initial),\n        scan_size: getInitial(\"scan_size\", \"\", initial).toString(),\n    }),\n    formToJson: (values, path) => {\n        return {\n            path,\n            type: DatasetTypes.EMPAD,\n            name: values.name,\n            scan_size: parseNumList(values.scan_size),\n        };\n    },\n    type: DatasetTypes.EMPAD,\n})(EMPADParamsForm);\n","import { ErrorMessage, Field, FormikProps } from \"formik\";\nimport * as React from \"react\";\nimport { Button, Form } from \"semantic-ui-react\";\nimport { Omit } from \"../../helpers/types\";\nimport { DatasetParamsFRMS6, DatasetTypes } from \"../../messages\";\nimport { getInitialName, withValidation } from \"../helpers\";\nimport { OpenFormProps } from \"../types\";\n\n// some fields have different types in the form vs. in messages\ntype DatasetParamsFRMS6ForForm = Omit<DatasetParamsFRMS6,\n    \"path\" | \"type\">;\n\ntype MergedProps = FormikProps<DatasetParamsFRMS6ForForm> & OpenFormProps<DatasetParamsFRMS6>;\nconst FRMS6ParamsForm: React.SFC<MergedProps> = ({\n    values,\n    touched,\n    errors,\n    dirty,\n    isSubmitting,\n    handleChange,\n    handleBlur,\n    handleSubmit,\n    handleReset,\n    onCancel,\n}) => {\n    return (\n        <Form onSubmit={handleSubmit}>\n            <Form.Field>\n                <label htmlFor=\"id_name\">Name:</label>\n                <ErrorMessage name=\"name\" />\n                <Field name=\"name\" id=\"id_name\" />\n            </Form.Field>\n\n            <Button primary={true} type=\"submit\" disabled={isSubmitting}>Load Dataset</Button>\n            <Button type=\"button\" onClick={onCancel}>Cancel</Button>\n            <Button type=\"button\" onClick={handleReset}>Reset</Button>\n        </Form>\n    )\n}\n\nexport default withValidation<DatasetParamsFRMS6, DatasetParamsFRMS6ForForm>({\n    mapPropsToValues: ({ path, initial }) => ({\n        name: getInitialName(\"name\",path,initial),\n    }),\n    formToJson: (values, path) => {\n        return {\n            path,\n            type: DatasetTypes.FRMS6,\n            name: values.name,\n        };\n    },\n    type: DatasetTypes.FRMS6,\n})(FRMS6ParamsForm);\n","import { ErrorMessage, Field, FormikProps } from \"formik\";\nimport * as React from \"react\";\nimport { Button, Dropdown, DropdownProps, Form } from \"semantic-ui-react\";\nimport { Omit } from \"../../helpers/types\";\nimport { DatasetParamsHDF5, DatasetTypes } from \"../../messages\";\nimport { getInitial, getInitialName, withValidation } from \"../helpers\";\nimport { OpenFormProps } from \"../types\";\n\ntype DatasetParamsHDF5ForForm = Omit<DatasetParamsHDF5, \"path\" | \"type\">;\n\ntype MergedProps = FormikProps<DatasetParamsHDF5ForForm> & OpenFormProps<DatasetParamsHDF5>;\n\nconst HDF5ParamsForm: React.SFC<MergedProps> = ({\n    values,\n    touched,\n    errors,\n    dirty,\n    isSubmitting,\n    handleChange,\n    handleBlur,\n    handleSubmit,\n    handleReset,\n    onCancel,\n    setFieldValue,\n}) => {\n\n    const dsPathOptions = values.dataset_paths.map(dsPath => ({ key: dsPath, text: dsPath, value: dsPath }));\n\n    // semantic-ui requires value to be set manually on option selection\n    const onDSPathChange = (e: React.SyntheticEvent, result: DropdownProps) => {\n      const { value } = result;\n      if (value) {\n        setFieldValue(\"ds_path\", value.toString());\n      }\n    };\n\n    let dsPathInput;\n    const isTimeOut = (values.dataset_paths.length === 0 ) ? true : false;\n    if (isTimeOut) {\n      dsPathInput = <Field name=\"ds_path\" id=\"id_ds_path\" />;\n    } else {\n      dsPathInput = <Dropdown name=\"ds_path\" id=\"id_ds_path\" placeholder=\"Select dataset\" fluid={true} search={true} selection={true} defaultValue={values.ds_path} onChange={onDSPathChange} options={dsPathOptions} />;\n    }\n\n    return (\n        <Form onSubmit={handleSubmit}>\n            <Form.Field>\n                <label htmlFor=\"id_name\">Name:</label>\n                <ErrorMessage name=\"name\" />\n                <Field name=\"name\" id=\"id_name\" />\n            </Form.Field>\n            <Form.Field>\n                <label htmlFor=\"id_ds_path\">HDF5 Dataset Path:</label>\n                <ErrorMessage name=\"ds_path\" />\n                {dsPathInput}\n            </Form.Field>\n            <Button primary={true} type=\"submit\" disabled={isSubmitting}>Load Dataset</Button>\n            <Button onClick={onCancel} >Cancel</Button>\n            <Button type=\"button\" onClick={handleReset}>Reset</Button>\n        </Form>\n    )\n}\n\nexport default withValidation<DatasetParamsHDF5, DatasetParamsHDF5ForForm>({\n    mapPropsToValues: ({path, initial }) => ({\n        name: getInitialName(\"name\",path,initial),\n        dataset_paths: getInitial(\"dataset_paths\", [], initial),\n        ds_path: getInitial(\"ds_path\", \"\", initial),\n    }),\n    formToJson: (values, path) => {\n        return {\n            path,\n            type: DatasetTypes.HDF5,\n            name: values.name,\n            ds_path: values.ds_path,\n            dataset_paths: values.dataset_paths,\n        };\n    },\n    type: DatasetTypes.HDF5,\n})(HDF5ParamsForm);\n","import { ErrorMessage, Field, FormikProps } from \"formik\";\nimport * as React from \"react\";\nimport { Button, Form } from \"semantic-ui-react\";\nimport { Omit } from \"../../helpers/types\";\nimport { DatasetParamsK2IS, DatasetTypes } from \"../../messages\";\nimport { getInitialName, withValidation } from \"../helpers\";\nimport { OpenFormProps } from \"../types\";\n\n// some fields have different types in the form vs. in messages\ntype DatasetParamsK2ISForForm = Omit<DatasetParamsK2IS,\n    \"path\" | \"type\">;\n\ntype MergedProps = FormikProps<DatasetParamsK2ISForForm> & OpenFormProps<DatasetParamsK2IS>;\n\nconst K2ISFileParamsForm: React.SFC<MergedProps> = ({\n    values,\n    touched,\n    errors,\n    dirty,\n    isSubmitting,\n    handleChange,\n    handleBlur,\n    handleSubmit,\n    handleReset,\n    onCancel,\n}) => {\n    return (\n        <Form onSubmit={handleSubmit}>\n            <Form.Field>\n                <label htmlFor=\"id_name\">Name:</label>\n                <ErrorMessage name=\"name\" />\n                <Field name=\"name\" id=\"id_name\" />\n            </Form.Field>\n\n            <Button primary={true} type=\"submit\" disabled={isSubmitting}>Load Dataset</Button>\n            <Button type=\"button\" onClick={onCancel}>Cancel</Button>\n            <Button type=\"button\" onClick={handleReset}>Reset</Button>\n        </Form>\n    )\n}\n\nexport default withValidation<DatasetParamsK2IS, DatasetParamsK2ISForForm>({\n    mapPropsToValues: ({path, initial }) => ({\n        name: getInitialName(\"name\",path,initial),\n    }),\n    formToJson: (values, path) => {\n        return {\n            path,\n            type: DatasetTypes.K2IS,\n            name: values.name,\n        }\n    },\n    type: DatasetTypes.K2IS,\n})(K2ISFileParamsForm);\n","import * as React from \"react\";\n\ninterface TupleInputPartProps {\n    name: string,\n    id: string,\n    tupleKey: number,\n    value: number,\n    tupleInputChangeHandle: (idx: number, value: string) => void,\n    commaPressHandle: (idx: number) => void,\n    tupleRef: (ref:HTMLInputElement) => void,\n}\n\nconst TupleInputPart: React.FC<TupleInputPartProps> = ({ name, id, tupleKey, tupleInputChangeHandle, value, commaPressHandle, tupleRef }) => {\n\n   const onPartChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n      tupleInputChangeHandle(tupleKey, e.target.value);\n   }\n\n   const onCommaPress = (e: React.KeyboardEvent<HTMLInputElement>) => {\n     if(e.keyCode === 188) {\n       commaPressHandle(tupleKey);\n     }\n   }\n\n   return <input type=\"number\" name={name} id={id} key={tupleKey} onChange={onPartChange} value={value} onKeyDown={onCommaPress} ref={tupleRef} />;\n}\n\nexport default TupleInputPart;\n","import * as React from \"react\";\nimport { Button, Form } from \"semantic-ui-react\";\nimport { parseNumListWithPadding } from \"../helpers\";\nimport TupleInputPart from \"./TupleInputPart\";\n\ninterface TupleInputProps {\n    value: string,\n    minLen: number,\n    maxLen: number,\n    fieldName: string,\n    setFieldValue: (field: string, value: any, shouldValidate?: boolean) => void,\n}\n\nconst TupleInput: React.FC<TupleInputProps> = ({ value, minLen, maxLen, fieldName, setFieldValue }) => {\n\n    const tupleInputValue = parseNumListWithPadding(value, minLen);\n\n    const tupleInputRefsArray = React.useRef<HTMLInputElement[]>([]);\n\n    const tupleInputChangeHandle = (idx: number, val: string) => {\n      const newTupleInputValue = [...tupleInputValue];\n      newTupleInputValue[idx] = val;\n      setFieldValue(fieldName, newTupleInputValue.toString());\n    };\n\n    const commaPressHandle = (idx: number) => {\n      if(idx===(tupleInputValue.length-1)) {\n        newTupleDim();\n      } else {\n          tupleInputRefsArray.current[idx+1].focus();\n      }\n    }\n\n    const newTupleDim = () => {\n      if(tupleInputValue.length < maxLen) {\n        const newTupleInputValue = [...tupleInputValue];\n        newTupleInputValue.push(\"\");\n        setFieldValue(fieldName, newTupleInputValue.toString());\n      }\n    }\n\n    React.useEffect(() => {\n      if(tupleInputValue.length > minLen) {\n        tupleInputRefsArray.current[tupleInputValue.length-1].focus();\n      }\n    }, [tupleInputValue.length, minLen]);\n\n    const delTupleDim = () => {\n      if(tupleInputValue.length > minLen) {\n        const newTupleInputValue = [...tupleInputValue];\n        newTupleInputValue.pop();\n        setFieldValue(fieldName, newTupleInputValue.toString());\n      }\n    }\n\n    return (\n      <>\n        <Form.Group>\n          {tupleInputValue.map((val, idx) => {\n            const tupleRef = (ref:HTMLInputElement) => { tupleInputRefsArray.current[idx] = ref; }\n            return <Form.Field width={2} key={idx}><TupleInputPart tupleKey={idx} name={fieldName + \"_\" + idx} id={\"id_\" + fieldName + \"_\" + idx} value={val} tupleRef={tupleRef} tupleInputChangeHandle={tupleInputChangeHandle} commaPressHandle={commaPressHandle} /></Form.Field>\n          })}\n          <Form.Field hidden={minLen === maxLen}>\n            <Button onClick={newTupleDim} disabled={tupleInputValue.length === maxLen} type=\"button\" icon=\"add\" title=\"Add dimension\" basic={false} />\n            <Button onClick={delTupleDim} disabled={tupleInputValue.length === minLen} type=\"button\" icon=\"minus\" title=\"Remove dimension\" basic={false} />\n          </Form.Field>\n        </Form.Group>\n      </>\n    );\n}\n\nexport default TupleInput;\n","import { ErrorMessage, Field, FormikProps } from \"formik\";\nimport * as React from \"react\";\nimport { Button, Form } from \"semantic-ui-react\";\nimport { Omit } from \"../../helpers/types\";\nimport { DatasetParamsMIB, DatasetTypes } from \"../../messages\";\nimport { getInitial, getInitialName, parseNumList, withValidation } from \"../helpers\";\nimport { OpenFormProps } from \"../types\";\nimport TupleInput from \"./TupleInput\";\n\n// some fields have different types in the form vs. in messages\ntype DatasetParamsMIBForForm = Omit<DatasetParamsMIB,\n    \"path\"\n    | \"type\"\n    | \"scan_size\"\n> & {\n    scan_size: string,\n};\n\ntype FormValues = DatasetParamsMIBForForm\n\ntype MergedProps = FormikProps<FormValues> & OpenFormProps<DatasetParamsMIB>;\n\nconst MIBFileParamsForm: React.SFC<MergedProps> = ({\n    values,\n    touched,\n    errors,\n    dirty,\n    isSubmitting,\n    handleChange,\n    handleBlur,\n    handleSubmit,\n    handleReset,\n    isValidating,\n    onCancel,\n    setFieldValue,\n}) => {\n\n    return (\n        <Form onSubmit={handleSubmit}>\n            <Form.Field>\n                <label htmlFor=\"id_name\">Name:</label>\n                <ErrorMessage name=\"name\" />\n                <Field name=\"name\" id=\"id_name\" />\n            </Form.Field>\n            <Form.Field>\n                <label htmlFor=\"id_scan_size_0\">Scan Size:</label>\n                <ErrorMessage name=\"scan_size\" />\n                <TupleInput value={values.scan_size} minLen={2} maxLen={2} fieldName=\"scan_size\" setFieldValue={setFieldValue} />\n            </Form.Field>\n            <Button primary={true} type=\"submit\" disabled={isSubmitting || isValidating}>Load Dataset</Button>\n            <Button type=\"button\" onClick={onCancel}>Cancel</Button>\n            <Button type=\"button\" onClick={handleReset}>Reset</Button>\n        </Form>\n    )\n}\n\nexport default withValidation<DatasetParamsMIB, DatasetParamsMIBForForm>({\n    formToJson: (values, path) => {\n        return {\n            path,\n            type: DatasetTypes.MIB,\n            name: values.name,\n            scan_size: parseNumList(values.scan_size),\n        }\n    },\n    mapPropsToValues: ({path, initial }) => ({\n        name: getInitialName(\"name\",path,initial),\n        scan_size: getInitial(\"scan_size\", \"\", initial).toString(),\n    }),\n    type: DatasetTypes.MIB,\n})(MIBFileParamsForm);\n","import { ErrorMessage, Field, FormikProps } from \"formik\";\nimport * as React from \"react\";\nimport { Button, Form } from \"semantic-ui-react\";\nimport { Omit } from \"../../helpers/types\";\nimport { DatasetParamsRaw, DatasetTypes } from \"../../messages\";\nimport { getInitial, getInitialName, parseNumList, withValidation } from \"../helpers\";\nimport { OpenFormProps } from \"../types\";\nimport TupleInput from \"./TupleInput\";\n\n// some fields have different types in the form vs. in messages\ntype DatasetParamsRawForForm = Omit<DatasetParamsRaw,\n    \"type\"\n    | \"path\"\n    | \"scan_size\"\n    | \"detector_size\"> & {\n        scan_size: string\n        detector_size: string,\n    };\n\ntype MergedProps = FormikProps<DatasetParamsRawForForm> & OpenFormProps<DatasetParamsRaw>;\n\nconst RawFileParamsForm: React.SFC<MergedProps> = ({\n    values,\n    touched,\n    errors,\n    dirty,\n    isSubmitting,\n    handleChange,\n    handleBlur,\n    handleSubmit,\n    handleReset,\n    onCancel,\n    setFieldValue,\n}) => {\n\n    return (\n\n        <Form onSubmit={handleSubmit}>\n            <Form.Field>\n                <label htmlFor=\"id_name\">Name:</label>\n                <ErrorMessage name=\"name\" />\n                <Field name=\"name\" id=\"id_name\" />\n            </Form.Field>\n            <Form.Field>\n                <label htmlFor=\"id_scan_size_0\">Scan Size:</label>\n                <ErrorMessage name=\"scan_size\" />\n                <TupleInput value={values.scan_size} minLen={2} maxLen={2} fieldName=\"scan_size\" setFieldValue={setFieldValue} />\n            </Form.Field>\n            <Form.Field>\n                <label htmlFor=\"id_dtype\">Datatype (uint16, uint32, float32, float64, &gt;u2, ..., can be anything that is <a href=\"https://docs.scipy.org/doc/numpy-1.15.1/reference/arrays.dtypes.html\">understood by numpy as a dtype</a>):</label>\n                <ErrorMessage name=\"dtype\" />\n                <Field name=\"dtype\" id=\"id_dtype\" />\n            </Form.Field>\n            <Form.Field>\n                <label htmlFor=\"id_detector_size_0\">Detector Size (pixels, example: 256,256):</label>\n                <ErrorMessage name=\"detector_size\" />\n                <TupleInput value={values.detector_size} minLen={2} maxLen={2} fieldName=\"detector_size\" setFieldValue={setFieldValue} />\n            </Form.Field>\n            <Form.Field>\n                <label htmlFor=\"id_enable_direct\">Enable Direct I/O (for usage with fast SSDs and files much larger than RAM):</label>\n                <ErrorMessage name=\"enable_direct\" />\n                <Field type=\"checkbox\" name=\"enable_direct\" checked={values.enable_direct} id=\"id_enable_direct\" />\n            </Form.Field>\n            <Button primary={true} type=\"submit\" disabled={isSubmitting}>Load Dataset</Button>\n            <Button type=\"button\" onClick={onCancel}>Cancel</Button>\n            <Button type=\"button\" onClick={handleReset}>Reset</Button>\n        </Form>\n    )\n}\n\nexport default withValidation<DatasetParamsRaw, DatasetParamsRawForForm>({\n    mapPropsToValues: ({path, initial }) => ({\n        name: getInitialName(\"name\",path,initial),\n        enable_direct: getInitial(\"enable_direct\", false, initial),\n        detector_size: getInitial(\"detector_size\", \"\", initial).toString(),\n        scan_size: getInitial(\"scan_size\", \"\", initial).toString(),\n        dtype: getInitial(\"dtype\", \"float32\", initial),\n    }),\n    formToJson: (values, path) => {\n        return {\n            path,\n            type: DatasetTypes.RAW,\n            name: values.name,\n            dtype: values.dtype,\n            enable_direct: values.enable_direct,\n            scan_size: parseNumList(values.scan_size),\n            detector_size: parseNumList(values.detector_size),\n        }\n    },\n    type: DatasetTypes.RAW,\n})(RawFileParamsForm);\n","import { ErrorMessage, Field, FormikProps } from \"formik\";\nimport * as React from \"react\";\nimport { Button, Form } from \"semantic-ui-react\";\nimport { Omit } from \"../../helpers/types\";\nimport { DatasetParamsSEQ, DatasetTypes } from \"../../messages\";\nimport { getInitial, getInitialName, parseNumList, withValidation } from \"../helpers\";\nimport { OpenFormProps } from \"../types\";\nimport TupleInput from \"./TupleInput\";\n\n// some fields have different types in the form vs. in messages\ntype DatasetParamsSEQForForm = Omit<DatasetParamsSEQ,\n    \"path\"\n    | \"type\"\n    | \"scan_size\"\n> & {\n    scan_size: string,\n};\n\ntype FormValues = DatasetParamsSEQForForm\n\ntype MergedProps = FormikProps<FormValues> & OpenFormProps<DatasetParamsSEQ>;\n\nconst SEQFileParamsForm: React.SFC<MergedProps> = ({\n    values,\n    touched,\n    errors,\n    dirty,\n    isSubmitting,\n    handleChange,\n    handleBlur,\n    handleSubmit,\n    handleReset,\n    isValidating,\n    onCancel,\n    setFieldValue,\n}) => {\n\n    return (\n        <Form onSubmit={handleSubmit}>\n            <Form.Field>\n                <label htmlFor=\"id_name\">Name:</label>\n                <ErrorMessage name=\"name\" />\n                <Field name=\"name\" id=\"id_name\" />\n            </Form.Field>\n            <Form.Field>\n                <label htmlFor=\"id_scan_size_0\">Scan Size:</label>\n                <ErrorMessage name=\"scan_size\" />\n                <TupleInput value={values.scan_size} minLen={2} maxLen={2} fieldName=\"scan_size\" setFieldValue={setFieldValue} />\n            </Form.Field>\n            <Button primary={true} type=\"submit\" disabled={isSubmitting || isValidating}>Load Dataset</Button>\n            <Button type=\"button\" onClick={onCancel}>Cancel</Button>\n            <Button type=\"button\" onClick={handleReset}>Reset</Button>\n        </Form>\n    )\n}\n\nexport default withValidation<DatasetParamsSEQ, DatasetParamsSEQForForm>({\n    formToJson: (values, path) => {\n        return {\n            path,\n            type: DatasetTypes.SEQ,\n            name: values.name,\n            scan_size: parseNumList(values.scan_size),\n        }\n    },\n    mapPropsToValues: ({ path, initial }) => ({\n        name: getInitialName(\"name\", path, initial),\n        scan_size: getInitial(\"scan_size\", \"\", initial).toString(),\n    }),\n    type: DatasetTypes.SEQ,\n})(SEQFileParamsForm);\n","import { ErrorMessage, Field, FormikProps } from \"formik\";\nimport * as React from \"react\";\nimport { Button, Form } from \"semantic-ui-react\";\nimport { Omit } from \"../../helpers/types\";\nimport { DatasetParamsSER, DatasetTypes } from \"../../messages\";\nimport { getInitialName, withValidation } from \"../helpers\";\nimport { OpenFormProps } from \"../types\";\n\n// some fields have different types in the form vs. in messages\ntype DatasetParamsSERForForm = Omit<DatasetParamsSER,\n    \"path\" | \"type\">;\n\ntype MergedProps = FormikProps<DatasetParamsSERForForm> & OpenFormProps<DatasetParamsSER>;\nconst SERParamsForm: React.SFC<MergedProps> = ({\n    values,\n    touched,\n    errors,\n    dirty,\n    isSubmitting,\n    handleChange,\n    handleBlur,\n    handleSubmit,\n    handleReset,\n    onCancel,\n}) => {\n    return (\n        <Form onSubmit={handleSubmit}>\n            <Form.Field>\n                <label htmlFor=\"id_name\">Name:</label>\n                <ErrorMessage name=\"name\" />\n                <Field name=\"name\" id=\"id_name\" />\n            </Form.Field>\n\n            <Button primary={true} type=\"submit\" disabled={isSubmitting}>Load Dataset</Button>\n            <Button type=\"button\" onClick={onCancel}>Cancel</Button>\n            <Button type=\"button\" onClick={handleReset}>Reset</Button>\n        </Form>\n    )\n}\n\nexport default withValidation<DatasetParamsSER, DatasetParamsSERForForm>({\n    mapPropsToValues: ({path, initial }) => ({\n        name: getInitialName(\"name\",path,initial),\n    }),\n    formToJson: (values, path) => {\n        return {\n            path,\n            type: DatasetTypes.SER,\n            name: values.name,\n        }\n    },\n    type: DatasetTypes.SER,\n})(SERParamsForm);\n","import * as React from \"react\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport { DropdownProps, Header, Segment } from \"semantic-ui-react\";\nimport uuid from \"uuid/v4\";\nimport { assertNotReached } from \"../../helpers\";\nimport { DatasetFormParams, DatasetTypes } from '../../messages';\nimport { RootReducer } from \"../../store\";\nimport * as datasetActions from \"../actions\";\nimport { hasKey, isAdditionalInfo } from \"../helpers\";\nimport { OpenDatasetState } from \"../types\";\nimport BLOParamsForm from \"./BLOParamsForm\";\nimport DatasetTypeSelect from \"./DatasetTypeSelect\";\nimport EMPADParamsForm from \"./EMPADParamsForm\";\nimport FRMS6ParamsForm from \"./FRMS6ParamsForm\";\nimport HDF5ParamsForm from \"./HDF5ParamsForm\";\nimport K2ISParamsForm from \"./K2ISParamsForm\";\nimport MIBParamsForm from \"./MIBParamsForm\";\nimport RawFileParamsForm from \"./RawFileParamsForm\";\nimport SEQParamsForm from \"./SEQParamsForm\";\nimport SERParamsForm from \"./SERParamsForm\";\n\n\n/**\n * Get the initial selection for the dataset type dropdown. If we have a previous\n * user selection, we use it, but only if the reset button was not pressed. If it was,\n * we use the detected dataset type, falling back to RAW.\n *\n * @param didReset flag: was the reset button pressed?\n * @param openState complete OpenDatasetState instance\n */\nconst getDefaultDSType = (didReset: boolean, openState: OpenDatasetState) => {\n    const { formCachedParams, formDetectedParams } = openState;\n    if (didReset) {\n        return formDetectedParams ? formDetectedParams.type : DatasetTypes.RAW;\n    }\n    if (formCachedParams) {\n        return formCachedParams.type;\n    }\n    if (formDetectedParams) {\n        return formDetectedParams.type;\n    }\n    return DatasetTypes.RAW;\n}\n\n\n/**\n * Get the initial form field values. If we have previously entered values, we\n * use these, otherwise we use the detected parameters. If the reset button was\n * clicked, we use the detected params, but keep the original name field,\n *\n * @param didReset flag: was the reset button pressed?\n * @param openState complete OpenDatasetState instance\n */\n\n// Fix this after separating info from params\nconst getAdditionalInfo = (formDetectedParams: DatasetFormParams) => {\n    const additionalInfo = Object.keys(formDetectedParams)\n        .filter(isAdditionalInfo)\n        .reduce((allInfo: object, info: string) => {\n            return hasKey(formDetectedParams, info) ? { ...allInfo, [info]: formDetectedParams[info] } : { ...allInfo };\n        }, {});\n    return additionalInfo;\n}\n\nconst getFormInitial = (didReset: boolean, openState: OpenDatasetState) => {\n    const { formCachedParams, formDetectedParams } = openState;\n    if (didReset) {\n        if (formDetectedParams) {\n            return {\n                name: formCachedParams ? formCachedParams.name : \"\",\n                ...formDetectedParams,\n            };\n        }\n        return undefined;\n    }\n    if (formCachedParams) {\n        if (formDetectedParams) {\n            const additionalInfo = getAdditionalInfo(formDetectedParams);\n            return { ...additionalInfo, ...formCachedParams };\n        }\n        return formCachedParams;\n    } else {\n        return formDetectedParams;\n    }\n}\n\n/**\n * Dispatch to specific dataset opening forms, including a selection of dataset type\n * via a dropdown.\n */\nconst DatasetOpen = () => {\n    const dispatch = useDispatch();\n    const openState = useSelector((state: RootReducer) => state.openDataset);\n\n    const [didReset, setReset] = React.useState(false);\n    const formInitial = getFormInitial(didReset, openState);\n    const defaultType = getDefaultDSType(didReset, openState);\n    const [datasetType, setDatasetType] = React.useState(defaultType);\n\n    const doSetType = (e: React.SyntheticEvent, data: DropdownProps) => setDatasetType(data.value as DatasetTypes);\n    // FIXME: find out how to make ts correctly correlate the types of FormComponent\n    // and initial and replace the huge switch below with something like:\n    // const initial = formInitial && datasetType === formInitial.type ? formInitial : undefined;\n    // const formComponentMap = {\n    //     [DatasetTypes.HDF5]: HDF5ParamsForm,\n    //     [DatasetTypes.RAW]: RawFileParamsForm,\n    //     [DatasetTypes.MIB]: MIBParamsForm,\n    //     [DatasetTypes.BLO]: BLOParamsForm,\n    //     [DatasetTypes.K2IS]: K2ISParamsForm,\n    //     [DatasetTypes.SER]: SERParamsForm,\n    //     [DatasetTypes.FRMS6]: FRMS6ParamsForm,\n    //     [DatasetTypes.EMPAD]: EMPADParamsForm,\n    // }\n    // const FormComponent = formComponentMap[datasetType];\n\n    const renderForm = (form: React.ReactNode) => {\n        return (\n            <Segment>\n                Type: <DatasetTypeSelect onClick={doSetType} currentType={datasetType} />\n                <Header as=\"h2\">Open: {openState.formPath}</Header>\n                {form}\n            </Segment>\n        );\n    }\n\n    const commonParams = {\n        path: openState.formPath,\n        onSubmit: (params: DatasetFormParams) => {\n            dispatch(datasetActions.Actions.create({\n                id: uuid(),\n                params,\n            }))\n        },\n        onCancel: () => dispatch(datasetActions.Actions.cancelOpen()),\n        onReset: () => {\n            setReset(true);\n            setDatasetType(getDefaultDSType(true, openState));\n        },\n    }\n\n    switch (datasetType) {\n        case DatasetTypes.HDF5: {\n            const initial = formInitial && datasetType === formInitial.type ? formInitial : undefined;\n            return renderForm(<HDF5ParamsForm {...commonParams} initial={initial} />);\n        }\n        case DatasetTypes.RAW: {\n            const initial = formInitial && datasetType === formInitial.type ? formInitial : undefined;\n            return renderForm(<RawFileParamsForm {...commonParams} initial={initial} />);\n        }\n        case DatasetTypes.MIB: {\n            const initial = formInitial && datasetType === formInitial.type ? formInitial : undefined;\n            return renderForm(<MIBParamsForm {...commonParams} initial={initial} />);\n        }\n        case DatasetTypes.BLO: {\n            const initial = formInitial && datasetType === formInitial.type ? formInitial : undefined;\n            return renderForm(<BLOParamsForm {...commonParams} initial={initial} />);\n        }\n        case DatasetTypes.K2IS: {\n            const initial = formInitial && datasetType === formInitial.type ? formInitial : undefined;\n            return renderForm(<K2ISParamsForm {...commonParams} initial={initial} />);\n        }\n        case DatasetTypes.SER: {\n            const initial = formInitial && datasetType === formInitial.type ? formInitial : undefined;\n            return renderForm(<SERParamsForm {...commonParams} initial={initial} />);\n        }\n        case DatasetTypes.FRMS6: {\n            const initial = formInitial && datasetType === formInitial.type ? formInitial : undefined;\n            return renderForm(<FRMS6ParamsForm {...commonParams} initial={initial} />);\n        }\n        case DatasetTypes.EMPAD: {\n            const initial = formInitial && datasetType === formInitial.type ? formInitial : undefined;\n            return renderForm(<EMPADParamsForm {...commonParams} initial={initial} />)\n        }\n        case DatasetTypes.SEQ: {\n            const initial = formInitial && datasetType === formInitial.type ? formInitial : undefined;\n            return renderForm(<SEQParamsForm {...commonParams} initial={initial} />);\n        }\n    }\n    return assertNotReached(\"unknown dataset type\");\n}\n\nexport default DatasetOpen;\n","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Header, Icon, Message } from \"semantic-ui-react\";\nimport { RootReducer } from \"../../store\";\n\nconst mapStateToProps = (state: RootReducer) => {\n    return {\n        busy: state.openDataset.busy,\n        path: state.openDataset.busyPath,\n    };\n}\n\ntype MergedProps = ReturnType<typeof mapStateToProps>;\n\nconst DatasetOpenSpinner: React.SFC<MergedProps> = ({ busy, path }) => {\n    if (!busy) {\n        return null;\n    }\n    return (\n        <>\n            <Header as=\"h2\" dividing={true}>Loading...</Header>\n            <Message icon={true}>\n                <Icon name='cog' loading={true} />\n                <Message.Content>\n                    <Message.Header>Detecting parameters for {path}</Message.Header>\n                </Message.Content>\n            </Message>\n        </>\n    );\n}\n\nexport default connect(mapStateToProps)(DatasetOpenSpinner);","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport BrowserWrapper from \"../../browser/components/BrowserWrapper\";\nimport { RootReducer } from \"../../store\";\nimport { DatasetsState } from \"../types\";\nimport Dataset from \"./Dataset\";\nimport DatasetOpen from \"./DatasetOpen\";\nimport DatasetOpenSpinner from \"./DatasetOpenSpinner\";\n\ninterface DatasetListProps {\n    datasets: DatasetsState\n}\n\nconst mapStateToProps = (state: RootReducer) => {\n    return {\n        datasets: state.datasets,\n        formVisible: state.openDataset.formVisible,\n        formPath: state.openDataset.formPath,\n    };\n}\n\ntype MergedProps = DatasetListProps & ReturnType<typeof mapStateToProps>;\n\nclass DatasetList extends React.Component<MergedProps> {\n    public render() {\n        const { formVisible, datasets } = this.props;\n\n        return (\n            <>\n                {datasets.ids.map((dsId: string) => <Dataset dataset={datasets.byId[dsId]} key={dsId} />)}\n                <DatasetOpenSpinner />\n                {formVisible && <DatasetOpen />}\n                <BrowserWrapper />\n            </>\n        );\n    }\n}\n\nexport default connect(mapStateToProps)(DatasetList);","import { ActionsUnion, createAction } from \"../helpers/actionHelpers\";\nimport { JobResultType } from \"../job/types\";\nimport { AnalysisDetails, MsgPartAnalysis, MsgPartCompoundAnalysis, MsgPartInitialDataset, MsgPartJob } from \"../messages\";\n\nexport type PartialResultType = JobResultType;\n\nexport enum ActionTypes {\n    INITIAL_STATE = \"CHANNEL_INITIAL_STATE\",\n    JOB_STARTED = \"CHANNEL_JOB_STARTED\",\n    FINISH_JOB = \"CHANNEL_FINISH_JOB\",\n    TASK_RESULT = \"CHANNEL_TASK_RESULT\",\n    JOB_ERROR = \"CHANNEL_JOB_ERROR\",\n    OPEN = \"CHANNEL_OPEN\",\n    CLOSE = \"CHANNEL_CLOSE\",\n    ERROR = \"CHANNEL_ERROR\",\n    CANCELLED = \"CANCELLED\",\n    SHUTDOWN = \"CHANNEL_SHUTDOWN\",\n    CLOSE_LOOP = \"CHANNEL_LOOP_CLOSE\",\n    ANALYSIS_CREATED = \"ANALYSIS_CREATED\",\n    ANALYSIS_UPDATED = \"ANALYSIS_UPDATED\",\n    ANALYSIS_REMOVED = \"ANALYSIS_REMOVED\",\n}\n\nexport const Actions = {\n    initialState: (\n        jobs: MsgPartJob[],\n        datasets: MsgPartInitialDataset[],\n        compoundAnalyses: MsgPartCompoundAnalysis[],\n        analyses: MsgPartAnalysis[],\n        timestamp: number\n    ) => createAction(ActionTypes.INITIAL_STATE, { jobs, datasets, timestamp, compoundAnalyses, analyses }),\n    jobStarted: (job: string, dataset: string, timestamp: number) => createAction(ActionTypes.JOB_STARTED, { job, timestamp, dataset }),\n    finishJob: (job: string, results: JobResultType[], timestamp: number) => createAction(ActionTypes.FINISH_JOB, { job, results, timestamp }),\n    taskResult: (job: string, results: PartialResultType[], timestamp: number) => createAction(ActionTypes.TASK_RESULT, { job, results, timestamp }),\n    jobError: (job: string, msg: string, id: string, timestamp: number) => createAction(ActionTypes.JOB_ERROR, { job, msg, id, timestamp }),\n    open: (timestamp: number) => createAction(ActionTypes.OPEN, { timestamp }),\n    close: (timestamp: number) => createAction(ActionTypes.CLOSE, { timestamp }),\n    error: (msg: string, timestamp: number, id: string) => createAction(ActionTypes.ERROR, { msg, timestamp, id }),\n    shutdown: (timestamp: number) => createAction(ActionTypes.SHUTDOWN, { timestamp }),\n    closeloop: (timestamp: number) => createAction(ActionTypes.CLOSE_LOOP, { timestamp }),\n    cancelled: (job: string) => createAction(ActionTypes.CANCELLED, { job }),\n    analysisCreated: (analysis: string, dataset: string, details: AnalysisDetails) =>\n        createAction(ActionTypes.ANALYSIS_CREATED, { dataset, analysis, details }),\n    analysisUpdated: (analysis: string, dataset: string, details: AnalysisDetails) =>\n        createAction(ActionTypes.ANALYSIS_UPDATED, { dataset, analysis, details }),\n    analysisRemoved: (analysis: string) => createAction(ActionTypes.ANALYSIS_REMOVED, { analysis }),\n};\n\nexport type Actions = ActionsUnion<typeof Actions>;\n","import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { Dispatch } from 'redux';\nimport { Message } from 'semantic-ui-react';\nimport * as errorActions from '../actions';\nimport { ErrorMessage } from '../reducers';\n\nconst mapDispatchToProps = (dispatch: Dispatch, ownProps: ErrorProps) => {\n    return {\n        dismiss: () => dispatch(errorActions.Actions.dismiss(ownProps.error.id)),\n    }\n}\n\ninterface ErrorProps {\n    error: ErrorMessage,\n}\n\ntype MergedProps = ErrorProps & ReturnType<typeof mapDispatchToProps>;\n\nconst ErrorComponent: React.SFC<MergedProps> = ({ dismiss, error }) => {\n    return (\n        <Message negative={true} onDismiss={dismiss}>{error.msg}</Message>\n    )\n}\n\nexport default connect(null, mapDispatchToProps)(ErrorComponent);","import * as React from \"react\";\nimport { connect, useDispatch } from \"react-redux\";\nimport { Modal } from \"semantic-ui-react\";\nimport { useDismissEscape } from \"../../helpers/hooks\";\nimport { RootReducer } from \"../../store\";\nimport { Actions } from \"../actions\";\nimport Error from \"./Error\";\n\nconst mapStateToProps = (state: RootReducer) => {\n    return {\n        errors: state.errors,\n        channelConnected: (state.channelStatus.status === \"connected\" ||\n            state.channelStatus.status === \"ready\"),\n    }\n}\n\ntype MergedProps = ReturnType<typeof mapStateToProps>;\n\nconst ErrorList: React.SFC<MergedProps> = ({ errors, channelConnected }) => {\n    const numShown = 3;\n    const latestErrors = errors.ids.slice(Math.max(0, errors.ids.length - numShown));\n    const showModal = errors.ids.length > 0 && channelConnected;\n\n    const dispatch = useDispatch();\n\n    const doDismiss = () => {\n        dispatch(Actions.dismissAll());\n    }\n\n    useDismissEscape(doDismiss);\n\n    return (\n        <Modal open={showModal}>\n            {latestErrors.map(error => <Error error={errors.byId[error]} key={error} />)}\n        </Modal>\n    );\n}\n\nexport default connect(mapStateToProps)(ErrorList);","import React from \"react\";\n\nexport const useDismissEscape = (dismiss: () => void) => {\n    React.useEffect(() => {\n        const handleEsc = (ev: KeyboardEvent) => {\n            if(ev.code === \"Escape\" || ev.keyCode === 27) {\n                dismiss();\n            }\n        }\n        document.addEventListener(\"keyup\", handleEsc);\n\n        return () => {\n            document.removeEventListener(\"keyup\", handleEsc);\n        };\n    });\n}","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Header, List } from \"semantic-ui-react\";\nimport { RootReducer } from \"./store\";\n\nconst mapStateToProps = (state: RootReducer) => {\n    return {\n        version: state.config.version,\n        revision: state.config.revision,\n    }\n}\n\ntype MergedProps = ReturnType<typeof mapStateToProps>;\n\nconst About: React.SFC<MergedProps> = ({ version, revision }) => {\n    return (\n        <>\n            <Header as=\"h3\">This is LiberTEM version {version} (revision {revision.slice(0, 8)})</Header>\n            <List>\n                <List.Item>\n                    <List.Icon name=\"github\" />\n                    <List.Content>\n                        Find us on <a href=\"https://github.com/LiberTEM/LiberTEM\">GitHub</a>\n                    </List.Content>\n                </List.Item>\n                <List.Item>\n                    <List.Icon name=\"bug\" />\n                    <List.Content>\n                        Found a bug? Got a feature request? Please <a href=\"https://github.com/LiberTEM/LiberTEM/issues/new\">open an issue!</a>\n                    </List.Content>\n                </List.Item>\n                <List.Item>\n                    <List.Icon name=\"legal\" />\n                    <List.Content>\n                        LiberTEM is licensed under the <a href=\"https://github.com/LiberTEM/LiberTEM/blob/master/LICENSE\">GNU General Public License v3.0</a>\n                    </List.Content>\n                </List.Item>\n                <List.Item>\n                    <List.Icon name=\"book\" />\n                    <List.Content>\n                        Read <a href=\"https://libertem.github.io/LiberTEM/\">the documentation</a>\n                    </List.Content>\n                </List.Item>\n                <List.Item>\n                    <List.Icon name=\"user\" />\n                    <List.Content>\n                        Read <a href=\"https://libertem.github.io/LiberTEM/acknowledgments.html\">the acknowledgments</a>\n                    </List.Content>\n                </List.Item>\n                <List.Item>\n                    <List.Icon name=\"gitter\" />\n                    <List.Content>\n                        Join our <a href=\"https://gitter.im/LiberTEM/Lobby\">chat on gitter!</a>\n                    </List.Content>\n                </List.Item>\n                <List.Item>\n                    <List.Icon name=\"linkify\" />\n                    <List.Content>\n                    <a href=\"https://doi.org/10.5281/zenodo.1477847\"><img src=\"https://zenodo.org/badge/DOI/10.5281/zenodo.1477847.svg\" alt=\"doi.org/10.5281/zenodo.1477847\"/></a>\n                    </List.Content>\n                </List.Item>\n            </List>\n        </>\n    );\n}\n\nexport default connect(mapStateToProps)(About);\n","import { genericDelete } from \"../helpers/apiHelpers\";\nimport { ShutdownResponse } from '../messages'\n\nexport async function doShutdown(): Promise<ShutdownResponse> {\n    return await genericDelete(`shutdown/`)\n}\n","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Button, Header, Icon, Modal } from \"semantic-ui-react\";\nimport * as channelActions from \"../../channel/actions\";\nimport { RootReducer } from \"../../store\";\nimport { doShutdown } from \"../api\";\n\nconst mapDispatchToProps = {\n    closeLoopAction: channelActions.Actions.closeloop,\n    shutdownAction: channelActions.Actions.shutdown,\n};\n\nconst mapStateToProps = (state: RootReducer) => {\n    return {\n        channel: state.channelStatus.status,\n    };\n};\n\ntype MergedProps = DispatchProps<typeof mapDispatchToProps> & ReturnType<typeof mapStateToProps>;\n\nclass ShutdownButton extends React.Component<MergedProps> {\n    public state = {\n        modal: false,\n        shutdown: false,\n    };\n\n    public modalOpen = () => {\n        this.setState({ modal: true });\n    };\n\n    public modalClose = () => {\n        this.setState({ modal: false });\n    };\n\n    public handleShutdown = () => {\n        this.setState({ shutdown: true });\n        doShutdown().then((response) => {\n            const timestamp = Date.now();\n            this.props.closeLoopAction(timestamp);\n        });\n    };\n\n    public componentDidUpdate() {\n        if (this.props.channel === \"waiting\" && this.state.shutdown) {\n            const timestamp = Date.now();\n            this.modalClose();\n            this.props.shutdownAction(timestamp);\n        }\n    }\n\n    public render() {\n        return (\n            <Modal\n                trigger={\n                    <Button\n                        content=\"Shutdown\"\n                        icon=\"shutdown\"\n                        onClick={this.modalOpen}\n                        disabled={this.state.shutdown}\n                        labelPosition=\"left\"\n                        floated=\"right\"\n                    />\n                }\n                open={this.state.modal}\n                closeOnDimmerClick={false}\n                onClose={this.modalClose}\n                size=\"mini\"\n            >\n                <Header icon=\"shutdown\" content=\"Confirm shutdown\" />\n                <Modal.Content>\n                    <p>Do you want to shutdown ?</p>\n                </Modal.Content>\n                <Modal.Actions>\n                    <Button onClick={this.modalClose} disabled={this.state.shutdown}>\n                        <Icon name=\"remove\" /> Cancel\n                    </Button>\n                    <Button primary={true} loading={this.state.shutdown} disabled={this.state.shutdown} onClick={this.handleShutdown}>\n                        <Icon name=\"checkmark\" /> Shutdown\n                    </Button>\n                </Modal.Actions>\n            </Modal>\n        );\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ShutdownButton);\n","import React from \"react\";\nimport { Button, Menu, Modal, Popup } from \"semantic-ui-react\";\nimport About from \"./About\";\nimport QuitButton from \"./shutdown/components/ShutdownButton\";\n\nconst HeaderMenu: React.SFC = () => {\n    return (\n        <Menu fixed=\"top\">\n            <Menu.Item>\n                <Modal trigger={<Button content=\"About\" />}>\n                    <Popup.Header>About LiberTEM</Popup.Header>\n                    <Popup.Content>\n                        <About />\n                    </Popup.Content>\n                </Modal>\n            </Menu.Item>\n            <Menu.Menu position=\"right\">\n                <Menu.Item>\n                    <QuitButton />\n                </Menu.Item>\n            </Menu.Menu>\n        </Menu>\n    );\n};\n\nexport default HeaderMenu;\n","import * as React from \"react\";\nimport \"semantic-ui-css/semantic.min.css\";\nimport { Container } from \"semantic-ui-react\";\nimport ChannelStatus from \"./channel/components/ChannelStatus\";\nimport DatasetList from \"./dataset/components/DatasetList\";\nimport ErrorList from \"./errors/components/ErrorList\";\nimport logo from \"./images/LiberTEM logo-medium.png\";\nimport HeaderMenu from \"./Menu\";\n\nclass App extends React.Component {\n    public render() {\n        return (\n            <>\n                <HeaderMenu />\n                <Container style={{ margin: \"5em 1em 5em 1em\" }}>\n                    <div style={{ display: \"flex\" }}>\n                        <img src={logo} width=\"200\" height=\"46\" alt=\"LiberTEM\" style={{ marginBottom: \"20px\" }} />\n                    </div>\n                    <ErrorList />\n                    <ChannelStatus>\n                        <DatasetList />\n                    </ChannelStatus>\n                </Container>\n            </>\n        );\n    }\n}\n\nexport default App;\n","// tslint:disable:no-console\n// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the 'N+1' visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL!,\n      window.location.toString()\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker) {\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the old content will have been purged and\n                // the fresh content will have been added to the cache.\n                // It's the perfect time to display a 'New content is\n                // available; please refresh.' message in your web app.\n                console.log('New content is available; please refresh.');\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // 'Content is cached for offline use.' message.\n                console.log('Content is cached for offline use.');\n              }\n            }\n          };\n        }\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type')!.indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import _ from 'lodash';\nimport { ClusterTypes, MsgPartConfig } from \"../messages\";\nimport { ConfigParams, ConfigState, LocalConfig } from \"./reducers\";\n\nconst CONFIG_KEY = \"LiberTEM.config\";\n\nexport function joinPaths(config: ConfigState, ...parts: string[]) {\n    const removeSep = (part: string) => part.replace(new RegExp(`${_.escapeRegExp(config.separator)}$`), \"\")\n    parts = [removeSep(parts[0]), ...parts.slice(1)];\n    return parts.map(part => part.trim()).join(config.separator);\n}\n\nexport function mergeLocalStorage(serverConfig: MsgPartConfig): ConfigParams {\n    const localSettings = window.localStorage.getItem(CONFIG_KEY);\n    if (localSettings === null) {\n        return Object.assign({}, getDefaultLocalConfig(), serverConfig);\n    }\n    const localSettingsParsed = JSON.parse(localSettings);\n    const defaultConfig = getDefaultLocalConfig();\n    const mergedConfig = Object.assign({}, defaultConfig, serverConfig, localSettingsParsed);\n    return mergedConfig;\n}\n\nexport function setLocalStorage(config: ConfigState): void {\n    const localSettings: LocalConfig = {\n        cwd: config.cwd,\n        lastOpened: config.lastOpened,\n        fileHistory: config.fileHistory,\n        lastConnection: config.lastConnection,\n        starred: config.starred,\n    }\n\n    window.localStorage.setItem(CONFIG_KEY, JSON.stringify(localSettings));\n}\n\nexport function clearLocalStorage(): void {\n    window.localStorage.removeItem(CONFIG_KEY);\n}\n\nexport function getDefaultLocalConfig(): LocalConfig {\n    return {\n        lastOpened: {},\n        fileHistory: [],\n        cwd: \"/\",\n        lastConnection: {\n            type: ClusterTypes.LOCAL,\n            address: \"tcp://localhost:8786\"\n        },\n        starred: [],\n    };\n}\n\nexport function makeUnique<T>(inp: T[]): T[] {\n    return inp.reduce((acc: T[], curr: T) => {\n        if (acc.indexOf(curr) === -1) {\n            return [...acc, curr];\n        } else {\n            return acc;\n        }\n    }, [] as T[]);\n}","import { getApiBasePath } from \"../helpers/apiHelpers\";\nimport { DirectoryListingResponse } from \"../messages\";\n\nexport async function getDirectoryListing(path: string): Promise<DirectoryListingResponse> {\n    const basePath = getApiBasePath();\n    const url = `${basePath}browse/localfs/?path=${encodeURIComponent(path)}`;\n    const r = await fetch(url, {\n        method: 'GET',\n        credentials: \"same-origin\",\n    });\n    return await r.json();\n}","import { ActionCreatorsMapObject } from \"redux\";\nimport { AnalysisDetails, CompoundAnalysisDetails, FollowupPart, MsgPartAnalysis, MsgPartCompoundAnalysis, MsgPartInitialDataset, MsgPartJob } from \"../messages\";\n\nexport interface Message<T extends string> {\n    messageType: T\n}\n\nexport function createMessage<T extends string, O>(messageType: T, attribs: O) {\n    return Object.assign({ messageType }, attribs);\n}\n\nexport enum MessageTypes {\n    INITIAL_STATE = \"INITIAL_STATE\",\n    JOB_STARTED = \"JOB_STARTED\",\n    FINISH_JOB = \"FINISH_JOB\",\n    TASK_RESULT = \"TASK_RESULT\",\n    JOB_ERROR = \"JOB_ERROR\",\n    BINARY = \"BINARY\",\n    OPEN = \"OPEN\",\n    CLOSE = \"CLOSE\",\n    ERROR = \"ERROR\",\n    DELETE_DATASET = \"DELETE_DATASET\",\n    CREATE_DATASET = \"CREATE_DATASET\",\n    CANCEL_JOB_DONE = \"CANCEL_JOB_DONE\",\n    ANALYSIS_CREATED = \"ANALYSIS_CREATED\",\n    ANALYSIS_UPDATED = \"ANALYSIS_UPDATED\",\n    ANALYSIS_REMOVED = \"ANALYSIS_REMOVED\",\n    COMPOUND_ANALYSIS_CREATED = \"COMPOUND_ANALYSIS_CREATED\",\n    COMPOUND_ANALYSIS_UPDATED = \"COMPOUND_ANALYSIS_UPDATED\",\n    COMPOUND_ANALYSIS_REMOVED = \"COMPOUND_ANALYSIS_REMOVED\",\n}\n\nexport const Messages = {\n    initialState: (\n        jobs: MsgPartJob[],\n        datasets: MsgPartInitialDataset[],\n        analyses: MsgPartAnalysis[],\n        compoundAnalyses: MsgPartCompoundAnalysis[]\n    ) => createMessage(MessageTypes.INITIAL_STATE, {\n        jobs, datasets, compoundAnalyses, analyses,\n    }),\n\n    startJob: (job: string, dataset: string) => createMessage(MessageTypes.JOB_STARTED, { job, dataset }),\n    finishJob: (job: string, followup: FollowupPart) => createMessage(MessageTypes.FINISH_JOB, { job, followup }),\n    taskResult: (job: string, followup: FollowupPart) => createMessage(MessageTypes.TASK_RESULT, { job, followup }),\n    jobError: (job: string, msg: string) => createMessage(MessageTypes.JOB_ERROR, { job, msg }),\n    binary: (objectURL: string) => createMessage(MessageTypes.BINARY, { objectURL }),\n    open: () => createMessage(MessageTypes.OPEN, {}),\n    close: () => createMessage(MessageTypes.CLOSE, {}),\n    error: (msg: string) => createMessage(MessageTypes.ERROR, { msg }),\n    deleteDataset: (dataset: string) => createMessage(MessageTypes.DELETE_DATASET, { dataset }),\n    cancelled: (job: string) => createMessage(MessageTypes.CANCEL_JOB_DONE, { job }),\n    analysisCreated: (analysis: string, dataset: string, details: AnalysisDetails) => createMessage(MessageTypes.ANALYSIS_CREATED, { dataset, analysis, details }),\n    analysisUpdated: (analysis: string, dataset: string, details: AnalysisDetails) => createMessage(MessageTypes.ANALYSIS_UPDATED, { dataset, analysis, details }),\n    analysisRemoved: (analysis: string) => createMessage(MessageTypes.ANALYSIS_REMOVED, { analysis }),\n\n    compoundAnalysisCreated: (compoundAnalysis: string, dataset: string, details: CompoundAnalysisDetails) => createMessage(MessageTypes.COMPOUND_ANALYSIS_CREATED, { dataset, compoundAnalysis, details }),\n    compoundAnalysisUpdated: (compoundAnalysis: string, dataset: string, details: CompoundAnalysisDetails) => createMessage(MessageTypes.COMPOUND_ANALYSIS_UPDATED, { dataset, compoundAnalysis, details }),\n    compoundAnalysisRemoved: (compoundAnalysis: string) => createMessage(MessageTypes.ANALYSIS_REMOVED, { compoundAnalysis }),\n}\n\nexport type MessagesUnion<A extends ActionCreatorsMapObject> = ReturnType<A[keyof A]>\nexport type Messages = MessagesUnion<typeof Messages>;\n\n// types of messages sent by the server:\n/*\nexport type InitialStateMessage = ReturnType<typeof Messages.initialState>;\nexport type StartJobMessage = ReturnType<typeof Messages.startJob>;\nexport type FinishJobMessage = ReturnType<typeof Messages.finishJob>;\nexport type TaskResultMessage = ReturnType<typeof Messages.taskResult>;\n*/\n\nexport type BinaryMessage = ReturnType<typeof Messages.binary>;","import { call, fork, put, select, take } from \"redux-saga/effects\";\nimport uuid from 'uuid/v4';\nimport { joinPaths } from \"../config/helpers\";\nimport { ConfigState } from \"../config/reducers\";\nimport { DirectoryListingResponse } from \"../messages\";\nimport { RootReducer } from \"../store\";\nimport * as browserActions from './actions';\nimport { getDirectoryListing } from \"./api\";\nimport { DirectoryBrowserState } from \"./types\";\n\nexport function* directoryListingSaga() {\n    yield fork(fetchOnRequest);\n    yield fork(fetchDirectoryListOnOpen);\n}\n\nfunction* fetchOnRequest() {\n    while (true) {\n        const action: ReturnType<typeof browserActions.Actions.list> = yield take(browserActions.ActionTypes.LIST_DIRECTORY);\n\n        const { name, path } = action.payload;\n        const config: ConfigState = yield select((state: RootReducer) => state.config);\n        const newPath = name !== undefined ? joinPaths(config, path, name) : path;\n        yield fork(fetchDirectoryListing, newPath);\n    }\n}\n\nfunction* fetchDirectoryListing(path: string) {\n    try {\n        const result: DirectoryListingResponse = yield call(getDirectoryListing, path);\n        if (result.status === \"ok\") {\n            yield put(browserActions.Actions.dirListing(result.path, result.dirs, result.files, result.drives, result.places));\n        } else if (result.status === \"error\") {\n            const browserState: DirectoryBrowserState = yield select((state: RootReducer) => state.browser);\n            const timestamp = Date.now();\n            const id = uuid();\n            const alternative = result.alternative ? result.alternative : browserState.places.home.path;\n            // Don't show an error, if it's due to last recent directory not being available\n            const config: ConfigState = yield select((state: RootReducer) => state.config);\n            if (config.cwd !== path) {\n              yield put(browserActions.Actions.error(`Error browsing directory: ${result.msg}`, timestamp, id));\n            }\n            yield put(browserActions.Actions.list(alternative));\n        }\n    } catch (e) {\n        const browserState: DirectoryBrowserState = yield select((state: RootReducer) => state.browser);\n        const timestamp = Date.now();\n        const id = uuid();\n        yield put(browserActions.Actions.error(`Error browsing directory: ${e.toString()}`, timestamp, id));\n        yield put(browserActions.Actions.list(browserState.places.home.path));\n    }\n}\n\nfunction* fetchDirectoryListOnOpen() {\n    while (true) {\n        yield take(browserActions.ActionTypes.OPEN);\n        const config: ConfigState = yield select((state: RootReducer) => state.config);\n        yield put(browserActions.Actions.list(config.cwd));\n    }\n}\n","import { END, eventChannel, EventChannel } from \"redux-saga\";\nimport { call, delay, fork, put, take } from \"redux-saga/effects\";\nimport uuid from \"uuid/v4\";\nimport * as datasetActions from \"../dataset/actions\";\nimport { getApiWSURL } from \"../helpers/apiHelpers\";\nimport * as channelActions from \"./actions\";\nimport * as channelMessages from \"./messages\";\n\ntype SocketChannel = EventChannel<channelMessages.Messages>;\n\n/**\n * create typesafe messages from the websocket messages\n *\n * also creates some synthetic events like open, close, error\n */\nfunction createWebSocketChannel(/* addr */): SocketChannel {\n    return eventChannel((emit) => {\n        function onMessage(msg: MessageEvent) {\n            if (msg.data instanceof Blob) {\n                // TODO: cleanup createObjectURL results somewhere\n                emit(channelMessages.Messages.binary(URL.createObjectURL(msg.data)));\n            } else {\n                const parsed = JSON.parse(msg.data) as channelMessages.Messages;\n                emit(parsed);\n            }\n        }\n\n        function onOpen() {\n            emit(channelMessages.Messages.open());\n        }\n\n        function onClose() {\n            emit(channelMessages.Messages.close());\n            emit(END);\n        }\n\n        function onError(err: Event) {\n            emit(channelMessages.Messages.error(\"Error in weboscket connection\"));\n        }\n\n        const ws = new WebSocket(getApiWSURL());\n        ws.addEventListener(\"message\", onMessage);\n        ws.addEventListener(\"open\", onOpen);\n        ws.addEventListener(\"close\", onClose);\n        ws.addEventListener(\"error\", onError);\n\n        // return cleanup function:\n        return () => {\n            ws.removeEventListener(\"message\", onMessage);\n            ws.removeEventListener(\"open\", onOpen);\n            ws.removeEventListener(\"close\", onClose);\n            ws.removeEventListener(\"error\", onError);\n            // TODO: close connection if still open\n            // (or is it guaranteed that if an error was thrown, the connection is closed?)\n        };\n    });\n}\n\n/**\n * handles the connection lifecycle for our websocket\n */\nexport function* webSocketSaga() {\n    while (true) {\n        const socketChannel = yield call(createWebSocketChannel);\n        yield fork(actionsFromChannel, socketChannel);\n        const action: channelActions.Actions = yield take([channelActions.ActionTypes.OPEN, channelActions.ActionTypes.CLOSE]);\n        if (action.type === channelActions.ActionTypes.OPEN) {\n            const isShutdown: channelActions.Actions = yield take([\n                channelActions.ActionTypes.CLOSE,\n                channelActions.ActionTypes.ERROR,\n                channelActions.ActionTypes.CLOSE_LOOP,\n            ]);\n            if (isShutdown.type === channelActions.ActionTypes.CLOSE_LOOP) {\n                break;\n            }\n        }\n        yield delay(1000);\n    }\n}\n\n/**\n * translates the messages from the channel to redux actions, handles aggregation etc.\n */\nexport function* actionsFromChannel(socketChannel: SocketChannel) {\n    try {\n        while (true) {\n            const msg = yield take(socketChannel);\n            const timestamp = Date.now();\n            switch (msg.messageType) {\n                case channelMessages.MessageTypes.OPEN: {\n                    yield put(channelActions.Actions.open(timestamp));\n                    break;\n                }\n                case channelMessages.MessageTypes.CLOSE: {\n                    yield put(channelActions.Actions.close(timestamp));\n                    break;\n                }\n                case channelMessages.MessageTypes.ERROR: {\n                    const id = uuid();\n                    yield put(channelActions.Actions.error(msg.msg, timestamp, id));\n                    break;\n                }\n                case channelMessages.MessageTypes.INITIAL_STATE: {\n                    yield put(channelActions.Actions.initialState(msg.jobs, msg.datasets, msg.compoundAnalyses, msg.analyses, timestamp));\n                    break;\n                }\n                case channelMessages.MessageTypes.JOB_STARTED: {\n                    yield put(channelActions.Actions.jobStarted(msg.job, msg.details.dataset, timestamp));\n                    break;\n                }\n                case channelMessages.MessageTypes.FINISH_JOB: {\n                    yield call(handleFinishJob, msg, socketChannel, timestamp);\n                    break;\n                }\n                case channelMessages.MessageTypes.TASK_RESULT: {\n                    yield call(handleTaskResult, msg, socketChannel, timestamp);\n                    break;\n                }\n                case channelMessages.MessageTypes.CREATE_DATASET: {\n                    yield put(datasetActions.Actions.created(msg.details));\n                    break;\n                }\n                case channelMessages.MessageTypes.DELETE_DATASET: {\n                    yield put(datasetActions.Actions.deleted(msg.dataset));\n                    break;\n                }\n                case channelMessages.MessageTypes.JOB_ERROR: {\n                    const id = uuid();\n                    yield put(channelActions.Actions.jobError(msg.job, msg.msg, id, timestamp));\n                    break;\n                }\n                case channelMessages.MessageTypes.CANCEL_JOB_DONE: {\n                    yield put(channelActions.Actions.cancelled(msg.job));\n                    break;\n                }\n                /*\n                // FIXME: server needs to know about compount analyses\n                case channelMessages.MessageTypes.ANALYSIS_CREATED: {\n                    yield put(channelActions.Actions.analysisCreated(\n                        msg.analysis,\n                        msg.dataset,\n                        msg.details,\n                    ));\n                    break;\n                }\n                case channelMessages.MessageTypes.ANALYSIS_UPDATED: {\n                    yield put(channelActions.Actions.analysisUpdated(\n                        msg.analysis,\n                        msg.dataset,\n                        msg.details,\n                    ));\n                    break;\n                }\n                case channelMessages.MessageTypes.ANALYSIS_REMOVED: {\n                    yield put(channelActions.Actions.analysisRemoved(\n                        msg.analysis,\n                    ));\n                    break;\n                }\n                */\n            }\n        }\n    } finally {\n        // disconnected\n    }\n}\n\nexport function* handleBinaryParts(numParts: number, socketChannel: SocketChannel) {\n    const parts: channelMessages.BinaryMessage[] = [];\n    while (parts.length < numParts) {\n        const binMsg = yield take(socketChannel);\n        parts.push(binMsg);\n    }\n    return parts;\n}\n\nexport function* handleTaskResult(msg: ReturnType<typeof channelMessages.Messages.taskResult>, socketChannel: SocketChannel, timestamp: number) {\n    const parts: channelMessages.BinaryMessage[] = yield call(handleBinaryParts, msg.followup.numMessages, socketChannel);\n    const images = parts.map((part, idx) => ({ imageURL: part.objectURL, description: msg.followup.descriptions[idx] }));\n    yield put(channelActions.Actions.taskResult(msg.job, images, timestamp));\n}\n\nexport function* handleFinishJob(msg: ReturnType<typeof channelMessages.Messages.finishJob>, socketChannel: SocketChannel, timestamp: number) {\n    const parts: channelMessages.BinaryMessage[] = yield call(handleBinaryParts, msg.followup.numMessages, socketChannel);\n    const images = parts.map((part, idx) => ({ imageURL: part.objectURL, description: msg.followup.descriptions[idx] }));\n    yield put(channelActions.Actions.finishJob(msg.job, images, timestamp));\n}\n","import { genericPut, getApiBasePath } from \"../helpers/apiHelpers\";\nimport { ConnectRequest, ConnectRequestParams, ConnectResponse } from \"../messages\";\n\nexport async function connectToCluster(params: ConnectRequestParams): Promise<ConnectResponse> {\n    const payload: ConnectRequest = {\n        connection: params\n    }\n    return await genericPut(\"config/connection/\", payload);\n}\n\nexport async function checkClusterConnection(): Promise<ConnectResponse> {\n    const basePath = getApiBasePath();\n    const r = await fetch(`${basePath}config/connection/`, {\n        method: 'GET',\n    });\n    return await r.json();\n}","import { ActionsUnion, createAction } from \"../helpers/actionHelpers\";\nimport { AnalysisDetails, AnalysisTypes } from \"../messages\";\nimport { AnalysisState } from \"./types\";\n\n\nexport enum ActionTypes {\n    CREATE = 'ANALYSIS_CREATE',\n    CREATED = 'ANALYSIS_CREATED',\n    UPDATED = 'ANALYSIS_UPDATED',\n    REMOVE = 'ANALYSIS_REMOVE',\n    REMOVED = 'ANALYSIS_REMOVED',\n    ERROR = 'ANALYSIS_ERROR',\n}\n\nexport const Actions = {\n    create: (\n        dataset: string, analysisType: AnalysisTypes\n    ) => createAction(ActionTypes.CREATE, { dataset, analysisType }),\n\n    created: (\n        analysis: AnalysisState, compoundAnalysis: string, analysisIndex: number\n    ) => createAction(ActionTypes.CREATED, {\n        analysis, compoundAnalysis, analysisIndex\n    }),\n\n    updated: (\n        id: string, details: AnalysisDetails\n    ) => createAction(ActionTypes.UPDATED, { id, details }),\n\n    remove: (id: string) => createAction(ActionTypes.REMOVE, { id }),\n    removed: (id: string) => createAction(ActionTypes.REMOVED, { id }),\n    error: (\n        msg: string, timestamp: number, id: string\n    ) => createAction(ActionTypes.ERROR, { msg, timestamp, id }),\n}\n\nexport type Actions = ActionsUnion<typeof Actions>;\n\nexport type ActionParts = {\n    [K in keyof typeof Actions]: ReturnType<typeof Actions[K]>\n}\n","import { all, call, put, take, takeEvery } from \"redux-saga/effects\";\nimport uuid from 'uuid/v4';\nimport * as channelActions from '../channel/actions';\nimport { ConnectResponse } from \"../messages\";\nimport * as clusterActions from './actions';\nimport { checkClusterConnection, connectToCluster } from \"./api\";\n\nfunction* connectSaga(action: ReturnType<typeof clusterActions.Actions.connect>) {\n    yield put(clusterActions.Actions.connecting())\n    const conn: ConnectResponse = yield call(connectToCluster, action.payload.params);\n    yield call(putClusterStatus, conn);\n}\n\nfunction* putClusterStatus(conn: ConnectResponse) {\n    if (conn.status === \"ok\") {\n        yield put(clusterActions.Actions.connected(conn.connection.connection));\n    } else if (conn.status === \"error\") {\n        yield put(clusterActions.Actions.notConnected());\n        const timestamp = Date.now();\n        const id = uuid();\n        yield put(clusterActions.Actions.error(`error connecting to cluster: ${conn.msg}`,timestamp, id));\n    } else {\n        yield put(clusterActions.Actions.notConnected());\n    }\n}\n\n/**\n * when the channel is connected, check if cluster is connected and update status accordingly\n */\nfunction* trackClusterConnection() {\n    while (true) {\n        yield take(channelActions.ActionTypes.OPEN)\n        const conn: ConnectResponse = yield call(checkClusterConnection);\n        yield call(putClusterStatus, conn);\n    }\n}\n\nexport function* clusterConnectionSaga() {\n    yield takeEvery(clusterActions.ActionTypes.CONNECT, connectSaga);\n    yield all([\n        trackClusterConnection(),\n    ])\n}","import { ActionsUnion, createAction } from \"../helpers/actionHelpers\";\n\nexport enum ActionTypes {\n    CREATE = 'JOB_CREATE',\n}\n\nexport const Actions = {\n    create: (id: string, analysis: string, timestamp: number) => createAction(ActionTypes.CREATE, { id, analysis, timestamp }),\n}\n\nexport type Actions = ActionsUnion<typeof Actions>;\n\nexport type ActionParts = {\n    [K in keyof typeof Actions]: ReturnType<typeof Actions[K]>\n}","import { genericDelete, genericPut } from \"../helpers/apiHelpers\";\nimport { CancelJobResponse, StartJobRequest, StartJobResponse } from \"../messages\";\n\nexport async function startJob(jobId: string, analysis: string): Promise<StartJobResponse> {\n    const payload: StartJobRequest = {\n        job: {\n            analysis,\n        }\n    }\n    return await genericPut(`jobs/${jobId}/`, payload);\n}\n\nexport async function cancelJob(jobId: string): Promise<CancelJobResponse> {\n    return await genericDelete(`jobs/${jobId}/`);\n}\n\n\n","import { genericDelete, genericPut } from \"../helpers/apiHelpers\";\nimport { AnalysisDetails, CompoundAnalysisDetails, CreateAnalysisResponse, CreateCompoundAnalysisResponse, CreateOrUpdateAnalysisRequest, CreateOrUpdateCompoundAnalysisRequest, RemoveAnalysisResponse, RemoveCompoundAnalysisResponse } from \"../messages\";\n\nexport async function createOrUpdateAnalysis(\n    compoundAnalysisId: string, analysisId: string,\n    dataset: string, details: AnalysisDetails\n): Promise<CreateAnalysisResponse> {\n    const payload: CreateOrUpdateAnalysisRequest = {\n        dataset,\n        details,\n    };\n    return await genericPut(`compoundAnalyses/${compoundAnalysisId}/analyses/${analysisId}/`, payload);\n}\n\nexport async function removeAnalysis(compoundAnalysisId: string, analysisId: string): Promise<RemoveAnalysisResponse> {\n    return await genericDelete(`compoundAnalyses/${compoundAnalysisId}/analyses/${analysisId}/`)\n}\n\nexport async function createOrUpdateCompoundAnalysis(compoundAnalysisId: string, dataset: string, details: CompoundAnalysisDetails): Promise<CreateCompoundAnalysisResponse> {\n    const payload: CreateOrUpdateCompoundAnalysisRequest = {\n        dataset,\n        details,\n    };\n    return await genericPut(`compoundAnalyses/${compoundAnalysisId}/`, payload);\n}\n\nexport async function removeCompoundAnalysis(compoundAnalysisId: string): Promise<RemoveCompoundAnalysisResponse> {\n    return await genericDelete(`compoundAnalyses/${compoundAnalysisId}/`)\n}\n","import { buffers, Task } from 'redux-saga';\nimport { actionChannel, call, cancel, fork, put, select, take, takeEvery } from 'redux-saga/effects';\nimport uuid from 'uuid/v4';\nimport * as analysisActions from '../analysis/actions';\nimport { AnalysisState } from '../analysis/types';\nimport * as channelActions from '../channel/actions';\nimport * as jobActions from '../job/actions';\nimport { cancelJob, startJob } from '../job/api';\nimport { JobState } from '../job/types';\nimport { AnalysisDetails, DatasetState, DatasetStatus } from '../messages';\nimport { RootReducer } from '../store';\nimport * as compoundAnalysisActions from './actions';\nimport { createOrUpdateAnalysis, createOrUpdateCompoundAnalysis, removeAnalysis, removeCompoundAnalysis } from \"./api\";\nimport { CompoundAnalysis, CompoundAnalysisState } from './types';\n\nfunction selectDataset(state: RootReducer, dataset: string) {\n    return state.datasets.byId[dataset];\n}\n\nfunction selectCompoundAnalysis(state: RootReducer, id: string) {\n    return state.compoundAnalyses.byId[id];\n}\n\nfunction selectAnalysis(state: RootReducer, id: string) {\n    return state.analyses.byId[id];\n}\n\nfunction selectJob(state: RootReducer, id: string) {\n    return state.jobs.byId[id];\n}\n\nexport function* cleanupOnRemove(compoundAnalysis: CompoundAnalysis, sidecarTask: Task) {\n    while (true) {\n        const removeAction: ReturnType<typeof compoundAnalysisActions.Actions.remove> = yield take(compoundAnalysisActions.ActionTypes.REMOVE);\n        if (removeAction.payload.id === compoundAnalysis.compoundAnalysis) {\n            yield cancel(sidecarTask);\n        }\n    }\n}\n\nexport function* createCompoundAnalysisSaga(action: ReturnType<typeof compoundAnalysisActions.Actions.create>) {\n    try {\n        const datasetState: DatasetState = yield select(selectDataset, action.payload.dataset)\n        if (datasetState.status !== DatasetStatus.OPEN) {\n            throw new Error(\"invalid dataset status\");\n        }\n        const compoundAnalysis: CompoundAnalysis = {\n            compoundAnalysis: uuid(),\n            dataset: action.payload.dataset,\n            details: {\n                mainType: action.payload.analysisType,\n                analyses: [],\n            }\n        }\n\n        yield call(\n            createOrUpdateCompoundAnalysis,\n            compoundAnalysis.compoundAnalysis,\n            compoundAnalysis.dataset,\n            compoundAnalysis.details,\n        );\n\n        const sidecarTask = yield fork(analysisSidecar, compoundAnalysis.compoundAnalysis, { doAutoStart: true });\n\n        yield put(compoundAnalysisActions.Actions.created(compoundAnalysis, true));\n        yield fork(cleanupOnRemove, compoundAnalysis, sidecarTask);\n    } catch (e) {\n        const timestamp = Date.now();\n        const id = uuid();\n        yield put(compoundAnalysisActions.Actions.error(`Error creating analysis: ${e.toString()}`, timestamp, id));\n    }\n}\n\nexport function* createFromServerState(action: ReturnType<typeof channelActions.Actions.initialState>) {\n    for (const msgPart of action.payload.compoundAnalyses) {\n        const compoundAnalysis: CompoundAnalysisState = yield select(selectCompoundAnalysis, msgPart.compoundAnalysis);\n        const sidecarTask = yield fork(analysisSidecar, compoundAnalysis.compoundAnalysis, { doAutoStart: false });\n        yield fork(cleanupOnRemove, compoundAnalysis, sidecarTask);\n    }\n}\n\nexport function* cancelOldJob(analysis: AnalysisState, jobIndex: number) {\n    const jobId = analysis.jobs[jobIndex];\n    if (jobId === undefined) {\n        return;\n    } else {\n        const job: JobState = yield select(selectJob, jobId);\n        if (job.running !== \"DONE\") {\n            yield call(cancelJob, jobId);\n        }\n    }\n}\n\nexport function* createOrUpdate(\n    compoundAnalysis: CompoundAnalysisState, analysisId: string | undefined,\n    analysisIndex: number, details: AnalysisDetails\n) {\n    if (analysisId) {\n        // update the analysis on the server:\n        yield call(createOrUpdateAnalysis,\n            compoundAnalysis.compoundAnalysis, analysisId,\n            compoundAnalysis.dataset, details\n        );\n        yield put(analysisActions.Actions.updated(analysisId, details));\n\n        const analysis: AnalysisState = yield select(selectAnalysis, analysisId);\n        const jobs = analysis.jobs ? analysis.jobs : [];\n\n        for (const oldJobId of jobs) {\n            const job: JobState = yield select(selectJob, oldJobId);\n            if (job && job.running !== \"DONE\") {\n                // wait until the job is cancelled:\n                yield call(cancelJob, oldJobId);\n            }\n        }\n        return analysisId;\n    } else {\n        // create the analysis on the server:\n        const newAnalysisId = uuid();\n        yield call(createOrUpdateAnalysis,\n            compoundAnalysis.compoundAnalysis, newAnalysisId,\n            compoundAnalysis.dataset, details\n        );\n        yield put(analysisActions.Actions.created({\n            id: newAnalysisId,\n            dataset: compoundAnalysis.dataset,\n            details,\n            jobs: [],\n        }, compoundAnalysis.compoundAnalysis, analysisIndex));\n\n        const updatedCompoundAnalysis = yield select(selectCompoundAnalysis, compoundAnalysis.compoundAnalysis);\n\n        yield call(\n            createOrUpdateCompoundAnalysis,\n            updatedCompoundAnalysis.compoundAnalysis,\n            updatedCompoundAnalysis.dataset,\n            updatedCompoundAnalysis.details,\n        );\n        return newAnalysisId;\n    }\n}\n\nexport function* analysisSidecar(compoundAnalysisId: string, options: { doAutoStart: boolean }) {\n    // channel for incoming actions:\n    // all actions that arrive while we block in `call` will be buffered here.\n    // because the buffer is sliding of size 1, we only keep the latest action!\n    const runOrParamsChannel = yield actionChannel(compoundAnalysisActions.ActionTypes.RUN, buffers.sliding(2));\n\n    while (true) {\n        try {\n            const action: compoundAnalysisActions.ActionParts[\"run\"] = yield take(runOrParamsChannel);\n\n            // ignore actions meant for other analyses\n            if (action.payload.id !== compoundAnalysisId) {\n                continue;\n            }\n\n            // get the current state incl. configuration\n            const compoundAnalysis: CompoundAnalysisState = yield select(selectCompoundAnalysis, compoundAnalysisId);\n            const { analysisIndex, details } = action.payload;\n\n            const existingAnalysisId = compoundAnalysis.details.analyses[analysisIndex];\n            const analysisId = yield call(createOrUpdate, compoundAnalysis, existingAnalysisId, analysisIndex, details);\n\n            // prepare running the job:\n            const jobId = uuid();\n            yield put(jobActions.Actions.create(jobId, analysisId, Date.now()));\n\n            // FIXME: we have a race here, as the websocket msg FINISH_JOB may\n            // arrive before call(startJob, ...) returns. this causes the apply button\n            // to feel unresponsive (the action gets done, but only after we finish here...)\n            // best reproduced in \"Slow 3G\" network simulation mode in devtools\n\n            // wait until the job is started\n            yield call(startJob, jobId, analysisId);\n            yield put(compoundAnalysisActions.Actions.running(compoundAnalysis.compoundAnalysis, jobId, analysisIndex));\n            // tslint:disable-next-line:no-empty\n        } catch (e) {\n            const timestamp = Date.now();\n            const id = uuid();\n            yield put(compoundAnalysisActions.Actions.error(`Error running analysis: ${e.toString()}`, timestamp, id));\n        }\n    }\n}\n\nfunction* removeJobsForAnalysis(analysis: AnalysisState) {\n    for (const oldJobId of analysis.jobs) {\n        const job: JobState = yield select(selectJob, oldJobId);\n        if (job && job.running !== \"DONE\") {\n            // wait until the job is cancelled:\n            yield call(cancelJob, oldJobId);\n        }\n    }\n}\n\nexport function* doRemoveAnalysisSaga(action: ReturnType<typeof compoundAnalysisActions.Actions.remove>) {\n    const compoundAnalysis: CompoundAnalysisState = yield select(selectCompoundAnalysis, action.payload.id);\n    try {\n        for (const analysisId of compoundAnalysis.details.analyses) {\n            const analysis: AnalysisState = yield select(selectAnalysis, analysisId);\n            yield call(removeJobsForAnalysis, analysis);\n            yield call(removeAnalysis, compoundAnalysis.compoundAnalysis, analysisId);\n            yield put(analysisActions.Actions.removed(analysisId));\n        }\n        yield call(removeCompoundAnalysis, action.payload.id);\n    } finally {\n        yield put(compoundAnalysisActions.Actions.removed(action.payload.id));\n    }\n}\n\nexport function* analysisRootSaga() {\n    yield takeEvery(compoundAnalysisActions.ActionTypes.CREATE, createCompoundAnalysisSaga);\n    yield takeEvery(compoundAnalysisActions.ActionTypes.REMOVE, doRemoveAnalysisSaga);\n    yield takeEvery(channelActions.ActionTypes.INITIAL_STATE, createFromServerState);\n}","import { getApiBasePath } from \"../helpers/apiHelpers\";\nimport { GetConfigResponse } from \"../messages\";\n\nexport async function getConfig(): Promise<GetConfigResponse> {\n    const basePath = getApiBasePath();\n    const r = await fetch(`${basePath}config/`, {\n        method: \"GET\",\n        credentials: \"same-origin\",\n    });\n    return await r.json();\n}","import { call, fork, put, select, take, takeEvery } from 'redux-saga/effects';\nimport uuid from 'uuid/v4';\nimport * as browserActions from '../browser/actions';\nimport * as channelActions from '../channel/actions';\nimport * as clusterActions from '../cluster/actions';\nimport * as datasetActions from '../dataset/actions';\nimport { GetConfigResponse } from '../messages';\nimport { RootReducer } from '../store';\nimport * as configActions from './actions';\nimport { getConfig } from './api';\nimport { clearLocalStorage, getDefaultLocalConfig, mergeLocalStorage, setLocalStorage } from './helpers';\nimport { ConfigState } from './reducers';\n\nfunction* getConfigOnReconnect() {\n    yield takeEvery(channelActions.ActionTypes.OPEN, getConfigSaga);\n}\n\n/**\n * get config from server and try to merge in the localStorage config\n */\nfunction* getConfigSaga() {\n    yield put(configActions.Actions.fetch());\n    const configResponse: GetConfigResponse = yield call(getConfig);\n    try {\n        const mergedConfig = mergeLocalStorage(configResponse.config);\n        yield put(configActions.Actions.fetched(mergedConfig));\n    } catch (e) {\n        try {\n            clearLocalStorage();\n            // tslint:disable-next-line:no-empty\n        } catch (e) { }\n        const defaultConfig = Object.assign({}, configResponse.config, getDefaultLocalConfig());\n        yield put(configActions.Actions.fetched(defaultConfig));\n    }\n}\n\n/**\n * update localStorage config on opening files or using the file browser\n */\nfunction* updateLocalStorageConfig() {\n    while (true) {\n        yield take([\n            datasetActions.ActionTypes.CREATE,\n            browserActions.ActionTypes.DIRECTORY_LISTING,\n            clusterActions.ActionTypes.CONNECTED,\n            configActions.ActionTypes.TOGGLE_STAR,\n        ]);\n        const config: ConfigState = yield select((state: RootReducer) => state.config);\n        setLocalStorage(config);\n    }\n}\n\nexport function* firstConfigFetch() {\n    try {\n        yield call(getConfigSaga);\n    } catch (e) {\n        const timestamp = Date.now();\n        const id = uuid();\n        yield put(configActions.Actions.fetchFailed(`failed to fetch config: ${e.toString()}`, timestamp, id));\n    }\n}\n\nexport function* configRootSaga() {\n    yield fork(firstConfigFetch);\n    yield fork(getConfigOnReconnect);\n    yield fork(updateLocalStorageConfig);\n}","import { call, put, select, takeEvery } from 'redux-saga/effects';\nimport uuid from 'uuid/v4';\nimport * as browserActions from '../browser/actions';\nimport { joinPaths } from '../config/helpers';\nimport { ConfigState } from '../config/reducers';\nimport { DetectDatasetResponse, OpenDatasetResponse } from '../messages';\nimport { RootReducer } from '../store';\nimport * as datasetActions from \"./actions\";\nimport { deleteDataset, detectDataset, openDataset } from './api';\nimport { isKnownDatasetType } from './helpers';\n\n\nexport function* createDatasetSaga(action: ReturnType<typeof datasetActions.Actions.create>) {\n    try {\n        const resp: OpenDatasetResponse = yield call(openDataset, action.payload.dataset.id, { dataset: action.payload.dataset });\n        if (resp.status === \"ok\") {\n            yield put(datasetActions.Actions.created(resp.details));\n        } else if (resp.status === \"error\") {\n            const timestamp = Date.now();\n            const id = uuid();\n            yield put(datasetActions.Actions.error(resp.dataset, resp.msg, timestamp, id));\n        }\n    } catch (e) {\n        const timestamp = Date.now();\n        const id = uuid();\n        yield put(datasetActions.Actions.error(action.payload.dataset.id, `Error loading dataset: ${e.toString()}`, timestamp, id));\n    }\n}\n\nexport function* deleteDatasetSaga(action: ReturnType<typeof datasetActions.Actions.delete>) {\n    try {\n        yield call(deleteDataset, action.payload.dataset);\n    } catch (e) {\n        const timestamp = Date.now();\n        const id = uuid();\n        yield put(datasetActions.Actions.error(action.payload.dataset, `Error closing dataset: ${e.toString()}`, timestamp, id));\n    }\n}\n\nexport function* doDetectDataset(fullPath: string) {\n    yield put(datasetActions.Actions.detect(fullPath));\n    const detectResult: DetectDatasetResponse = yield call(detectDataset, fullPath);\n    let detectedParams;\n    let shouldOpen = true;\n    if (detectResult.status === \"ok\") {\n        if (isKnownDatasetType(detectResult.datasetParams.type)) {\n          detectedParams = detectResult.datasetParams;\n          yield put(datasetActions.Actions.detected(fullPath, detectResult.datasetParams));\n        }\n        else {\n          const timestamp = Date.now();\n          const id = uuid();\n          yield put(datasetActions.Actions.detectFailed(fullPath));\n          shouldOpen = false;\n          yield put(datasetActions.Actions.error(id, detectResult.datasetParams.type + ` dataset type is currently not supported in the GUI`, timestamp, id));\n        }\n    } else {\n        yield put(datasetActions.Actions.detectFailed(fullPath));\n    }\n    return [detectedParams, shouldOpen];\n}\n\nexport function* doOpenDataset(fullPath: string) {\n    const config: ConfigState = yield select((state: RootReducer) => state.config);\n    const cachedParams = config.lastOpened[fullPath];\n    let detectedParams;\n    let shouldOpen = true;\n    try {\n      const doDetectDatasetRes = yield call(doDetectDataset, fullPath);\n      detectedParams = doDetectDatasetRes[0];\n      shouldOpen = doDetectDatasetRes[1];\n    } catch (e) {\n        yield put(datasetActions.Actions.detectFailed(fullPath));\n    }\n    if(shouldOpen) {\n      yield put(datasetActions.Actions.open(fullPath, cachedParams, detectedParams));\n    }\n}\n\nexport function* openDatasetSagaFullPath(action: ReturnType<typeof browserActions.Actions.selectFullPath>) {\n    const fullPath = action.payload.path;\n    yield call(doOpenDataset, fullPath);\n}\n\nexport function* openDatasetSaga(action: ReturnType<typeof browserActions.Actions.select>) {\n    const config: ConfigState = yield select((state: RootReducer) => state.config);\n    const fullPath = joinPaths(config, action.payload.path, action.payload.name);\n    yield call(doOpenDataset, fullPath);\n}\n\nexport function* datasetRootSaga() {\n    yield takeEvery(datasetActions.ActionTypes.CREATE, createDatasetSaga);\n    yield takeEvery(datasetActions.ActionTypes.DELETE, deleteDatasetSaga);\n    yield takeEvery(browserActions.ActionTypes.SELECT, openDatasetSaga);\n    yield takeEvery(browserActions.ActionTypes.SELECT_FULL_PATH, openDatasetSagaFullPath);\n}\n","import { all } from 'redux-saga/effects';\nimport { directoryListingSaga } from './browser/sagas';\nimport { webSocketSaga } from './channel/sagas';\nimport { clusterConnectionSaga } from './cluster/sagas';\nimport { analysisRootSaga } from './compoundAnalysis/sagas';\nimport { configRootSaga } from './config/sagas';\nimport { datasetRootSaga } from './dataset/sagas';\n\nexport function* rootSaga() {\n    yield all([\n        configRootSaga(),\n        webSocketSaga(),\n        analysisRootSaga(),\n        datasetRootSaga(),\n        clusterConnectionSaga(),\n        directoryListingSaga(),\n    ]);\n}","import { AllActions } from \"../actions\";\nimport * as channelActions from '../channel/actions';\nimport { ById, constructById, filterWithPred, insertById, updateById } from \"../helpers/reducerHelpers\";\nimport * as jobActions from '../job/actions';\nimport * as analysisActions from \"./actions\";\nimport { AnalysisState } from \"./types\";\n\n\nexport type AnalysisReducerState = ById<AnalysisState>;\n\nconst initialAnalysisState: AnalysisReducerState = {\n    byId: {},\n    ids: [],\n}\n\nexport function analysisReducer(state = initialAnalysisState, action: AllActions): AnalysisReducerState {\n    switch (action.type) {\n        case analysisActions.ActionTypes.CREATED: {\n            return insertById(state, action.payload.analysis.id, action.payload.analysis);\n        }\n        case analysisActions.ActionTypes.REMOVED: {\n            return filterWithPred(state, (r: AnalysisState) => r.id !== action.payload.id);\n        }\n        case analysisActions.ActionTypes.UPDATED: {\n            return updateById(state, action.payload.id, {\n                details: action.payload.details,\n            });\n        }\n        case jobActions.ActionTypes.CREATE: {\n            const analysis = state.byId[action.payload.analysis];\n            // FIXME: remove old jobs\n            const oldJobs = analysis.jobs ? analysis.jobs : [];\n            return updateById(state, action.payload.analysis, {\n                jobs: [action.payload.id, ...oldJobs],\n            })\n        }\n        case channelActions.ActionTypes.INITIAL_STATE: {\n            const analysisState: AnalysisState[] = action.payload.analyses.map(item => {\n                return {\n                    doAutoStart: false,\n                    id: item.analysis,\n                    dataset: item.dataset,\n                    details: item.details,\n                    // FIXME: add jobs!\n                    jobs: item.jobs,\n                };\n            });\n            return {\n                byId: constructById(analysisState, analysis => analysis.id),\n                ids: action.payload.analyses.map(analysis => analysis.analysis),\n            }\n        }\n        case channelActions.ActionTypes.FINISH_JOB:\n        case channelActions.ActionTypes.TASK_RESULT: {\n            const analysisIdForJob = state.ids.find(id => {\n                const analysis = state.byId[id];\n                const jobs = analysis.jobs ? analysis.jobs : [];\n                return jobs.some(job => job === action.payload.job)\n            });\n            if (!analysisIdForJob) {\n                return state;\n            }\n            return updateById(state, analysisIdForJob, {\n                displayedJob: action.payload.job,\n            });\n        }\n    }\n    return state;\n}\n","import { AllActions } from \"../actions\";\nimport * as configActions from '../config/actions';\nimport { DirectoryListingDetails, FSPlace } from \"../messages\";\nimport * as browserActions from './actions';\nimport { DirectoryBrowserState } from \"./types\";\n\nconst initialBrowserState: DirectoryBrowserState = {\n    isOpen: false,\n    isLoading: true,\n    path: \"/\",\n    drives: [],\n    places: {},\n    files: [] as DirectoryListingDetails[],\n    dirs: [] as DirectoryListingDetails[],\n}\n\nexport function directoryBrowserReducer(state: DirectoryBrowserState = initialBrowserState, action: AllActions): DirectoryBrowserState {\n    switch (action.type) {\n        case configActions.ActionTypes.FETCHED: {\n            return Object.assign({}, state, {\n                path: action.payload.config.cwd,\n            })\n        }\n        case browserActions.ActionTypes.OPEN: {\n            return Object.assign({}, state, {\n                isOpen: true,\n            })\n        }\n        case browserActions.ActionTypes.CANCEL: {\n            return Object.assign({}, state, {\n                isOpen: false,\n            })\n        }\n        case browserActions.ActionTypes.LIST_DIRECTORY: {\n            return Object.assign({}, state, {\n                isLoading: true,\n            })\n        }\n        case browserActions.ActionTypes.DIRECTORY_LISTING: {\n            const places = action.payload.places.reduce((acc, place: FSPlace) => {\n                return Object.assign({}, acc, {\n                    [place.key]: place,\n                })\n            }, {});\n            return Object.assign({}, state, {\n                isLoading: false,\n                path: action.payload.path,\n                files: action.payload.files,\n                dirs: action.payload.dirs,\n                drives: action.payload.drives,\n                places,\n            })\n        }\n        case browserActions.ActionTypes.SELECT_FULL_PATH:\n        case browserActions.ActionTypes.SELECT: {\n            return Object.assign({}, state, {\n                isLoading: false,\n                isOpen: false,\n            });\n        }\n    }\n    return state;\n}","import { AllActions } from \"../actions\";\nimport * as channelActions from './actions';\n\nexport interface ChannelStatusReducer {\n    status: ChannelStatusCodes,\n}\n\nexport enum ChannelStatusCodes {\n    CONNECTING = \"connecting\",\n    CONNECTED = \"connected\",\n    READY = \"ready\",\n    WAITING = \"waiting\",\n    DISCONNECTED = \"disconnected\"\n}\n\nconst initialChannelState: ChannelStatusReducer = {\n    status: ChannelStatusCodes.WAITING,\n}\n\nexport function channelStatusReducer(state = initialChannelState, action: AllActions): ChannelStatusReducer {\n    switch (action.type) {\n        case channelActions.ActionTypes.OPEN: {\n            return { status: ChannelStatusCodes.CONNECTED };\n        }\n        case channelActions.ActionTypes.INITIAL_STATE: {\n            return { status: ChannelStatusCodes.READY };\n        }\n        case channelActions.ActionTypes.CLOSE: {\n            return { status: ChannelStatusCodes.WAITING };\n        }\n        case channelActions.ActionTypes.SHUTDOWN: {\n            return { status: ChannelStatusCodes.DISCONNECTED }\n        }\n    }\n    return state;\n}","import { AllActions } from \"../actions\";\nimport { ConnectRequestParams } from \"../messages\";\nimport * as clusterActions from './actions';\n\nexport type ClusterConnectionState = {\n    status: \"connected\",\n    params: ConnectRequestParams,\n} | {\n    status: \"disconnected\",\n} | {\n    status: \"unknown\",\n} | {\n    status: \"connecting\"\n}\n\nconst initialClusterConnectionState: ClusterConnectionState = {\n    status: \"unknown\"\n}\n\nexport function clusterConnectionReducer(state = initialClusterConnectionState, action: AllActions): ClusterConnectionState {\n    switch (action.type) {\n        case clusterActions.ActionTypes.NOT_CONNECTED: {\n            return {\n                status: \"disconnected\"\n            };\n        }\n        case clusterActions.ActionTypes.CONNECTED: {\n            return {\n                status: \"connected\",\n                params: action.payload.params,\n            }\n        }\n        case clusterActions.ActionTypes.CONNECTING: {\n            return {\n                status: \"connecting\"\n            }\n        }\n    }\n    return state;\n}","import { AllActions } from \"../actions\";\nimport * as analysisActions from \"../analysis/actions\";\nimport * as channelActions from '../channel/actions';\nimport * as datasetActions from \"../dataset/actions\";\nimport { ById, constructById, filterWithPred, insertById, updateById } from \"../helpers/reducerHelpers\";\nimport * as compoundAnalysisActions from \"./actions\";\nimport { CompoundAnalysisState } from \"./types\";\n\nexport type CompoundAnalysisReducerState = ById<CompoundAnalysisState>;\n\nconst initialCompoundAnalysisState: CompoundAnalysisReducerState = {\n    byId: {},\n    ids: [],\n}\n\nexport function compoundAnalysisReducer(state = initialCompoundAnalysisState, action: AllActions): CompoundAnalysisReducerState {\n    switch (action.type) {\n        case compoundAnalysisActions.ActionTypes.CREATED: {\n            const newCompoundAnalysis = {\n                doAutoStart: action.payload.autoStart,\n                ...action.payload.compoundAnalysis,\n            }\n            return insertById(state, action.payload.compoundAnalysis.compoundAnalysis, newCompoundAnalysis);\n        }\n        case compoundAnalysisActions.ActionTypes.REMOVED: {\n            return filterWithPred(state, (r: CompoundAnalysisState) => r.compoundAnalysis !== action.payload.id);\n        }\n        case compoundAnalysisActions.ActionTypes.ENABLE_AUTOSTART: {\n            return updateById(state, action.payload.compoundAnalysisId, {\n                doAutoStart: true,\n            })\n        }\n        case datasetActions.ActionTypes.DELETE: {\n            return filterWithPred(state, (r: CompoundAnalysisState) => r.dataset !== action.payload.dataset);\n        }\n        case analysisActions.ActionTypes.CREATED: {\n            const compoundAnalysis = state.byId[action.payload.compoundAnalysis];\n            const newAnalyses = [...compoundAnalysis.details.analyses];\n            newAnalyses[action.payload.analysisIndex] = action.payload.analysis.id;\n            return updateById(state, action.payload.compoundAnalysis, {\n                details: {\n                    analyses: newAnalyses,\n                    mainType: compoundAnalysis.details.mainType,\n                }\n            });\n        }\n        case channelActions.ActionTypes.INITIAL_STATE: {\n            const compoundAnalyses = action.payload.compoundAnalyses.map(ca => ({ doAutoStart: false, ...ca }));\n            return {\n                byId: constructById(compoundAnalyses, ca => ca.compoundAnalysis),\n                ids: compoundAnalyses.map(ca => ca.compoundAnalysis),\n            };\n        }\n    }\n    return state;\n}","import { AllActions } from \"../actions\";\nimport * as browserActions from '../browser/actions';\nimport * as clusterActions from '../cluster/actions';\nimport * as datasetActions from '../dataset/actions';\nimport { toggleItemInList } from \"../helpers/reducerHelpers\";\nimport { ClusterTypes, DatasetFormParams, MsgPartConfig } from \"../messages\";\nimport * as configActions from './actions';\nimport { makeUnique } from \"./helpers\";\n\nexport interface LocalConfig {\n    cwd: string,\n    fileHistory: string[],\n    lastOpened: {\n        [path: string]: DatasetFormParams\n    },\n    lastConnection: {\n        type: ClusterTypes,\n        address: string\n    },\n    starred: string[],\n}\n\nexport type ConfigParams = MsgPartConfig & LocalConfig ;\nexport type ConfigState = ConfigParams & {\n    haveConfig: boolean,\n};\n\nexport const initialConfigState: ConfigState = {\n    version: \"\",\n    revision: \"\",\n    localCores: 0,\n    cwd: \"/\",\n    separator: \"/\",\n    lastOpened: {},\n    resultFileFormats: {},\n    fileHistory: [],\n    haveConfig: false,\n    lastConnection: {\n        type: ClusterTypes.LOCAL,\n        address: \"tcp://localhost:8786\",\n    },\n    starred: [],\n}\n\nexport function configReducer(state = initialConfigState, action: AllActions): ConfigState {\n    switch (action.type) {\n        case configActions.ActionTypes.FETCHED: {\n            return Object.assign({}, action.payload.config, { haveConfig: true });\n        }\n        case browserActions.ActionTypes.DIRECTORY_LISTING: {\n            return Object.assign({}, state, {\n                cwd: action.payload.path,\n            });\n        }\n        case datasetActions.ActionTypes.CREATE: {\n            const newLastOpened = Object.assign({}, state.lastOpened, { [action.payload.dataset.params.path]: action.payload.dataset.params });\n            const newFileHistory = makeUnique([\n                action.payload.dataset.params.path, ...state.fileHistory\n            ]).slice(0, 11);\n            return Object.assign({}, state, {\n                lastOpened: newLastOpened,\n                fileHistory: newFileHistory,\n            });\n        }\n        case clusterActions.ActionTypes.CONNECT: {\n            if (action.payload.params.type === ClusterTypes.LOCAL){\n                const newLastConnection = Object.assign({}, state.lastConnection, {type: ClusterTypes.LOCAL})\n                return Object.assign({}, state, {\n                    lastConnection : newLastConnection\n                })\n            }\n            else {\n                return Object.assign({}, state, {\n                    lastConnection: action.payload.params\n                })\n            }\n        }\n        case configActions.ActionTypes.TOGGLE_STAR: {\n            const path = action.payload.path;\n            return {\n                ...state,\n                starred: toggleItemInList(state.starred, path),\n            };\n        }\n    }\n    return state;\n}","import { AllActions } from \"../actions\";\nimport * as channelActions from '../channel/actions';\nimport { constructById, filterWithPred, insertById, updateById } from \"../helpers/reducerHelpers\";\nimport { Dataset, DatasetState, DatasetStatus } from \"../messages\";\nimport * as datasetActions from './actions';\nimport { DatasetsState, OpenDatasetState } from \"./types\";\n\nconst initialDatasetState: DatasetsState = {\n    byId: {},\n    ids: [],\n};\n\nexport function datasetReducer(state = initialDatasetState, action: AllActions): DatasetsState {\n    switch (action.type) {\n        case channelActions.ActionTypes.INITIAL_STATE: {\n            const datasets = action.payload.datasets.map(ds => Object.assign({}, ds, { status: DatasetStatus.OPEN }));\n            return {\n                byId: constructById(datasets, ds => ds.id),\n                ids: datasets.map(ds => ds.id),\n            }\n        }\n        case datasetActions.ActionTypes.CREATE: {\n            const ds: Dataset = {\n                ...action.payload.dataset,\n                status: DatasetStatus.OPENING\n            };\n            return insertById(state, action.payload.dataset.id, ds);\n        }\n        case datasetActions.ActionTypes.CREATED: {\n            const ds = Object.assign({}, action.payload.dataset, { status: DatasetStatus.OPEN });\n            if (state.byId[action.payload.dataset.id]) {\n                return updateById(state, action.payload.dataset.id, ds);\n            } else {\n                return insertById(state, action.payload.dataset.id, ds);\n            }\n        }\n        case datasetActions.ActionTypes.ERROR: {\n            return filterWithPred(state, (r: DatasetState) => r.id !== action.payload.dataset);\n        }\n        case datasetActions.ActionTypes.DELETE: {\n            return updateById(state, action.payload.dataset, { status: DatasetStatus.DELETING });\n        }\n        case datasetActions.ActionTypes.DELETED: {\n            return filterWithPred(state, (r: DatasetState) => r.id !== action.payload.dataset);\n        }\n    }\n    return state;\n}\n\nconst initialOpenDatasetState: OpenDatasetState = {\n    busy: false,\n    busyPath: \"\",\n    formVisible: false,\n    formPath: \"/\",\n    formCachedParams: undefined,\n    formDetectedParams: undefined,\n}\n\nexport function openDatasetReducer(state = initialOpenDatasetState, action: AllActions): OpenDatasetState {\n    switch (action.type) {\n        case datasetActions.ActionTypes.OPEN: {\n            return {\n                ...state,\n                formVisible: true,\n                formPath: action.payload.path,\n                formCachedParams: action.payload.cachedParams,\n                formDetectedParams: action.payload.detectedParams,\n            };\n        }\n        case datasetActions.ActionTypes.CANCEL_OPEN: {\n            return {\n                ...state,\n                formVisible: false,\n            }\n        }\n        case datasetActions.ActionTypes.CREATE: {\n            return {\n                ...state,\n                formVisible: false,\n            }\n        }\n        case datasetActions.ActionTypes.DETECT: {\n            return {\n                ...state,\n                busyPath: action.payload.path,\n                busy: true,\n            }\n        }\n        case datasetActions.ActionTypes.DETECTED:\n        case datasetActions.ActionTypes.DETECT_FAILED: {\n            return {\n                ...state,\n                busyPath: \"\",\n                busy: false,\n            }\n        }\n    }\n    return state;\n}","import { AllActions } from \"../actions\";\nimport * as browserActions from '../browser/actions';\nimport * as channelActions from '../channel/actions';\nimport * as clusterActions from '../cluster/actions';\nimport * as analysisActions from '../compoundAnalysis/actions';\nimport * as datasetActions from '../dataset/actions';\nimport { ById, filterWithPred, insertById } from \"../helpers/reducerHelpers\";\nimport * as errorActions from './actions';\n\nexport interface ErrorMessage {\n    id: string,\n    msg: string,\n    timestamp: number,\n}\n\nexport type ErrorState = ById<ErrorMessage>;\n\nconst initialErrorState: ErrorState = {\n    byId: {},\n    ids: [],\n};\n\nexport function errorReducer(state = initialErrorState, action: AllActions): ErrorState {\n    switch (action.type) {\n        case browserActions.ActionTypes.ERROR:\n        case datasetActions.ActionTypes.ERROR:\n        case channelActions.ActionTypes.ERROR:\n        case clusterActions.ActionTypes.ERROR:\n        case analysisActions.ActionTypes.ERROR:\n        case channelActions.ActionTypes.JOB_ERROR: {\n            return insertById(state, action.payload.id, {\n                id: action.payload.id,\n                msg: action.payload.msg,\n                timestamp: action.payload.timestamp,\n            });\n        }\n        case channelActions.ActionTypes.OPEN: {\n            return initialErrorState;\n        }\n        case errorActions.ActionTypes.DISMISS: {\n            return filterWithPred(state, (r: ErrorMessage) => r.id !== action.payload.id);\n        }\n        case errorActions.ActionTypes.DISMISS_ALL: {\n            return initialErrorState;\n        }\n    }\n    return state;\n}","import { AllActions } from \"../actions\";\nimport * as channelActions from '../channel/actions';\nimport { ById, constructById, insertById, updateById } from \"../helpers/reducerHelpers\";\nimport * as jobActions from './actions';\nimport { JobRunning, JobState, JobStatus } from \"./types\";\n\nexport type JobReducerState = ById<JobState>;\n\nconst initialJobState: JobReducerState = {\n    byId: {},\n    ids: [],\n};\n\nexport function jobReducer(state = initialJobState, action: AllActions): JobReducerState {\n    switch (action.type) {\n        case jobActions.ActionTypes.CREATE: {\n            const createResult = insertById(\n                state,\n                action.payload.id,\n                {\n                    id: action.payload.id,\n                    analysis: action.payload.analysis,\n                    running: JobRunning.CREATING,\n                    status: JobStatus.CREATING,\n                    results: [],\n                    startTimestamp: action.payload.timestamp,\n                }\n            )\n            return createResult;\n        }\n        case channelActions.ActionTypes.JOB_STARTED: {\n            return updateById(\n                state,\n                action.payload.job,\n                {\n                    running: JobRunning.RUNNING,\n                    status: JobStatus.IN_PROGRESS,\n                    startTimestamp: action.payload.timestamp,\n                }\n            )\n        }\n        case channelActions.ActionTypes.TASK_RESULT: {\n            return updateById(\n                state,\n                action.payload.job,\n                {\n                    results: action.payload.results,\n                }\n            );\n        }\n        case channelActions.ActionTypes.FINISH_JOB: {\n            const { job, timestamp, results } = action.payload;\n            return updateById(\n                state,\n                job,\n                {\n                    running: JobRunning.DONE,\n                    status: JobStatus.SUCCESS,\n                    results,\n                    endTimestamp: timestamp,\n                }\n            );\n        }\n        case channelActions.ActionTypes.JOB_ERROR: {\n            const { job, timestamp } = action.payload;\n            return updateById(\n                state,\n                job,\n                {\n                    running: JobRunning.DONE,\n                    status: JobStatus.ERROR,\n                    endTimestamp: timestamp,\n                }\n            )\n        }\n        case channelActions.ActionTypes.INITIAL_STATE: {\n            const jobs = action.payload.jobs;\n            const jobState: JobState[] = jobs.map(job => {\n                return {\n                    id: job.id,\n                    analysis: job.analysis,\n                    // FIXME: right job status!\n                    status: JobStatus.SUCCESS,\n                    startTimestamp: 0,\n                    // FIXME: result blobs?\n                    results: [],\n                    // FIXME: right job running status!\n                    running: JobRunning.DONE,\n                    endTimestamp: 0,\n                };\n            })\n\n            return {\n                byId: constructById(jobState, job => job.id),\n                ids: jobState.map(job => job.id),\n            };\n        }\n    }\n    return state;\n}","import { combineReducers } from \"redux\";\nimport { analysisReducer } from \"./analysis/reducers\";\nimport { directoryBrowserReducer } from './browser/reducers';\nimport { channelStatusReducer } from \"./channel/reducers\";\nimport { clusterConnectionReducer } from \"./cluster/reducers\";\nimport { compoundAnalysisReducer } from \"./compoundAnalysis/reducers\";\nimport { configReducer } from \"./config/reducers\";\nimport { datasetReducer, openDatasetReducer } from \"./dataset/reducers\";\nimport { errorReducer } from \"./errors/reducers\";\nimport { jobReducer } from \"./job/reducers\";\n\nexport const rootReducer = combineReducers({\n    compoundAnalyses: compoundAnalysisReducer,\n    analyses: analysisReducer,\n    channelStatus: channelStatusReducer,\n    clusterConnection: clusterConnectionReducer,\n    datasets: datasetReducer,\n    openDataset: openDatasetReducer,\n    jobs: jobReducer,\n    errors: errorReducer,\n    config: configReducer,\n    browser: directoryBrowserReducer,\n})\n\nexport type RootReducer = ReturnType<typeof rootReducer>;","// tslint:disable:ordered-imports\nimport \"core-js/fn/symbol/iterator.js\";\nimport \"core-js/es6/symbol.js\";\nimport 'react-app-polyfill/ie11';\n// tslint:enable:ordered-imports\n\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { applyMiddleware, compose, createStore } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\nimport { rootSaga } from './sagas';\nimport { rootReducer } from './store';\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst composeEnhancers = (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(rootReducer, composeEnhancers(\n    applyMiddleware(\n        sagaMiddleware,\n    )\n));\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root') as HTMLElement\n);\nregisterServiceWorker();\n\nsagaMiddleware.run(rootSaga);"],"sourceRoot":""}