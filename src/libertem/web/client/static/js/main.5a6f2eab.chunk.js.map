{"version":3,"sources":["job/components/ResultImage.module.css","images/LiberTEM logo-medium.png","cluster/actions.ts","About.tsx","helpers/actionHelpers.ts","helpers/index.ts","messages.ts","browser/actions.ts","cluster/components/LocalConnectionForm.tsx","cluster/components/TCPConnectionForm.tsx","cluster/components/ClusterConnectionForm.tsx","channel/components/ChannelConnecting.tsx","channel/components/ChannelStatus.tsx","browser/components/FileBrowserEntry.tsx","browser/components/FileBrowserHeader.tsx","browser/components/FileEntry.tsx","browser/components/FolderEntry.tsx","browser/components/PathDropDownItem.tsx","browser/components/PathInput.tsx","browser/components/RecentFiles.tsx","browser/components/PathBar.tsx","browser/components/FileBrowser.tsx","job/types.ts","browser/components/BrowserWrapper.tsx","widgets/BusySpinner.tsx","widgets/BusyWrapper.tsx","widgets/HandleParent.tsx","job/components/ResultImage.tsx","job/components/Result.tsx","job/components/Selectors.tsx","job/components/ResultList.tsx","widgets/constraints.ts","widgets/styles.ts","widgets/Disk.tsx","widgets/DraggableHandle.tsx","compoundAnalysis/actions.ts","widgets/kbdHandler.ts","compoundAnalysis/components/DefaultFrameView.tsx","compoundAnalysis/components/FramePicker.tsx","compoundAnalysis/components/ModeSelector.tsx","widgets/Rect.tsx","compoundAnalysis/components/roi/RectROI.tsx","compoundAnalysis/components/roi/RoiPicker.tsx","compoundAnalysis/components/roi/DiskROI.tsx","compoundAnalysis/components/layouts/AnalysisLayoutTwoCol.tsx","compoundAnalysis/getMetadata.tsx","compoundAnalysis/components/Download.tsx","compoundAnalysis/components/Toolbar.tsx","compoundAnalysis/helpers.ts","compoundAnalysis/components/CenterOfMassAnalysis.tsx","helpers/svg.ts","widgets/Ring.tsx","compoundAnalysis/components/layouts/AnalysisLayoutTwoRes.tsx","compoundAnalysis/components/Clustering.tsx","compoundAnalysis/components/DiskMaskAnalysis.tsx","compoundAnalysis/components/FEM.tsx","compoundAnalysis/components/FFTFramePicker.tsx","compoundAnalysis/components/FFTSumFrames.tsx","compoundAnalysis/components/FFTFrameView.tsx","compoundAnalysis/components/layouts/AnalysisLayoutThreeCol.tsx","compoundAnalysis/components/FFTAnalysis.tsx","compoundAnalysis/components/PointSelectionAnalysis.tsx","compoundAnalysis/components/RadialFourierAnalysis.tsx","compoundAnalysis/components/RingMaskAnalysis.tsx","compoundAnalysis/types.ts","compoundAnalysis/components/base/Analysis.tsx","compoundAnalysis/components/base/AnalysisList.tsx","helpers/reducerHelpers.ts","compoundAnalysis/components/base/AnalysisSelect.tsx","dataset/actions.ts","dataset/components/AddAnalysis.tsx","dataset/components/DatasetParams.tsx","dataset/components/DatasetInfo.tsx","dataset/components/DatasetToolbar.tsx","dataset/components/Dataset.tsx","dataset/api.ts","dataset/validate.ts","dataset/helpers.ts","dataset/components/BLOParamsForm.tsx","errors/actions.ts","dataset/components/DatasetTypeSelect.tsx","dataset/components/EMPADParamsForm.tsx","dataset/components/FRMS6ParamsForm.tsx","dataset/components/HDF5ParamsForm.tsx","dataset/components/K2ISParamsForm.tsx","dataset/components/MIBParamsForm.tsx","dataset/components/RawFileParamsForm.tsx","dataset/components/SERParamsForm.tsx","dataset/components/DatasetOpen.tsx","dataset/components/DatasetOpenSpinner.tsx","dataset/components/DatasetList.tsx","errors/components/Error.tsx","errors/components/ErrorList.tsx","helpers/hooks.ts","App.tsx","registerServiceWorker.ts","config/helpers.ts","browser/api.ts","channel/actions.ts","browser/sagas.ts","channel/messages.ts","channel/sagas.ts","cluster/api.ts","analysis/actions.ts","cluster/sagas.ts","job/actions.ts","job/api.ts","compoundAnalysis/api.ts","config/actions.ts","compoundAnalysis/sagas.ts","config/api.ts","config/sagas.ts","dataset/sagas.ts","sagas.ts","analysis/reducers.ts","browser/reducers.ts","channel/reducers.ts","cluster/reducers.ts","compoundAnalysis/reducers.ts","config/reducers.ts","dataset/reducers.ts","errors/reducers.ts","job/reducers.ts","store.ts","index.tsx"],"names":["module","exports","ActionTypes","connect","state","version","config","revision","Header","as","slice","List","Item","Icon","name","Content","href","src","alt","createAction","type","payload","meta","undefined","Actions","notConnected","NOT_CONNECTED","params","CONNECT","connected","CONNECTED","assertNotReached","message","Error","defaultDebounce","fn","delay","_","maxWait","getEnumValues","e","Object","keys","ClusterTypes","DatasetTypes","DatasetStatus","AnalysisTypes","ClusterTypeMetadata","LOCAL","label","TCP","helpText","withFormik","mapPropsToValues","ownProps","numWorkers","localCores","handleSubmit","values","formikBag","onSubmit","props","touched","errors","isSubmitting","dirty","handleChange","handleBlur","handleReset","Form","Field","htmlFor","value","onChange","onBlur","Button","primary","disabled","address","mapDispatchToProps","connectToCluster","clusterActions","clusterTypeOptions","map","t","text","ClusterConnectionForm","clusterType","setType","setState","data","this","Dropdown","inline","options","Segment","renderForm","React","ChannelConnecting","msg","Message","icon","loading","messages","waiting","connecting","clusterMessages","ConnectedNotReady","haveConfig","useSelector","clusterConnection","status","ChannelStatus","children","channelStatus","list","path","LIST_DIRECTORY","dirListing","dirs","files","drives","places","DIRECTORY_LISTING","open","OPEN","cancel","CANCEL","select","SELECT","selectFullPath","SELECT_FULL_PATH","error","timestamp","id","ERROR","detectParams","DETECT_PARAMS","paramsDetected","PARAMS_DETECTED","TimeStamp","ts","date","Date","fmtDate","toLocaleDateString","fmtTime","toLocaleTimeString","title","style","display","whiteSpace","width","marginRight","FileSize","fmtSize","bytes","si","thresh","Math","abs","size","unit","units","u","length","toFixed","humanFileSize","textAlign","Cell","overflow","textOverflow","FileBrowserEntry","onClick","details","myStyle","cursor","tsStyles","paddingRight","flexGrow","owner","ctime","mtime","FileBrowserHeader","alignRight","paddingBottom","FileEntry","dispatch","browserActions","window","setTimeout","toString","newProps","initialPath","enableReinitialize","Input","autoComplete","lastOpened","fileHistory","separator","recentFiles","filter","item","floating","Menu","content","option","idx","key","refresh","currentPath","handleInputChange","goUp","driveOptions","placeOptions","listRef","scrollToTop","current","scrollToItem","sortByKey","array","getKey","sort","a","b","x","y","JobRunning","JobStatus","browser","isLoading","getSortKey","toLowerCase","dirEntries","dir","fileEntries","f","entries","concat","overflowY","ref","height","itemCount","itemSize","index","Group","isOpen","labelPosition","BusySpinner","margin","padding","position","bottom","right","color","opacity","BusyWrapper","busy","HandleParent","currentHandle","handleDragStart","h","handleDrop","handleMouseMove","externalMouseMove","handleMouseLeave","externalLeave","handleMouseUp","externalMouseUp","onMouseMove","onMouseLeave","onMouseUp","onKeyDown","onKeyboardEvent","outline","tabIndex","fill","renderHandles","handles","i","elem","ResultImage","job","channel","result","results","className","styles","fallback","viewBox","default","xlinkHref","imageURL","ResultWrapper","styled","svg","Result","extraHandles","extraWidgets","running","DONE","Selectors","div","ResultListPlaceholder","border","ResultList","selectedChannel","selectChannel","analysis","jobsById","displayedJob","dt","endTimestamp","startTimestamp","currentResult","subtitle","selectors","getMsg","selectedImg","getJob","genericRender","ResultImageSelector","availableImages","description","compoundAnalysis","compoundAnalyses","byId","analyses","analysisIndex","jobs","inRectConstraint","p","max","min","cbToRadius","cx","cy","cb","dx","dy","sqrt","dist","keepOnCY","riConstraint","outerPos","otherX","roConstraints","innerPos","defaultMaskStyles","imageWidth","fillOpacity","strokeOpacity","stroke","strokeWidth","Disk","imageHeight","r","StyledCircle","circle","Cross","FocusGroup","g","Handle","scale","withCross","focusRef","args","transform","crossSpec","cross","d","relativeCoords","parent","ownerSVGElement","inWidthAttr","getAttribute","inWidth","getBoundingClientRect","getScalingFactor","parentPos","pageX","left","pageXOffset","pageY","top","pageYOffset","DraggableHandle","posRef","dragging","drag","move","stopDrag","applyConstraint","constraint","startDrag","preventDefault","parentOnDragStart","focus","onDragMove","constrained","parentOnDrop","handleKeyDown","update","delta","shiftKey","handleKeyEvent","newCoords","visibility","onMouseDown","renderCommon","renderDragging","DefaultModes","DefaultRois","dataset","analysisType","CREATE","autoStart","CREATED","compoundAnalysisId","ENABLE_AUTOSTART","RUN","RUNNING","jobIndex","REMOVE","REMOVED","useFramePicker","enabled","scanWidth","scanHeight","setCx","setCy","useDispatch","useEffect","compoundAnalysisActions","PICK_FRAME","parameters","onPickChange","pickX","pickY","newX","round","newY","coords","onDragStart","onDrop","ModeSelector","modes","currentMode","onModeChange","Rect","ymin","xmin","useRectROI","minLength","useState","setx","sety","setwidth","setheight","handleCornerChange","newx","newy","handleShapeChange","smthHandle","rectRoiParameters","roi","shape","rectRoiHandles","rectRoiWidgets","useRoiPicker","roiParameters","handle","analysisActions","clearTimeout","JSON","stringify","useDefaultFrameView","doAutoStart","availableModes","SUM","SD","PICK","availableRois","ALL","DISK","RECT","frameMode","setMode","setRoi","frameModeSelector","newMode","roiSelector","newRoi","widgets","pickCoords","pickHandles","setR","handleCenterChange","newCx","newCy","handleRChange","newR","rHandle","diskRoiParameters","diskRoiHandles","diskRoiWidgets","useDiskROI","SD_FRAMES","SUM_FRAMES","frameViewTitle","AnalysisLayoutTwoCol","toolbar","attached","Grid","columns","Row","Column","getMetadata","typeName","CompoundAnalysisMetadata","DownloadItems","currentFormat","analysesById","some","jobId","SUCCESS","analysisId","desc","getAnalysisDescription","Download","formats","resultFileFormats","formatOptions","identifier","setFormat","Modal","trigger","Popup","Toolbar","busyIdxs","onApply","applyIconProps","analysisIdxsToInclude","filteredAnalyses","indexOf","reduce","prevValue","every","getAnalysisStatus","CenterOfMassAnalysis","frameViewWidgets","resultHandles","resultWidgets","CENTER_OF_MASS","getPathArc","center","start","end","radius","degree","points","push","getLocationFromAngle","clockWise","join","getCirclePath","radian","PI","cos","sin","Ring","ri","pathSpec","ro","fillRule","AnalysisLayoutTwoRes","mid","clustparams","title1","title2","title3","ClustAnalysis","setRi","setRo","riHandle","roHandle","minDist","setMinDist","nPeaks","setNPeaks","nClust","setNClust","handleRIChange","handleROChange","SUM_SIG","CLUST","n_clust","n_peaks","min_dist","paramsVisible","setParamsVisible","Accordion","Title","active","event","step","target","valueAsNumber","DiskMaskAnalysis","APPLY_DISK_MASK","FEMAnalysis","FEM","useFFTFramePicker","real_rad","real_centerx","real_centery","PICK_FFT_FRAME","useFFTSumFrames","FFTSUM_FRAMES","useFFTFrameView","AnalysisLayoutThreeCol","FFTAnalysis","radIn","radOut","frameViewWidgetsfft","check","setCheck","realCenterX","realCenterY","realRad","frameViewWidgetsreal","APPLY_FFT_MASK","rad_in","rad_out","checked","PointSelectionAnalysis","APPLY_POINT_SELECTOR","RadialFourierAnalysis","nBins","maxOrder","RADIAL_FOURIER","n_bins","max_order","RingMaskAnalysis","APPLY_RING_MASK","component","AnalysisDispatcherComponent","datasets","AnalysisComponent","mainType","AnalysisList","ids","Analysis","updateById","partialRecord","newObj","assign","newById","insertById","record","constructById","items","acc","filterWithPred","pred","analysisTypeOptions","AnalysisSelect","labeled","button","handleAddAnalysis","renderParams","Table","Array","DatasetParams","HeaderCell","Body","DiagElem","diagnostics","renderValue","DiagElems","DatasetInfo","cachedParams","detectedParams","CANCEL_OPEN","DELETE","DELETED","DETECT","DETECTED","DETECT_FAILED","handleRemoveDataset","datasetActions","DatasetContainer","OPENING","DELETING","dividing","marginTop","marginBottom","horizontal","link","flexShrink","openDataset","fetch","body","credentials","method","then","json","deleteDataset","detectDataset","encodeURIComponent","schemaCache","getSchema","cached","Promise","resolve","schemaResponse","convertErrors","res","forEach","err","fieldName","dataPath","replace","match","plainName","schema","validate","Ajv","compile","parseNumList","nums","split","part","trim","getInitial","otherwise","getInitialName","pathfind","isKnownDatasetType","detectedType","v","withValidation","opts","formToJson","setSubmitting","validateOpen","validateOnChange","validateOnBlur","initial","tileshape","BLO","isValidating","onCancel","datasetTypeOptions","DatasetTypeSelect","currentType","scan_size","EMPAD","FRMS6","ds_path","HDF5","K2IS","MIB","enable_direct","detector_size","dtype","RAW","SER","getDefaultDSType","didReset","openState","formCachedParams","formDetectedParams","DatasetOpen","setReset","formInitial","getFormInitial","defaultType","datasetType","setDatasetType","doSetType","form","formPath","commonParams","uuid","onReset","MIBParamsForm","BLOParamsForm","K2ISParamsForm","busyPath","DatasetList","formVisible","dsId","Dataset","DISMISS","DISMISS_ALL","dismiss","errorActions","negative","onDismiss","clusterConnected","channelConnected","latestErrors","showModal","handleEsc","ev","code","keyCode","document","addEventListener","removeEventListener","App","Container","logo","alignSelf","isLocalhost","Boolean","location","hostname","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","joinPaths","parts","removeSep","RegExp","escapeRegExp","mergeLocalStorage","serverConfig","localSettings","localStorage","getItem","cwd","localSettingsParsed","parse","defaultConfig","setLocalStorage","setItem","makeUnique","inp","curr","getDirectoryListing","url","directoryListingSaga","fetchOnRequest","fetchDirectoryListing","fetchDirectoryListOnOpen","fork","take","action","newPath","call","put","browserState","now","alternative","home","MessageTypes","INITIAL_STATE","JOB_STARTED","FINISH_JOB","TASK_RESULT","JOB_ERROR","CLOSE","CANCELLED","createMessage","messageType","attribs","Messages","objectURL","BINARY","webSocketSaga","actionsFromChannel","handleBinaryParts","handleTaskResult","handleFinishJob","createWebSocketChannel","eventChannel","emit","onMessage","Blob","channelMessages","URL","createObjectURL","parsed","onOpen","onClose","END","onError","ws","WebSocket","port","socketChannel","channelActions","CREATE_DATASET","DELETE_DATASET","CANCEL_JOB_DONE","numParts","binMsg","followup","numMessages","images","descriptions","connection","checkClusterConnection","connectSaga","putClusterStatus","trackClusterConnection","clusterConnectionSaga","conn","takeEvery","all","UPDATED","startJob","cancelJob","createOrUpdateAnalysis","removeAnalysis","createOrUpdateCompoundAnalysis","removeCompoundAnalysis","cleanupOnRemove","createCompoundAnalysisSaga","createFromServerState","createOrUpdate","analysisSidecar","removeJobsForAnalysis","doRemoveAnalysisSaga","analysisRootSaga","selectDataset","selectCompoundAnalysis","selectAnalysis","selectJob","sidecarTask","msgPart","oldJobId","newAnalysisId","updatedCompoundAnalysis","actionChannel","buffers","sliding","runOrParamsChannel","existingAnalysisId","jobActions","FETCH","FETCHED","FETCH_FAILED","getConfig","getConfigOnReconnect","getConfigSaga","updateLocalStorageConfig","firstConfigFetch","configRootSaga","configActions","configResponse","mergedConfig","removeItem","createDatasetSaga","deleteDatasetSaga","doDetectDataset","doOpenDataset","openDatasetSagaFullPath","openDatasetSaga","datasetRootSaga","resp","fullPath","detectResult","shouldOpen","datasetParams","doDetectDatasetRes","rootSaga","initialAnalysisState","ChannelStatusCodes","initialBrowserState","initialChannelState","WAITING","initialClusterConnectionState","initialCompoundAnalysisState","initialConfigState","initialDatasetState","initialOpenDatasetState","initialErrorState","initialJobState","rootReducer","combineReducers","newCompoundAnalysis","newAnalyses","ca","oldJobs","analysisState","analysisIdForJob","find","READY","ds","createResult","CREATING","IN_PROGRESS","jobState","newLastOpened","newFileHistory","place","sagaMiddleware","createSagaMiddleware","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","ReactDOM","getElementById","process","origin","response","headers","get","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker","run"],"mappings":"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","file":"static/js/main.5a6f2eab.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"default\":\"ResultImage_default__3K5yi\",\"fallback\":\"ResultImage_fallback__3V1su\"};","module.exports = __webpack_public_path__ + \"static/media/LiberTEM logo-medium.7999e0dc.png\";","import { ActionsUnion, createAction } from '../helpers/actionHelpers';\r\nimport { ConnectRequestParams } from '../messages';\r\n\r\nexport enum ActionTypes {\r\n    NOT_CONNECTED = 'CLUSTER_NOT_CONNECTED',\r\n    CONNECT = 'CLUSTER_CONNECT',\r\n    CONNECTED = 'CLUSTER_CONNECTED',\r\n}\r\n\r\nexport const Actions = {\r\n    notConnected: () => createAction(ActionTypes.NOT_CONNECTED),\r\n    connect: (params: ConnectRequestParams) => createAction(ActionTypes.CONNECT, { params }),\r\n    connected: (params: ConnectRequestParams) => createAction(ActionTypes.CONNECTED, { params }),\r\n}\r\n\r\nexport type Actions = ActionsUnion<typeof Actions>;\r\n","import * as React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Header, List } from \"semantic-ui-react\";\r\nimport { RootReducer } from \"./store\";\r\n\r\nconst mapStateToProps = (state: RootReducer) => {\r\n    return {\r\n        version: state.config.version,\r\n        revision: state.config.revision,\r\n    }\r\n}\r\n\r\ntype MergedProps = ReturnType<typeof mapStateToProps>;\r\n\r\nconst About: React.SFC<MergedProps> = ({ version, revision }) => {\r\n    return (\r\n        <>\r\n            <Header as=\"h3\">This is LiberTEM version {version} (revision {revision.slice(0, 8)})</Header>\r\n            <List>\r\n                <List.Item>\r\n                    <List.Icon name=\"github\" />\r\n                    <List.Content>\r\n                        Find us on <a href=\"https://github.com/LiberTEM/LiberTEM\">GitHub</a>\r\n                    </List.Content>\r\n                </List.Item>\r\n                <List.Item>\r\n                    <List.Icon name=\"bug\" />\r\n                    <List.Content>\r\n                        Found a bug? Got a feature request? Please <a href=\"https://github.com/LiberTEM/LiberTEM/issues/new\">open an issue!</a>\r\n                    </List.Content>\r\n                </List.Item>\r\n                <List.Item>\r\n                    <List.Icon name=\"legal\" />\r\n                    <List.Content>\r\n                        LiberTEM is licensed under the <a href=\"https://github.com/LiberTEM/LiberTEM/blob/master/LICENSE\">GNU General Public License v3.0</a>\r\n                    </List.Content>\r\n                </List.Item>\r\n                <List.Item>\r\n                    <List.Icon name=\"book\" />\r\n                    <List.Content>\r\n                        Read <a href=\"https://libertem.github.io/LiberTEM/\">the documentation</a>\r\n                    </List.Content>\r\n                </List.Item>\r\n                <List.Item>\r\n                    <List.Icon name=\"user\" />\r\n                    <List.Content>\r\n                        Read <a href=\"https://libertem.github.io/LiberTEM/acknowledgments.html\">the acknowledgments</a>\r\n                    </List.Content>\r\n                </List.Item>\r\n                <List.Item>\r\n                    <List.Icon name=\"gitter\" />\r\n                    <List.Content>\r\n                        Join our <a href=\"https://gitter.im/LiberTEM/Lobby\">chat on gitter!</a>\r\n                    </List.Content>\r\n                </List.Item>\r\n                <List.Item>\r\n                    <List.Icon name=\"linkify\" />\r\n                    <List.Content>\r\n                    <a href=\"https://doi.org/10.5281/zenodo.1477847\"><img src=\"https://zenodo.org/badge/DOI/10.5281/zenodo.1477847.svg\" alt=\"doi.org/10.5281/zenodo.1477847\"/></a>\r\n                    </List.Content>\r\n                </List.Item>\r\n            </List>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default connect(mapStateToProps)(About);\r\n","import { ActionCreatorsMapObject } from \"redux\";\r\n\r\nexport interface Action<T extends string> {\r\n    type: T\r\n}\r\n\r\nexport interface ActionWithPayload<T extends string, P> extends Action<T> {\r\n    payload: P\r\n}\r\n\r\nexport interface ActionWithMeta<T extends string, P, M> extends ActionWithPayload<T, P> {\r\n    meta: M\r\n}\r\n\r\nexport function createAction<T extends string>(type: T): Action<T>\r\nexport function createAction<T extends string, P, M>(type: T, payload?: P): ActionWithPayload<T, P>\r\nexport function createAction<T extends string, P, M>(type: T, payload?: P, meta?: M): ActionWithMeta<T, P, M>\r\nexport function createAction<T extends string, P, M>(type: T, payload?: P, meta?: M) {\r\n    if (meta === undefined && payload === undefined) {\r\n        return { type };\r\n    } else if (meta === undefined) {\r\n        return { type, payload };\r\n    } else {\r\n        return { type, payload, meta }\r\n    }\r\n}\r\n\r\nexport type ActionsUnion<A extends ActionCreatorsMapObject> = ReturnType<A[keyof A]>","import * as _ from \"lodash\";\r\n\r\nexport function assertNotReached(message: string): never {\r\n    throw new Error(message);\r\n}\r\n\r\nexport function defaultDebounce<T extends (...args: any[]) => any>(fn: T, delay: number = 50) {\r\n    return _.debounce(fn, delay, { maxWait: delay });\r\n}\r\n\r\nexport function getEnumValues<E>(e: E): Array<keyof E> {\r\n    return Object.keys(e) as Array<keyof E>;\r\n}","import { JobList } from \"./analysis/types\"\r\n\r\n/* \r\n * Common\r\n */\r\n\r\nexport interface FollowupPart {\r\n    numMessages: number,\r\n    descriptions: Array<{ title: string, desc: string }>,\r\n}\r\n\r\nexport interface MsgPartConfig {\r\n    version: string,\r\n    revision: string,\r\n    localCores: number,\r\n    cwd: string,\r\n    separator: string,\r\n    resultFileFormats: {\r\n        [id: string]: {\r\n            identifier: string,\r\n            description: string,\r\n        }\r\n    },\r\n}\r\n\r\nexport interface GetConfigResponse {\r\n    status: \"ok\",\r\n    config: MsgPartConfig,\r\n}\r\n\r\n/*\r\n * Connection\r\n */\r\n\r\nexport enum ClusterTypes {\r\n    LOCAL = \"LOCAL\",\r\n    TCP = \"TCP\",\r\n}\r\n\r\nexport const ClusterTypeMetadata: { [s: string]: { [s: string]: string } } = {\r\n    [ClusterTypes.LOCAL]: {\r\n        label: \"Create local cluster\",\r\n    },\r\n    [ClusterTypes.TCP]: {\r\n        label: \"Connect to cluster\",\r\n        helpText: \"can be either local or remote, connection via TCP\",\r\n    }\r\n}\r\n\r\nexport interface ConnectRequestLocalCluster {\r\n    type: ClusterTypes.LOCAL,\r\n    numWorkers?: number,\r\n}\r\n\r\nexport interface ConnectRequestTCP {\r\n    type: ClusterTypes.TCP,\r\n    address: string,\r\n}\r\n\r\nexport type ConnectRequestParams = ConnectRequestLocalCluster | ConnectRequestTCP\r\n\r\nexport interface ConnectRequest {\r\n    connection: ConnectRequestParams\r\n}\r\n\r\nexport type ConnectResponse = {\r\n    status: \"ok\",\r\n    connection: ConnectRequest,\r\n} | {\r\n    status: \"disconnected\",\r\n    connection: {},\r\n}\r\n\r\n/*\r\n * Dataset\r\n */\r\n\r\nexport enum DatasetTypes {\r\n    HDF5 = \"HDF5\",\r\n    RAW = \"RAW\",\r\n    MIB = \"MIB\",\r\n    BLO = \"BLO\",\r\n    K2IS = \"K2IS\",\r\n    SER = \"SER\",\r\n    FRMS6 = \"FRMS6\",\r\n    EMPAD = \"EMPAD\",\r\n}\r\n\r\nexport interface DatasetParamsCommon {\r\n    name: string,\r\n}\r\n\r\nexport type DatasetParamsHDF5 = {\r\n    type: DatasetTypes.HDF5,\r\n    path: string,\r\n    ds_path: string,\r\n    tileshape: number[],\r\n} & DatasetParamsCommon\r\n\r\nexport type DatasetParamsRaw = {\r\n    type: DatasetTypes.RAW,\r\n    path: string,\r\n    dtype: string,\r\n    detector_size: number[],\r\n    enable_direct: boolean,\r\n    scan_size: number[],\r\n} & DatasetParamsCommon\r\n\r\nexport type DatasetParamsMIB = {\r\n    type: DatasetTypes.MIB,\r\n    path: string,\r\n    scan_size: number[],\r\n    tileshape: number[],\r\n} & DatasetParamsCommon\r\n\r\nexport type DatasetParamsBLO = {\r\n    type: DatasetTypes.BLO,\r\n    path: string,\r\n    tileshape: number[],\r\n} & DatasetParamsCommon\r\n\r\nexport type DatasetParamsK2IS = {\r\n    type: DatasetTypes.K2IS,\r\n    path: string,\r\n} & DatasetParamsCommon\r\n\r\nexport type DatasetParamsSER = {\r\n    type: DatasetTypes.SER,\r\n    path: string,\r\n} & DatasetParamsCommon\r\n\r\nexport type DatasetParamsFRMS6 = {\r\n    type: DatasetTypes.FRMS6,\r\n    path: string,\r\n} & DatasetParamsCommon\r\n\r\nexport type DatasetParamsEMPAD = {\r\n    type: DatasetTypes.EMPAD,\r\n    path: string,\r\n    scan_size: number[],\r\n} & DatasetParamsCommon\r\n\r\nexport type DatasetFormParams = DatasetParamsHDF5 | DatasetParamsRaw | DatasetParamsMIB | DatasetParamsBLO | DatasetParamsK2IS | DatasetParamsSER | DatasetParamsFRMS6 | DatasetParamsEMPAD\r\n\r\nexport interface DatasetCreateParams {\r\n    id: string,\r\n    params: DatasetFormParams,\r\n}\r\n\r\nexport enum DatasetStatus {\r\n    OPEN = \"OPEN\",\r\n    OPENING = \"OPENING\",\r\n    DELETING = \"DELETING\",\r\n}\r\n\r\nexport interface DiagElemMsg {\r\n    name: string,\r\n    value: string | DiagElemMsg[],\r\n}\r\n\r\ninterface DatasetCommon {\r\n    id: string,\r\n    params: DatasetFormParams,\r\n}\r\n\r\nexport type DatasetOpening = DatasetCommon & {\r\n    status: DatasetStatus.OPENING,\r\n}\r\n\r\nexport type DatasetDeleting = DatasetCommon & {\r\n    status: DatasetStatus.DELETING,\r\n}\r\n\r\nexport type DatasetOpen = DatasetCommon & {\r\n    status: DatasetStatus.OPEN,\r\n    params: {\r\n        shape: number[],\r\n    }\r\n    diagnostics: DiagElemMsg[],\r\n}\r\n\r\nexport type Dataset = DatasetOpening | DatasetOpen | DatasetDeleting;\r\n\r\nexport interface OpenDatasetRequest {\r\n    dataset: DatasetCreateParams\r\n}\r\n\r\nexport interface OpenDatasetResponseOk {\r\n    status: \"ok\",\r\n    dataset: string,  // TODO: uuid type?\r\n    details: Dataset,\r\n}\r\n\r\nexport interface OpenDatasetResponseError {\r\n    status: \"error\",\r\n    dataset: string,\r\n    msg: string,\r\n}\r\n\r\nexport type OpenDatasetResponse = OpenDatasetResponseOk | OpenDatasetResponseError\r\n\r\nexport interface DeleteDatasetResponse {\r\n    status: \"ok\",\r\n    dataset: string,\r\n}\r\n\r\nexport interface DetectDatasetSuccessResponse {\r\n    status: \"ok\",\r\n    datasetParams: DatasetFormParams,\r\n}\r\n\r\nexport interface DetectDatasetErrorResponse {\r\n    status: \"error\",\r\n    path: string,\r\n    msg: string,\r\n}\r\n\r\nexport type DetectDatasetResponse = DetectDatasetSuccessResponse | DetectDatasetErrorResponse;\r\n\r\nexport interface DataSetOpenSchemaSuccessResponse {\r\n    status: \"ok\",\r\n    ds_type: string,\r\n    schema: object,\r\n}\r\n\r\nexport interface DataSetOpenSchemaErrorResponse {\r\n    status: \"error\",\r\n    ds_type: string,\r\n    msg: string,\r\n}\r\n\r\nexport type DataSetOpenSchemaResponse = DataSetOpenSchemaSuccessResponse | DataSetOpenSchemaErrorResponse;\r\n\r\nexport type MsgPartInitialDataset = DatasetOpen\r\n\r\n// type alias to add client-side state to datasets\r\nexport type DatasetState = Dataset & {}\r\n\r\n/*\r\n * Job\r\n */\r\nexport interface MsgPartJob {\r\n    id: string,\r\n    analysis: string,\r\n}\r\n\r\nexport interface MaskDefRing {\r\n    shape: \"ring\",\r\n    cx: number,\r\n    cy: number,\r\n    ri: number,\r\n    ro: number\r\n}\r\n\r\n\r\nexport interface MaskDefDisk {\r\n    shape: \"disk\",\r\n    cx: number,\r\n    cy: number,\r\n    r: number,\r\n}\r\n\r\nexport interface PointDef {\r\n    shape: \"point\",\r\n    cx: number,\r\n    cy: number,\r\n}\r\n\r\n// TODO: shape doesn't really make sense here, needs to be restructured\r\nexport interface CenterOfMassParams {\r\n    shape: \"com\",\r\n    cx: number,\r\n    cy: number,\r\n    r: number,\r\n}\r\n\r\nexport interface PickFrameParams {\r\n    x: number,\r\n    y: number,\r\n}\r\n\r\nexport interface FFTSumFramesParams {\r\n    real_rad: number | null,\r\n    real_centerx: number | null,\r\n    real_centery: number | null,\r\n}\r\n\r\nexport interface PickFFTFrameParams {\r\n    x: number,\r\n    y: number,\r\n    real_rad: number | null,\r\n    real_centerx: number | null,\r\n    real_centery: number | null,\r\n}\r\nexport interface RadialFourierParams {\r\n    shape: \"radial_fourier\",\r\n    cx: number,\r\n    cy: number,\r\n    ri: number,\r\n    ro: number,\r\n    n_bins: number,\r\n    max_order: number\r\n}\r\n\r\nexport interface FFTParams {\r\n    rad_in: number,\r\n    rad_out: number,\r\n    real_rad: number | null,\r\n    real_centerx: number | null,\r\n    real_centery: number | null,\r\n}\r\n\r\n\r\nexport interface FrameParams {\r\n    roi: {\r\n        shape: \"rect\",\r\n        x: number,\r\n        y: number,\r\n        width: number,\r\n        height: number,\r\n    } | {\r\n        shape: \"disk\",\r\n        cx: number,\r\n        cy: number,\r\n        r: number,\r\n    } |\r\n    {}\r\n}\r\n\r\nexport interface ClustParams {\r\n    roi: {\r\n        shape: \"rect\",\r\n        x: number,\r\n        y: number,\r\n        width: number,\r\n        height: number,\r\n    } | {}\r\n    cx: number,\r\n    cy: number,\r\n    ri: number,\r\n    ro: number,\r\n    n_peaks: number,\r\n    n_clust: number,\r\n    min_dist: number,\r\n}\r\n\r\nexport enum AnalysisTypes {\r\n    APPLY_RING_MASK = \"APPLY_RING_MASK\",\r\n    APPLY_DISK_MASK = \"APPLY_DISK_MASK\",\r\n    APPLY_POINT_SELECTOR = \"APPLY_POINT_SELECTOR\",\r\n    CENTER_OF_MASS = \"CENTER_OF_MASS\",\r\n    SUM_FRAMES = \"SUM_FRAMES\",\r\n    SD_FRAMES = \"SD_FRAMES\",\r\n    PICK_FRAME = \"PICK_FRAME\",\r\n    PICK_FFT_FRAME = \"PICK_FFT_FRAME\",\r\n    APPLY_FFT_MASK = \"APPLY_FFT_MASK\",\r\n    FFTSUM_FRAMES = \"FFTSUM_FRAMES\",\r\n    RADIAL_FOURIER = \"RADIAL_FOURIER\",\r\n    FEM = \"FEM\",\r\n    CLUST = \"CLUST\",\r\n    SUM_SIG = \"SUM_SIG\",\r\n}\r\n\r\nexport interface RingMaskDetails {\r\n    analysisType: AnalysisTypes.APPLY_RING_MASK,\r\n    parameters: MaskDefRing,\r\n}\r\n\r\nexport interface FFTDetails {\r\n    analysisType: AnalysisTypes.APPLY_FFT_MASK,\r\n    parameters: FFTParams,\r\n}\r\n\r\nexport interface FEMDetails {\r\n    analysisType: AnalysisTypes.FEM,\r\n    parameters: MaskDefRing,\r\n}\r\n\r\nexport interface DiskMaskDetails {\r\n    analysisType: AnalysisTypes.APPLY_DISK_MASK,\r\n    parameters: MaskDefDisk,\r\n}\r\n\r\nexport interface PointDefDetails {\r\n    analysisType: AnalysisTypes.APPLY_POINT_SELECTOR,\r\n    parameters: PointDef,\r\n}\r\n\r\nexport interface CenterOfMassDetails {\r\n    analysisType: AnalysisTypes.CENTER_OF_MASS,\r\n    parameters: CenterOfMassParams,\r\n}\r\n\r\nexport interface SumFramesDetails {\r\n    analysisType: AnalysisTypes.SUM_FRAMES,\r\n    parameters: FrameParams\r\n}\r\n\r\nexport interface SDFramesDetails {\r\n    analysisType: AnalysisTypes.SD_FRAMES,\r\n    parameters: FrameParams\r\n}\r\n\r\nexport interface SumSigDetails {\r\n    analysisType: AnalysisTypes.SUM_SIG,\r\n    parameters: {}\r\n}\r\n\r\nexport interface FFTSumFramesDetails {\r\n    analysisType: AnalysisTypes.FFTSUM_FRAMES,\r\n    parameters: FFTSumFramesParams,\r\n}\r\n\r\nexport interface PickFrameDetails {\r\n    analysisType: AnalysisTypes.PICK_FRAME,\r\n    parameters: PickFrameParams,\r\n}\r\n\r\nexport interface PickFFTFrameDetails {\r\n    analysisType: AnalysisTypes.PICK_FFT_FRAME,\r\n    parameters: PickFFTFrameParams,\r\n}\r\n\r\nexport interface RadialFourierDetails {\r\n    analysisType: AnalysisTypes.RADIAL_FOURIER,\r\n    parameters: RadialFourierParams,\r\n}\r\n\r\nexport interface ClustDetails {\r\n    analysisType: AnalysisTypes.CLUST,\r\n    parameters: ClustParams,\r\n}\r\n\r\nexport type AnalysisParameters = MaskDefRing | MaskDefDisk | CenterOfMassParams | PointDef | PickFrameParams | RadialFourierParams | FFTParams | PickFFTFrameParams | FFTSumFramesParams | ClustParams;\r\nexport type AnalysisDetails = RingMaskDetails | DiskMaskDetails | CenterOfMassDetails | PointDefDetails | SumFramesDetails | SDFramesDetails | PickFrameDetails | RadialFourierDetails | FEMDetails | FFTDetails | FFTSumFramesDetails | PickFFTFrameDetails | SumSigDetails | ClustDetails;\r\n\r\nexport interface MsgPartAnalysis {\r\n    analysis: string,\r\n    dataset: string,\r\n    details: AnalysisDetails,\r\n    jobs: JobList,\r\n}\r\n\r\nexport type CreateOrUpdateAnalysisRequest = Omit<MsgPartAnalysis, \"analysis\" | \"jobs\">;\r\n\r\nexport type CreateAnalysisResponse = {\r\n    status: \"ok\",\r\n    messageType: \"ANALYSIS_CREATED\",\r\n} & MsgPartAnalysis\r\n\r\nexport type UpdateAnalysisResponse = {\r\n    status: \"ok\",\r\n    messageType: \"ANALYSIS_UPDATED\",\r\n} & MsgPartAnalysis\r\n\r\nexport type RemoveAnalysisResponse = {\r\n    status: \"ok\"\r\n    messageType: \"ANALYSIS_REMOVED\",\r\n    analysis: string,\r\n} | {\r\n    status: \"error\",\r\n    messageType: \"ANALYSIS_REMOVAL_FAILED\",\r\n    msg: string,\r\n    analysis: string,\r\n}\r\n\r\nexport interface CompoundAnalysisDetails {\r\n    mainType: AnalysisTypes,\r\n    analyses: string[],\r\n}\r\n\r\nexport interface MsgPartCompoundAnalysis {\r\n    compoundAnalysis: string,\r\n    dataset: string,\r\n    details: CompoundAnalysisDetails,\r\n}\r\n\r\nexport interface CreateOrUpdateCompoundAnalysisRequest {\r\n    dataset: string,\r\n    details: CompoundAnalysisDetails,\r\n}\r\n\r\nexport type CreateCompoundAnalysisResponse = {\r\n    status: \"ok\",\r\n    messageType: \"COMPOUND_ANALYSIS_CREATED\",\r\n} & MsgPartCompoundAnalysis;\r\n\r\nexport type RemoveCompoundAnalysisResponse = {\r\n    status: \"ok\"\r\n    messageType: \"COMPOUND_ANALYSIS_REMOVED\",\r\n    analysis: string,\r\n} | {\r\n    status: \"error\",\r\n    messageType: \"COMPOUND_ANALYSIS_REMOVAL_FAILED\",\r\n    msg: string,\r\n    analysis: string,\r\n}\r\n\r\nexport interface StartJobRequest {\r\n    job: {\r\n        analysis: string,\r\n    }\r\n}\r\n\r\nexport interface StartJobResponse {\r\n    status: \"ok\",\r\n    job: string,\r\n    details: MsgPartJob,\r\n}\r\n\r\nexport interface CancelJobResponse {\r\n    status: \"ok\",\r\n    job: string,\r\n}\r\n\r\n/*\r\n * fs browser \r\n */\r\n\r\n// some named place, i.e. \"Documents\", \"Home\", ...\r\nexport interface FSPlace {\r\n    title: string,\r\n    path: string,\r\n    key: string,\r\n}\r\n\r\nexport interface DirectoryListingDetails {\r\n    name: string,\r\n    size: number,\r\n    ctime: number,\r\n    mtime: number,\r\n    owner: string,\r\n}\r\n\r\nexport interface DirectoryListingResponseOK {\r\n    status: \"ok\",\r\n    path: string,\r\n    files: DirectoryListingDetails[],\r\n    dirs: DirectoryListingDetails[],\r\n    drives: string[],\r\n    places: FSPlace[],\r\n}\r\n\r\nexport interface DirectoryListingResponseError {\r\n    status: \"error\",\r\n    path: string,\r\n    code: string,\r\n    msg: string,\r\n    alternative?: string,\r\n}\r\n\r\nexport type DirectoryListingResponse = DirectoryListingResponseOK | DirectoryListingResponseError;\r\n","import { ActionsUnion, createAction } from \"../helpers/actionHelpers\";\r\nimport { DatasetFormParams, DirectoryListingDetails, FSPlace } from \"../messages\";\r\n\r\nexport enum ActionTypes {\r\n    LIST_DIRECTORY = 'BROWSER_LIST_DIRECTORY',\r\n    LIST_FULL_PATH = 'BROWSER_LIST_DIRECTORY_FULL',\r\n    DIRECTORY_LISTING = 'BROWSER_DIRECTORY_LISTING',\r\n    DETECT_PARAMS = 'BROWSER_DETECT_PARAMS',\r\n    PARAMS_DETECTED = 'BROWSER_PARAMS_DETECTED',\r\n    ERROR = 'BROWSER_ERROR',\r\n    OPEN = 'BROWSER_OPEN',\r\n    CANCEL = 'BROWSER_CANCEL',\r\n    SELECT = 'BROWSER_SELECT',\r\n    SELECT_FULL_PATH = 'BROWSER_SELECT_FULL_PATH',\r\n}\r\n\r\nexport const Actions = {\r\n    list: (path: string, name?: string) => createAction(ActionTypes.LIST_DIRECTORY, { path, name }),\r\n    dirListing: (path: string, dirs: DirectoryListingDetails[], files: DirectoryListingDetails[], drives: string[], places: FSPlace[]) => createAction(ActionTypes.DIRECTORY_LISTING, { path, dirs, files, drives, places }),\r\n    open: () => createAction(ActionTypes.OPEN),\r\n    cancel: () => createAction(ActionTypes.CANCEL),\r\n    select: (path: string, name: string) => createAction(ActionTypes.SELECT, { path, name }),\r\n    selectFullPath: (path: string) => createAction(ActionTypes.SELECT_FULL_PATH, { path }),\r\n    error: (msg: string, timestamp: number, id: string) => createAction(ActionTypes.ERROR, { msg, timestamp, id }),\r\n    detectParams: (path: string) => createAction(ActionTypes.DETECT_PARAMS, { path }),\r\n    paramsDetected: (path: string, params: DatasetFormParams) => createAction(ActionTypes.PARAMS_DETECTED, { path, params }),\r\n}\r\n\r\nexport type Actions = ActionsUnion<typeof Actions>;","import { FormikProps, withFormik } from \"formik\";\r\nimport * as React from \"react\";\r\nimport { Button, Form } from \"semantic-ui-react\";\r\nimport { ConfigState } from \"../../config/reducers\";\r\nimport { Omit } from \"../../helpers/types\";\r\nimport { ClusterTypes, ConnectRequestLocalCluster } from \"../../messages\";\r\n\r\ntype FormValues = Omit<ConnectRequestLocalCluster, \"type\">;\r\n\r\ninterface FormProps {\r\n    onSubmit: (params: ConnectRequestLocalCluster) => void,\r\n    config: ConfigState,\r\n}\r\n\r\ntype MergedProps = FormikProps<FormValues> & FormProps;\r\n\r\nconst LocalConnectionForm: React.SFC<MergedProps> = ({\r\n    values,\r\n    touched,\r\n    errors,\r\n    dirty,\r\n    isSubmitting,\r\n    handleChange,\r\n    handleBlur,\r\n    handleSubmit,\r\n    handleReset,\r\n}) => {\r\n    return (\r\n        <Form onSubmit={handleSubmit}>\r\n            <Form.Field>\r\n                <label htmlFor=\"numWorkers\">Number of Workers:</label>\r\n                <input type=\"number\" name=\"numWorkers\" value={values.numWorkers}\r\n                    onChange={handleChange}\r\n                    onBlur={handleBlur} />\r\n                {errors.numWorkers && touched.numWorkers && errors.numWorkers}\r\n            </Form.Field>\r\n            <Button primary={true} type=\"submit\" disabled={isSubmitting}>Connect</Button>\r\n        </Form>\r\n    )\r\n}\r\n\r\nexport default withFormik<FormProps, FormValues>({\r\n    mapPropsToValues: (ownProps: FormProps) => ({\r\n        numWorkers: ownProps.config.localCores,\r\n    }),\r\n    handleSubmit: (values, formikBag) => {\r\n        const { onSubmit } = formikBag.props;\r\n        onSubmit({\r\n            type: ClusterTypes.LOCAL,\r\n            ...values,\r\n        });\r\n    }\r\n})(LocalConnectionForm);\r\n","\r\nimport { FormikProps, withFormik } from \"formik\";\r\nimport * as React from \"react\";\r\nimport { Button, Form } from \"semantic-ui-react\";\r\nimport { Omit } from \"../../helpers/types\";\r\nimport { ClusterTypes, ConnectRequestTCP } from \"../../messages\";\r\n\r\ntype FormValues = Omit<ConnectRequestTCP, \"type\">;\r\n\r\ninterface FormProps {\r\n    onSubmit: (params: ConnectRequestTCP) => void,\r\n}\r\n\r\ntype MergedProps = FormikProps<FormValues> & FormProps;\r\n\r\nconst TCPConnectionForm: React.SFC<MergedProps> = ({\r\n    values,\r\n    touched,\r\n    errors,\r\n    dirty,\r\n    isSubmitting,\r\n    handleChange,\r\n    handleBlur,\r\n    handleSubmit,\r\n    handleReset,\r\n}) => {\r\n    return (\r\n        <Form onSubmit={handleSubmit}>\r\n            <Form.Field>\r\n                <label htmlFor=\"address\">Scheduler URI</label>\r\n                <input type=\"text\" name=\"address\" value={values.address}\r\n                    onChange={handleChange}\r\n                    onBlur={handleBlur} />\r\n                {errors.address && touched.address && errors.address}\r\n            </Form.Field>\r\n            <Button primary={true} type=\"submit\" disabled={isSubmitting}>Connect</Button>\r\n        </Form>\r\n    )\r\n}\r\n\r\nexport default withFormik<FormProps, FormValues>({\r\n    mapPropsToValues: () => ({\r\n        address: \"tcp://localhost:8786\",\r\n    }),\r\n    handleSubmit: (values, formikBag) => {\r\n        const { onSubmit } = formikBag.props;\r\n        onSubmit({\r\n            type: ClusterTypes.TCP,\r\n            ...values\r\n        });\r\n    }\r\n})(TCPConnectionForm);\r\n","\r\nimport * as React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Dropdown, DropdownProps, Segment } from \"semantic-ui-react\";\r\nimport * as clusterActions from \"../../cluster/actions\";\r\nimport { getEnumValues } from \"../../helpers\";\r\nimport { ClusterTypeMetadata, ClusterTypes, ConnectRequestParams } from \"../../messages\";\r\nimport { RootReducer } from \"../../store\";\r\nimport LocalConnectionForm from \"./LocalConnectionForm\";\r\nimport TCPConnectionForm from \"./TCPConnectionForm\";\r\n\r\n\r\nconst mapDispatchToProps = {\r\n    connectToCluster: clusterActions.Actions.connect,\r\n};\r\n\r\nconst mapStateToProps = (state: RootReducer) => {\r\n    return {\r\n        config: state.config,\r\n    }\r\n}\r\n\r\ntype MergedProps = DispatchProps<typeof mapDispatchToProps> & ReturnType<typeof mapStateToProps>;\r\n\r\nconst clusterTypeKeys = getEnumValues(ClusterTypes);\r\nconst clusterTypeOptions = clusterTypeKeys.map(t => ({\r\n    text: ClusterTypeMetadata[ClusterTypes[t]].label,\r\n    value: ClusterTypes[t],\r\n}));\r\n\r\ninterface ConnectionParamsState {\r\n    clusterType: ClusterTypes\r\n}\r\n\r\nclass ClusterConnectionForm extends React.Component<MergedProps, ConnectionParamsState> {\r\n    public state = {\r\n        clusterType: ClusterTypes.LOCAL,\r\n    }\r\n\r\n    public setType = (type: ClusterTypes) => {\r\n        this.setState({\r\n            clusterType: type,\r\n        });\r\n    }\r\n\r\n    public handleChange = (e: React.SyntheticEvent, data: DropdownProps) => {\r\n        const value = data.value as ClusterTypes;\r\n        this.setType(value);\r\n    }\r\n\r\n    public handleSubmit = (params: ConnectRequestParams) => {\r\n        this.props.connectToCluster(params);\r\n    }\r\n\r\n    public renderForm() {\r\n        const { clusterType } = this.state;\r\n        const { config } = this.props;\r\n\r\n        switch (clusterType) {\r\n            case ClusterTypes.LOCAL: {\r\n                return <LocalConnectionForm config={config} onSubmit={this.handleSubmit} />\r\n            }\r\n            case ClusterTypes.TCP: {\r\n                return <TCPConnectionForm onSubmit={this.handleSubmit} />\r\n            }\r\n        }\r\n    }\r\n\r\n    public render() {\r\n        return (\r\n            <>\r\n                <div>\r\n                    <Dropdown\r\n                        inline={true}\r\n                        options={clusterTypeOptions}\r\n                        value={this.state.clusterType}\r\n                        onChange={this.handleChange}\r\n                    />\r\n                </div>\r\n                <Segment>\r\n                    {this.renderForm()}\r\n                </Segment>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ClusterConnectionForm);","import * as React from 'react';\r\nimport { Icon, Message } from 'semantic-ui-react';\r\n\r\ninterface ChannelConnectingProps {\r\n    msg: string,\r\n}\r\n\r\nconst ChannelConnecting: React.SFC<ChannelConnectingProps> = ({ msg }) => (\r\n    <Message icon={true}>\r\n        <Icon name='cog' loading={true} />\r\n        <Message.Content>\r\n            <Message.Header>Connecting to LiberTEM</Message.Header>\r\n            {msg}\r\n        </Message.Content>\r\n    </Message>\r\n)\r\n\r\nexport default ChannelConnecting;","import * as React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport ClusterConnectionForm from \"../../cluster/components/ClusterConnectionForm\";\r\nimport { assertNotReached } from \"../../helpers\";\r\nimport { RootReducer } from \"../../store\";\r\nimport ChannelConnecting from \"./ChannelConnecting\";\r\n\r\nconst messages = {\r\n    waiting: \"Waiting...\",\r\n    connecting: \"Connecting...\",\r\n}\r\n\r\nconst clusterMessages = {\r\n    connected: \"Connected, waiting for initial state...\",\r\n    unknown: \"Connected, fetching cluster status...\",\r\n}\r\n\r\nconst ConnectedNotReady: React.SFC = () => {\r\n    const haveConfig = useSelector((state: RootReducer) => state.config.haveConfig);\r\n    const clusterConnection = useSelector((state: RootReducer) => state.clusterConnection);\r\n\r\n    if (!haveConfig) {\r\n        return <ChannelConnecting msg=\"waiting for configuration...\" />;\r\n    }\r\n    if (clusterConnection.status === \"disconnected\") {\r\n        return <ClusterConnectionForm />\r\n    } else if (clusterConnection.status === \"connected\") {\r\n        return <ChannelConnecting msg={clusterMessages.connected} />;\r\n    } else if (clusterConnection.status === \"unknown\") {\r\n        return <ChannelConnecting msg={clusterMessages.unknown} />;\r\n    }\r\n    assertNotReached(\"should not happen\");\r\n}\r\n\r\nconst ChannelStatus: React.SFC = ({ children }) => {\r\n    const channelStatus = useSelector((state: RootReducer) => state.channelStatus);\r\n\r\n    switch (channelStatus.status) {\r\n        case \"waiting\":\r\n        case \"connecting\": {\r\n            return <ChannelConnecting msg={messages[channelStatus.status]} />;\r\n        }\r\n        case \"connected\": {\r\n            return <ConnectedNotReady />\r\n        }\r\n        case \"ready\":\r\n            return <>{children}</>;\r\n        default:\r\n            assertNotReached(\"should not happen\");\r\n    }\r\n}\r\n\r\nexport default ChannelStatus;","import * as React from \"react\";\r\nimport { Icon, SemanticICONS } from \"semantic-ui-react\";\r\nimport { DirectoryListingDetails } from \"../../messages\";\r\n\r\n\r\ninterface FileBrowserEntryProps {\r\n    style: object,\r\n    details: DirectoryListingDetails,\r\n    onClick?: () => void,\r\n    icon?: SemanticICONS,\r\n}\r\n\r\ninterface TimeStampProps {\r\n    ts: number,\r\n}\r\n\r\nexport const TimeStamp: React.SFC<TimeStampProps> = ({ ts }) => {\r\n    const date = new Date(ts * 1000);\r\n    const fmtDate = date.toLocaleDateString();\r\n    const fmtTime = date.toLocaleTimeString();\r\n    const title = `${fmtDate} ${fmtTime}`;\r\n    return (\r\n        <div style={{ display: \"flex\", whiteSpace: \"nowrap\" }} title={title}>\r\n            <div style={{ width: \"50%\", marginRight: \"10px\" }}>{fmtDate}</div>\r\n            <div style={{ width: \"45%\" }}>{fmtTime}</div>\r\n        </div>\r\n    )\r\n}\r\n\r\n// adapted from https://stackoverflow.com/a/14919494/540644\r\nfunction humanFileSize(bytes: number, si: boolean = false) {\r\n    const thresh = si ? 1000 : 1024;\r\n    if (Math.abs(bytes) < thresh) {\r\n        return {\r\n            size: bytes,\r\n            unit: 'B',\r\n        }\r\n    }\r\n    const units = si\r\n        ? ['kB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB']\r\n        : ['KiB', 'MiB', 'GiB', 'TiB', 'PiB', 'EiB', 'ZiB', 'YiB'];\r\n    let u = -1;\r\n    do {\r\n        bytes /= thresh;\r\n        ++u;\r\n    } while (Math.abs(bytes) >= thresh && u < units.length - 1);\r\n\r\n    return {\r\n        size: bytes.toFixed(1),\r\n        unit: units[u],\r\n    }\r\n}\r\n\r\ninterface FileSizeProps {\r\n    size: number,\r\n    si?: boolean,\r\n}\r\n\r\nexport const FileSize: React.SFC<FileSizeProps> = ({ size, si }) => {\r\n    const fmtSize = humanFileSize(size, si)\r\n    return (\r\n        <div style={{ textAlign: \"right\" }}>\r\n            {fmtSize.size} {fmtSize.unit}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport const Cell: React.SFC<{ title?: string }> = ({ children, title }) => {\r\n    const styles: React.CSSProperties = {\r\n        whiteSpace: \"nowrap\",\r\n        overflow: \"hidden\",\r\n        textOverflow: \"ellipsis\",\r\n        marginRight: \"10px\",\r\n    }\r\n    return (\r\n        <div style={styles} title={title}>{children}</div>\r\n    );\r\n}\r\n\r\n\r\nclass FileBrowserEntry extends React.Component<FileBrowserEntryProps> {\r\n    public onClick = (e: React.MouseEvent) => {\r\n        const { onClick } = this.props;\r\n        if (onClick) {\r\n            onClick();\r\n        }\r\n    }\r\n\r\n    public render() {\r\n        const { details, style, icon } = this.props;\r\n        const myStyle: React.CSSProperties = {\r\n            cursor: \"pointer\",\r\n            ...style,\r\n        };\r\n\r\n        const tsStyles: React.CSSProperties = {\r\n            textAlign: \"right\",\r\n        };\r\n\r\n        return (\r\n            <div onClick={this.onClick} style={myStyle}>\r\n                <div style={{ display: \"flex\", paddingRight: \"10px\" }}>\r\n                    <div style={{ width: \"20%\", flexGrow: 1 }}>\r\n                        <Cell title={details.name}>\r\n                            {icon && <Icon name={icon} />}\r\n                            {details.name}\r\n                        </Cell>\r\n                    </div>\r\n                    <div style={{ width: \"10%\" }}><Cell><FileSize size={details.size} si={false} /></Cell></div>\r\n                    <div style={{ width: \"10%\" }}><Cell>{details.owner}</Cell></div>\r\n                    <div style={{ width: \"18%\", ...tsStyles }}>\r\n                        <Cell><TimeStamp ts={details.ctime} /></Cell>\r\n                    </div>\r\n                    <div style={{ width: \"18%\", ...tsStyles }}>\r\n                        <Cell><TimeStamp ts={details.mtime} /></Cell>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default FileBrowserEntry;","import * as React from \"react\";\r\nimport { Cell } from \"./FileBrowserEntry\";\r\n\r\nconst FileBrowserHeader: React.SFC = () => {\r\n    const alignRight: React.CSSProperties = {\r\n        textAlign: \"right\",\r\n    };\r\n\r\n    // ugly hack: padding-right to compensate for scrollbar size\r\n    return (\r\n        <div style={{ paddingRight: \"20px\", paddingBottom: \"10px\" }}>\r\n            <div style={{ display: \"flex\" }}>\r\n                <div style={{ width: \"20%\", flexGrow: 1 }}>\r\n                    <Cell>Name</Cell>\r\n                </div>\r\n                <div style={{ width: \"10%\", ...alignRight }}>\r\n                    <Cell>Size</Cell>\r\n                </div>\r\n                <div style={{ width: \"10%\" }}>\r\n                    <Cell>Owner</Cell>\r\n                </div>\r\n                <div style={{ width: \"18%\", ...alignRight }}>\r\n                    <Cell>Created</Cell>\r\n                </div>\r\n                <div style={{ width: \"18%\", ...alignRight }}>\r\n                    <Cell>Modified</Cell>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default FileBrowserHeader;","import * as React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Dispatch } from \"redux\";\r\nimport { DirectoryListingDetails } from \"../../messages\";\r\nimport * as browserActions from '../actions';\r\nimport FileBrowserEntry from \"./FileBrowserEntry\";\r\n\r\ninterface FileEntryProps {\r\n    path: string,\r\n    style: object,\r\n    details: DirectoryListingDetails,\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch, ownProps: FileEntryProps) => {\r\n    return {\r\n        select: () => dispatch(browserActions.Actions.select(ownProps.path, ownProps.details.name)),\r\n    };\r\n}\r\n\r\ntype MergedProps = FileEntryProps & ReturnType<typeof mapDispatchToProps>;\r\n\r\nclass FileEntry extends React.Component<MergedProps> {\r\n    public render() {\r\n        const { details, style, select } = this.props;\r\n\r\n        return (\r\n            <FileBrowserEntry onClick={select} style={style} details={details}\r\n                icon=\"file outline\" />\r\n        )\r\n    }\r\n}\r\n\r\nexport default connect(null, mapDispatchToProps)(FileEntry);","import * as React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Dispatch } from \"redux\";\r\nimport { DirectoryListingDetails } from \"../../messages\";\r\nimport * as browserActions from '../actions';\r\nimport FileBrowserEntry from \"./FileBrowserEntry\";\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch, ownProps: FolderEntryProps) => {\r\n    return {\r\n        list: () => {\r\n            dispatch(browserActions.Actions.list(ownProps.path, ownProps.details.name));\r\n            window.setTimeout(() => ownProps.onChange(), 0);\r\n        },\r\n    };\r\n}\r\n\r\ninterface FolderEntryProps {\r\n    path: string,\r\n    style: object,\r\n    details: DirectoryListingDetails,\r\n    onChange: () => void,\r\n}\r\n\r\ntype MergedProps = FolderEntryProps & ReturnType<typeof mapDispatchToProps>;\r\n\r\nconst FolderEntry: React.SFC<MergedProps> = ({ list, details, style, onChange }) => {\r\n    return (\r\n        <FileBrowserEntry onClick={list} style={style} details={details} icon=\"folder\" />\r\n    )\r\n}\r\n\r\nexport default connect(null, mapDispatchToProps)(FolderEntry);\r\n","import * as React from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport { Dispatch } from 'redux';\r\nimport { Dropdown, DropdownItemProps } from \"semantic-ui-react\";\r\nimport * as browserActions from '../actions';\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch, ownProps: DropdownItemProps) => {\r\n    return {\r\n        list: () => {\r\n            if (ownProps.value !== undefined) {\r\n                dispatch(browserActions.Actions.list(ownProps.value.toString()));\r\n                window.setTimeout(() => ownProps.onChange(), 0);\r\n            }\r\n        },\r\n    };\r\n}\r\n\r\ntype MergedProps = ReturnType<typeof mapDispatchToProps> & DropdownItemProps & {\r\n    onChange: () => void,\r\n};\r\n\r\nconst PathDropDownItem: React.SFC<MergedProps> = ({ list, ...props }) => {\r\n    const newProps = {\r\n        onClick: list,\r\n        ...props,\r\n    }\r\n    return <Dropdown.Item {...newProps} />;\r\n}\r\n\r\nexport default connect(null, mapDispatchToProps)(PathDropDownItem);","import { FormikProps, withFormik } from \"formik\";\r\nimport * as React from \"react\";\r\nimport { Form, Input } from \"semantic-ui-react\";\r\n\r\ninterface FormValues {\r\n    path: string,\r\n}\r\n\r\ninterface PathInputProps {\r\n    onChange: (path: string) => void,\r\n    initialPath: string,\r\n}\r\n\r\ntype MergedProps = FormikProps<FormValues> & PathInputProps;\r\n\r\nconst PathInput: React.SFC<MergedProps> = ({\r\n    values,\r\n    touched,\r\n    errors,\r\n    dirty,\r\n    isSubmitting,\r\n    handleChange,\r\n    handleBlur,\r\n    handleSubmit,\r\n    handleReset,\r\n}) => {\r\n    return (\r\n        <Form onSubmit={handleSubmit} style={{ flexGrow: 1 }}>\r\n            <Form.Field>\r\n                <Input autoComplete=\"off\" onBlur={handleBlur} onChange={handleChange} value={values.path} name=\"path\" />\r\n            </Form.Field>\r\n        </Form>\r\n    )\r\n}\r\n\r\nexport default withFormik<PathInputProps, FormValues>({\r\n    mapPropsToValues: ({ initialPath }) => ({\r\n        path: initialPath,\r\n    }),\r\n    handleSubmit: (values, formikBag) => {\r\n        const { onChange } = formikBag.props;\r\n        onChange(values.path);\r\n    },\r\n    enableReinitialize: true,\r\n})(PathInput);","import * as React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Dispatch } from \"redux\";\r\nimport { Dropdown, DropdownItemProps } from \"semantic-ui-react\";\r\nimport { DatasetTypes } from \"../../messages\";\r\nimport { RootReducer } from \"../../store\";\r\nimport * as browserActions from '../actions';\r\n\r\n\r\ntype DropdownOptions = Array<{\r\n    text: string,\r\n    value: {\r\n        type: DatasetTypes,\r\n        path: string,\r\n    },\r\n}>;\r\n\r\nconst mapStateToProps = (state: RootReducer) => {\r\n    return {\r\n        lastOpened: state.config.lastOpened,\r\n        fileHistory: state.config.fileHistory,\r\n        separator: state.config.separator,\r\n    };\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch) => {\r\n    return {\r\n        select: (path: string) => dispatch(browserActions.Actions.selectFullPath(path)),\r\n    };\r\n}\r\n\r\ntype MergedProps = ReturnType<typeof mapStateToProps> & ReturnType<typeof mapDispatchToProps>;\r\n\r\nconst RecentFiles: React.SFC<MergedProps> = ({ lastOpened, fileHistory, select }) => {\r\n\r\n    const recentFiles: DropdownOptions = fileHistory.filter((path: string) => lastOpened[path]).map((path: string) => {\r\n        const item = lastOpened[path];\r\n        return {\r\n            text: item.path,\r\n            value: {\r\n                type: item.type,\r\n                path: item.path,\r\n            },\r\n        };\r\n    });\r\n\r\n    const onClick = (e: React.MouseEvent<HTMLDivElement>, data: DropdownItemProps) => data.value && select(data.value.toString())\r\n\r\n    return (\r\n        <Dropdown item={true} text=\"Recent\" floating={true}>\r\n            <Dropdown.Menu>\r\n                <Dropdown.Header content=\"recent datasets\" />\r\n                {recentFiles.map((option, idx) => (\r\n                    <Dropdown.Item key={idx} value={option.value.path} content={option.text} onClick={onClick} />\r\n                ))}\r\n            </Dropdown.Menu>\r\n        </Dropdown>\r\n    );\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(RecentFiles);","import * as React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Dispatch } from \"redux\";\r\nimport { Dropdown, Menu } from \"semantic-ui-react\";\r\nimport * as browserActions from '../actions';\r\nimport { FSPlaces } from \"../types\";\r\nimport PathDropDownItem from \"./PathDropDownItem\";\r\nimport PathInput from \"./PathInput\";\r\nimport RecentFiles from \"./RecentFiles\";\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch, ownProps: PathBarProps) => {\r\n    return {\r\n        refresh: () => {\r\n            dispatch(browserActions.Actions.list(ownProps.currentPath));\r\n            window.setTimeout(() => ownProps.onChange(), 0);\r\n        },\r\n        handleInputChange: (path: string) => {\r\n            dispatch(browserActions.Actions.list(path));\r\n            window.setTimeout(() => ownProps.onChange(), 0);\r\n        },\r\n        goUp: () => {\r\n            dispatch(browserActions.Actions.list(ownProps.currentPath, '..'));\r\n            window.setTimeout(() => ownProps.onChange(), 0);\r\n        },\r\n    };\r\n}\r\n\r\ninterface PathBarProps {\r\n    currentPath: string,\r\n    onChange: () => void,\r\n    drives: string[],\r\n    places: FSPlaces,\r\n}\r\n\r\ntype MergedProps = ReturnType<typeof mapDispatchToProps> & PathBarProps;\r\n\r\nconst PathBar: React.SFC<MergedProps> = ({ currentPath, drives, places, onChange, refresh, goUp, handleInputChange }) => {\r\n    const driveOptions = drives.map((path) => ({ key: path, text: path }));\r\n    const placeOptions = Object.keys(places).map((key) => ({ key: places[key].path, text: places[key].title }))\r\n    return (\r\n        <Menu>\r\n            <RecentFiles />\r\n            <Dropdown text=\"Go to...\" floating={true} item={true}>\r\n                <Dropdown.Menu>\r\n                    <Dropdown.Header content=\"Drives\" />\r\n                    {driveOptions.map((option) => {\r\n                        return <PathDropDownItem key={option.key} value={option.key} content={option.text} onChange={onChange} />\r\n                    })}\r\n                    <Dropdown.Header content=\"Places\" />\r\n                    {placeOptions.map((option) => {\r\n                        return <PathDropDownItem key={option.key} value={option.key} content={option.text} onChange={onChange} />\r\n                    })}\r\n                </Dropdown.Menu>\r\n            </Dropdown>\r\n            <Menu.Item icon=\"arrow up\" onClick={goUp} />\r\n            <Menu.Item style={{ flexGrow: 1 }}>\r\n                <PathInput onChange={handleInputChange} initialPath={currentPath} />\r\n            </Menu.Item>\r\n            <Menu.Item icon=\"refresh\" onClick={refresh} />\r\n        </Menu>\r\n    );\r\n}\r\n\r\n\r\nexport default connect(null, mapDispatchToProps)(PathBar);","import * as React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { FixedSizeList as List } from \"react-window\";\r\nimport { Dispatch } from \"redux\";\r\nimport { Button, Header, Segment } from \"semantic-ui-react\";\r\nimport { DirectoryListingDetails } from \"../../messages\";\r\nimport { RootReducer } from \"../../store\";\r\nimport * as browserActions from '../actions';\r\nimport FileBrowserHeader from \"./FileBrowserHeader\";\r\nimport FileEntry from \"./FileEntry\";\r\nimport FolderEntry from \"./FolderEntry\";\r\nimport PathBar from \"./PathBar\";\r\n\r\nconst mapStateToProps = (state: RootReducer) => {\r\n    const { browser } = state;\r\n    return {\r\n        files: browser.files,\r\n        dirs: browser.dirs,\r\n        path: browser.path,\r\n        drives: browser.drives,\r\n        places: browser.places,\r\n        isLoading: browser.isLoading,\r\n    };\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch) => {\r\n    return {\r\n        cancel: () => dispatch(browserActions.Actions.cancel()),\r\n    };\r\n}\r\n\r\ntype MergedProps = ReturnType<typeof mapStateToProps> & ReturnType<typeof mapDispatchToProps>;\r\n\r\ninterface EntryFnArgs {\r\n    index: number,\r\n    style: object\r\n}\r\ntype EntryFn = (arg: EntryFnArgs) => void\r\n\r\nconst listRef = React.createRef<List>();\r\n\r\nconst scrollToTop = () => {\r\n    if (listRef.current === null) {\r\n        return;\r\n    }\r\n    listRef.current.scrollToItem(0);\r\n}\r\n\r\nfunction sortByKey<T extends object>(array: T[], getKey: (item: T) => any) {\r\n    return array.sort((a, b) => {\r\n        const x = getKey(a);\r\n        const y = getKey(b);\r\n        return ((x < y) ? -1 : ((x > y) ? 1 : 0));\r\n    });\r\n}\r\n\r\nconst FileBrowser: React.SFC<MergedProps> = ({ files, dirs, path, drives, places, cancel, isLoading }) => {\r\n    const getSortKey = (item: DirectoryListingDetails) => item.name.toLowerCase();\r\n    const dirEntries = sortByKey(dirs, getSortKey).map((dir) => (style: object) => <FolderEntry style={style} onChange={scrollToTop} path={path} details={dir} />);\r\n    const fileEntries = sortByKey(files, getSortKey).map((f) => ((style: object) => <FileEntry style={style} path={path} details={f} />));\r\n    const entries = dirEntries.concat(fileEntries);\r\n\r\n    const cellFn: EntryFn = ({ index, style }) => {\r\n        return entries[index](style)\r\n    }\r\n\r\n    let list = (\r\n        <List style={{ overflowY: \"scroll\" }} ref={listRef} height={300} width=\"100%\" itemCount={entries.length} itemSize={35}>\r\n            {cellFn}\r\n        </List>\r\n    );\r\n\r\n    if (isLoading) {\r\n        // FIXME: hardcoded height\r\n        list = (\r\n            <Segment loading={true} style={{ height: \"300px\" }} />\r\n        )\r\n    }\r\n\r\n    return (\r\n        <Segment.Group>\r\n            <Segment>\r\n                <Header as=\"h2\">Open dataset</Header>\r\n            </Segment>\r\n            <Segment>\r\n                <PathBar currentPath={path} drives={drives} places={places} onChange={scrollToTop} />\r\n            </Segment>\r\n            <Segment>\r\n                <FileBrowserHeader />\r\n                {list}\r\n            </Segment>\r\n            <Segment>\r\n                <Button onClick={cancel}>Cancel</Button>\r\n            </Segment>\r\n        </Segment.Group>\r\n    );\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(FileBrowser);","\r\nexport interface JobResultType {\r\n    imageURL: string,\r\n    description: { title: string, desc: string },\r\n}\r\n\r\nexport enum JobRunning {\r\n    CREATING = 'CREATING',\r\n    RUNNING = 'RUNNING',\r\n    DONE = 'DONE',\r\n}\r\n\r\nexport enum JobStatus {\r\n    CREATING = 'CREATING',\r\n    IN_PROGRESS = 'IN_PROGRESS',\r\n    CANCELLED = 'CANCELLED',\r\n    SUCCESS = 'SUCCESS',\r\n    ERROR = 'ERROR',\r\n}\r\n\r\nexport interface JobStateCommon {\r\n    id: string,\r\n    analysis: string,\r\n    status: JobStatus,\r\n    startTimestamp: number,\r\n    results: JobResultType[],\r\n}\r\n\r\nexport type JobStateStart = JobStateCommon & {\r\n    running: JobRunning.CREATING | JobRunning.RUNNING,\r\n}\r\n\r\nexport type JobStateDone = JobStateCommon & {\r\n    running: JobRunning.DONE,\r\n    endTimestamp: number,\r\n}\r\n\r\nexport type JobState = JobStateStart | JobStateDone;","import * as React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Button, Icon } from \"semantic-ui-react\";\r\nimport { RootReducer } from \"../../store\";\r\nimport * as browserActions from '../actions';\r\nimport FileBrowser from \"./FileBrowser\";\r\n\r\nexport const mapStateToProps = (state: RootReducer) => {\r\n    return {\r\n        isOpen: state.browser.isOpen,\r\n    }\r\n}\r\n\r\nexport const mapDispatchToProps = {\r\n    open: browserActions.Actions.open,\r\n}\r\n\r\ntype MergedProps = ReturnType<typeof mapStateToProps> & DispatchProps<typeof mapDispatchToProps>;\r\n\r\nconst BrowserWrapper: React.SFC<MergedProps> = ({ isOpen, open }) => {\r\n    if (!isOpen) {\r\n        return (\r\n            <Button icon={true} labelPosition=\"left\" onClick={open}>\r\n                <Icon name='add' />\r\n                Browse\r\n            </Button>\r\n        );\r\n    }\r\n    return (\r\n        <FileBrowser />\r\n    );\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(BrowserWrapper)","import * as React from \"react\";\r\nimport { Icon } from \"semantic-ui-react\";\r\n\r\nconst BusySpinner: React.SFC = () => {\r\n    const styles: React.CSSProperties = {\r\n        margin: 0,\r\n        padding: 0,\r\n        position: \"absolute\",\r\n        bottom: \"10px\",\r\n        right: \"10px\",\r\n        color: \"white\",\r\n        opacity: 0.7,\r\n        filter: \"drop-shadow(0 0 3px #000)\",\r\n    };\r\n    return (\r\n        <Icon name=\"cog\" loading={true} style={styles} />\r\n    )\r\n}\r\n\r\nexport default BusySpinner;","import * as React from \"react\";\r\nimport BusySpinner from \"./BusySpinner\";\r\n\r\ninterface BusyWrapperProps {\r\n    busy: boolean,\r\n}\r\n\r\nconst BusyWrapper: React.SFC<BusyWrapperProps> = ({ children, busy }) => {\r\n    const styles: React.CSSProperties = {\r\n        position: \"relative\",\r\n    };\r\n    return (\r\n        <div style={styles}>\r\n            {children}\r\n            {busy && <BusySpinner />}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default BusyWrapper;","import * as React from \"react\";\r\nimport { DraggableHandle } from \"./DraggableHandle\";\r\nimport { HandleRenderFunction } from \"./types\";\r\n\r\nexport interface HandleParentProps {\r\n    width: number,\r\n    height: number,\r\n    onKeyboardEvent?: React.KeyboardEventHandler<SVGElement>,\r\n    handles: HandleRenderFunction[],\r\n}\r\n\r\nexport class HandleParent extends React.Component<HandleParentProps> {\r\n    public currentHandle: DraggableHandle | undefined;\r\n\r\n    public handleDragStart = (h: DraggableHandle): void => {\r\n        this.currentHandle = h;\r\n    }\r\n\r\n    public handleDrop = (): void => {\r\n        this.currentHandle = undefined;\r\n    }\r\n\r\n    public handleMouseMove = (e: React.MouseEvent<SVGElement>): void => {\r\n        if (this.currentHandle) {\r\n            return this.currentHandle.externalMouseMove(e);\r\n        }\r\n    }\r\n\r\n    public handleMouseLeave = (e: React.MouseEvent<SVGElement>): void => {\r\n        if (this.currentHandle) {\r\n            this.currentHandle.externalLeave(e);\r\n        }\r\n    }\r\n\r\n    public handleMouseUp = (e: React.MouseEvent<SVGElement>): void => {\r\n        if (this.currentHandle) {\r\n            this.currentHandle.externalMouseUp(e);\r\n        }\r\n    }\r\n\r\n    public render() {\r\n        const { width, height } = this.props;\r\n        const styles = {\r\n            outline: \"1px dashed black\"\r\n        }\r\n        return (\r\n            <g\r\n                onMouseMove={this.handleMouseMove}\r\n                onMouseLeave={this.handleMouseLeave}\r\n                onMouseUp={this.handleMouseUp}\r\n                onKeyDown={this.props.onKeyboardEvent}\r\n                style={styles}\r\n                tabIndex={0}\r\n            >\r\n                <rect style={{ fill: \"transparent\" }}\r\n                    x={0} y={0} width={width} height={height}\r\n                />\r\n                {this.renderHandles()}\r\n            </g>\r\n        );\r\n    }\r\n\r\n    public renderHandles() {\r\n        const { handles, onKeyboardEvent } = this.props;\r\n        // we need to inform the handle when there are move/up/leave events\r\n        // on this parent element, for which we need to know the current handle.\r\n        // so we pass the handle a dragstart/drop function and kindly ask it\r\n        // to call us if it starts to be dragged or is dropped.\r\n        return handles.map((h, i) => {\r\n            const elem = h(this.handleDragStart, this.handleDrop, onKeyboardEvent);\r\n            if (React.isValidElement(elem)) {\r\n                return React.cloneElement(elem, { key: i });\r\n            }\r\n            return null;\r\n        });\r\n    }\r\n}\r\n\r\nexport default HandleParent;","import * as React from \"react\";\r\nimport { JobState } from \"../types\";\r\nimport styles from \"./ResultImage.module.css\";\r\n\r\ninterface ResultImageProps {\r\n    job: JobState,\r\n    channel: number,\r\n    width: number,\r\n    height: number,\r\n}\r\n\r\nconst ResultImage: React.SFC<ResultImageProps> = ({ job, channel, width, height }) => {\r\n    const result = job.results[channel];\r\n    if (result === undefined) {\r\n        return (\r\n            <svg className={styles.fallback} width={width} height={height} viewBox={`0 0 ${width} ${height}`} key={-1} />\r\n        )\r\n    }\r\n    return (\r\n        <image className={styles.default} xlinkHref={result.imageURL} width={width} height={height} />\r\n    );\r\n}\r\n\r\nexport default ResultImage;","import * as React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport styled from 'styled-components';\r\nimport BusyWrapper from \"../../widgets/BusyWrapper\";\r\nimport HandleParent from \"../../widgets/HandleParent\";\r\nimport { HandleRenderFunction } from \"../../widgets/types\";\r\nimport { JobRunning, JobState } from \"../types\";\r\nimport ResultImage from \"./ResultImage\";\r\n\r\ninterface ResultProps {\r\n    width: number,\r\n    height: number,\r\n    job: JobState,\r\n    extraHandles?: HandleRenderFunction,\r\n    extraWidgets?: React.ReactElement<SVGElement>,\r\n    channel: number,\r\n}\r\n\r\nconst ResultWrapper = styled.svg`\r\n    display: block;\r\n    border: 1px solid black;\r\n    width: 100%;\r\n    height: auto;\r\n`;\r\n\r\ntype MergedProps = ResultProps;\r\n\r\nclass Result extends React.Component<MergedProps> {\r\n    public renderHandles() {\r\n        const { width, height, extraHandles } = this.props;\r\n        let handles: HandleRenderFunction[] = [];\r\n        if (extraHandles) {\r\n            handles = [...handles, extraHandles];\r\n        }\r\n\r\n        return (\r\n            <HandleParent width={width} height={height} handles={handles} />\r\n        )\r\n    }\r\n\r\n    public render() {\r\n        const { job, channel, width, height, extraWidgets } = this.props;\r\n        const busy = job.running !== JobRunning.DONE;\r\n\r\n        return (\r\n            <BusyWrapper busy={busy}>\r\n                <ResultWrapper width={width} height={height} viewBox={`0 0 ${width} ${height}`}>\r\n                    <ResultImage job={job} channel={channel} width={width} height={height} />\r\n                    {extraWidgets}\r\n                    {this.renderHandles()}\r\n                </ResultWrapper>\r\n            </BusyWrapper>\r\n        );\r\n    }\r\n};\r\n\r\nexport default connect(null, null)(Result);","import styled from 'styled-components';\r\n\r\n\r\nconst Selectors = styled.div`\r\n    display: flex;\r\n    & > * {\r\n        margin-right: 10px;\r\n    }\r\n`;\r\n\r\n\r\n\r\nexport default Selectors;","import * as React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Dropdown, DropdownProps } from \"semantic-ui-react\";\r\nimport { RootReducer } from \"../../store\";\r\nimport { HandleRenderFunction } from \"../../widgets/types\";\r\nimport { JobRunning, JobState } from \"../types\";\r\nimport Result from \"./Result\";\r\nimport Selectors from \"./Selectors\";\r\n\r\ninterface ResultListProps {\r\n    width: number,\r\n    height: number,\r\n    selectors?: React.ReactElement<any>,\r\n    extraHandles?: HandleRenderFunction,\r\n    extraWidgets?: React.ReactElement<SVGElement>,\r\n    subtitle?: React.ReactNode,\r\n}\r\n\r\ninterface ExternalResultListProps {\r\n    compoundAnalysis: string,\r\n    analysisIndex: number,\r\n}\r\n\r\nconst mapStateToProps = (state: RootReducer, ownProps: ExternalResultListProps) => {\r\n    const compoundAnalysis = state.compoundAnalyses.byId[ownProps.compoundAnalysis];\r\n    const analysis = state.analyses.byId[compoundAnalysis.details.analyses[ownProps.analysisIndex]];\r\n\r\n    return {\r\n        jobsById: state.jobs.byId,\r\n        analysis,\r\n        compoundAnalysis,\r\n        analysisIndex: ownProps.analysisIndex,\r\n    };\r\n};\r\n\r\ntype MergedProps = ResultListProps & ReturnType<typeof mapStateToProps>;\r\n\r\ninterface ResultListState {\r\n    selectedChannel: number,\r\n}\r\n\r\nconst ResultListPlaceholder: React.SFC<{ width: number, height: number }> = ({ width, height }) => {\r\n    return (\r\n        <svg\r\n            style={{\r\n                display: \"block\",\r\n                border: \"1px solid black\",\r\n                width: \"100%\",\r\n                height: \"auto\"\r\n            }}\r\n            width={width} height={height}\r\n            viewBox={`0 0 ${width} ${height}`} key={-1} />\r\n    );\r\n}\r\n\r\n\r\nclass ResultList extends React.Component<MergedProps, ResultListState> {\r\n    public state: ResultListState = { selectedChannel: 0 };\r\n\r\n    public selectChannel = (e: React.SyntheticEvent, data: DropdownProps) => {\r\n        const value = data.value as number;\r\n        this.setState({ selectedChannel: value });\r\n    }\r\n\r\n    public getJob() {\r\n        const {\r\n            analysis, jobsById,\r\n        } = this.props;\r\n        if (!analysis || !analysis.displayedJob || !jobsById[analysis.displayedJob]) {\r\n            return undefined;\r\n        }\r\n        return jobsById[analysis.displayedJob];\r\n    }\r\n\r\n    public getMsg(job?: JobState) {\r\n        if (!job) {\r\n            return <>&nbsp;</>;\r\n        }\r\n        if (job.running === JobRunning.DONE) {\r\n            const dt = (job.endTimestamp - job.startTimestamp) / 1000;\r\n            return <>Analysis done in {dt.toFixed(3)}s</>;\r\n        } else {\r\n            return <>Analysis running...</>;\r\n        }\r\n    }\r\n\r\n    public genericRender(currentResult: React.ReactElement, job?: JobState) {\r\n        const { subtitle, children, selectors } = this.props;\r\n        const msg = this.getMsg(job);\r\n        return (\r\n            <div>\r\n                {currentResult}\r\n                {children}\r\n                <Selectors>\r\n                    <ResultImageSelector job={job} handleChange={this.selectChannel} selectedImg={this.state.selectedChannel} />\r\n                    {selectors}\r\n                </Selectors>\r\n                <p>{subtitle} {msg}</p>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    public render() {\r\n        const job = this.getJob();\r\n        const {\r\n            width, height,\r\n            extraHandles, extraWidgets\r\n        } = this.props;\r\n\r\n        if (!job) {\r\n            return this.genericRender(<ResultListPlaceholder width={width} height={height} />, job);\r\n        }\r\n\r\n        return this.genericRender(\r\n            <Result job={job}\r\n                extraHandles={extraHandles}\r\n                extraWidgets={extraWidgets}\r\n                width={width} height={height}\r\n                channel={this.state.selectedChannel}\r\n            />,\r\n            job\r\n        );\r\n    }\r\n}\r\n\r\ninterface ImageSelectorProps {\r\n    job?: JobState,\r\n    handleChange: (e: React.SyntheticEvent, data: DropdownProps) => void,\r\n    selectedImg: number,\r\n}\r\n\r\nconst ResultImageSelector: React.SFC<ImageSelectorProps> = ({ job, handleChange, selectedImg }) => {\r\n    if (!job) {\r\n        return null;\r\n    }\r\n    const availableImages = job.results.map((result, idx) => ({ text: result.description.title, value: idx }));\r\n    return (\r\n        <>\r\n            <div>\r\n                Channel:{' '}\r\n                <Dropdown\r\n                    inline={true}\r\n                    options={availableImages}\r\n                    value={selectedImg}\r\n                    onChange={handleChange}\r\n                />\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps)(ResultList);\r\n","export const inRectConstraint = (width: number, height: number) => (p: Point2D) => {\r\n    return {\r\n        x: Math.max(0, Math.min(width - 1, p.x)),\r\n        y: Math.max(0, Math.min(height - 1, p.y)),\r\n    }\r\n}\r\n\r\nexport const dist = (cx: number, cy: number, x: number, y: number) => {\r\n    const dx = cx - x;\r\n    const dy = cy - y;\r\n    return Math.sqrt(dx * dx + dy * dy);\r\n}\r\n\r\nexport const cbToRadius = (cx: number, cy: number, cb: ((r: number) => void) | undefined) => (x: number, y: number) => cb && cb(dist(cx, cy, x, y))\r\n\r\nexport const keepOnCY = (cy: number) => (p: Point2D) => {\r\n    return {\r\n        x: p.x,\r\n        y: cy,\r\n    }\r\n}\r\n\r\nexport const keepXLargerThan = (otherX: number) => (p: Point2D) => {\r\n    return {\r\n        x: otherX > p.x ? otherX : p.x,\r\n        y: p.y,\r\n    }\r\n}\r\n\r\nexport const keepXSmallerThan = (otherX: number) => (p: Point2D) => {\r\n    return {\r\n        x: otherX < p.x ? otherX : p.x,\r\n        y: p.y,\r\n    }\r\n}\r\n\r\nexport const riConstraint = (outerPos: number, cy: number) => (p: Point2D) => {\r\n    return keepXLargerThan(outerPos)(\r\n        keepOnCY(cy)(p)\r\n    );\r\n}\r\n\r\nexport const roConstraints = (innerPos: number, cy: number) => (p: Point2D) => {\r\n    return keepXSmallerThan(innerPos)(\r\n        keepOnCY(cy)(p)\r\n    );\r\n}","import { CSSProperties } from \"react\";\r\n\r\nexport const defaultMaskStyles = (imageWidth: number): CSSProperties => ({\r\n    fillOpacity: 0.3,\r\n    fill: \"red\",\r\n    strokeOpacity: 0.7,\r\n    stroke: \"red\",\r\n    strokeWidth: imageWidth / 128 / 3,\r\n});","import * as React from \"react\";\r\nimport { defaultMaskStyles } from \"./styles\";\r\n\r\nexport interface DiskProps {\r\n    imageWidth: number,\r\n    imageHeight: number,\r\n    cx: number,\r\n    cy: number,\r\n    r: number,\r\n}\r\n\r\nconst Disk: React.SFC<DiskProps> = ({ imageWidth, imageHeight, cx, cy, r }) => {\r\n    return (\r\n        <circle cx={cx + .5} cy={cy + .5} r={r} style={{ ...defaultMaskStyles(imageWidth) }} />\r\n    );\r\n}\r\n\r\nexport default Disk;","import * as React from \"react\";\r\nimport styled from 'styled-components';\r\nimport { handleKeyEvent, ModifyCoords } from \"./kbdHandler\";\r\n\r\nexport type HandleProps = {\r\n    x: number,\r\n    y: number,\r\n    scale: number,\r\n    withCross?: boolean,\r\n    focusRef: React.RefObject<SVGGElement>,\r\n} & React.SVGProps<SVGGElement>;\r\n\r\nconst StyledCircle = styled.circle`\r\n    stroke: red;\r\n    stroke-width: 1;\r\n    fill: transparent;\r\n    g:focus > & {\r\n        stroke: lightgreen;\r\n    }\r\n`;\r\n\r\nconst Cross = styled.path`\r\n    stroke: red;\r\n    stroke-width: 1;\r\n    fill: transparent;\r\n    g:focus > & {\r\n        stroke: lightgreen;\r\n    }\r\n`;\r\n\r\nconst FocusGroup = styled.g`\r\n    &:focus { outline: none; }\r\n`;\r\n\r\nconst Handle: React.SFC<HandleProps> = ({ scale, x, y, withCross, focusRef, ...args }) => {\r\n    const r = 3;\r\n    // scaleMatrix is needed to set the origin of the scale\r\n    const scaleMatrix = `matrix(${scale}, 0, 0, ${scale}, ${x - scale * x}, ${y - scale * y})`;\r\n    const style: React.CSSProperties = { transform: scaleMatrix };\r\n    const crossSpec = `\r\n        M${x - 4 - r / 2} ${y} L ${x - r / 2} ${y} M${x + r / 2} ${y} L ${x + 4 + r / 2} ${y}\r\n        M${x} ${y - 4 - r / 2} L ${x} ${y - r / 2} M${x} ${y + r / 2} L ${x} ${y + 4 + r / 2}\r\n    `;\r\n    const cross = withCross ? <Cross d={crossSpec} style={style} /> : null;\r\n    return (\r\n        <FocusGroup {...args} ref={focusRef}>\r\n            <StyledCircle cx={x} cy={y} r={r} style={style} />\r\n            {cross}\r\n        </FocusGroup>\r\n    )\r\n}\r\n\r\nexport interface DraggableHandleProps {\r\n    x: number,\r\n    y: number,\r\n    withCross?: boolean,\r\n    imageWidth?: number,\r\n    onDragMove?: (x: number, y: number) => void,\r\n    parentOnDragStart: (h: DraggableHandle) => void,\r\n    parentOnDrop: (x: number, y: number) => void,\r\n    onKeyboardEvent?: (e: React.KeyboardEvent<SVGElement>) => void,\r\n    constraint?: (p: Point2D) => Point2D,\r\n}\r\n\r\nexport function getScalingFactor(elem: SVGElement): number {\r\n    const svg = elem.ownerSVGElement;\r\n    if (svg === null) {\r\n        throw new Error(\"no owner SVG element?\");\r\n    }\r\n    const inWidthAttr = svg.getAttribute(\"width\");\r\n    if (inWidthAttr === null) {\r\n        throw new Error(\"no width on SVG element?\");\r\n    }\r\n    const inWidth = +inWidthAttr;\r\n    const svgMeasurements = svg.getBoundingClientRect();\r\n    return svgMeasurements.width / inWidth;\r\n}\r\n\r\nfunction relativeCoords(e: React.MouseEvent, parent: SVGElement) {\r\n    const f = getScalingFactor(parent);\r\n    const parentPos = parent.getBoundingClientRect();\r\n    const res = {\r\n        x: (e.pageX - (parentPos.left + window.pageXOffset)) / f,\r\n        y: (e.pageY - (parentPos.top + window.pageYOffset)) / f,\r\n    }\r\n    return res;\r\n}\r\n\r\n/**\r\n * stateful draggable handle, to be used as part of <svg/>\r\n */\r\nexport class DraggableHandle extends React.Component<DraggableHandleProps> {\r\n    public posRef: React.RefObject<SVGRectElement>;\r\n    public focusRef: React.RefObject<SVGGElement>;\r\n\r\n    public state = {\r\n        dragging: false,\r\n        drag: { x: 0, y: 0 },\r\n    }\r\n\r\n    constructor(props: DraggableHandleProps) {\r\n        super(props);\r\n        this.posRef = React.createRef<SVGRectElement>();\r\n        this.focusRef = React.createRef<SVGGElement>();\r\n    }\r\n\r\n    // mousemove event from outside (delegated from surrounding element)\r\n    public externalMouseMove = (e: React.MouseEvent<SVGElement>): void => {\r\n        this.move(e);\r\n    }\r\n\r\n    // mouseleave event from outside (delegated from surrounding element)\r\n    public externalLeave = (e: React.MouseEvent<SVGElement>): void => {\r\n        this.stopDrag(e);\r\n    }\r\n\r\n    // mouseup event from outside (delegated from surrounding element)\r\n    public externalMouseUp = (e: React.MouseEvent<SVGElement>): void => {\r\n        this.stopDrag(e);\r\n    }\r\n\r\n    public applyConstraint = (p: Point2D) => {\r\n        const { constraint } = this.props;\r\n        if (constraint) {\r\n            return constraint(p);\r\n        } else {\r\n            return p;\r\n        }\r\n    }\r\n\r\n    public startDrag = (e: React.MouseEvent<SVGElement>): void => {\r\n        e.preventDefault();\r\n        const { parentOnDragStart } = this.props;\r\n        if (this.posRef.current) {\r\n            this.setState({\r\n                dragging: true,\r\n                drag: this.applyConstraint(relativeCoords(e, this.posRef.current)),\r\n            });\r\n            if (parentOnDragStart) {\r\n                parentOnDragStart(this);\r\n            }\r\n            if (this.focusRef.current && this.focusRef.current.focus) {\r\n                this.focusRef.current.focus();\r\n            }\r\n        } else {\r\n            throw new Error(\"startDrag without posRef\");\r\n        }\r\n    }\r\n\r\n    public move = (e: React.MouseEvent<SVGElement>): void => {\r\n        const { onDragMove } = this.props;\r\n        if (!this.state.dragging) {\r\n            return;\r\n        }\r\n        if (this.posRef.current) {\r\n            this.setState({\r\n                drag: this.applyConstraint(relativeCoords(e, this.posRef.current)),\r\n            }, () => {\r\n                if (onDragMove) {\r\n                    const constrained = this.applyConstraint(this.state.drag)\r\n                    onDragMove(constrained.x, constrained.y);\r\n                }\r\n            })\r\n        } else {\r\n            throw new Error(\"move without posRef\");\r\n        }\r\n    }\r\n\r\n    public stopDrag = (e: React.MouseEvent<SVGElement>): void => {\r\n        const { parentOnDrop } = this.props;\r\n        const { dragging, drag } = this.state;\r\n        if (!dragging) {\r\n            return;\r\n        }\r\n        this.setState({\r\n            dragging: false,\r\n        })\r\n        if (parentOnDrop) {\r\n            parentOnDrop(drag.x, drag.y);\r\n        }\r\n    }\r\n\r\n    public handleKeyDown = (e: React.KeyboardEvent<SVGElement>) => {\r\n        const update = (fn: ModifyCoords) => {\r\n            const { x, y, onDragMove } = this.props;\r\n            const newCoords = fn(x, y);\r\n            const constrained = this.applyConstraint(newCoords);\r\n            if (onDragMove) {\r\n                onDragMove(constrained.x, constrained.y);\r\n            }\r\n        }\r\n        handleKeyEvent(e, update);\r\n    }\r\n\r\n    public renderCommon(x: number, y: number) {\r\n        const { imageWidth } = this.props;\r\n        const scale = imageWidth === undefined ? 1 : imageWidth / 128;\r\n        // empty zero-size <rect> as relative position reference\r\n        return (\r\n            <g>\r\n                <rect\r\n                    style={{ visibility: \"hidden\" }}\r\n                    ref={this.posRef}\r\n                    x={0} y={0} width={0} height={0}\r\n                />\r\n                <Handle scale={scale} x={x + .5} y={y + .5} withCross={this.props.withCross}\r\n                    focusRef={this.focusRef}\r\n                    onMouseUp={this.stopDrag}\r\n                    onMouseMove={this.move}\r\n                    onMouseDown={this.startDrag}\r\n                    onKeyDown={this.handleKeyDown}\r\n                    tabIndex={0}\r\n                />\r\n            </g>\r\n        );\r\n    }\r\n\r\n    public renderDragging() {\r\n        const { x, y } = this.state.drag;\r\n        return this.renderCommon(x, y);\r\n    }\r\n\r\n    public render() {\r\n        const { x, y } = this.props;\r\n        // either render from state (when dragging) or from props\r\n        if (this.state.dragging) {\r\n            return this.renderDragging();\r\n        } else {\r\n            return this.renderCommon(x, y);\r\n        }\r\n    }\r\n}\r\n\r\nexport default DraggableHandle;\r\n","import { ActionsUnion, createAction } from \"../helpers/actionHelpers\";\r\nimport { AnalysisDetails, AnalysisTypes, CompoundAnalysisDetails } from \"../messages\";\r\nimport { CompoundAnalysis } from \"./types\";\r\n\r\n\r\nexport enum ActionTypes {\r\n    CREATE = 'COMPOUND_ANALYSIS_CREATE',\r\n    CREATED = 'COMPOUND_ANALYSIS_CREATED',\r\n    UPDATED = 'COMPOUND_ANALYSIS_UPDATED',\r\n    RUN = 'COMPOUND_ANALYSIS_RUN',\r\n    RUNNING = 'COMPOUND_ANALYSIS_RUNNING',\r\n    REMOVE = 'COMPOUND_ANALYSIS_REMOVE',\r\n    REMOVED = 'COMPOUND_ANALYSIS_REMOVED',\r\n    ERROR = 'COMPOUND_ANALYSIS_ERROR',\r\n    ENABLE_AUTOSTART = 'COMPOUND_ANALYSIS_ENABLE_AUTOSTART',\r\n}\r\n\r\nexport const Actions = {\r\n    create: (dataset: string, analysisType: AnalysisTypes) => createAction(ActionTypes.CREATE, { dataset, analysisType }),\r\n    created: (\r\n        compoundAnalysis: CompoundAnalysis, autoStart: boolean\r\n    ) => createAction(ActionTypes.CREATED, { compoundAnalysis, autoStart }),\r\n    enableAutoStart: (\r\n        compoundAnalysisId: string\r\n    ) => createAction(ActionTypes.ENABLE_AUTOSTART, { compoundAnalysisId }),\r\n    updated: (id: string, details: CompoundAnalysisDetails) => createAction(ActionTypes.UPDATED, { id, details }),\r\n    run: (id: string, analysisIndex: number, details: AnalysisDetails) => createAction(ActionTypes.RUN, { id, analysisIndex, details }),\r\n    running: (id: string, job: string, analysisIndex: number) => createAction(ActionTypes.RUNNING, { id, job, jobIndex: analysisIndex }),\r\n    remove: (id: string) => createAction(ActionTypes.REMOVE, { id }),\r\n    removed: (id: string) => createAction(ActionTypes.REMOVED, { id }),\r\n    error: (msg: string, timestamp: number, id: string) => createAction(ActionTypes.ERROR, { msg, timestamp, id }),\r\n}\r\n\r\nexport type Actions = ActionsUnion<typeof Actions>;\r\n\r\nexport type ActionParts = {\r\n    [K in keyof typeof Actions]: ReturnType<typeof Actions[K]>\r\n}","export type ModifyCoords = ((x: number, y: number) => ({ x: number, y: number }));\r\n\r\n/**\r\n * Call this function whenever a keyboard event happens. The keyboard event is then translated\r\n * to a coordinate transformation, which is passed to the update callback. The update callback is\r\n * only called if relevant keys were pressed (example: arrow keys).\r\n * \r\n * @param e keyboard event\r\n * @param update a callback to handle coordinate updates\r\n */\r\nexport const handleKeyEvent = (e: React.KeyboardEvent<SVGElement>, update: (fn: ModifyCoords) => void) => {\r\n    let delta = 1;\r\n    if (e.shiftKey) {\r\n        delta = 10;\r\n    }\r\n    switch (e.key) {\r\n        case \"ArrowUp\":\r\n            update((x: number, y: number) => ({ x, y: y - delta }));\r\n            break;\r\n        case \"ArrowDown\":\r\n            update((x: number, y: number) => ({ x, y: y + delta }));\r\n            break;\r\n        case \"ArrowLeft\":\r\n            update((x: number, y: number) => ({ x: x - delta, y }));\r\n            break;\r\n        case \"ArrowRight\":\r\n            update((x: number, y: number) => ({ x: x + delta, y }));\r\n            break;\r\n        default:\r\n            return;\r\n    }\r\n    e.preventDefault();\r\n}\r\n","import * as React from \"react\";\r\nimport { useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { AnalysisTypes } from \"../../messages\";\r\nimport { HandleRenderFunction } from \"../../widgets/types\";\r\nimport * as compoundAnalysisActions from \"../actions\";\r\nimport useFramePicker from \"./FramePicker\";\r\nimport ModeSelector from \"./ModeSelector\";\r\nimport { useDiskROI } from \"./roi/DiskROI\";\r\nimport { useRectROI } from \"./roi/RectROI\";\r\nimport { useRoiPicker } from \"./roi/RoiPicker\";\r\n\r\n\r\nexport enum DefaultModes {\r\n    SUM = \"SUM\",\r\n    SD = \"SD\",\r\n    PICK = \"PICK\",\r\n}\r\n\r\nexport enum DefaultRois {\r\n    ALL = \"ALL\",\r\n    DISK = \"DISK\",\r\n    RECT = \"RECT\",\r\n}\r\n\r\nconst useDefaultFrameView = ({\r\n    scanWidth, scanHeight, compoundAnalysisId, doAutoStart,\r\n}: {\r\n    scanWidth: number, scanHeight: number, compoundAnalysisId: string,\r\n    doAutoStart: boolean,\r\n}) => {\r\n    const availableModes = [\r\n        {\r\n            text: \"Average\",\r\n            value: DefaultModes.SUM,\r\n        },\r\n        {\r\n            text: \"Standard Deviation\",\r\n            value: DefaultModes.SD,\r\n        },\r\n        {\r\n            text: \"Pick\",\r\n            value: DefaultModes.PICK,\r\n        },\r\n    ]\r\n\r\n    const availableRois = [\r\n        {\r\n            text: \"All\",\r\n            value: DefaultRois.ALL,\r\n        },\r\n        {\r\n            text: \"Disk\",\r\n            value: DefaultRois.DISK,\r\n        },\r\n        {\r\n            text: \"Rect\",\r\n            value: DefaultRois.RECT,\r\n        },\r\n    ]\r\n\r\n    const [frameMode, setMode] = useState(DefaultModes.SUM);\r\n    const [roi, setRoi] = useState(DefaultRois.ALL);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const updateFrameMode = (newMode: DefaultModes) => {\r\n        dispatch(compoundAnalysisActions.Actions.enableAutoStart(compoundAnalysisId));\r\n        setMode(newMode);\r\n    }\r\n\r\n    const updateRoi = (newRoi: DefaultRois) => {\r\n        dispatch(compoundAnalysisActions.Actions.enableAutoStart(compoundAnalysisId));\r\n        setRoi(newRoi);\r\n    }\r\n\r\n    const frameModeSelector = <ModeSelector modes={availableModes} currentMode={frameMode} onModeChange={updateFrameMode} label=\"Mode\" />\r\n\r\n    let roiSelector = <ModeSelector modes={availableRois} currentMode={roi} onModeChange={updateRoi} label=\"ROI\" />\r\n\r\n    if (frameMode === DefaultModes.PICK) {\r\n        roiSelector = <></>;\r\n    }\r\n\r\n    const [cx, setCx] = React.useState(Math.round(scanWidth / 2));\r\n    const [cy, setCy] = React.useState(Math.round(scanHeight / 2));\r\n\r\n    const { coords: pickCoords, handles: pickHandles } = useFramePicker({\r\n        enabled: frameMode === DefaultModes.PICK,\r\n        scanWidth, scanHeight,\r\n        analysisIndex: 0,\r\n        compoundAnalysisId,\r\n        cx, cy, setCx, setCy\r\n    });\r\n\r\n    const { rectRoiHandles, rectRoiWidgets, rectRoiParameters } = useRectROI({ scanHeight, scanWidth })\r\n    const { diskRoiHandles, diskRoiWidgets, diskRoiParameters } = useDiskROI({ scanHeight, scanWidth })\r\n\r\n    const nullHandles: HandleRenderFunction = (onDragStart, onDrop) => null\r\n    let handles = nullHandles;\r\n\r\n    let widgets;\r\n    let params = { roi: {} };\r\n    switch (roi) {\r\n        case DefaultRois.DISK:\r\n            handles = diskRoiHandles;\r\n            widgets = diskRoiWidgets;\r\n            params = diskRoiParameters;\r\n            break;\r\n        case DefaultRois.RECT:\r\n            handles = rectRoiHandles;\r\n            widgets = rectRoiWidgets;\r\n            params = rectRoiParameters;\r\n            break;\r\n    }\r\n\r\n    switch (frameMode) {\r\n        case DefaultModes.PICK:\r\n            handles = pickHandles;\r\n            widgets = undefined;\r\n            break;\r\n    }\r\n\r\n    useRoiPicker({\r\n        enabled: frameMode === DefaultModes.SD && doAutoStart,\r\n        scanWidth, scanHeight,\r\n        analysisIndex: 0,\r\n        compoundAnalysisId,\r\n        roiParameters: params,\r\n        analysisType: AnalysisTypes.SD_FRAMES\r\n    })\r\n\r\n    useRoiPicker({\r\n        enabled: frameMode === DefaultModes.SUM && doAutoStart,\r\n        scanWidth, scanHeight,\r\n        analysisIndex: 0,\r\n        compoundAnalysisId,\r\n        roiParameters: params,\r\n        analysisType: AnalysisTypes.SUM_FRAMES,\r\n    })\r\n\r\n    const frameViewTitle = (\r\n        frameMode !== DefaultModes.PICK ? null : <>Pick: x={pickCoords.cx}, y={pickCoords.cy} &emsp;</>\r\n    )\r\n\r\n    return {\r\n        frameViewTitle,\r\n        frameModeSelector: (<>{frameModeSelector} {roiSelector}</>),\r\n        roiSelector,\r\n        handles,\r\n        widgets,\r\n    }\r\n}\r\n\r\nexport default useDefaultFrameView;","import React from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { AnalysisParameters, AnalysisTypes } from \"../../messages\";\r\nimport { inRectConstraint } from \"../../widgets/constraints\";\r\nimport DraggableHandle from \"../../widgets/DraggableHandle\";\r\nimport { HandleRenderFunction } from \"../../widgets/types\";\r\nimport * as compoundAnalysisActions from \"../actions\";\r\n\r\nconst useFramePicker = ({\r\n    enabled, scanWidth, scanHeight, analysisIndex, compoundAnalysisId, cx, cy, setCx, setCy\r\n}: {\r\n    enabled: boolean, scanWidth: number, scanHeight: number,\r\n    analysisIndex: number, compoundAnalysisId: string,\r\n    cx: number, cy: number, setCx: (newCx: number) => void, setCy: (newCy: number) => void,\r\n}) => {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    React.useEffect(() => {\r\n        if (enabled) {\r\n            const params: AnalysisParameters = {\r\n                x: cx,\r\n                y: cy,\r\n            };\r\n\r\n            dispatch(compoundAnalysisActions.Actions.run(compoundAnalysisId, analysisIndex, {\r\n                analysisType: AnalysisTypes.PICK_FRAME,\r\n                parameters: params,\r\n            }))\r\n        }\r\n    }, [compoundAnalysisId, cx, cy, enabled, analysisIndex, dispatch]);\r\n\r\n    const onPickChange = (pickX: number, pickY: number) => {\r\n        const newX = Math.round(pickX);\r\n        const newY = Math.round(pickY);\r\n        if (cx === newX && cy === newY) {\r\n            return;\r\n        }\r\n        setCx(newX);\r\n        setCy(newY);\r\n    }\r\n\r\n    const renderPickHandle: HandleRenderFunction = (onDragStart, onDrop) => (\r\n        <DraggableHandle x={cx} y={cy} withCross={true}\r\n            imageWidth={scanWidth}\r\n            onDragMove={onPickChange}\r\n            parentOnDragStart={onDragStart}\r\n            parentOnDrop={onDrop}\r\n            constraint={inRectConstraint(scanWidth, scanHeight)} />\r\n    )\r\n\r\n    return { coords: { cx, cy }, handles: renderPickHandle };\r\n}\r\n\r\nexport default useFramePicker;","import * as React from \"react\";\r\nimport { Dropdown, DropdownProps } from \"semantic-ui-react\";\r\n\r\n\r\ntype ModeOptions = Array<{\r\n    text: string;\r\n    value: any;\r\n}>;\r\n\r\ninterface ModeSelectorProps {\r\n    modes: ModeOptions,\r\n    currentMode: any,\r\n    onModeChange: (mode: any) => void,\r\n    label: string,\r\n}\r\n\r\nconst ModeSelector: React.FunctionComponent<ModeSelectorProps> = ({\r\n    modes, currentMode, onModeChange, label\r\n}) => {\r\n\r\n    const onChange = (e: React.SyntheticEvent, data: DropdownProps) => {\r\n        onModeChange(data.value)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div>\r\n                {label}:{' '}\r\n                <Dropdown\r\n                    inline={true}\r\n                    options={modes}\r\n                    value={currentMode}\r\n                    onChange={onChange}\r\n                />\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ModeSelector;","import * as React from \"react\";\r\nimport { defaultMaskStyles } from \"./styles\";\r\n\r\nexport interface RectProps {\r\n    imageWidth: number,\r\n    imageHeight: number,\r\n    x: number,\r\n    y: number,\r\n    width: number,\r\n    height: number,\r\n}\r\n\r\nconst Rect: React.SFC<RectProps> = ({ imageWidth, imageHeight, x, y, width, height }) => {\r\n    let ymin: number;\r\n    let xmin: number;\r\n    if (height*width > 0) {\r\n    ymin = Math.min(y, y+height);\r\n    xmin = Math.min(x, x+width);}\r\n    else if (height > 0 && width < 0) \r\n    {ymin = y;\r\n    xmin = x+width;}\r\n    else \r\n    {ymin = y+height;\r\n    xmin = x;}\r\n    return (\r\n        <rect x={xmin + .5} y={ymin + .5} width={Math.abs(width)} height={Math.abs(height)} style={{ ...defaultMaskStyles(imageWidth) }} />\r\n    );\r\n}\r\n\r\nexport default Rect;\r\n\r\n","import * as React from \"react\";\r\nimport { useState } from \"react\";\r\n\r\nimport { FrameParams } from \"../../../messages\";\r\nimport DraggableHandle from \"../../../widgets/DraggableHandle\";\r\nimport Rect from \"../../../widgets/Rect\";\r\nimport { HandleRenderFunction } from \"../../../widgets/types\";\r\n\r\n\r\nconst useRectROI = ({ scanWidth, scanHeight }: {\r\n    scanWidth: number;\r\n    scanHeight: number;\r\n}) => {\r\n    const minLength = Math.min(scanWidth, scanHeight);\r\n    const [x, setx] = useState(scanWidth / 2);\r\n    const [y, sety] = useState(scanHeight / 2);\r\n    const [width, setwidth] = useState(minLength / 8);\r\n    const [height, setheight] = useState(minLength / 8);\r\n\r\n\r\n    const rectRoiParameters: FrameParams = {\r\n        roi: {\r\n            shape: \"rect\",\r\n            x,\r\n            y,\r\n            width,\r\n            height,\r\n        },\r\n    }\r\n\r\n\r\n    const handleCornerChange = (newx: number, newy: number) => {\r\n        setx(newx);\r\n        sety(newy);\r\n    };\r\n\r\n    const handleShapeChange = (newx: number, newy: number) => {\r\n        setwidth(newx - x);\r\n        setheight(newy - y);\r\n    };\r\n\r\n    const smthHandle = {\r\n        x: x + width,\r\n        y: y + height,\r\n    }\r\n\r\n    const rectRoiHandles: HandleRenderFunction = (handleDragStart, handleDrop) => (<>\r\n        <DraggableHandle x={x} y={y}\r\n            imageWidth={scanWidth}\r\n            onDragMove={handleCornerChange}\r\n            parentOnDragStart={handleDragStart}\r\n            parentOnDrop={handleDrop} />\r\n        <DraggableHandle x={smthHandle.x} y={smthHandle.y}\r\n            imageWidth={scanWidth}\r\n            onDragMove={handleShapeChange}\r\n            parentOnDragStart={handleDragStart}\r\n            parentOnDrop={handleDrop} />\r\n    </>);\r\n\r\n    const rectRoiWidgets = (\r\n        <Rect x={x} y={y} width={width} height={height}\r\n            imageWidth={scanWidth} imageHeight={scanHeight}\r\n        />\r\n    );\r\n\r\n    return {\r\n        rectRoiParameters,\r\n        rectRoiHandles,\r\n        rectRoiWidgets,\r\n    };\r\n};\r\n\r\nexport { useRectROI };\r\n\r\n","import * as React from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { AnalysisTypes, FrameParams } from \"../../../messages\";\r\nimport * as analysisActions from \"../../actions\";\r\n\r\n\r\nconst useRoiPicker = ({ compoundAnalysisId, enabled, analysisIndex, roiParameters, analysisType }: {\r\n    scanWidth: number;\r\n    scanHeight: number;\r\n    enabled: boolean;\r\n    analysisIndex: number,\r\n    compoundAnalysisId: string;\r\n    roiParameters: FrameParams;\r\n    analysisType: AnalysisTypes.SD_FRAMES | AnalysisTypes.SUM_FRAMES\r\n}) => {\r\n    const dispatch = useDispatch();\r\n\r\n    React.useEffect(() => {\r\n        const handle = setTimeout(() => {\r\n            if (enabled) {\r\n                const analysisDetails = {\r\n                    analysisType,\r\n                    parameters: roiParameters,\r\n                };\r\n                dispatch(analysisActions.Actions.run(compoundAnalysisId, analysisIndex, analysisDetails))\r\n            }\r\n        }, 100);\r\n\r\n        return () => clearTimeout(handle);\r\n        // rules-of-hooks can't be statically validated here\r\n        // eslint-disable-next-line\r\n    }, [analysisType, compoundAnalysisId, enabled, analysisIndex, JSON.stringify(roiParameters), dispatch]);\r\n\r\n    return {\r\n    };\r\n};\r\n\r\nexport { useRoiPicker };\r\n\r\n","import * as React from \"react\";\r\nimport { useState } from \"react\";\r\n\r\nimport { FrameParams } from \"../../../messages\";\r\nimport { cbToRadius, inRectConstraint, keepOnCY } from \"../../../widgets/constraints\";\r\nimport Disk from \"../../../widgets/Disk\";\r\nimport DraggableHandle from \"../../../widgets/DraggableHandle\";\r\nimport { HandleRenderFunction } from \"../../../widgets/types\";\r\n\r\nconst useDiskROI = ({ scanWidth, scanHeight }: {\r\n    scanWidth: number;\r\n    scanHeight: number;\r\n}) => {\r\n    const minLength = Math.min(scanWidth, scanHeight);\r\n    const [cx, setCx] = useState(scanWidth / 2);\r\n    const [cy, setCy] = useState(scanHeight / 2);\r\n    const [r, setR] = useState(minLength / 8);\r\n\r\n\r\n    const diskRoiParameters: FrameParams = {\r\n        roi: {\r\n            shape: \"disk\",\r\n            cx,\r\n            cy,\r\n            r,\r\n        },\r\n    }\r\n\r\n\r\n    const handleCenterChange = (newCx: number, newCy: number) => {\r\n        setCx(newCx);\r\n        setCy(newCy);\r\n    };\r\n\r\n    const handleRChange = (newR: number) => {\r\n        setR(newR);\r\n    };\r\n\r\n    const rHandle = {\r\n        x: cx - r,\r\n        y: cy,\r\n    }\r\n\r\n    const diskRoiHandles: HandleRenderFunction = (handleDragStart, handleDrop) => (<>\r\n        <DraggableHandle x={cx} y={cy}\r\n            imageWidth={scanWidth}\r\n            onDragMove={handleCenterChange}\r\n            parentOnDragStart={handleDragStart}\r\n            parentOnDrop={handleDrop}\r\n            constraint={inRectConstraint(scanWidth, scanHeight)} />\r\n        <DraggableHandle x={rHandle.x} y={rHandle.y}\r\n            imageWidth={scanWidth}\r\n            onDragMove={cbToRadius(cx, cy, handleRChange)}\r\n            parentOnDragStart={handleDragStart}\r\n            parentOnDrop={handleDrop}\r\n            constraint={keepOnCY(cy)} />\r\n    </>);\r\n\r\n    const diskRoiWidgets = (\r\n        <Disk cx={cx} cy={cy} r={r}\r\n            imageWidth={scanWidth} imageHeight={scanHeight}\r\n        />\r\n    );\r\n\r\n    return {\r\n        diskRoiParameters,\r\n        diskRoiHandles,\r\n        diskRoiWidgets,\r\n    };\r\n};\r\n\r\nexport { useDiskROI };\r\n\r\n","import * as React from \"react\";\r\nimport { Grid, Header, Icon, Segment } from \"semantic-ui-react\";\r\n\r\ninterface AnalysisLayoutTwoColProps {\r\n    title: string,\r\n    subtitle: React.ReactNode,\r\n    left: React.ReactNode,\r\n    right: React.ReactNode,\r\n    toolbar?: React.ReactNode,\r\n}\r\n\r\ntype MergedProps = AnalysisLayoutTwoColProps;\r\n\r\nconst AnalysisLayoutTwoCol: React.SFC<MergedProps> = ({\r\n    title, subtitle,\r\n    left, right,\r\n    toolbar,\r\n}) => {\r\n    return (\r\n        <>\r\n            <Header as='h3' attached=\"top\">\r\n                <Icon name=\"cog\" />\r\n                <Header.Content>{title}</Header.Content>\r\n            </Header>\r\n            <Segment attached={true}>\r\n                <Grid columns={2}>\r\n                    <Grid.Row>\r\n                        <Grid.Column>\r\n                            {left}\r\n                            <p>{subtitle}</p>\r\n                        </Grid.Column>\r\n                        <Grid.Column>\r\n                            {right}\r\n                        </Grid.Column>\r\n                    </Grid.Row>\r\n                </Grid>\r\n            </Segment>\r\n            {toolbar}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default AnalysisLayoutTwoCol","import { AnalysisTypes } from \"../messages\";\r\nimport { CompoundAnalysisMetadata, CompoundAnalysisMetadataItem } from \"./types\";\r\n// keyof typeof: https://stackoverflow.com/a/42623905/540644\r\nexport const getMetadata = (typeName: keyof typeof AnalysisTypes): CompoundAnalysisMetadataItem => {\r\n    const type: AnalysisTypes = AnalysisTypes[typeName];\r\n    return CompoundAnalysisMetadata[type];\r\n};\r\n","import * as React from \"react\";\r\nimport { useState } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { Button, Dropdown, DropdownProps, Header, Icon, Modal, Popup } from \"semantic-ui-react\";\r\nimport { AnalysisState } from \"../../analysis/types\";\r\nimport { JobStatus } from \"../../job/types\";\r\nimport { RootReducer } from \"../../store\";\r\nimport { getMetadata } from \"../getMetadata\";\r\nimport { CompoundAnalysisState } from \"../types\";\r\n\r\ninterface DownloadItemsProps {\r\n    compoundAnalysis: CompoundAnalysisState,\r\n    currentFormat?: string,\r\n}\r\n\r\nconst DownloadItems: React.SFC<DownloadItemsProps> = ({\r\n    compoundAnalysis, currentFormat\r\n}) => {\r\n\r\n    const downloadUrl = (analysisId: string) => (\r\n        `/api/compoundAnalyses/${compoundAnalysis.compoundAnalysis}/analyses/${analysisId}/download/${currentFormat}/`\r\n    )\r\n\r\n    const analysesById = useSelector((state: RootReducer) => {\r\n        return state.analyses.byId;\r\n    });\r\n\r\n    const jobsById = useSelector((state: RootReducer) => {\r\n        return state.jobs.byId;\r\n    });\r\n\r\n    const analyses = compoundAnalysis.details.analyses.map(analysis => {\r\n        return analysesById[analysis];\r\n    }).filter(analysis => {\r\n        return analysis.jobs.some(jobId => jobsById[jobId].status === JobStatus.SUCCESS);\r\n    })\r\n\r\n    const getAnalysisDescription = (analysis: AnalysisState) => {\r\n        return getMetadata(analysis.details.analysisType).desc;\r\n    }\r\n\r\n    return (\r\n        <ul>\r\n            {analyses.map((analysis) => {\r\n                return (\r\n                    <li key={analysis.id}>\r\n                        <a href={downloadUrl(analysis.id)}>\r\n                            {getAnalysisDescription(analysis)}\r\n                        </a>\r\n                    </li>\r\n                );\r\n            })}\r\n        </ul>\r\n    )\r\n}\r\n\r\ninterface DownloadProps {\r\n    compoundAnalysis: CompoundAnalysisState,\r\n}\r\n\r\ntype FormatOptions = Array<{\r\n    text: string;\r\n    value: any;\r\n}>;\r\n\r\nconst Download: React.SFC<DownloadProps> = ({ compoundAnalysis }) => {\r\n    const formats = useSelector((state: RootReducer) => state.config.resultFileFormats);\r\n    const formatOptions: FormatOptions = Object.keys(formats).map(identifier => {\r\n        return {\r\n            value: identifier,\r\n            text: formats[identifier].description,\r\n        }\r\n    });\r\n\r\n    const [currentFormat, setFormat] = useState(formatOptions[0]?.value);\r\n\r\n    // we may be called before the config is completely loaded, so we\r\n    // need to set the format after the list of formats is available\r\n    React.useEffect(() => {\r\n        if(formatOptions.length !== 0 && !currentFormat) {\r\n            setFormat(formatOptions[0].value);\r\n        }\r\n    }, [formatOptions, currentFormat])\r\n\r\n    const onFormatChange = (e: React.SyntheticEvent, data: DropdownProps) => {\r\n        setFormat(data.value);\r\n    }\r\n\r\n    return (\r\n        <Modal trigger={\r\n            <Button icon={true}>\r\n                <Icon name='download' />\r\n                Download\r\n            </Button>\r\n        }>\r\n            <Popup.Header>\r\n                Download Results, format: <Dropdown inline={true} options={formatOptions} onChange={onFormatChange} value={currentFormat} />\r\n            </Popup.Header>\r\n            <Popup.Content>\r\n                <Header as=\"h3\">Available results:</Header>\r\n                <DownloadItems compoundAnalysis={compoundAnalysis} currentFormat={currentFormat} />\r\n            </Popup.Content>\r\n        </Modal>\r\n    );\r\n}\r\n\r\nexport default Download;","import * as React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Button, Icon, IconProps, Segment } from \"semantic-ui-react\";\r\nimport { RootReducer } from \"../../store\";\r\nimport * as analysisActions from \"../actions\";\r\nimport { getAnalysisStatus } from \"../helpers\";\r\nimport { CompoundAnalysisState } from \"../types\";\r\nimport Download from \"./Download\";\r\n\r\ninterface ToolbarProps {\r\n    compoundAnalysis: CompoundAnalysisState,\r\n    busyIdxs: number[],\r\n    onApply: () => void,\r\n}\r\n\r\n\r\ntype MergedProps = ToolbarProps;\r\n\r\nconst Toolbar: React.SFC<MergedProps> = ({ busyIdxs, onApply, compoundAnalysis }) => {\r\n    const dispatch = useDispatch();\r\n    const handleRemove = () => dispatch(analysisActions.Actions.remove(compoundAnalysis.compoundAnalysis));\r\n    const analyses = useSelector((state: RootReducer) => state.analyses);\r\n    const jobs = useSelector((state: RootReducer) => state.jobs);\r\n    const status = getAnalysisStatus(\r\n        compoundAnalysis, analyses, jobs,\r\n        busyIdxs\r\n    );\r\n    const running = status === \"busy\";\r\n    const applyIconProps: IconProps = running ? { name: 'cog', loading: true } : { name: 'check' }\r\n\r\n    return (\r\n        <Segment attached=\"bottom\">\r\n            <Button.Group>\r\n                <Button primary={true} onClick={onApply} icon={true}>\r\n                    <Icon {...applyIconProps} />\r\n                    Apply\r\n                </Button>\r\n                <Download compoundAnalysis={compoundAnalysis} />\r\n                <Button onClick={handleRemove} icon={true}>\r\n                    <Icon name='remove' />\r\n                    Remove\r\n                </Button>\r\n            </Button.Group>\r\n        </Segment>\r\n    );\r\n}\r\n\r\nexport default Toolbar;","import { AnalysisReducerState } from \"../analysis/reducers\";\r\nimport { JobReducerState } from \"../job/reducers\";\r\nimport { JobRunning } from \"../job/types\";\r\nimport { CompoundAnalysisState } from \"./types\";\r\n\r\nexport const getAnalysisStatus = (compoundAnalysis: CompoundAnalysisState, analyses: AnalysisReducerState, jobs: JobReducerState, analysisIdxsToInclude: number[] = []): \"idle\" | \"busy\" => {\r\n    let filteredAnalyses = compoundAnalysis.details.analyses;\r\n\r\n    if (analysisIdxsToInclude.length > 0) {\r\n        filteredAnalyses = filteredAnalyses.filter((analysisId: string, idx: number) => {\r\n            return analysisIdxsToInclude.indexOf(idx) !== -1;\r\n        })\r\n    }\r\n\r\n    return filteredAnalyses.reduce((prevValue: \"idle\" | \"busy\", analysisId: string) => {\r\n        const analysis = analyses.byId[analysisId];\r\n        if(!analysis) {\r\n            return prevValue; // no analysis, so \"all jobs\" are done\r\n        }\r\n        const allDone = analysis.jobs.every(\r\n            jobId => jobs.byId[jobId].running === JobRunning.DONE\r\n        );\r\n        return allDone ? prevValue : \"busy\";\r\n    }, \"idle\");\r\n}","import * as React from \"react\";\r\nimport { useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { defaultDebounce } from \"../../helpers\";\r\nimport ResultList from \"../../job/components/ResultList\";\r\nimport { AnalysisTypes } from \"../../messages\";\r\nimport { cbToRadius, inRectConstraint, keepOnCY } from \"../../widgets/constraints\";\r\nimport Disk from \"../../widgets/Disk\";\r\nimport { DraggableHandle } from \"../../widgets/DraggableHandle\";\r\nimport { HandleRenderFunction } from \"../../widgets/types\";\r\nimport * as compoundAnalysisActions from \"../actions\";\r\nimport { CompoundAnalysisProps } from \"../types\";\r\nimport useDefaultFrameView from \"./DefaultFrameView\";\r\nimport AnalysisLayoutTwoCol from \"./layouts/AnalysisLayoutTwoCol\";\r\nimport Toolbar from \"./Toolbar\";\r\n\r\nconst CenterOfMassAnalysis: React.SFC<CompoundAnalysisProps> = ({ compoundAnalysis, dataset }) => {\r\n    const { shape } = dataset.params;\r\n    const [scanHeight, scanWidth, imageHeight, imageWidth] = shape;\r\n    const minLength = Math.min(imageWidth, imageHeight);\r\n    const [cx, setCx] = useState(imageWidth / 2);\r\n    const [cy, setCy] = useState(imageHeight / 2);\r\n    const [r, setR] = useState(minLength / 4);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const rHandle = {\r\n        x: cx - r,\r\n        y: cy,\r\n    }\r\n\r\n    const handleCenterChange = defaultDebounce((newCx: number, newCy: number) => {\r\n        setCx(newCx);\r\n        setCy(newCy);\r\n    });\r\n    const handleRChange = defaultDebounce(setR);\r\n\r\n    const frameViewHandles: HandleRenderFunction = (handleDragStart, handleDrop) => (<>\r\n        <DraggableHandle x={cx} y={cy}\r\n            imageWidth={imageWidth}\r\n            onDragMove={handleCenterChange}\r\n            parentOnDragStart={handleDragStart}\r\n            parentOnDrop={handleDrop}\r\n            constraint={inRectConstraint(imageWidth, imageHeight)} />\r\n        <DraggableHandle x={rHandle.x} y={rHandle.y}\r\n            imageWidth={imageWidth}\r\n            onDragMove={cbToRadius(cx, cy, handleRChange)}\r\n            parentOnDragStart={handleDragStart}\r\n            parentOnDrop={handleDrop}\r\n            constraint={keepOnCY(cy)} />\r\n    </>);\r\n\r\n    const frameViewWidgets = (\r\n        <Disk cx={cx} cy={cy} r={r}\r\n            imageWidth={imageWidth} imageHeight={imageHeight} />\r\n    )\r\n\r\n    const {\r\n        frameViewTitle, frameModeSelector,\r\n        handles: resultHandles, widgets: resultWidgets\r\n    } = useDefaultFrameView({\r\n        scanWidth,\r\n        scanHeight,\r\n        compoundAnalysisId: compoundAnalysis.compoundAnalysis,\r\n        doAutoStart: compoundAnalysis.doAutoStart,\r\n    })\r\n\r\n    const subtitle = <>{frameViewTitle} Disk: center=(x={cx.toFixed(2)}, y={cy.toFixed(2)}), r={r.toFixed(2)}</>;\r\n\r\n    const runAnalysis = () => {\r\n        dispatch(compoundAnalysisActions.Actions.run(compoundAnalysis.compoundAnalysis, 1, {\r\n            analysisType: AnalysisTypes.CENTER_OF_MASS,\r\n            parameters: {\r\n                shape: \"com\",\r\n                cx,\r\n                cy,\r\n                r\r\n            }\r\n        }));\r\n    };\r\n\r\n    const toolbar = <Toolbar compoundAnalysis={compoundAnalysis} onApply={runAnalysis} busyIdxs={[1]} />\r\n\r\n    return (\r\n        <AnalysisLayoutTwoCol\r\n            title=\"COM analysis\" subtitle={subtitle}\r\n            left={<>\r\n                <ResultList\r\n                    extraHandles={frameViewHandles} extraWidgets={frameViewWidgets}\r\n                    analysisIndex={0} compoundAnalysis={compoundAnalysis.compoundAnalysis}\r\n                    width={imageWidth} height={imageHeight}\r\n                    selectors={frameModeSelector}\r\n                />\r\n            </>}\r\n            right={<>\r\n                <ResultList\r\n                    analysisIndex={1} compoundAnalysis={compoundAnalysis.compoundAnalysis}\r\n                    width={scanWidth} height={scanHeight}\r\n                    extraHandles={resultHandles}\r\n                    extraWidgets={resultWidgets}\r\n                />\r\n            </>}\r\n            toolbar={toolbar}\r\n        />\r\n    );\r\n}\r\n\r\nexport default CenterOfMassAnalysis;","// from https://stackoverflow.com/a/45100420/540644\r\nexport function getPathArc(center: { x: number, y: number }, start: number, end: number, radius: number) {\r\n    if (end === start) { end += 360; }\r\n    let degree = end - start;\r\n    degree = degree < 0 ? (degree + 360) : degree;\r\n    const points = [];\r\n    points.push(getLocationFromAngle(start, radius, center));\r\n    points.push(getLocationFromAngle(start + degree / 3, radius, center));\r\n    points.push(getLocationFromAngle(start + degree * 2 / 3, radius, center));\r\n    points.push(getLocationFromAngle(end, radius, center));\r\n    return getCirclePath(points, radius, (degree < 180) ? 0 : 1);\r\n}\r\n\r\nfunction getCirclePath(points: Array<{ x: number, y: number }>, radius: number, clockWise: 0 | 1) {\r\n    return ['M', points[0].x, points[0].y,\r\n        'A', radius, radius, 0, 0, clockWise, points[1].x, points[1].y,\r\n        'A', radius, radius, 0, 0, clockWise, points[2].x, points[2].y,\r\n        'A', radius, radius, 0, 0, clockWise, points[3].x, points[3].y\r\n    ].join(' ');\r\n}\r\n\r\nfunction getLocationFromAngle(degree: number, radius: number, center: { x: number, y: number }) {\r\n    const radian = (degree * Math.PI) / 180;\r\n    return {\r\n        x: Math.cos(radian) * radius + center.x,\r\n        y: Math.sin(radian) * radius + center.y\r\n    }\r\n}\r\n","import * as React from \"react\";\r\nimport { getPathArc } from \"../helpers/svg\";\r\nimport { defaultMaskStyles } from \"./styles\";\r\n\r\nexport interface RingProps {\r\n    imageWidth: number,\r\n    cx: number,\r\n    cy: number,\r\n    ri: number,\r\n    ro: number,\r\n}\r\n\r\nconst Ring: React.SFC<RingProps> = ({ imageWidth, cx, cy, ri, ro }) => {\r\n    // see also: https://stackoverflow.com/a/37883328/540644\r\n    const pathSpecs = [\r\n        getPathArc({ x: cx + .5, y: cy + .5 }, 90, 90, ro),\r\n        getPathArc({ x: cx + .5, y: cy + .5 }, 90, 90, ri)\r\n    ]\r\n    const pathSpec = pathSpecs.join(' ');\r\n\r\n    return (\r\n        <path d={pathSpec} fillRule=\"evenodd\" style={{ ...defaultMaskStyles(imageWidth) }} />\r\n    );\r\n}\r\n\r\nexport default Ring;","import * as React from \"react\";\r\nimport { Grid, Header, Icon, Segment } from \"semantic-ui-react\";\r\n\r\ninterface AnalysisLayoutTwoResProps {\r\n    title: string,\r\n    subtitle: React.ReactNode,\r\n    left: React.ReactNode,\r\n    mid: React.ReactNode,\r\n    right: React.ReactNode,\r\n    clustparams: React.ReactNode,\r\n    toolbar?: React.ReactNode,\r\n    title1: string, \r\n    title2: React.ReactNode,\r\n    title3:string,\r\n\r\n}\r\n\r\ntype MergedProps = AnalysisLayoutTwoResProps;\r\n\r\nconst AnalysisLayoutTwoRes: React.SFC<MergedProps> = ({\r\n    title, subtitle,\r\n    left, mid, right,\r\n    toolbar, clustparams, title1, title2, title3\r\n}) => {\r\n    return (\r\n        <>\r\n            <Header as='h3' attached=\"top\">\r\n                <Icon name=\"cog\" />\r\n                <Header.Content>{title}</Header.Content>\r\n            </Header>\r\n            <Segment attached={true}>\r\n                <Grid columns={3}>\r\n                    <Grid.Row>\r\n                        <Grid.Column width={4}>\r\n                            <p>{title1}</p>\r\n                        </Grid.Column> \r\n\r\n                        <Grid.Column width={6}>\r\n                            <p>{title2}</p>   \r\n\r\n                        </Grid.Column>\r\n\r\n                        <Grid.Column width={6}>\r\n                            <p>{title3}</p>\r\n                        </Grid.Column>    \r\n                    </Grid.Row>\r\n\r\n                    <Grid.Row>\r\n                        <Grid.Column width={4}>\r\n                            {left}\r\n                        </Grid.Column>\r\n\r\n                        <Grid.Column width={6}>\r\n                            {mid}\r\n                        </Grid.Column>\r\n\r\n                        <Grid.Column width={6}>\r\n                            {right}\r\n                        </Grid.Column>\r\n\r\n                    </Grid.Row>\r\n\r\n                    <Grid.Row>\r\n                        <Grid.Column width={16}>\r\n\r\n                            <div>{clustparams}</div>\r\n                            <p>{subtitle}</p>\r\n\r\n                        </Grid.Column>\r\n\r\n                    </Grid.Row>\r\n                </Grid>\r\n                \r\n            </Segment>\r\n            \r\n            {toolbar}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default AnalysisLayoutTwoRes","import * as React from \"react\";\r\nimport { useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { Accordion, Form, Icon } from \"semantic-ui-react\";\r\nimport { defaultDebounce } from \"../../helpers\";\r\nimport ResultList from \"../../job/components/ResultList\";\r\nimport { AnalysisTypes } from \"../../messages\";\r\nimport { cbToRadius, inRectConstraint, riConstraint, roConstraints } from \"../../widgets/constraints\";\r\nimport DraggableHandle from \"../../widgets/DraggableHandle\";\r\nimport Ring from \"../../widgets/Ring\";\r\nimport { HandleRenderFunction } from \"../../widgets/types\";\r\nimport * as compoundAnalysisActions from \"../actions\";\r\nimport { CompoundAnalysisProps } from \"../types\";\r\nimport useDefaultFrameView from \"./DefaultFrameView\";\r\nimport AnalysisLayoutTwoRes from \"./layouts/AnalysisLayoutTwoRes\";\r\nimport { useRectROI } from \"./roi/RectROI\";\r\nimport Toolbar from \"./Toolbar\";\r\n\r\n\r\nconst ClustAnalysis: React.SFC<CompoundAnalysisProps> = ({ compoundAnalysis, dataset }) => {\r\n    const { shape } = dataset.params;\r\n    const [scanHeight, scanWidth, imageHeight, imageWidth] = shape;\r\n    const minLength = Math.min(imageWidth, imageHeight);\r\n\r\n    const [cx, setCx] = useState(imageWidth / 2);\r\n    const [cy, setCy] = useState(imageHeight / 2);\r\n    const [ri, setRi] = useState(minLength / 4);\r\n    const [ro, setRo] = useState(minLength / 2);\r\n\r\n    const riHandle = {\r\n        x: cx - ri,\r\n        y: cy,\r\n    }\r\n    const roHandle = {\r\n        x: cx - ro,\r\n        y: cy,\r\n    }\r\n\r\n    const [minDist, setMinDist] = React.useState(1);\r\n\r\n    const minDistChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        setMinDist(event.target.valueAsNumber);\r\n    }\r\n\r\n    const [nPeaks, setNPeaks] = React.useState(500);\r\n\r\n    const peakChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        setNPeaks(event.target.valueAsNumber);\r\n    }\r\n\r\n    const [nClust, setNClust] = React.useState(20);\r\n\r\n    const clustChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        setNClust(event.target.valueAsNumber);\r\n    }\r\n\r\n    const handleCenterChange = defaultDebounce((newCx: number, newCy: number) => {\r\n        setCx(newCx);\r\n        setCy(newCy);\r\n    });\r\n    const handleRIChange = defaultDebounce(setRi);\r\n    const handleROChange = defaultDebounce(setRo);\r\n\r\n    const frameViewHandles: HandleRenderFunction = (handleDragStart, handleDrop) => (<>\r\n        <DraggableHandle x={cx} y={cy}\r\n            imageWidth={imageWidth}\r\n            onDragMove={handleCenterChange}\r\n            parentOnDrop={handleDrop}\r\n            parentOnDragStart={handleDragStart}\r\n            constraint={inRectConstraint(imageWidth, imageHeight)} />\r\n        <DraggableHandle x={roHandle.x} y={roHandle.y}\r\n            imageWidth={imageWidth}\r\n            onDragMove={cbToRadius(cx, cy, handleROChange)}\r\n            parentOnDrop={handleDrop}\r\n            parentOnDragStart={handleDragStart}\r\n            constraint={roConstraints(riHandle.x, cy)} />\r\n        <DraggableHandle x={riHandle.x} y={riHandle.y}\r\n            imageWidth={imageWidth}\r\n            parentOnDrop={handleDrop}\r\n            parentOnDragStart={handleDragStart}\r\n            onDragMove={cbToRadius(cx, cy, handleRIChange)}\r\n            constraint={riConstraint(roHandle.x, cy)} />\r\n    </>);\r\n\r\n    const frameViewWidgets = (\r\n        <Ring cx={cx} cy={cy} ri={ri} ro={ro}\r\n            imageWidth={imageWidth} />\r\n    )\r\n\r\n    const dispatch = useDispatch();\r\n    const { rectRoiParameters, rectRoiHandles, rectRoiWidgets } = useRectROI({ scanWidth, scanHeight });\r\n\r\n    React.useEffect(() => {\r\n        if (compoundAnalysis.doAutoStart) {\r\n            dispatch(compoundAnalysisActions.Actions.run(compoundAnalysis.compoundAnalysis, 1, {\r\n                analysisType: AnalysisTypes.SUM_SIG,\r\n                parameters: {},\r\n            }))\r\n        }\r\n    }, [compoundAnalysis.compoundAnalysis, dispatch, compoundAnalysis.doAutoStart]);\r\n\r\n    const runAnalysis = () => {\r\n        dispatch(compoundAnalysisActions.Actions.run(compoundAnalysis.compoundAnalysis, 2, {\r\n            analysisType: AnalysisTypes.CLUST,\r\n            parameters: {\r\n                roi: rectRoiParameters.roi,\r\n                cx,\r\n                cy,\r\n                ri,\r\n                ro,\r\n                n_clust: nClust,\r\n                n_peaks: nPeaks,\r\n                min_dist: minDist\r\n            }\r\n        }));\r\n    };\r\n\r\n    const {\r\n        frameViewTitle, frameModeSelector,\r\n        handles: resultHandles,\r\n        widgets: resultWidgets,\r\n    } = useDefaultFrameView({\r\n        scanWidth,\r\n        scanHeight,\r\n        compoundAnalysisId: compoundAnalysis.compoundAnalysis,\r\n        doAutoStart: compoundAnalysis.doAutoStart,\r\n    })\r\n\r\n    const subtitle = (\r\n        <>{frameViewTitle} Ring: center=(x={cx.toFixed(2)}, y={cy.toFixed(2)}), ri={ri.toFixed(2)}, ro={ro.toFixed(2)}</>\r\n    )\r\n    const toolbar = <Toolbar compoundAnalysis={compoundAnalysis} onApply={runAnalysis} busyIdxs={[2]} />\r\n\r\n    const [paramsVisible, setParamsVisible] = React.useState(false);\r\n\r\n    const handleClick = (event: React.MouseEvent<HTMLDivElement>) => {\r\n        setParamsVisible(!paramsVisible);\r\n    }\r\n\r\n    const clustparams =\r\n        <Accordion>\r\n            <Accordion.Title active={paramsVisible} index={0} onClick={handleClick}>\r\n                <Icon name='dropdown' />\r\n                Parameters\r\n            </Accordion.Title>\r\n            <Accordion.Content active={paramsVisible}>\r\n                <Form>\r\n                    <Form.Field>\r\n                        <label> Number of clusters  <input type=\"number\" value={nClust} step=\"1\" min=\"2\" max=\"100\" onChange={clustChange} /> </label>\r\n                    </Form.Field>\r\n                    <Form.Field>\r\n                        <label>  Maximal number of possible peak positions to detect (better put higher value,\r\n        the output is limited to the number of peaks the algorithm could find)  <input type=\"number\" value={nPeaks} step=\"1\" min=\"5\" max=\"200\" onChange={peakChange} /> </label>\r\n                    </Form.Field>\r\n                    <Form.Field>\r\n                        <label>  Minimal distance in pixels between peaks  <input type=\"number\" value={minDist} step=\"1\" min=\"0\" max=\"100\" onChange={minDistChange} />  </label>\r\n                    </Form.Field>\r\n                </Form>\r\n            </Accordion.Content>\r\n        </Accordion>\r\n    return (\r\n        <AnalysisLayoutTwoRes\r\n            title=\"Region clustering\" subtitle={subtitle}\r\n            left={<>\r\n                <ResultList\r\n                    extraHandles={frameViewHandles} extraWidgets={frameViewWidgets}\r\n                    analysisIndex={0} compoundAnalysis={compoundAnalysis.compoundAnalysis}\r\n                    width={imageWidth} height={imageHeight}\r\n                    selectors={frameModeSelector}\r\n                />\r\n            </>}\r\n            mid={<>\r\n                <ResultList\r\n                    analysisIndex={1} compoundAnalysis={compoundAnalysis.compoundAnalysis}\r\n                    width={scanWidth} height={scanHeight}\r\n                    extraHandles={rectRoiHandles}\r\n                    extraWidgets={rectRoiWidgets}\r\n                />\r\n            </>}\r\n\r\n            right={<>\r\n                <ResultList\r\n                    analysisIndex={2} compoundAnalysis={compoundAnalysis.compoundAnalysis}\r\n                    width={scanWidth} height={scanHeight}\r\n                    extraHandles={resultHandles}\r\n                    extraWidgets={resultWidgets}\r\n                />\r\n            </>}\r\n            toolbar={toolbar}\r\n            clustparams={clustparams}\r\n\r\n            title1=\"Peaks inside the ring will be considered\"\r\n            title2=\"Choose specimen region\"\r\n            title3=\"Clustering result\"\r\n\r\n        />\r\n    );\r\n}\r\n\r\nexport default ClustAnalysis;","import * as React from \"react\";\r\nimport { useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport ResultList from \"../../job/components/ResultList\";\r\nimport { AnalysisTypes } from \"../../messages\";\r\nimport { cbToRadius, inRectConstraint, keepOnCY } from \"../../widgets/constraints\";\r\nimport Disk from \"../../widgets/Disk\";\r\nimport DraggableHandle from \"../../widgets/DraggableHandle\";\r\nimport { HandleRenderFunction } from \"../../widgets/types\";\r\nimport * as compoundAnalysisActions from \"../actions\";\r\nimport { CompoundAnalysisProps } from \"../types\";\r\nimport useDefaultFrameView from \"./DefaultFrameView\";\r\nimport AnalysisLayoutTwoCol from \"./layouts/AnalysisLayoutTwoCol\";\r\nimport Toolbar from \"./Toolbar\";\r\n\r\nconst DiskMaskAnalysis: React.SFC<CompoundAnalysisProps> = ({ compoundAnalysis, dataset }) => {\r\n    const { shape } = dataset.params;\r\n    const [scanHeight, scanWidth, imageHeight, imageWidth] = shape;\r\n\r\n    const minLength = Math.min(imageWidth, imageHeight);\r\n    const [cx, setCx] = useState(imageWidth / 2);\r\n    const [cy, setCy] = useState(imageHeight / 2);\r\n    const [r, setR] = useState(minLength / 4);\r\n\r\n    const handleCenterChange = (newCx: number, newCy: number) => {\r\n        setCx(newCx);\r\n        setCy(newCy);\r\n    };\r\n    const handleRChange = setR;\r\n\r\n    const rHandle = {\r\n        x: cx - r,\r\n        y: cy,\r\n    }\r\n\r\n    const frameViewHandles: HandleRenderFunction = (handleDragStart, handleDrop) => (<>\r\n        <DraggableHandle x={cx} y={cy}\r\n            imageWidth={imageWidth}\r\n            onDragMove={handleCenterChange}\r\n            parentOnDragStart={handleDragStart}\r\n            parentOnDrop={handleDrop}\r\n            constraint={inRectConstraint(imageWidth, imageHeight)} />\r\n        <DraggableHandle x={rHandle.x} y={rHandle.y}\r\n            imageWidth={imageWidth}\r\n            onDragMove={cbToRadius(cx, cy, handleRChange)}\r\n            parentOnDragStart={handleDragStart}\r\n            parentOnDrop={handleDrop}\r\n            constraint={keepOnCY(cy)} />\r\n    </>);\r\n\r\n    const frameViewWidgets = (\r\n        <Disk cx={cx} cy={cy} r={r}\r\n            imageWidth={imageWidth} imageHeight={imageHeight}\r\n        />\r\n    );\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const runAnalysis = () => {\r\n        dispatch(compoundAnalysisActions.Actions.run(compoundAnalysis.compoundAnalysis, 1, {\r\n            analysisType: AnalysisTypes.APPLY_DISK_MASK,\r\n            parameters: {\r\n                shape: \"disk\",\r\n                cx, cy, r\r\n            }\r\n        }));\r\n    };\r\n\r\n    const {\r\n        frameViewTitle, frameModeSelector,\r\n        handles: resultHandles, widgets: resultWidgets,\r\n    } = useDefaultFrameView({\r\n        scanWidth,\r\n        scanHeight,\r\n        compoundAnalysisId: compoundAnalysis.compoundAnalysis,\r\n        doAutoStart: compoundAnalysis.doAutoStart,\r\n    });\r\n\r\n    const subtitle = <>{frameViewTitle} Disk: center=(x={cx.toFixed(2)}, y={cy.toFixed(2)}), r={r.toFixed(2)}</>;\r\n\r\n    const toolbar = <Toolbar compoundAnalysis={compoundAnalysis} onApply={runAnalysis} busyIdxs={[1]} />\r\n\r\n    return (\r\n        <AnalysisLayoutTwoCol\r\n            title=\"Disk analysis\" subtitle={subtitle}\r\n            left={<>\r\n                <ResultList\r\n                    extraHandles={frameViewHandles} extraWidgets={frameViewWidgets}\r\n                    analysisIndex={0} compoundAnalysis={compoundAnalysis.compoundAnalysis}\r\n                    width={imageWidth} height={imageHeight}\r\n                    selectors={frameModeSelector}\r\n                />\r\n            </>}\r\n            right={<>\r\n                <ResultList\r\n                    analysisIndex={1} compoundAnalysis={compoundAnalysis.compoundAnalysis}\r\n                    width={scanWidth} height={scanHeight}\r\n                    extraHandles={resultHandles}\r\n                    extraWidgets={resultWidgets}\r\n                />\r\n            </>}\r\n            toolbar={toolbar}\r\n        />\r\n    );\r\n}\r\n\r\nexport default DiskMaskAnalysis;","import * as React from \"react\";\r\nimport { useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { defaultDebounce } from \"../../helpers\";\r\nimport ResultList from \"../../job/components/ResultList\";\r\nimport { AnalysisTypes } from \"../../messages\";\r\nimport { cbToRadius, inRectConstraint, riConstraint, roConstraints } from \"../../widgets/constraints\";\r\nimport DraggableHandle from \"../../widgets/DraggableHandle\";\r\nimport Ring from \"../../widgets/Ring\";\r\nimport { HandleRenderFunction } from \"../../widgets/types\";\r\nimport * as compoundAnalysisActions from \"../actions\";\r\nimport { CompoundAnalysisProps } from \"../types\";\r\nimport useDefaultFrameView from \"./DefaultFrameView\";\r\nimport AnalysisLayoutTwoCol from \"./layouts/AnalysisLayoutTwoCol\";\r\nimport Toolbar from \"./Toolbar\";\r\n\r\nconst FEMAnalysis: React.SFC<CompoundAnalysisProps> = ({ compoundAnalysis, dataset }) => {\r\n    const { shape } = dataset.params;\r\n    const [scanHeight, scanWidth, imageHeight, imageWidth] = shape;\r\n    const minLength = Math.min(imageWidth, imageHeight);\r\n\r\n    const [cx, setCx] = useState(imageWidth / 2);\r\n    const [cy, setCy] = useState(imageHeight / 2);\r\n    const [ri, setRi] = useState(minLength / 4);\r\n    const [ro, setRo] = useState(minLength / 2);\r\n\r\n    const riHandle = {\r\n        x: cx - ri,\r\n        y: cy,\r\n    }\r\n    const roHandle = {\r\n        x: cx - ro,\r\n        y: cy,\r\n    }\r\n\r\n    const handleCenterChange = defaultDebounce((newCx: number, newCy: number) => {\r\n        setCx(newCx);\r\n        setCy(newCy);\r\n    });\r\n    const handleRIChange = defaultDebounce(setRi);\r\n    const handleROChange = defaultDebounce(setRo);\r\n\r\n    const frameViewHandles: HandleRenderFunction = (handleDragStart, handleDrop) => (<>\r\n        <DraggableHandle x={cx} y={cy}\r\n            imageWidth={imageWidth}\r\n            onDragMove={handleCenterChange}\r\n            parentOnDrop={handleDrop}\r\n            parentOnDragStart={handleDragStart}\r\n            constraint={inRectConstraint(imageWidth, imageHeight)} />\r\n        <DraggableHandle x={roHandle.x} y={roHandle.y}\r\n            imageWidth={imageWidth}\r\n            onDragMove={cbToRadius(cx, cy, handleROChange)}\r\n            parentOnDrop={handleDrop}\r\n            parentOnDragStart={handleDragStart}\r\n            constraint={roConstraints(riHandle.x, cy)} />\r\n        <DraggableHandle x={riHandle.x} y={riHandle.y}\r\n            imageWidth={imageWidth}\r\n            parentOnDrop={handleDrop}\r\n            parentOnDragStart={handleDragStart}\r\n            onDragMove={cbToRadius(cx, cy, handleRIChange)}\r\n            constraint={riConstraint(roHandle.x, cy)} />\r\n    </>);\r\n\r\n    const frameViewWidgets = (\r\n        <Ring cx={cx} cy={cy} ri={ri} ro={ro}\r\n            imageWidth={imageWidth} />\r\n    )\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const runAnalysis = () => {\r\n        dispatch(compoundAnalysisActions.Actions.run(compoundAnalysis.compoundAnalysis, 1, {\r\n            analysisType: AnalysisTypes.FEM,\r\n            parameters: {\r\n                shape: \"ring\",\r\n                cx, cy, ri, ro,\r\n            }\r\n        }));\r\n    };\r\n\r\n    const {\r\n        frameViewTitle, frameModeSelector,\r\n        handles: resultHandles,\r\n        widgets: resultWidgets,\r\n    } = useDefaultFrameView({\r\n        scanWidth,\r\n        scanHeight,\r\n        compoundAnalysisId: compoundAnalysis.compoundAnalysis,\r\n        doAutoStart: compoundAnalysis.doAutoStart,\r\n    })\r\n\r\n    const subtitle = (\r\n        <>{frameViewTitle} Ring: center=(x={cx.toFixed(2)}, y={cy.toFixed(2)}), ri={ri.toFixed(2)}, ro={ro.toFixed(2)}</>\r\n    )\r\n\r\n    const toolbar = <Toolbar compoundAnalysis={compoundAnalysis} onApply={runAnalysis} busyIdxs={[1]} />\r\n\r\n    return (\r\n        <AnalysisLayoutTwoCol\r\n            title=\"Fluctuation EM (SD over Ring analysis)\" subtitle={subtitle}\r\n            left={<>\r\n                <ResultList\r\n                    extraHandles={frameViewHandles} extraWidgets={frameViewWidgets}\r\n                    analysisIndex={0} compoundAnalysis={compoundAnalysis.compoundAnalysis}\r\n                    width={imageWidth} height={imageHeight}\r\n                    selectors={frameModeSelector}\r\n                />\r\n            </>}\r\n            right={<>\r\n                <ResultList\r\n                    analysisIndex={1} compoundAnalysis={compoundAnalysis.compoundAnalysis}\r\n                    width={scanWidth} height={scanHeight}\r\n                    extraHandles={resultHandles}\r\n                    extraWidgets={resultWidgets}\r\n                />\r\n            </>}\r\n            toolbar={toolbar}\r\n        />\r\n    );\r\n}\r\n\r\nexport default FEMAnalysis;","import React from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { AnalysisTypes } from \"../../messages\";\r\nimport { inRectConstraint } from \"../../widgets/constraints\";\r\nimport DraggableHandle from \"../../widgets/DraggableHandle\";\r\nimport { HandleRenderFunction } from \"../../widgets/types\";\r\nimport * as compoundAnalysisActions from \"../actions\";\r\n\r\nconst useFFTFramePicker = ({\r\n    enabled, scanWidth, scanHeight, analysisIndex, compoundAnalysisId,\r\n    cx, cy, real_rad, real_centerx, real_centery, setCx, setCy\r\n}: {\r\n    enabled: boolean, scanWidth: number, scanHeight: number,\r\n    analysisIndex: number, compoundAnalysisId: string,\r\n    cx: number, cy: number, setCx: (newCx: number) => void, setCy: (newCy: number) => void,\r\n    real_rad: number | null, real_centerx: number | null, real_centery: number | null\r\n}) => {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    React.useEffect(() => {\r\n        if (enabled) {\r\n            dispatch(compoundAnalysisActions.Actions.run(compoundAnalysisId, analysisIndex, {\r\n                analysisType: AnalysisTypes.PICK_FFT_FRAME,\r\n                parameters: { x: cx, y: cy, real_rad, real_centerx, real_centery },\r\n            }));\r\n        }\r\n    }, [compoundAnalysisId, cx, cy, enabled, analysisIndex, real_rad, real_centerx, real_centery, dispatch]);\r\n\r\n    const onPickChange = (pickX: number, pickY: number) => {\r\n        const newX = Math.round(pickX);\r\n        const newY = Math.round(pickY);\r\n        if (cx === newX && cy === newY) {\r\n            return;\r\n        }\r\n        setCx(newX);\r\n        setCy(newY);\r\n    }\r\n\r\n    const renderPickHandle: HandleRenderFunction = (onDragStart, onDrop) => (\r\n        <DraggableHandle x={cx} y={cy} withCross={true}\r\n            imageWidth={scanWidth}\r\n            onDragMove={onPickChange}\r\n            parentOnDragStart={onDragStart}\r\n            parentOnDrop={onDrop}\r\n            constraint={inRectConstraint(scanWidth, scanHeight)} />\r\n    )\r\n\r\n    return { coords: { cx, cy }, handles: renderPickHandle };\r\n}\r\n\r\nexport default useFFTFramePicker;","import React from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { AnalysisTypes } from \"../../messages\";\r\nimport * as analysisActions from \"../actions\";\r\n\r\nconst useFFTSumFrames = ({\r\n    enabled, analysisIndex: jobIndex, compoundAnalysisId: analysisId, real_rad, real_centerx, real_centery\r\n}: {\r\n    enabled: boolean, analysisIndex: number, compoundAnalysisId: string, real_rad: number | null, real_centerx: number | null, real_centery: number | null\r\n}) => {\r\n    const dispatch = useDispatch();\r\n\r\n    React.useEffect(() => {\r\n        if (enabled) {\r\n            dispatch(analysisActions.Actions.run(analysisId, jobIndex, {\r\n                analysisType: AnalysisTypes.FFTSUM_FRAMES,\r\n                parameters: { real_rad, real_centerx, real_centery },\r\n            }));\r\n        }\r\n    }, [analysisId, enabled, jobIndex, real_rad, real_centerx, real_centery, dispatch]);\r\n};\r\n\r\nexport default useFFTSumFrames;\r\n","import * as React from \"react\";\r\nimport { useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { AnalysisTypes } from \"../../messages\";\r\nimport { HandleRenderFunction } from \"../../widgets/types\";\r\nimport * as compoundAnalysisActions from \"../actions\";\r\nimport useFFTFramePicker from \"./FFTFramePicker\";\r\nimport useFFTSumFrames from \"./FFTSumFrames\";\r\nimport useFramePicker from \"./FramePicker\";\r\nimport ModeSelector from \"./ModeSelector\";\r\nimport { useRoiPicker } from \"./roi/RoiPicker\";\r\n\r\nconst useFFTFrameView = ({\r\n    scanWidth, scanHeight, compoundAnalysisId, real_rad, real_centerx,\r\n    real_centery, doAutoStart,\r\n}: {\r\n    scanWidth: number, scanHeight: number, compoundAnalysisId: string,\r\n    real_rad: number | null, real_centerx: number | null, real_centery: number | null,\r\n    doAutoStart: boolean,\r\n}) => {\r\n    const availableModes = [\r\n        {\r\n            text: \"Pick\",\r\n            value: AnalysisTypes.PICK_FRAME,\r\n        },\r\n        {\r\n            text: \"Average\",\r\n            value: AnalysisTypes.SUM_FRAMES,\r\n        },\r\n    ];\r\n\r\n    const [frameMode, setMode] = useState(AnalysisTypes.SUM_FRAMES);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const updateMode = (newMode: AnalysisTypes) => {\r\n        dispatch(compoundAnalysisActions.Actions.enableAutoStart(compoundAnalysisId));\r\n        setMode(newMode);\r\n    }\r\n\r\n    const frameModeSelector = <ModeSelector modes={availableModes} currentMode={frameMode} onModeChange={updateMode} label=\"Mode\" />\r\n\r\n    const [cx, setCx] = React.useState(Math.round(scanWidth / 2));\r\n    const [cy, setCy] = React.useState(Math.round(scanHeight / 2));\r\n\r\n    const { coords: pickCoords, handles: pickHandles } = useFramePicker({\r\n        enabled: frameMode === AnalysisTypes.PICK_FRAME && doAutoStart,\r\n        scanWidth, scanHeight,\r\n        analysisIndex: 1,\r\n        compoundAnalysisId,\r\n        cx, cy, setCx, setCy\r\n    });\r\n\r\n    useFFTFramePicker({\r\n        enabled: frameMode === AnalysisTypes.PICK_FRAME && doAutoStart,\r\n        scanWidth, scanHeight,\r\n        analysisIndex: 0,\r\n        compoundAnalysisId,\r\n        cx, cy, setCx, setCy, real_rad, real_centerx, real_centery\r\n    });\r\n\r\n    useRoiPicker({\r\n        enabled: frameMode === AnalysisTypes.SUM_FRAMES && doAutoStart,\r\n        analysisIndex: 1,\r\n        compoundAnalysisId,\r\n        scanWidth, scanHeight,\r\n        roiParameters: { roi: {} },\r\n        analysisType: AnalysisTypes.SUM_FRAMES,\r\n    })\r\n    useFFTSumFrames({\r\n        enabled: frameMode === AnalysisTypes.SUM_FRAMES && doAutoStart,\r\n        analysisIndex: 0,\r\n        compoundAnalysisId,\r\n        real_rad,\r\n        real_centerx,\r\n        real_centery\r\n    })\r\n\r\n    const frameViewTitle = (\r\n        frameMode !== AnalysisTypes.PICK_FRAME ? null : <>Pick: x={pickCoords.cx}, y={pickCoords.cy} &emsp;</>\r\n    )\r\n\r\n    const nullHandles: HandleRenderFunction = (onDragStart, onDrop) => null\r\n\r\n    return {\r\n        frameViewTitle,\r\n        handles: frameMode !== AnalysisTypes.PICK_FRAME ? nullHandles : pickHandles,\r\n\r\n        frameModeSelector,\r\n    }\r\n}\r\n\r\nexport default useFFTFrameView;","import * as React from \"react\";\r\nimport { Grid, Header, Icon, Segment } from \"semantic-ui-react\";\r\n\r\ninterface AnalysisLayoutThreeColProps {\r\n    title: string,\r\n    subtitle: React.ReactNode,\r\n    left: React.ReactNode,\r\n    mid: React.ReactNode,\r\n    right: React.ReactNode,\r\n    toolbar?: React.ReactNode,\r\n    title1: string,\r\n    title2: React.ReactNode,\r\n    title3: string,\r\n}\r\n\r\ntype MergedProps = AnalysisLayoutThreeColProps;\r\n\r\nconst AnalysisLayoutThreeCol: React.SFC<MergedProps> = ({\r\n    title, subtitle,\r\n    left, mid, right,\r\n    toolbar, title1, title2, title3\r\n}) => {\r\n    return (\r\n        <>\r\n            <Header as='h3' attached=\"top\">\r\n                <Icon name=\"cog\" />\r\n                <Header.Content>{title}</Header.Content>\r\n            </Header>\r\n            <Segment attached={true}>\r\n                <Grid columns={3}>\r\n                    <Grid.Row>\r\n                        <Grid.Column width={5}>\r\n                            <p>{title1}</p>\r\n                        </Grid.Column>\r\n\r\n                        <Grid.Column width={5}>\r\n                            <p>{title2}</p>\r\n                        </Grid.Column>\r\n\r\n                        <Grid.Column width={6}>\r\n                            <p>{title3}</p>\r\n                        </Grid.Column>\r\n                    </Grid.Row>\r\n\r\n                    <Grid.Row>\r\n                        <Grid.Column width={5}>\r\n                            {left}\r\n                        </Grid.Column>\r\n\r\n                        <Grid.Column width={5}>\r\n                            {mid}\r\n                        </Grid.Column>\r\n\r\n                        <Grid.Column width={6}>\r\n                            {right}\r\n                        </Grid.Column>\r\n\r\n                    </Grid.Row>\r\n\r\n                    <Grid.Row>\r\n                        <Grid.Column width={10}>\r\n                            <p>{subtitle}</p>\r\n                        </Grid.Column>\r\n\r\n                        <Grid.Column width={6} />\r\n                    </Grid.Row>\r\n                </Grid>\r\n            </Segment>\r\n            {toolbar}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default AnalysisLayoutThreeCol","import * as React from \"react\";\r\nimport { useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { defaultDebounce } from \"../../helpers\";\r\nimport ResultList from \"../../job/components/ResultList\";\r\nimport { AnalysisTypes } from \"../../messages\";\r\nimport { cbToRadius, inRectConstraint, keepOnCY, riConstraint, roConstraints } from \"../../widgets/constraints\";\r\nimport Disk from \"../../widgets/Disk\";\r\nimport DraggableHandle from \"../../widgets/DraggableHandle\";\r\nimport Ring from \"../../widgets/Ring\";\r\nimport { HandleRenderFunction } from \"../../widgets/types\";\r\nimport * as compoundAnalysisActions from \"../actions\";\r\nimport { CompoundAnalysisProps } from \"../types\";\r\nimport useFFTFrameView from \"./FFTFrameView\";\r\nimport AnalysisLayoutThreeCol from \"./layouts/AnalysisLayoutThreeCol\";\r\nimport Toolbar from \"./Toolbar\";\r\n\r\n\r\nconst FFTAnalysis: React.SFC<CompoundAnalysisProps> = ({ compoundAnalysis, dataset }) => {\r\n    const { shape } = dataset.params;\r\n    const [scanHeight, scanWidth, imageHeight, imageWidth] = shape;\r\n    const minLength = Math.min(imageWidth, imageHeight);\r\n\r\n    const cx = imageWidth / 2;\r\n    const cy = imageHeight / 2;\r\n    const [radIn, setRi] = useState(minLength / 4);\r\n    const [radOut, setRo] = useState(minLength / 2);\r\n\r\n    const dispatch = useDispatch();\r\n    const riHandle = {\r\n        x: cx - radIn,\r\n        y: cy,\r\n    }\r\n    const roHandle = {\r\n        x: cx - radOut,\r\n        y: cy,\r\n    }\r\n\r\n\r\n    const handleRIChange = defaultDebounce(setRi);\r\n    const handleROChange = defaultDebounce(setRo);\r\n\r\n    const frameViewHandlesfft: HandleRenderFunction = (handleDragStart, handleDrop) => (<>\r\n\r\n        <DraggableHandle x={roHandle.x} y={roHandle.y}\r\n            imageWidth={imageWidth}\r\n            onDragMove={cbToRadius(cx, cy, handleROChange)}\r\n            parentOnDrop={handleDrop}\r\n            parentOnDragStart={handleDragStart}\r\n            constraint={roConstraints(riHandle.x, cy)} />\r\n        <DraggableHandle x={riHandle.x} y={riHandle.y}\r\n            imageWidth={imageWidth}\r\n            parentOnDrop={handleDrop}\r\n            parentOnDragStart={handleDragStart}\r\n            onDragMove={cbToRadius(cx, cy, handleRIChange)}\r\n            constraint={riConstraint(roHandle.x, cy)} />\r\n    </>);\r\n\r\n    const frameViewWidgetsfft = (\r\n        <Ring cx={cx} cy={cy} ri={radIn} ro={radOut}\r\n            imageWidth={imageWidth} />\r\n    )\r\n\r\n    const [check, setCheck] = React.useState(true);\r\n\r\n    const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        dispatch(compoundAnalysisActions.Actions.enableAutoStart(compoundAnalysis.compoundAnalysis));\r\n        setCheck(event.target.checked);\r\n    }\r\n\r\n    const [realCenterX, setCx] = useState(imageWidth / 2);\r\n    const [realCenterY, setCy] = useState(imageHeight / 2);\r\n    const [realRad, setR] = useState(minLength / 4);\r\n\r\n    const handleCenterChange = defaultDebounce((newCx: number, newCy: number) => {\r\n        dispatch(compoundAnalysisActions.Actions.enableAutoStart(compoundAnalysis.compoundAnalysis));\r\n        setCx(newCx);\r\n        setCy(newCy);\r\n    });\r\n    const handleRChange = defaultDebounce(setR);\r\n\r\n    const rHandle = {\r\n        x: realCenterX - realRad,\r\n        y: realCenterY,\r\n    }\r\n\r\n    const frameViewHandlesreal: HandleRenderFunction = (handleDragStart, handleDrop) => (<>\r\n        <DraggableHandle x={realCenterX} y={realCenterY}\r\n            imageWidth={imageWidth}\r\n            onDragMove={handleCenterChange}\r\n            parentOnDragStart={handleDragStart}\r\n            parentOnDrop={handleDrop}\r\n            constraint={inRectConstraint(imageWidth, imageHeight)} />\r\n        <DraggableHandle x={rHandle.x} y={rHandle.y}\r\n            imageWidth={imageWidth}\r\n            onDragMove={cbToRadius(realCenterX, realCenterY, handleRChange)}\r\n            parentOnDragStart={handleDragStart}\r\n            parentOnDrop={handleDrop}\r\n            constraint={keepOnCY(realCenterY)} />\r\n    </>);\r\n\r\n    const frameViewWidgetsreal = (\r\n        <Disk cx={realCenterX} cy={realCenterY} r={realRad}\r\n            imageWidth={imageWidth} imageHeight={imageHeight}\r\n        />\r\n    );\r\n\r\n    const runAnalysis = () => {\r\n        dispatch(compoundAnalysisActions.Actions.run(compoundAnalysis.compoundAnalysis, 2, {\r\n            analysisType: AnalysisTypes.APPLY_FFT_MASK,\r\n            parameters: {\r\n                rad_in: radIn,\r\n                rad_out: radOut,\r\n                real_rad: check ? realRad : null,\r\n                real_centerx: check ? realCenterX : null,\r\n                real_centery: check ? realCenterY : null\r\n            }\r\n        }));\r\n    };\r\n\r\n    const { frameViewTitle, frameModeSelector, handles: resultHandles } = useFFTFrameView({\r\n        scanWidth,\r\n        scanHeight,\r\n        compoundAnalysisId: compoundAnalysis.compoundAnalysis,\r\n        real_rad: check ? realRad : null,\r\n        real_centerx: check ? realCenterX : null,\r\n        real_centery: check ? realCenterY : null,\r\n        doAutoStart: compoundAnalysis.doAutoStart,\r\n    });\r\n\r\n    const toolbar = <Toolbar compoundAnalysis={compoundAnalysis} onApply={runAnalysis} busyIdxs={[2]} />\r\n\r\n    let subtitle;\r\n    let mid: React.ReactNode;\r\n    if (check) {\r\n        mid = (<>\r\n            <ResultList\r\n                extraHandles={frameViewHandlesreal} extraWidgets={frameViewWidgetsreal}\r\n                analysisIndex={1} compoundAnalysis={compoundAnalysis.compoundAnalysis}\r\n                width={imageWidth} height={imageHeight}\r\n                selectors={frameModeSelector}\r\n            />\r\n        </>)\r\n        subtitle = (\r\n            <>{frameViewTitle} real_rad={radIn.toFixed(2)}, real_center=(x={realCenterX.toFixed(2)}, y={realCenterY.toFixed(2)}), fourier_rad_in={radIn.toFixed(2)}, fourier_rad_out={radOut.toFixed(2)}</>\r\n        )\r\n    }\r\n    else {\r\n        mid = (<>\r\n            <ResultList\r\n                analysisIndex={1} compoundAnalysis={compoundAnalysis.compoundAnalysis}\r\n                width={imageWidth} height={imageHeight}\r\n                selectors={frameModeSelector}\r\n            />\r\n        </>)\r\n        subtitle = (\r\n            <>{frameViewTitle} fourier_rad_in={radIn.toFixed(2)}, fourier_rad_out={radOut.toFixed(2)}</>\r\n        )\r\n    }\r\n\r\n\r\n    return (\r\n        <AnalysisLayoutThreeCol\r\n            title=\"FFT analysis\" subtitle={subtitle}\r\n            left={<>\r\n                <ResultList\r\n                    extraHandles={frameViewHandlesfft} extraWidgets={frameViewWidgetsfft}\r\n                    analysisIndex={0} compoundAnalysis={compoundAnalysis.compoundAnalysis}\r\n                    width={imageWidth} height={imageHeight}\r\n                />\r\n            </>}\r\n            mid={mid}\r\n\r\n            right={<>\r\n                <ResultList\r\n                    analysisIndex={2} compoundAnalysis={compoundAnalysis.compoundAnalysis}\r\n                    width={scanWidth} height={scanHeight}\r\n                    extraHandles={resultHandles}\r\n                />\r\n            </>}\r\n            toolbar={toolbar}\r\n\r\n            title2={<><label> Masking out of zero order diffraction peak <input type=\"checkbox\" name=\"check\" onChange={handleChange} checked={check} /> </label>\r\n            </>}\r\n            title1=\"Masking of intergation region in Fourier space\"\r\n            title3=\"Result of analysis\"\r\n\r\n        />\r\n    );\r\n}\r\n\r\n\r\nexport default FFTAnalysis;","import * as React from \"react\";\r\nimport { useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { defaultDebounce } from \"../../helpers\";\r\nimport ResultList from \"../../job/components/ResultList\";\r\nimport { AnalysisTypes } from \"../../messages\";\r\nimport { inRectConstraint } from \"../../widgets/constraints\";\r\nimport DraggableHandle from \"../../widgets/DraggableHandle\";\r\nimport { HandleRenderFunction } from \"../../widgets/types\";\r\nimport * as analysisActions from \"../actions\";\r\nimport { CompoundAnalysisProps } from \"../types\";\r\nimport useDefaultFrameView from \"./DefaultFrameView\";\r\nimport AnalysisLayoutTwoCol from \"./layouts/AnalysisLayoutTwoCol\";\r\nimport Toolbar from \"./Toolbar\";\r\n\r\n\r\nconst PointSelectionAnalysis: React.SFC<CompoundAnalysisProps> = ({ compoundAnalysis, dataset, }) => {\r\n    const { shape } = dataset.params;\r\n    const [scanHeight, scanWidth, imageHeight, imageWidth] = shape;\r\n\r\n    const [cx, setCx] = useState(imageWidth / 2);\r\n    const [cy, setCy] = useState(imageHeight / 2);\r\n    const handleCenterChange = defaultDebounce((newCx: number, newCy: number) => {\r\n        setCx(newCx);\r\n        setCy(newCy);\r\n    });\r\n\r\n    const frameViewHandles: HandleRenderFunction = (handleDragStart, handleDrop) => (<>\r\n        <DraggableHandle x={cx} y={cy} withCross={true}\r\n            onDragMove={handleCenterChange}\r\n            imageWidth={imageWidth}\r\n            parentOnDragStart={handleDragStart}\r\n            parentOnDrop={handleDrop}\r\n            constraint={inRectConstraint(imageWidth, imageHeight)} />\r\n    </>);\r\n\r\n    const {\r\n        frameViewTitle, frameModeSelector,\r\n        handles: resultHandles,\r\n        widgets: resultWidgets,\r\n    } = useDefaultFrameView({\r\n        scanWidth,\r\n        scanHeight,\r\n        compoundAnalysisId: compoundAnalysis.compoundAnalysis,\r\n        doAutoStart: compoundAnalysis.doAutoStart,\r\n    })\r\n\r\n    const subtitle = (\r\n        <>{frameViewTitle} Point: center=(x={cx.toFixed(2)}, y={cy.toFixed(2)})</>\r\n    )\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const runAnalysis = () => {\r\n        dispatch(analysisActions.Actions.run(compoundAnalysis.compoundAnalysis, 1, {\r\n            analysisType: AnalysisTypes.APPLY_POINT_SELECTOR,\r\n            parameters: {\r\n                shape: \"point\",\r\n                cx,\r\n                cy,\r\n            }\r\n        }));\r\n    };\r\n\r\n    const toolbar = <Toolbar compoundAnalysis={compoundAnalysis} onApply={runAnalysis} busyIdxs={[1]} />\r\n\r\n    return (\r\n        <AnalysisLayoutTwoCol\r\n            title=\"Point analysis\" subtitle={subtitle}\r\n            left={<>\r\n                <ResultList\r\n                    extraHandles={frameViewHandles}\r\n                    analysisIndex={0} compoundAnalysis={compoundAnalysis.compoundAnalysis}\r\n                    width={imageWidth} height={imageHeight}\r\n                    selectors={frameModeSelector}\r\n                />\r\n            </>}\r\n            right={<>\r\n                <ResultList\r\n                    analysisIndex={1} compoundAnalysis={compoundAnalysis.compoundAnalysis}\r\n                    width={scanWidth} height={scanHeight}\r\n                    extraHandles={resultHandles}\r\n                    extraWidgets={resultWidgets}\r\n                />\r\n            </>}\r\n            toolbar={toolbar}\r\n        />\r\n    );\r\n}\r\n\r\nexport default PointSelectionAnalysis;","import * as React from \"react\";\r\nimport { useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { defaultDebounce } from \"../../helpers\";\r\nimport ResultList from \"../../job/components/ResultList\";\r\nimport { AnalysisTypes } from \"../../messages\";\r\nimport { cbToRadius, inRectConstraint, riConstraint, roConstraints } from \"../../widgets/constraints\";\r\nimport DraggableHandle from \"../../widgets/DraggableHandle\";\r\nimport Ring from \"../../widgets/Ring\";\r\nimport { HandleRenderFunction } from \"../../widgets/types\";\r\nimport * as analysisActions from \"../actions\";\r\nimport { CompoundAnalysisProps } from \"../types\";\r\nimport useDefaultFrameView from \"./DefaultFrameView\";\r\nimport AnalysisLayoutTwoCol from \"./layouts/AnalysisLayoutTwoCol\";\r\nimport Toolbar from \"./Toolbar\";\r\n\r\nconst RadialFourierAnalysis: React.SFC<CompoundAnalysisProps> = ({ compoundAnalysis, dataset }) => {\r\n    const { shape } = dataset.params;\r\n    const [scanHeight, scanWidth, imageHeight, imageWidth] = shape;\r\n\r\n    const minLength = Math.min(imageWidth, imageHeight);\r\n    const [cx, setCx] = useState(imageWidth / 2);\r\n    const [cy, setCy] = useState(imageHeight / 2);\r\n    const [ri, setRi] = useState(minLength / 4);\r\n    const [ro, setRo] = useState(minLength / 2);\r\n    const [nBins] = useState(1);\r\n    const [maxOrder] = useState(8);\r\n\r\n    const riHandle = {\r\n        x: cx - ri,\r\n        y: cy,\r\n    }\r\n    const roHandle = {\r\n        x: cx - ro,\r\n        y: cy,\r\n    }\r\n\r\n    const handleCenterChange = defaultDebounce((newCx: number, newCy: number) => {\r\n        setCx(newCx);\r\n        setCy(newCy);\r\n    });\r\n    const handleRIChange = defaultDebounce(setRi);\r\n    const handleROChange = defaultDebounce(setRo);\r\n\r\n    const frameViewHandles: HandleRenderFunction = (handleDragStart, handleDrop) => (<>\r\n        <DraggableHandle x={cx} y={cy}\r\n            imageWidth={imageWidth}\r\n            onDragMove={handleCenterChange}\r\n            parentOnDrop={handleDrop}\r\n            parentOnDragStart={handleDragStart}\r\n            constraint={inRectConstraint(imageWidth, imageHeight)} />\r\n        <DraggableHandle x={roHandle.x} y={roHandle.y}\r\n            imageWidth={imageWidth}\r\n            onDragMove={cbToRadius(cx, cy, handleROChange)}\r\n            parentOnDrop={handleDrop}\r\n            parentOnDragStart={handleDragStart}\r\n            constraint={roConstraints(riHandle.x, cy)} />\r\n        <DraggableHandle x={riHandle.x} y={riHandle.y}\r\n            imageWidth={imageWidth}\r\n            parentOnDrop={handleDrop}\r\n            parentOnDragStart={handleDragStart}\r\n            onDragMove={cbToRadius(cx, cy, handleRIChange)}\r\n            constraint={riConstraint(roHandle.x, cy)} />\r\n    </>);\r\n\r\n    const frameViewWidgets = (\r\n        <Ring cx={cx} cy={cy} ri={ri} ro={ro}\r\n            imageWidth={imageWidth} />\r\n    )\r\n\r\n    const {\r\n        frameViewTitle, frameModeSelector,\r\n        handles: resultHandles,\r\n        widgets: resultWidgets,\r\n    } = useDefaultFrameView({\r\n        scanWidth,\r\n        scanHeight,\r\n        compoundAnalysisId: compoundAnalysis.compoundAnalysis,\r\n        doAutoStart: compoundAnalysis.doAutoStart,\r\n    })\r\n\r\n    const subtitle = (\r\n        <>{frameViewTitle} Ring: center=(x={cx.toFixed(2)}, y={cy.toFixed(2)}), ri={ri.toFixed(2)}, ro={ro.toFixed(2)}</>\r\n    )\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const runAnalysis = () => {\r\n        dispatch(analysisActions.Actions.run(compoundAnalysis.compoundAnalysis, 1, {\r\n            analysisType: AnalysisTypes.RADIAL_FOURIER,\r\n            parameters: {\r\n                shape: \"radial_fourier\",\r\n                cx, cy, ri, ro,\r\n                n_bins: nBins,\r\n                max_order: maxOrder,\r\n            }\r\n        }));\r\n    };\r\n\r\n    const toolbar = <Toolbar compoundAnalysis={compoundAnalysis} onApply={runAnalysis} busyIdxs={[1]} />\r\n\r\n    return (\r\n        <AnalysisLayoutTwoCol\r\n            title=\"Radial Fourier analysis\" subtitle={subtitle}\r\n            left={<>\r\n                <ResultList\r\n                    extraHandles={frameViewHandles} extraWidgets={frameViewWidgets}\r\n                    analysisIndex={0} compoundAnalysis={compoundAnalysis.compoundAnalysis}\r\n                    width={imageWidth} height={imageHeight}\r\n                    selectors={frameModeSelector}\r\n                />\r\n            </>}\r\n            right={<>\r\n                <ResultList\r\n                    analysisIndex={1} compoundAnalysis={compoundAnalysis.compoundAnalysis}\r\n                    width={scanWidth} height={scanHeight}\r\n                    extraHandles={resultHandles}\r\n                    extraWidgets={resultWidgets}\r\n                />\r\n            </>}\r\n            toolbar={toolbar}\r\n        />\r\n    );\r\n}\r\n\r\nexport default RadialFourierAnalysis;","import * as React from \"react\";\r\nimport { useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { defaultDebounce } from \"../../helpers\";\r\nimport ResultList from \"../../job/components/ResultList\";\r\nimport { AnalysisTypes } from \"../../messages\";\r\nimport { cbToRadius, inRectConstraint, riConstraint, roConstraints } from \"../../widgets/constraints\";\r\nimport DraggableHandle from \"../../widgets/DraggableHandle\";\r\nimport Ring from \"../../widgets/Ring\";\r\nimport { HandleRenderFunction } from \"../../widgets/types\";\r\nimport * as analysisActions from \"../actions\";\r\nimport { CompoundAnalysisProps } from \"../types\";\r\nimport useDefaultFrameView from \"./DefaultFrameView\";\r\nimport AnalysisLayoutTwoCol from \"./layouts/AnalysisLayoutTwoCol\";\r\nimport Toolbar from \"./Toolbar\";\r\n\r\nconst RingMaskAnalysis: React.SFC<CompoundAnalysisProps> = ({ compoundAnalysis, dataset }) => {\r\n    const { shape } = dataset.params;\r\n    const [scanHeight, scanWidth, imageHeight, imageWidth] = shape;\r\n    const minLength = Math.min(imageWidth, imageHeight);\r\n\r\n    const [cx, setCx] = useState(imageWidth / 2);\r\n    const [cy, setCy] = useState(imageHeight / 2);\r\n    const [ri, setRi] = useState(minLength / 4);\r\n    const [ro, setRo] = useState(minLength / 2);\r\n\r\n    const riHandle = {\r\n        x: cx - ri,\r\n        y: cy,\r\n    }\r\n    const roHandle = {\r\n        x: cx - ro,\r\n        y: cy,\r\n    }\r\n\r\n    const handleCenterChange = defaultDebounce((newCx: number, newCy: number) => {\r\n        setCx(newCx);\r\n        setCy(newCy);\r\n    });\r\n    const handleRIChange = defaultDebounce(setRi);\r\n    const handleROChange = defaultDebounce(setRo);\r\n\r\n    const frameViewHandles: HandleRenderFunction = (handleDragStart, handleDrop) => (<>\r\n        <DraggableHandle x={cx} y={cy}\r\n            imageWidth={imageWidth}\r\n            onDragMove={handleCenterChange}\r\n            parentOnDrop={handleDrop}\r\n            parentOnDragStart={handleDragStart}\r\n            constraint={inRectConstraint(imageWidth, imageHeight)} />\r\n        <DraggableHandle x={roHandle.x} y={roHandle.y}\r\n            imageWidth={imageWidth}\r\n            onDragMove={cbToRadius(cx, cy, handleROChange)}\r\n            parentOnDrop={handleDrop}\r\n            parentOnDragStart={handleDragStart}\r\n            constraint={roConstraints(riHandle.x, cy)} />\r\n        <DraggableHandle x={riHandle.x} y={riHandle.y}\r\n            imageWidth={imageWidth}\r\n            parentOnDrop={handleDrop}\r\n            parentOnDragStart={handleDragStart}\r\n            onDragMove={cbToRadius(cx, cy, handleRIChange)}\r\n            constraint={riConstraint(roHandle.x, cy)} />\r\n    </>);\r\n\r\n    const frameViewWidgets = (\r\n        <Ring cx={cx} cy={cy} ri={ri} ro={ro}\r\n            imageWidth={imageWidth} />\r\n    )\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const runAnalysis = () => {\r\n        dispatch(analysisActions.Actions.run(compoundAnalysis.compoundAnalysis, 1, {\r\n            analysisType: AnalysisTypes.APPLY_RING_MASK,\r\n            parameters: {\r\n                shape: \"ring\",\r\n                cx, cy, ri, ro,\r\n            }\r\n        }));\r\n    };\r\n\r\n    const {\r\n        frameViewTitle, frameModeSelector,\r\n        handles: resultHandles,\r\n        widgets: resultWidgets,\r\n    } = useDefaultFrameView({\r\n        scanWidth,\r\n        scanHeight,\r\n        compoundAnalysisId: compoundAnalysis.compoundAnalysis,\r\n        doAutoStart: compoundAnalysis.doAutoStart,\r\n    })\r\n\r\n    const subtitle = (\r\n        <>{frameViewTitle} Ring: center=(x={cx.toFixed(2)}, y={cy.toFixed(2)}), ri={ri.toFixed(2)}, ro={ro.toFixed(2)}</>\r\n    )\r\n\r\n    const toolbar = <Toolbar compoundAnalysis={compoundAnalysis} onApply={runAnalysis} busyIdxs={[1]} />\r\n\r\n    return (\r\n        <AnalysisLayoutTwoCol\r\n            title=\"Ring analysis\" subtitle={subtitle}\r\n            left={<>\r\n                <ResultList\r\n                    extraHandles={frameViewHandles} extraWidgets={frameViewWidgets}\r\n                    analysisIndex={0} compoundAnalysis={compoundAnalysis.compoundAnalysis}\r\n                    width={imageWidth} height={imageHeight}\r\n                    selectors={frameModeSelector}\r\n                />\r\n            </>}\r\n            right={<>\r\n                <ResultList\r\n                    analysisIndex={1} compoundAnalysis={compoundAnalysis.compoundAnalysis}\r\n                    width={scanWidth} height={scanHeight}\r\n                    extraHandles={resultHandles}\r\n                    extraWidgets={resultWidgets}\r\n                />\r\n            </>}\r\n            toolbar={toolbar}\r\n        />\r\n    );\r\n}\r\n\r\nexport default RingMaskAnalysis;","import { AnalysisTypes, DatasetOpen, PickFrameDetails, SumFramesDetails } from \"../messages\";\r\nimport CenterOfMassAnalysis from \"./components/CenterOfMassAnalysis\";\r\nimport ClustAnalysis from \"./components/Clustering\";\r\nimport DiskMaskAnalysis from \"./components/DiskMaskAnalysis\";\r\nimport FEM from \"./components/FEM\";\r\nimport FFTAnalysis from \"./components/FFTAnalysis\";\r\nimport PointSelectionAnalysis from \"./components/PointSelectionAnalysis\";\r\nimport RadialFourierAnalysis from \"./components/RadialFourierAnalysis\";\r\nimport RingMaskAnalysis from \"./components/RingMaskAnalysis\";\r\n\r\n\r\nexport type CompoundAnalysisStatus = \"busy\" | \"idle\";\r\n\r\nexport type JobHistory = string[][];\r\n\r\nexport type FrameAnalysisDetails = PickFrameDetails | SumFramesDetails;\r\n\r\nexport interface CompoundAnalysis {\r\n    compoundAnalysis: string,\r\n    dataset: string,\r\n    details: {\r\n        mainType: AnalysisTypes,\r\n        analyses: string[],\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * CompoundAnalysisProps is the interface you should implement with your\r\n * CompoundAnalysis, as a functional component. For example:\r\n * \r\n * const MyAnalysis: React.FunctionalComponent<CompoundAnalysisProps> = ({ analysis, dataset }) = { ... }\r\n * \r\n */\r\n\r\nexport type CompoundAnalysisState = CompoundAnalysis & {\r\n    doAutoStart: boolean,\r\n};\r\n\r\nexport interface CompoundAnalysisProps {\r\n    compoundAnalysis: CompoundAnalysisState,\r\n    dataset: DatasetOpen,\r\n}\r\n\r\nexport interface CompoundAnalysisMetadataItem {\r\n    desc: string,\r\n    title: string,\r\n    component?: React.FunctionComponent<CompoundAnalysisProps>,\r\n}\r\n\r\n\r\n/**\r\n * list of all analyses; those having a component will be available for selection in the UI\r\n * \r\n * please fill in a title and description, and reference your component.\r\n */\r\nexport const CompoundAnalysisMetadata: { [s: string]: CompoundAnalysisMetadataItem } = {\r\n    [AnalysisTypes.APPLY_RING_MASK]: {\r\n        desc: \"Application of a ring mask\",\r\n        title: \"Ring\",\r\n        component: RingMaskAnalysis,\r\n    },\r\n    [AnalysisTypes.APPLY_DISK_MASK]: {\r\n        desc: \"Application of a disk mask\",\r\n        title: \"Disk\",\r\n        component: DiskMaskAnalysis,\r\n    },\r\n    [AnalysisTypes.FEM]: {\r\n        desc: \"Application of a ring mask\",\r\n        title: \"FEM (SD over Ring)\",\r\n        component: FEM,\r\n    },\r\n    [AnalysisTypes.CENTER_OF_MASS]: {\r\n        desc: \"The center of mass of all diffraction images\",\r\n        title: \"Center of mass\",\r\n        component: CenterOfMassAnalysis,\r\n    },\r\n    [AnalysisTypes.APPLY_POINT_SELECTOR]: {\r\n        desc: \"Image from a single pixel selected in the detector\",\r\n        title: \"Point selection\",\r\n        component: PointSelectionAnalysis,\r\n    },\r\n    [AnalysisTypes.SUM_FRAMES]: {\r\n        desc: \"A sum of all (or selected) detector frames\",\r\n        title: \"Sum all frames\",\r\n    },\r\n    [AnalysisTypes.SD_FRAMES]: {\r\n        desc: \"A SD of all (or selected) detector frames\",\r\n        title: \"SD all frames\",\r\n    },\r\n    [AnalysisTypes.PICK_FRAME]: {\r\n        desc: \"A single picked frame\",\r\n        title: \"Pick frame\",\r\n    },\r\n    [AnalysisTypes.PICK_FFT_FRAME]: {\r\n        desc: \"Fourier transform of a picked frame\",\r\n        title: \"Pick frame\",\r\n    },\r\n    [AnalysisTypes.APPLY_FFT_MASK]: {\r\n        desc: \"Application of a ring mask in Fourier space\",\r\n        title: \"FFT analysis\",\r\n        component: FFTAnalysis\r\n    },\r\n    [AnalysisTypes.FFTSUM_FRAMES]: {\r\n        desc: \"Fourier transform of sum of all detector frames\",\r\n        title: \"FFT of Sum all frames\",\r\n    },\r\n    [AnalysisTypes.RADIAL_FOURIER]: {\r\n        desc: \"Radial Fourier analysis over the selected ring\",\r\n        title: \"Radial Fourier\",\r\n        component: RadialFourierAnalysis,\r\n    },\r\n    [AnalysisTypes.CLUST]: {\r\n        desc: \"Region clustering based on non-zero order diffraction peaks positions\",\r\n        title: \"Clustering\",\r\n        component: ClustAnalysis,\r\n    },\r\n    [AnalysisTypes.SUM_SIG]: {\r\n        desc: \"Frame integration\",\r\n        title: \"Sum\",\r\n    },\r\n}","import * as React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { DatasetStatus } from \"../../../messages\";\r\nimport { RootReducer } from \"../../../store\";\r\nimport { CompoundAnalysisMetadata, CompoundAnalysisState } from \"../../types\";\r\n\r\ninterface AnalysisDispatcherProps {\r\n    analysis: CompoundAnalysisState,\r\n}\r\n\r\nconst AnalysisDispatcherComponent: React.SFC<AnalysisDispatcherProps> = ({ analysis }) => {\r\n    const dataset = useSelector((state: RootReducer) => state.datasets.byId[analysis.dataset])\r\n\r\n    if (dataset.status !== DatasetStatus.OPEN) {\r\n        return null;\r\n    }\r\n\r\n    const AnalysisComponent = CompoundAnalysisMetadata[analysis.details.mainType].component;\r\n    if (!AnalysisComponent) {\r\n        throw new Error(\"unknown analysis type\");\r\n    }\r\n\r\n    return <AnalysisComponent dataset={dataset} compoundAnalysis={analysis} />;\r\n}\r\n\r\nexport default AnalysisDispatcherComponent;","import * as React from \"react\";\r\nimport { CompoundAnalysisReducerState } from \"../../reducers\";\r\nimport Analysis from \"./Analysis\";\r\n\r\ninterface AnalysisProps {\r\n    analyses: CompoundAnalysisReducerState,\r\n}\r\n\r\nconst AnalysisList: React.SFC<AnalysisProps> = ({ analyses }) => {\r\n    return (<>{\r\n        analyses.ids.map(analysisId => <Analysis key={analysisId} analysis={analyses.byId[analysisId]} />)\r\n    }</>);\r\n}\r\n\r\nexport default AnalysisList;","// tslint:disable-next-line:ban-types\r\ntype ImmutablePrimitive = undefined | null | boolean | string | number | Function;\r\n\r\nexport type Immutable<T> =\r\n    T extends ImmutablePrimitive ? T :\r\n    T extends Array<infer U> ? ImmutableArray<U> :\r\n    T extends Map<infer K, infer V> ? ImmutableMap<K, V> :\r\n    T extends Set<infer M> ? ImmutableSet<M> : ImmutableObject<T>;\r\n\r\nexport type ImmutableArray<T> = ReadonlyArray<Immutable<T>>;\r\nexport type ImmutableMap<K, V> = ReadonlyMap<Immutable<K>, Immutable<V>>;\r\nexport type ImmutableSet<T> = ReadonlySet<Immutable<T>>;\r\nexport type ImmutableObject<T> = { readonly [K in keyof T]: Immutable<T[K]> };\r\n\r\n\r\ntype DeepReadonly<T> =\r\n    T extends Array<infer R> ? DeepReadonlyArray<R> :\r\n    // tslint:disable-next-line:ban-types\r\n    T extends Function ? T :\r\n    T extends object ? DeepReadonlyObject<T> :\r\n    T;\r\n\r\ninterface DeepReadonlyArray<T> extends ReadonlyArray<DeepReadonly<T>> { }\r\n\r\ntype DeepReadonlyObject<T> = {\r\n    readonly [P in keyof T]: DeepReadonly<T[P]>;\r\n};\r\n\r\ninterface IdMap<R> {\r\n    [s: string]: R\r\n}\r\n\r\nexport interface ById<R> {\r\n    ids: string[],\r\n    byId: IdMap<R>,\r\n};\r\n\r\nexport type ByIdReadOnly<R> = DeepReadonly<ById<R>>;\r\n\r\nexport function updateById<R>(state: ById<R>, id: string, partialRecord: Partial<R>): ById<R> {\r\n    const newObj = Object.assign({}, state.byId[id], partialRecord);\r\n    const newById = Object.assign({}, state.byId, { [id]: newObj });\r\n    return Object.assign({}, state, { byId: newById });\r\n}\r\n\r\nexport function insertById<R>(state: ById<R>, id: string, record: R): ById<R> {\r\n    const newById = Object.assign({}, state.byId, { [id]: record });\r\n    const newIds = [...state.ids, id];\r\n    return { byId: newById, ids: newIds };\r\n}\r\n\r\nexport function constructById<R>(items: R[], key: (k: R) => string): IdMap<R> {\r\n    const byId = items.reduce((acc, item) => Object.assign(acc, {\r\n        [key(item)]: item,\r\n    }), {} as IdMap<R>);\r\n    return byId;\r\n}\r\n\r\nexport type Predicate<R> = (item: R) => boolean;\r\n\r\nexport function filterWithPred<R>(state: ById<R>, pred: Predicate<R>): ById<R> {\r\n    const ids: string[] = state.ids.filter(id => pred(state.byId[id]));\r\n    const byId: IdMap<R> = ids.reduce((acc, id) => Object.assign(acc, {\r\n        [id]: state.byId[id],\r\n    }), {});\r\n    return {\r\n        byId,\r\n        ids,\r\n    };\r\n}\r\n\r\nexport function filterWithPredReadOnly<R>(state: ByIdReadOnly<R>, pred: Predicate<DeepReadonly<R>>): ByIdReadOnly<R> {\r\n    const ids: DeepReadonly<string[]> = state.ids.filter(id => pred(state.byId[id]));\r\n    const byId: DeepReadonly<IdMap<R>> = ids.reduce((acc, id) => Object.assign(acc, {\r\n        [id]: state.byId[id],\r\n    }), {});\r\n    return {\r\n        byId,\r\n        ids,\r\n    };\r\n}","import * as React from \"react\";\r\nimport { Dropdown, DropdownItemProps } from \"semantic-ui-react\";\r\nimport { getEnumValues } from \"../../../helpers\";\r\nimport { AnalysisTypes } from \"../../../messages\";\r\nimport { getMetadata } from \"../../getMetadata\";\r\n\r\nconst analysisTypeKeys = getEnumValues(AnalysisTypes);\r\nconst analysisTypeOptions = analysisTypeKeys.filter(t => getMetadata(t).component !== undefined).map(t => ({\r\n    text: getMetadata(t).title,\r\n    value: AnalysisTypes[t],\r\n}));\r\n\r\ninterface AnalysisSelectProps {\r\n    onClick: (analysisType: AnalysisTypes) => void,\r\n    label: string,\r\n}\r\n\r\nconst selectData = (fn: (v: AnalysisTypes) => void) => (e: React.MouseEvent, data: DropdownItemProps) => {\r\n    return fn(data.value as AnalysisTypes);\r\n}\r\n\r\nconst AnalysisSelect: React.SFC<AnalysisSelectProps> = ({ onClick, label }) => {\r\n    return (\r\n        <Dropdown text={label} icon='add' floating={true} labeled={true} button={true} className='icon'>\r\n            <Dropdown.Menu>\r\n                <Dropdown.Header content='implemented analyses' />\r\n                {analysisTypeOptions.map(option => <Dropdown.Item key={option.value} onClick={selectData(onClick)} {...option} />)}\r\n            </Dropdown.Menu>\r\n        </Dropdown>\r\n    );\r\n}\r\n\r\nexport default AnalysisSelect;","import { ActionsUnion, createAction } from '../helpers/actionHelpers';\r\nimport { DatasetCreateParams, DatasetFormParams, DatasetState } from '../messages';\r\n\r\nexport enum ActionTypes {\r\n    OPEN = 'DATASET_OPEN',\r\n    CANCEL_OPEN = 'DATASET_CANCEL_OPEN',\r\n    CREATE = 'DATASET_CREATE',\r\n    CREATED = 'DATASET_CREATED',\r\n    ERROR = 'DATASET_ERROR',\r\n    DELETE = 'DATASET_DELETE',\r\n    DELETED = 'DATASET_DELETED',\r\n    DETECT = 'DATASET_DETECT',\r\n    DETECTED = 'DATASET_DETECTED',\r\n    DETECT_FAILED = 'DATASET_DETECT_FAILED',\r\n}\r\n\r\nexport const Actions = {\r\n    open: (path: string, cachedParams?: DatasetFormParams, detectedParams?: DatasetFormParams) => createAction(ActionTypes.OPEN, { path, cachedParams, detectedParams }),\r\n    cancelOpen: () => createAction(ActionTypes.CANCEL_OPEN),\r\n    create: (dataset: DatasetCreateParams) => createAction(ActionTypes.CREATE, { dataset }),\r\n    created: (dataset: DatasetState) => createAction(ActionTypes.CREATED, { dataset }),\r\n    error: (dataset: string, msg: string, timestamp: number, id: string) => createAction(ActionTypes.ERROR, { dataset, msg, timestamp, id }),\r\n    delete: (dataset: string) => createAction(ActionTypes.DELETE, { dataset }),\r\n    deleted: (dataset: string) => createAction(ActionTypes.DELETED, { dataset }),\r\n    detect: (path: string) => createAction(ActionTypes.DETECT, { path }),\r\n    detected: (path: string, params: DatasetFormParams) => createAction(ActionTypes.DETECTED, { path, params }),\r\n    detectFailed: (path: string) => createAction(ActionTypes.DETECT_FAILED, { path }),\r\n}\r\n\r\nexport type Actions = ActionsUnion<typeof Actions>;\r\n","import * as React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Dispatch } from \"redux\";\r\nimport * as compoundAnalysisActions from \"../../compoundAnalysis/actions\";\r\nimport AnalysisSelect from \"../../compoundAnalysis/components/base/AnalysisSelect\";\r\nimport { AnalysisTypes, DatasetState } from \"../../messages\";\r\n\r\ninterface DatasetProps {\r\n    dataset: DatasetState\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch, ownProps: DatasetProps) => {\r\n    return {\r\n        handleAddAnalysis: (type: AnalysisTypes) => {\r\n            dispatch(compoundAnalysisActions.Actions.create(ownProps.dataset.id, type));\r\n        },\r\n    }\r\n}\r\ntype MergedProps = DatasetProps & ReturnType<typeof mapDispatchToProps>;\r\n\r\nconst AddAnalysis: React.SFC<MergedProps> = ({ handleAddAnalysis }) => {\r\n    return <AnalysisSelect onClick={handleAddAnalysis} label='Add analysis' />\r\n}\r\n\r\n\r\nexport default connect(null, mapDispatchToProps)(AddAnalysis);","import * as React from \"react\";\r\nimport { Table } from \"semantic-ui-react\";\r\nimport { DatasetState } from \"../../messages\";\r\n\r\ninterface DatasetProps {\r\n    dataset: DatasetState\r\n}\r\n\r\nconst renderParamValue = (value: any) => {\r\n    if (value instanceof Array) {\r\n        return `(${value.join(\",\")})`;\r\n    } else {\r\n        return value;\r\n    }\r\n}\r\n\r\nconst renderParams = (params: any) => {\r\n    return Object.keys(params).map((key: string, idx: number) => {\r\n        return (\r\n            <Table.Row key={idx}>\r\n                <Table.Cell>{key}</Table.Cell>\r\n                <Table.Cell>{renderParamValue(params[key])}</Table.Cell>\r\n            </Table.Row>\r\n        );\r\n    })\r\n}\r\n\r\n\r\nconst DatasetParams: React.SFC<DatasetProps> = ({ dataset }) => {\r\n    return (\r\n        <Table>\r\n            <Table.Header>\r\n                <Table.Row>\r\n                    <Table.HeaderCell>Parameter</Table.HeaderCell>\r\n                    <Table.HeaderCell>Value</Table.HeaderCell>\r\n                </Table.Row>\r\n            </Table.Header>\r\n            <Table.Body>\r\n                {renderParams(dataset.params)}\r\n            </Table.Body>\r\n        </Table>\r\n    );\r\n}\r\n\r\n\r\nexport default DatasetParams;","import * as React from \"react\";\r\nimport { Table } from \"semantic-ui-react\";\r\nimport { DatasetOpen, DiagElemMsg } from \"../../messages\";\r\nimport DatasetParams from \"./DatasetParams\";\r\n\r\ninterface DatasetInfoProps {\r\n    dataset: DatasetOpen,\r\n}\r\n\r\nconst renderValue = (elem: DiagElemMsg) => {\r\n    if (elem.value instanceof Array) {\r\n        return <DiagElems diagnostics={elem.value} />\r\n    } else {\r\n        return elem.value;\r\n    }\r\n}\r\n\r\nconst DiagElem: React.SFC<{ elem: DiagElemMsg }> = ({ elem }) => {\r\n    return (\r\n        <Table.Row>\r\n            <Table.Cell>{elem.name}</Table.Cell>\r\n            <Table.Cell>{renderValue(elem)}</Table.Cell>\r\n        </Table.Row>\r\n    )\r\n}\r\n\r\nconst DiagElems: React.SFC<{ diagnostics: DiagElemMsg[] }> = ({ diagnostics }) => {\r\n    if (diagnostics.length === 0) {\r\n        return null;\r\n    }\r\n    return (\r\n        <Table>\r\n            <Table.Header>\r\n                <Table.Row>\r\n                    <Table.HeaderCell>Name</Table.HeaderCell>\r\n                    <Table.HeaderCell>Value</Table.HeaderCell>\r\n                </Table.Row>\r\n            </Table.Header>\r\n            <Table.Body>\r\n                {diagnostics.map((elem, idx) => (\r\n                    <DiagElem elem={elem} key={idx} />\r\n                ))}\r\n            </Table.Body>\r\n        </Table>\r\n    );\r\n}\r\n\r\nconst DatasetInfo: React.SFC<DatasetInfoProps> = ({ dataset }) => {\r\n    return (\r\n        <>\r\n            <DatasetParams dataset={dataset} />\r\n            <DiagElems diagnostics={dataset.diagnostics} />\r\n        </>\r\n    );\r\n}\r\n\r\nexport default DatasetInfo;","import * as React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Dispatch } from \"redux\";\r\nimport { Button } from \"semantic-ui-react\";\r\nimport { DatasetState } from \"../../messages\";\r\nimport * as datasetActions from \"../actions\";\r\n\r\ninterface DatasetProps {\r\n    dataset: DatasetState,\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch, ownProps: DatasetProps) => {\r\n    return {\r\n        handleRemoveDataset: () => {\r\n            dispatch(datasetActions.Actions.delete(ownProps.dataset.id));\r\n        }\r\n    }\r\n}\r\n\r\ntype MergedProps = DatasetProps & ReturnType<typeof mapDispatchToProps>;\r\n\r\nconst DatasetToolbar: React.SFC<MergedProps> = ({ dataset, handleRemoveDataset }) => {\r\n    return (\r\n        <>\r\n            <Button icon=\"remove\" labelPosition=\"left\" onClick={handleRemoveDataset} content='Close Dataset' />\r\n        </>\r\n    );\r\n}\r\n\r\n\r\nexport default connect(null, mapDispatchToProps)(DatasetToolbar);","import * as React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Header, Icon, Message, Modal, Popup, Segment } from 'semantic-ui-react';\r\nimport AnalysisList from \"../../compoundAnalysis/components/base/AnalysisList\";\r\nimport { CompoundAnalysisState } from \"../../compoundAnalysis/types\";\r\nimport { filterWithPred, Immutable, Predicate } from \"../../helpers/reducerHelpers\";\r\nimport { DatasetState, DatasetStatus } from \"../../messages\";\r\nimport { RootReducer } from \"../../store\";\r\nimport AddAnalysis from \"./AddAnalysis\";\r\nimport DatasetInfo from \"./DatasetInfo\";\r\nimport DatasetToolbar from \"./DatasetToolbar\";\r\n\r\ninterface DatasetProps {\r\n    dataset: DatasetState\r\n}\r\n\r\nconst mapStateToProps = (state: RootReducer, ownProps: DatasetProps) => {\r\n    const p: Predicate<Immutable<CompoundAnalysisState>> = (analysis: Immutable<CompoundAnalysisState>) => analysis.dataset === ownProps.dataset.id;\r\n    return {\r\n        analyses: filterWithPred(state.compoundAnalyses, p),\r\n    }\r\n}\r\n\r\ntype MergedProps = DatasetProps & ReturnType<typeof mapStateToProps>;\r\n\r\nconst DatasetComponent: React.SFC<MergedProps> = ({ dataset, analyses }) => {\r\n    const msg = {\r\n        [DatasetStatus.OPENING]: `Opening dataset ${dataset.params.name}`,\r\n        [DatasetStatus.DELETING]: `Closing dataset ${dataset.params.name}`,\r\n    }\r\n    if (dataset.status === DatasetStatus.OPENING || dataset.status === DatasetStatus.DELETING) {\r\n        return (\r\n            <>\r\n                <Header as=\"h2\" dividing={true}>{dataset.params.name}</Header>\r\n                <Message icon={true}>\r\n                    <Icon name='cog' loading={true} />\r\n                    <Message.Content>\r\n                        <Message.Header>{msg[dataset.status]}</Message.Header>\r\n                    </Message.Content>\r\n                </Message>\r\n            </>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <Segment.Group style={{ marginTop: \"3em\", marginBottom: \"3em\" }}>\r\n            <Segment.Group horizontal={true}>\r\n                <Segment>\r\n                    <Header as=\"h2\">\r\n                        <Icon name=\"database\" />\r\n                        <Modal trigger={\r\n                            <Header.Content>\r\n                                {dataset.params.name}\r\n                                {' '}\r\n                                <Icon name=\"info circle\" size=\"small\" link={true} />\r\n                            </Header.Content>\r\n                        }>\r\n                            <Popup.Header>{dataset.params.type} Dataset {dataset.params.name}</Popup.Header>\r\n                            <Popup.Content>\r\n                                <DatasetInfo dataset={dataset} />\r\n                            </Popup.Content>\r\n                        </Modal>\r\n                    </Header>\r\n                </Segment>\r\n                <Segment style={{ flexShrink: 1, flexGrow: 0 }}>\r\n                    <DatasetToolbar dataset={dataset} />\r\n                </Segment>\r\n            </Segment.Group>\r\n            {\r\n                analyses.ids.length > 0 ? (\r\n                    <>\r\n                        <Segment>\r\n                            <AnalysisList analyses={analyses} />\r\n                        </Segment>\r\n                    </>\r\n                ) : null\r\n            }\r\n            <Segment textAlign=\"center\">\r\n                <AddAnalysis dataset={dataset} />\r\n            </Segment>\r\n        </Segment.Group>\r\n    );\r\n}\r\n\r\nconst DatasetContainer = connect(mapStateToProps)(DatasetComponent);\r\n\r\nexport default DatasetContainer;","import { DataSetOpenSchemaResponse, DeleteDatasetResponse, DetectDatasetResponse, OpenDatasetRequest, OpenDatasetResponse } from \"../messages\";\r\n\r\nexport function openDataset(id: string, dataset: OpenDatasetRequest): Promise<OpenDatasetResponse> {\r\n    return fetch(`/api/datasets/${id}/`, {\r\n        body: JSON.stringify(dataset),\r\n        credentials: \"same-origin\",\r\n        method: \"PUT\",\r\n    }).then(r => r.json());\r\n}\r\n\r\nexport function deleteDataset(id: string): Promise<DeleteDatasetResponse> {\r\n    return fetch(`/api/datasets/${id}/`, {\r\n        credentials: \"same-origin\",\r\n        method: \"DELETE\",\r\n    }).then(r => r.json());\r\n}\r\n\r\n\r\nexport function detectDataset(path: string): Promise<DetectDatasetResponse> {\r\n    return fetch(`/api/datasets/detect/?path=${encodeURIComponent(path)}`, {\r\n        credentials: \"same-origin\",\r\n        method: \"GET\",\r\n    }).then(r => r.json());\r\n}\r\n\r\ninterface SchemaCache {\r\n    [type: string]: DataSetOpenSchemaResponse,\r\n}\r\n\r\nconst schemaCache: SchemaCache = {};\r\n\r\nexport async function getSchema(type: string): Promise<DataSetOpenSchemaResponse> {\r\n    const cached = schemaCache[type];\r\n    if (cached) {\r\n        return new Promise((resolve) => resolve(cached));\r\n    } else {\r\n        const r = await fetch(`/api/datasets/schema/?type=${encodeURIComponent(type)}`, {\r\n            credentials: \"same-origin\",\r\n            method: \"GET\",\r\n        });\r\n        const schemaResponse = await r.json();\r\n        schemaCache[type] = schemaResponse;\r\n        return schemaResponse;\r\n    }\r\n}","import Ajv, { ErrorObject } from 'ajv';\r\nimport { FormikErrors, FormikValues } from 'formik';\r\nimport { DataSetOpenSchemaResponse } from '../messages';\r\nimport { getSchema } from './api';\r\n\r\nexport function convertErrors(errors: ErrorObject[]): FormikErrors<FormikValues> {\r\n    const res: FormikErrors<FormikValues> = {};\r\n    errors.forEach(err => {\r\n        // flatten field names, convert from array to object\r\n        // FIXME: doesn't support multiple errors per field yet (formik limitation?)\r\n        const expr = /^\\.([^[]+)(\\[[^]+\\])?$/\r\n        const fieldName = err.dataPath.replace(expr, (match, plainName) => {\r\n            return plainName;\r\n        });\r\n        res[fieldName] = err.message;\r\n    });\r\n    return res;\r\n}\r\n\r\nexport async function validateOpen(type: string, data: object) {\r\n    return getSchema(type).then((schemaResponse: DataSetOpenSchemaResponse) => {\r\n        if (schemaResponse.status === \"error\") {\r\n            throw new Error(schemaResponse.msg);\r\n        }\r\n        // FIXME: cache compiled schema\r\n        const schema = schemaResponse.schema;\r\n        const ajv = new Ajv();\r\n        const validate = ajv.compile(schema);\r\n        const valid = validate(data);\r\n        if (!valid) {\r\n            if (validate.errors) {\r\n                const converted = convertErrors(validate.errors);\r\n                throw converted;\r\n            } else {\r\n                throw new Error(\"unspecified error while validating fields\");\r\n            }\r\n        }\r\n    })\r\n}","import { withFormik } from \"formik\";\r\nimport * as pathfind from 'path';\r\nimport { DatasetTypes } from \"../messages\";\r\nimport { OpenFormProps } from \"./types\";\r\nimport { validateOpen } from \"./validate\";\r\n\r\nexport function parseNumList(nums: string) {\r\n    return nums.split(\",\").filter(part => part.trim() !== \"\").map(part => +part);\r\n}\r\n\r\nexport function getInitial<T extends object, K extends keyof T, V>(key: K, otherwise: V, values?: T): V | T[K] {\r\n    if (!values) {\r\n        return otherwise;\r\n    }\r\n    const res = values[key] !== undefined ? values[key] : otherwise;\r\n    return res;\r\n}\r\n\r\nexport function getInitialName<T extends object, K extends keyof T>(key: K, otherwise: string, values?: T): string | T[K] {\r\n    if (!values) {\r\n        return pathfind.basename(otherwise);\r\n    }\r\n    const res = values[key] !== undefined ? values[key] : pathfind.basename(otherwise);\r\n    return res;\r\n}\r\n\r\nexport function isKnownDatasetType(detectedType: string) {\r\n  return (Object.keys(DatasetTypes).some((v) => v === detectedType) ? true : false);\r\n}\r\n\r\ntype FormToJsonFn<SubmitParams, FormParams> = (inParams: FormParams, path: string) => SubmitParams;\r\ntype PropsToValuesFn<SubmitParams, FormParams> = (props: OpenFormProps<SubmitParams>) => FormParams;\r\n\r\ninterface WithValidationOpts<SubmitParams extends object, FormParams> {\r\n    formToJson: FormToJsonFn<SubmitParams, FormParams>,\r\n    mapPropsToValues: PropsToValuesFn<SubmitParams, FormParams>,\r\n    type: DatasetTypes,\r\n    // WrappedComponent: React.FunctionComponent<FormikProps<FormParams> & OpenFormProps<SubmitParams>>\r\n}\r\n\r\nexport function withValidation<SubmitParams extends object, FormParams>(\r\n    opts: WithValidationOpts<SubmitParams, FormParams>\r\n) {\r\n    return withFormik<OpenFormProps<SubmitParams>, FormParams>({\r\n        mapPropsToValues: opts.mapPropsToValues,\r\n        handleSubmit: (values, formikBag) => {\r\n            const { onSubmit, path } = formikBag.props;\r\n            const submitData = opts.formToJson(values, path);\r\n            onSubmit(submitData);\r\n            formikBag.setSubmitting(false);\r\n        },\r\n        validate: (values, props) => {\r\n            return validateOpen(opts.type, opts.formToJson(values, props.path));\r\n        },\r\n        enableReinitialize: true,\r\n        validateOnChange: true,\r\n        validateOnBlur: true,\r\n    });\r\n}\r\n","import { ErrorMessage, Field, FormikProps } from \"formik\";\r\nimport * as React from \"react\";\r\nimport { Button, Form } from \"semantic-ui-react\";\r\nimport { Omit } from \"../../helpers/types\";\r\nimport { DatasetParamsBLO, DatasetTypes } from \"../../messages\";\r\nimport { getInitial, getInitialName, parseNumList, withValidation } from \"../helpers\";\r\nimport { OpenFormProps } from \"../types\";\r\n\r\n// some fields have different types in the form vs. in messages\r\ntype DatasetParamsBLOForForm = Omit<DatasetParamsBLO,\r\n    \"path\"\r\n    | \"type\"\r\n    | \"tileshape\"> & {\r\n        tileshape: string,\r\n    };\r\n\r\ntype MergedProps = FormikProps<DatasetParamsBLOForForm> & OpenFormProps<DatasetParamsBLO>;\r\n\r\nconst BLOFileParamsForm: React.SFC<MergedProps> = ({\r\n    values,\r\n    touched,\r\n    errors,\r\n    dirty,\r\n    isSubmitting,\r\n    handleChange,\r\n    handleBlur,\r\n    handleSubmit,\r\n    handleReset,\r\n    isValidating,\r\n    onCancel,\r\n}) => {\r\n    return (\r\n        <Form onSubmit={handleSubmit}>\r\n            <Form.Field>\r\n                <label htmlFor=\"id_name\">Name:</label>\r\n                <ErrorMessage name=\"name\" />\r\n                <Field name=\"name\" id=\"id_name\" />\r\n            </Form.Field>\r\n            <Form.Field>\r\n                <label htmlFor=\"id_tileshape\">Tileshape:</label>\r\n                <ErrorMessage name=\"tileshape\" />\r\n                <Field name=\"tileshape\" id=\"id_tileshape\" />\r\n            </Form.Field>\r\n\r\n            <Button primary={true} type=\"submit\" disabled={isSubmitting || isValidating}>Load Dataset</Button>\r\n            <Button type=\"button\" onClick={onCancel}>Cancel</Button>\r\n            <Button type=\"button\" onClick={handleReset}>Reset</Button>\r\n        </Form>\r\n    )\r\n}\r\n\r\nexport default withValidation<DatasetParamsBLO, DatasetParamsBLOForForm>({\r\n    mapPropsToValues: ({path, initial }) => ({\r\n        name: getInitialName(\"name\",path,initial),\r\n        tileshape: getInitial(\"tileshape\", \"1, 8, 128, 128\", initial).toString(),\r\n    }),\r\n    formToJson: (values, path) => {\r\n        return {\r\n            path,\r\n            type: DatasetTypes.BLO,\r\n            name: values.name,\r\n            tileshape: parseNumList(values.tileshape),\r\n        };\r\n    },\r\n    type: DatasetTypes.BLO,\r\n})(BLOFileParamsForm);\r\n","import { ActionsUnion, createAction } from \"../helpers/actionHelpers\";\r\n\r\nexport enum ActionTypes {\r\n    DISMISS = \"ERROR_DISMISS\",\r\n    DISMISS_ALL = \"ERROR_DISMISS_ALL\",\r\n}\r\n\r\nexport const Actions = {\r\n    dismiss: (id: string) => createAction(ActionTypes.DISMISS, { id }),\r\n    dismissAll: () => createAction(ActionTypes.DISMISS_ALL),\r\n}\r\n\r\nexport type Actions = ActionsUnion<typeof Actions>;","import * as React from \"react\";\r\nimport { Dropdown, DropdownProps } from \"semantic-ui-react\";\r\nimport { getEnumValues } from \"../../helpers\";\r\nimport { DatasetTypes } from \"../../messages\";\r\n\r\n\r\nconst datasetTypeKeys = getEnumValues(DatasetTypes);\r\nconst datasetTypeOptions = datasetTypeKeys.map(t => ({\r\n    // text: DatasetTypeMetadata[DatasetTypes[t as any]].short,\r\n    text: DatasetTypes[t],\r\n    value: DatasetTypes[t],\r\n}));\r\n\r\ninterface DatasetTypeSelectProps {\r\n    onClick: (e: React.SyntheticEvent, data: DropdownProps) => void,\r\n    currentType: DatasetTypes,\r\n}\r\n\r\nconst DatasetTypeSelect: React.SFC<DatasetTypeSelectProps> = ({ currentType, onClick }) => {\r\n    return (\r\n        <>\r\n            <Dropdown\r\n                inline={true}\r\n                options={datasetTypeOptions}\r\n                value={currentType}\r\n                onChange={onClick}\r\n            />\r\n        </>\r\n    );\r\n}\r\n\r\nexport default DatasetTypeSelect;","import { ErrorMessage, Field, FormikProps } from \"formik\";\r\nimport * as React from \"react\";\r\nimport { Button, Form } from \"semantic-ui-react\";\r\nimport { Omit } from \"../../helpers/types\";\r\nimport { DatasetParamsEMPAD, DatasetTypes } from \"../../messages\";\r\nimport { getInitial, getInitialName, parseNumList, withValidation } from \"../helpers\";\r\nimport { OpenFormProps } from \"../types\";\r\n\r\n// some fields have different types in the form vs. in messages\r\ntype DatasetParamsEMPADForForm = Omit<DatasetParamsEMPAD,\r\n    \"path\"\r\n    | \"type\"\r\n    | \"scan_size\"\r\n> & {\r\n    scan_size: string,\r\n};\r\n\r\ntype MergedProps = FormikProps<DatasetParamsEMPADForForm> & OpenFormProps<DatasetParamsEMPAD>;\r\n\r\nconst EMPADParamsForm: React.SFC<MergedProps> = ({\r\n    values,\r\n    touched,\r\n    errors,\r\n    dirty,\r\n    isSubmitting,\r\n    handleChange,\r\n    handleBlur,\r\n    handleSubmit,\r\n    handleReset,\r\n    onCancel,\r\n}) => {\r\n    return (\r\n        <Form onSubmit={handleSubmit}>\r\n            <Form.Field>\r\n                <label htmlFor=\"id_name\">Name:</label>\r\n                <ErrorMessage name=\"name\" />\r\n                <Field name=\"name\" id=\"id_name\" />\r\n            </Form.Field>\r\n            <Form.Field>\r\n                <label htmlFor=\"id_scan_size\">Scan Size:</label>\r\n                <ErrorMessage name=\"scan_size\" />\r\n                <Field name=\"scan_size\" id=\"id_scan_size\" />\r\n            </Form.Field>\r\n            <Button primary={true} type=\"submit\" disabled={isSubmitting}>Load Dataset</Button>\r\n            <Button type=\"button\" onClick={onCancel}>Cancel</Button>\r\n            <Button type=\"button\" onClick={handleReset}>Reset</Button>\r\n        </Form>\r\n    )\r\n}\r\n\r\nexport default withValidation<DatasetParamsEMPAD, DatasetParamsEMPADForForm>({\r\n    mapPropsToValues: ({path, initial }) => ({\r\n        name: getInitialName(\"name\",path,initial),\r\n        scan_size: getInitial(\"scan_size\", \"\", initial).toString(),\r\n    }),\r\n    formToJson: (values, path) => {\r\n        return {\r\n            path,\r\n            type: DatasetTypes.EMPAD,\r\n            name: values.name,\r\n            scan_size: parseNumList(values.scan_size),\r\n        };\r\n    },\r\n    type: DatasetTypes.EMPAD,\r\n})(EMPADParamsForm);\r\n","import { ErrorMessage, Field, FormikProps } from \"formik\";\r\nimport * as React from \"react\";\r\nimport { Button, Form } from \"semantic-ui-react\";\r\nimport { Omit } from \"../../helpers/types\";\r\nimport { DatasetParamsFRMS6, DatasetTypes } from \"../../messages\";\r\nimport { getInitialName, withValidation } from \"../helpers\";\r\nimport { OpenFormProps } from \"../types\";\r\n\r\n// some fields have different types in the form vs. in messages\r\ntype DatasetParamsFRMS6ForForm = Omit<DatasetParamsFRMS6,\r\n    \"path\" | \"type\">;\r\n\r\ntype MergedProps = FormikProps<DatasetParamsFRMS6ForForm> & OpenFormProps<DatasetParamsFRMS6>;\r\nconst FRMS6ParamsForm: React.SFC<MergedProps> = ({\r\n    values,\r\n    touched,\r\n    errors,\r\n    dirty,\r\n    isSubmitting,\r\n    handleChange,\r\n    handleBlur,\r\n    handleSubmit,\r\n    handleReset,\r\n    onCancel,\r\n}) => {\r\n    return (\r\n        <Form onSubmit={handleSubmit}>\r\n            <Form.Field>\r\n                <label htmlFor=\"id_name\">Name:</label>\r\n                <ErrorMessage name=\"name\" />\r\n                <Field name=\"name\" id=\"id_name\" />\r\n            </Form.Field>\r\n\r\n            <Button primary={true} type=\"submit\" disabled={isSubmitting}>Load Dataset</Button>\r\n            <Button type=\"button\" onClick={onCancel}>Cancel</Button>\r\n            <Button type=\"button\" onClick={handleReset}>Reset</Button>\r\n        </Form>\r\n    )\r\n}\r\n\r\nexport default withValidation<DatasetParamsFRMS6, DatasetParamsFRMS6ForForm>({\r\n    mapPropsToValues: ({ path, initial }) => ({\r\n        name: getInitialName(\"name\",path,initial),\r\n    }),\r\n    formToJson: (values, path) => {\r\n        return {\r\n            path,\r\n            type: DatasetTypes.FRMS6,\r\n            name: values.name,\r\n        };\r\n    },\r\n    type: DatasetTypes.FRMS6,\r\n})(FRMS6ParamsForm);\r\n","import { ErrorMessage, Field, FormikProps } from \"formik\";\r\nimport * as React from \"react\";\r\nimport { Button, Form } from \"semantic-ui-react\";\r\nimport { Omit } from \"../../helpers/types\";\r\nimport { DatasetParamsHDF5, DatasetTypes } from \"../../messages\";\r\nimport { getInitial, getInitialName, parseNumList, withValidation } from \"../helpers\";\r\nimport { OpenFormProps } from \"../types\";\r\n\r\ntype DatasetParamsHDF5ForForm = Omit<DatasetParamsHDF5, \"path\" | \"type\" | \"tileshape\"> & { tileshape: string, };\r\n\r\ntype MergedProps = FormikProps<DatasetParamsHDF5ForForm> & OpenFormProps<DatasetParamsHDF5>;\r\n\r\nconst HDF5ParamsForm: React.SFC<MergedProps> = ({\r\n    values,\r\n    touched,\r\n    errors,\r\n    dirty,\r\n    isSubmitting,\r\n    handleChange,\r\n    handleBlur,\r\n    handleSubmit,\r\n    handleReset,\r\n    onCancel,\r\n}) => {\r\n    return (\r\n        <Form onSubmit={handleSubmit}>\r\n            <Form.Field>\r\n                <label htmlFor=\"id_name\">Name:</label>\r\n                <ErrorMessage name=\"name\" />\r\n                <Field name=\"name\" id=\"id_name\" />\r\n            </Form.Field>\r\n            <Form.Field>\r\n                <label htmlFor=\"id_ds_path\">HDF5 Dataset Path:</label>\r\n                <ErrorMessage name=\"ds_path\" />\r\n                <Field name=\"ds_path\" id=\"id_ds_path\" />\r\n            </Form.Field>\r\n            <Form.Field>\r\n                <label htmlFor=\"id_tileshape\">Tileshape:</label>\r\n                <ErrorMessage name=\"tileshape\" />\r\n                <Field name=\"tileshape\" id=\"id_tileshape\" />\r\n            </Form.Field>\r\n            <Button primary={true} type=\"submit\" disabled={isSubmitting}>Load Dataset</Button>\r\n            <Button onClick={onCancel} >Cancel</Button>\r\n            <Button type=\"button\" onClick={handleReset}>Reset</Button>\r\n        </Form>\r\n    )\r\n}\r\n\r\nexport default withValidation<DatasetParamsHDF5, DatasetParamsHDF5ForForm>({\r\n    mapPropsToValues: ({path, initial }) => ({\r\n        name: getInitialName(\"name\",path,initial),\r\n        tileshape: getInitial(\"tileshape\", \"1, 8, 128, 128\", initial).toString(),\r\n        ds_path: getInitial(\"ds_path\", \"\", initial),\r\n    }),\r\n    formToJson: (values, path) => {\r\n        return {\r\n            path,\r\n            type: DatasetTypes.HDF5,\r\n            name: values.name,\r\n            ds_path: values.ds_path,\r\n            tileshape: parseNumList(values.tileshape),\r\n        };\r\n    },\r\n    type: DatasetTypes.HDF5,\r\n})(HDF5ParamsForm);\r\n","import { ErrorMessage, Field, FormikProps } from \"formik\";\r\nimport * as React from \"react\";\r\nimport { Button, Form } from \"semantic-ui-react\";\r\nimport { Omit } from \"../../helpers/types\";\r\nimport { DatasetParamsK2IS, DatasetTypes } from \"../../messages\";\r\nimport { getInitialName, withValidation } from \"../helpers\";\r\nimport { OpenFormProps } from \"../types\";\r\n\r\n// some fields have different types in the form vs. in messages\r\ntype DatasetParamsK2ISForForm = Omit<DatasetParamsK2IS,\r\n    \"path\" | \"type\">;\r\n\r\ntype MergedProps = FormikProps<DatasetParamsK2ISForForm> & OpenFormProps<DatasetParamsK2IS>;\r\n\r\nconst K2ISFileParamsForm: React.SFC<MergedProps> = ({\r\n    values,\r\n    touched,\r\n    errors,\r\n    dirty,\r\n    isSubmitting,\r\n    handleChange,\r\n    handleBlur,\r\n    handleSubmit,\r\n    handleReset,\r\n    onCancel,\r\n}) => {\r\n    return (\r\n        <Form onSubmit={handleSubmit}>\r\n            <Form.Field>\r\n                <label htmlFor=\"id_name\">Name:</label>\r\n                <ErrorMessage name=\"name\" />\r\n                <Field name=\"name\" id=\"id_name\" />\r\n            </Form.Field>\r\n\r\n            <Button primary={true} type=\"submit\" disabled={isSubmitting}>Load Dataset</Button>\r\n            <Button type=\"button\" onClick={onCancel}>Cancel</Button>\r\n            <Button type=\"button\" onClick={handleReset}>Reset</Button>\r\n        </Form>\r\n    )\r\n}\r\n\r\nexport default withValidation<DatasetParamsK2IS, DatasetParamsK2ISForForm>({\r\n    mapPropsToValues: ({path, initial }) => ({\r\n        name: getInitialName(\"name\",path,initial),\r\n    }),\r\n    formToJson: (values, path) => {\r\n        return {\r\n            path,\r\n            type: DatasetTypes.K2IS,\r\n            name: values.name,\r\n        }\r\n    },\r\n    type: DatasetTypes.K2IS,\r\n})(K2ISFileParamsForm);\r\n","import { ErrorMessage, Field, FormikProps } from \"formik\";\r\nimport * as React from \"react\";\r\nimport { Button, Form } from \"semantic-ui-react\";\r\nimport { Omit } from \"../../helpers/types\";\r\nimport { DatasetParamsMIB, DatasetTypes } from \"../../messages\";\r\nimport { getInitial, getInitialName, parseNumList, withValidation } from \"../helpers\";\r\nimport { OpenFormProps } from \"../types\";\r\n\r\n// some fields have different types in the form vs. in messages\r\ntype DatasetParamsMIBForForm = Omit<DatasetParamsMIB,\r\n    \"path\"\r\n    | \"type\"\r\n    | \"tileshape\"\r\n    | \"scan_size\"\r\n> & {\r\n    tileshape: string,\r\n    scan_size: string,\r\n};\r\n\r\ntype FormValues = DatasetParamsMIBForForm\r\n\r\ntype MergedProps = FormikProps<FormValues> & OpenFormProps<DatasetParamsMIB>;\r\n\r\nconst MIBFileParamsForm: React.SFC<MergedProps> = ({\r\n    values,\r\n    touched,\r\n    errors,\r\n    dirty,\r\n    isSubmitting,\r\n    handleChange,\r\n    handleBlur,\r\n    handleSubmit,\r\n    handleReset,\r\n    isValidating,\r\n    onCancel,\r\n}) => {\r\n    return (\r\n        <Form onSubmit={handleSubmit}>\r\n            <Form.Field>\r\n                <label htmlFor=\"id_name\">Name:</label>\r\n                <ErrorMessage name=\"name\" />\r\n                <Field name=\"name\" id=\"id_name\" />\r\n            </Form.Field>\r\n            <Form.Field>\r\n                <label htmlFor=\"id_tileshape\">Tileshape:</label>\r\n                <ErrorMessage name=\"tileshape\" />\r\n                <Field name=\"tileshape\" id=\"id_tileshape\" />\r\n            </Form.Field>\r\n            <Form.Field>\r\n                <label htmlFor=\"id_scan_size\">Scan Size:</label>\r\n                <ErrorMessage name=\"scan_size\" />\r\n                <Field name=\"scan_size\" id=\"id_scan_size\" />\r\n            </Form.Field>\r\n            <Button primary={true} type=\"submit\" disabled={isSubmitting || isValidating}>Load Dataset</Button>\r\n            <Button type=\"button\" onClick={onCancel}>Cancel</Button>\r\n            <Button type=\"button\" onClick={handleReset}>Reset</Button>\r\n        </Form>\r\n    )\r\n}\r\n\r\nexport default withValidation<DatasetParamsMIB, DatasetParamsMIBForForm>({\r\n    formToJson: (values, path) => {\r\n        return {\r\n            path,\r\n            type: DatasetTypes.MIB,\r\n            name: values.name,\r\n            tileshape: parseNumList(values.tileshape),\r\n            scan_size: parseNumList(values.scan_size),\r\n        }\r\n    },\r\n    mapPropsToValues: ({path, initial }) => ({\r\n        name: getInitialName(\"name\",path,initial),\r\n        tileshape: getInitial(\"tileshape\", \"1, 8, 256, 256\", initial).toString(),\r\n        scan_size: getInitial(\"scan_size\", \"\", initial).toString(),\r\n    }),\r\n    type: DatasetTypes.MIB,\r\n})(MIBFileParamsForm);\r\n","import { ErrorMessage, Field, FormikProps } from \"formik\";\r\nimport * as React from \"react\";\r\nimport { Button, Form } from \"semantic-ui-react\";\r\nimport { Omit } from \"../../helpers/types\";\r\nimport { DatasetParamsRaw, DatasetTypes } from \"../../messages\";\r\nimport { getInitial, getInitialName, parseNumList, withValidation } from \"../helpers\";\r\nimport { OpenFormProps } from \"../types\";\r\n\r\n// some fields have different types in the form vs. in messages\r\ntype DatasetParamsRawForForm = Omit<DatasetParamsRaw,\r\n    \"type\"\r\n    | \"path\"\r\n    | \"scan_size\"\r\n    | \"detector_size\"> & {\r\n        scan_size: string\r\n        detector_size: string,\r\n    };\r\n\r\ntype MergedProps = FormikProps<DatasetParamsRawForForm> & OpenFormProps<DatasetParamsRaw>;\r\n\r\nconst RawFileParamsForm: React.SFC<MergedProps> = ({\r\n    values,\r\n    touched,\r\n    errors,\r\n    dirty,\r\n    isSubmitting,\r\n    handleChange,\r\n    handleBlur,\r\n    handleSubmit,\r\n    handleReset,\r\n    onCancel,\r\n}) => {\r\n    return (\r\n\r\n        <Form onSubmit={handleSubmit}>\r\n            <Form.Field>\r\n                <label htmlFor=\"id_name\">Name:</label>\r\n                <ErrorMessage name=\"name\" />\r\n                <Field name=\"name\" id=\"id_name\" />\r\n            </Form.Field>\r\n            <Form.Field>\r\n                <label htmlFor=\"id_scan_size\">Scan Size:</label>\r\n                <ErrorMessage name=\"scan_size\" />\r\n                <Field name=\"scan_size\" id=\"id_scan_size\" />\r\n            </Form.Field>\r\n            <Form.Field>\r\n                <label htmlFor=\"id_dtype\">Datatype (uint16, uint32, float32, float64, &gt;u2, ..., can be anything that is <a href=\"https://docs.scipy.org/doc/numpy-1.15.1/reference/arrays.dtypes.html\">understood by numpy as a dtype</a>):</label>\r\n                <ErrorMessage name=\"dtype\" />\r\n                <Field name=\"dtype\" id=\"id_dtype\" />\r\n            </Form.Field>\r\n\r\n            <Form.Field>\r\n                <label htmlFor=\"id_detector_size\">Detector Size (pixels, example: 256,256):</label>\r\n                <ErrorMessage name=\"detector_size\" />\r\n                <Field name=\"detector_size\" id=\"id_detector_size\" />\r\n            </Form.Field>\r\n            <Form.Field>\r\n                <label htmlFor=\"id_enable_direct\">Enable Direct I/O (for usage with fast SSDs and files much larger than RAM):</label>\r\n                <ErrorMessage name=\"enable_direct\" />\r\n                <Field type=\"checkbox\" name=\"enable_direct\" checked={values.enable_direct} id=\"id_enable_direct\" />\r\n            </Form.Field>\r\n            <Button primary={true} type=\"submit\" disabled={isSubmitting}>Load Dataset</Button>\r\n            <Button type=\"button\" onClick={onCancel}>Cancel</Button>\r\n            <Button type=\"button\" onClick={handleReset}>Reset</Button>\r\n        </Form>\r\n    )\r\n}\r\n\r\nexport default withValidation<DatasetParamsRaw, DatasetParamsRawForForm>({\r\n    mapPropsToValues: ({path, initial }) => ({\r\n        name: getInitialName(\"name\",path,initial),\r\n        enable_direct: getInitial(\"enable_direct\", false, initial),\r\n        detector_size: getInitial(\"detector_size\", \"\", initial).toString(),\r\n        scan_size: getInitial(\"scan_size\", \"\", initial).toString(),\r\n        dtype: getInitial(\"dtype\", \"float32\", initial),\r\n    }),\r\n    formToJson: (values, path) => {\r\n        return {\r\n            path,\r\n            type: DatasetTypes.RAW,\r\n            name: values.name,\r\n            dtype: values.dtype,\r\n            enable_direct: values.enable_direct,\r\n            scan_size: parseNumList(values.scan_size),\r\n            detector_size: parseNumList(values.detector_size),\r\n        }\r\n    },\r\n    type: DatasetTypes.RAW,\r\n})(RawFileParamsForm);\r\n","import { ErrorMessage, Field, FormikProps } from \"formik\";\r\nimport * as React from \"react\";\r\nimport { Button, Form } from \"semantic-ui-react\";\r\nimport { Omit } from \"../../helpers/types\";\r\nimport { DatasetParamsSER, DatasetTypes } from \"../../messages\";\r\nimport { getInitialName, withValidation } from \"../helpers\";\r\nimport { OpenFormProps } from \"../types\";\r\n\r\n// some fields have different types in the form vs. in messages\r\ntype DatasetParamsSERForForm = Omit<DatasetParamsSER,\r\n    \"path\" | \"type\">;\r\n\r\ntype MergedProps = FormikProps<DatasetParamsSERForForm> & OpenFormProps<DatasetParamsSER>;\r\nconst SERParamsForm: React.SFC<MergedProps> = ({\r\n    values,\r\n    touched,\r\n    errors,\r\n    dirty,\r\n    isSubmitting,\r\n    handleChange,\r\n    handleBlur,\r\n    handleSubmit,\r\n    handleReset,\r\n    onCancel,\r\n}) => {\r\n    return (\r\n        <Form onSubmit={handleSubmit}>\r\n            <Form.Field>\r\n                <label htmlFor=\"id_name\">Name:</label>\r\n                <ErrorMessage name=\"name\" />\r\n                <Field name=\"name\" id=\"id_name\" />\r\n            </Form.Field>\r\n\r\n            <Button primary={true} type=\"submit\" disabled={isSubmitting}>Load Dataset</Button>\r\n            <Button type=\"button\" onClick={onCancel}>Cancel</Button>\r\n            <Button type=\"button\" onClick={handleReset}>Reset</Button>\r\n        </Form>\r\n    )\r\n}\r\n\r\nexport default withValidation<DatasetParamsSER, DatasetParamsSERForForm>({\r\n    mapPropsToValues: ({path, initial }) => ({\r\n        name: getInitialName(\"name\",path,initial),\r\n    }),\r\n    formToJson: (values, path) => {\r\n        return {\r\n            path,\r\n            type: DatasetTypes.SER,\r\n            name: values.name,\r\n        }\r\n    },\r\n    type: DatasetTypes.SER,\r\n})(SERParamsForm);\r\n","import * as React from \"react\";\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { DropdownProps, Header, Segment } from \"semantic-ui-react\";\r\nimport uuid from \"uuid/v4\";\r\nimport { assertNotReached } from \"../../helpers\";\r\nimport { DatasetFormParams, DatasetTypes } from '../../messages';\r\nimport { RootReducer } from \"../../store\";\r\nimport * as datasetActions from \"../actions\";\r\nimport { OpenDatasetState } from \"../types\";\r\nimport BLOParamsForm from \"./BLOParamsForm\";\r\nimport DatasetTypeSelect from \"./DatasetTypeSelect\";\r\nimport EMPADParamsForm from \"./EMPADParamsForm\";\r\nimport FRMS6ParamsForm from \"./FRMS6ParamsForm\";\r\nimport HDF5ParamsForm from \"./HDF5ParamsForm\";\r\nimport K2ISParamsForm from \"./K2ISParamsForm\";\r\nimport MIBParamsForm from \"./MIBParamsForm\";\r\nimport RawFileParamsForm from \"./RawFileParamsForm\";\r\nimport SERParamsForm from \"./SERParamsForm\";\r\n\r\n\r\n/**\r\n * Get the initial selection for the dataset type dropdown. If we have a previous\r\n * user selection, we use it, but only if the reset button was not pressed. If it was,\r\n * we use the detected dataset type, falling back to RAW.\r\n *\r\n * @param didReset flag: was the reset button pressed?\r\n * @param openState complete OpenDatasetState instance\r\n */\r\nconst getDefaultDSType = (didReset: boolean, openState: OpenDatasetState) => {\r\n    const { formCachedParams, formDetectedParams } = openState;\r\n    if (didReset) {\r\n        return formDetectedParams ? formDetectedParams.type : DatasetTypes.RAW;\r\n    }\r\n    if (formCachedParams) {\r\n        return formCachedParams.type;\r\n    }\r\n    if (formDetectedParams) {\r\n        return formDetectedParams.type;\r\n    }\r\n    return DatasetTypes.RAW;\r\n}\r\n\r\n\r\n/**\r\n * Get the initial form field values. If we have previously entered values, we\r\n * use these, otherwise we use the detected parameters. If the reset button was\r\n * clicked, we use the detected params, but keep the original name field,\r\n *\r\n * @param didReset flag: was the reset button pressed?\r\n * @param openState complete OpenDatasetState instance\r\n */\r\n\r\nconst getFormInitial = (didReset: boolean, openState: OpenDatasetState) => {\r\n    const { formCachedParams, formDetectedParams } = openState;\r\n    if (didReset) {\r\n        if (formDetectedParams) {\r\n            return {\r\n                name: formCachedParams ? formCachedParams.name : \"\",\r\n                ...formDetectedParams,\r\n            };\r\n        }\r\n        return undefined;\r\n    }\r\n    if (formCachedParams) {\r\n        return formCachedParams;\r\n    } else {\r\n        return formDetectedParams;\r\n    }\r\n}\r\n\r\n/**\r\n * Dispatch to specific dataset opening forms, including a selection of dataset type\r\n * via a dropdown.\r\n */\r\nconst DatasetOpen = () => {\r\n    const dispatch = useDispatch();\r\n    const openState = useSelector((state: RootReducer) => state.openDataset);\r\n\r\n    const [didReset, setReset] = React.useState(false);\r\n    const formInitial = getFormInitial(didReset, openState);\r\n    const defaultType = getDefaultDSType(didReset, openState);\r\n    const [datasetType, setDatasetType] = React.useState(defaultType);\r\n\r\n    const doSetType = (e: React.SyntheticEvent, data: DropdownProps) => setDatasetType(data.value as DatasetTypes);\r\n    // FIXME: find out how to make ts correctly correlate the types of FormComponent\r\n    // and initial and replace the huge switch below with something like:\r\n    // const initial = formInitial && datasetType === formInitial.type ? formInitial : undefined;\r\n    // const formComponentMap = {\r\n    //     [DatasetTypes.HDF5]: HDF5ParamsForm,\r\n    //     [DatasetTypes.RAW]: RawFileParamsForm,\r\n    //     [DatasetTypes.MIB]: MIBParamsForm,\r\n    //     [DatasetTypes.BLO]: BLOParamsForm,\r\n    //     [DatasetTypes.K2IS]: K2ISParamsForm,\r\n    //     [DatasetTypes.SER]: SERParamsForm,\r\n    //     [DatasetTypes.FRMS6]: FRMS6ParamsForm,\r\n    //     [DatasetTypes.EMPAD]: EMPADParamsForm,\r\n    // }\r\n    // const FormComponent = formComponentMap[datasetType];\r\n\r\n    const renderForm = (form: React.ReactNode) => {\r\n        return (\r\n            <Segment>\r\n                Type: <DatasetTypeSelect onClick={doSetType} currentType={datasetType} />\r\n                <Header as=\"h2\">Open: {openState.formPath}</Header>\r\n                {form}\r\n            </Segment>\r\n        );\r\n    }\r\n\r\n    const commonParams = {\r\n        path: openState.formPath,\r\n        onSubmit: (params: DatasetFormParams) => {\r\n            dispatch(datasetActions.Actions.create({\r\n                id: uuid(),\r\n                params,\r\n            }))\r\n        },\r\n        onCancel: () => dispatch(datasetActions.Actions.cancelOpen()),\r\n        onReset: () => {\r\n            setReset(true);\r\n            setDatasetType(getDefaultDSType(true, openState));\r\n        },\r\n    }\r\n\r\n    switch (datasetType) {\r\n        case DatasetTypes.HDF5: {\r\n            const initial = formInitial && datasetType === formInitial.type ? formInitial : undefined;\r\n            return renderForm(<HDF5ParamsForm {...commonParams} initial={initial} />);\r\n        }\r\n        case DatasetTypes.RAW: {\r\n            const initial = formInitial && datasetType === formInitial.type ? formInitial : undefined;\r\n            return renderForm(<RawFileParamsForm {...commonParams} initial={initial} />);\r\n        }\r\n        case DatasetTypes.MIB: {\r\n            const initial = formInitial && datasetType === formInitial.type ? formInitial : undefined;\r\n            return renderForm(<MIBParamsForm {...commonParams} initial={initial} />);\r\n        }\r\n        case DatasetTypes.BLO: {\r\n            const initial = formInitial && datasetType === formInitial.type ? formInitial : undefined;\r\n            return renderForm(<BLOParamsForm {...commonParams} initial={initial} />);\r\n        }\r\n        case DatasetTypes.K2IS: {\r\n            const initial = formInitial && datasetType === formInitial.type ? formInitial : undefined;\r\n            return renderForm(<K2ISParamsForm {...commonParams} initial={initial} />);\r\n        }\r\n        case DatasetTypes.SER: {\r\n            const initial = formInitial && datasetType === formInitial.type ? formInitial : undefined;\r\n            return renderForm(<SERParamsForm {...commonParams} initial={initial} />);\r\n        }\r\n        case DatasetTypes.FRMS6: {\r\n            const initial = formInitial && datasetType === formInitial.type ? formInitial : undefined;\r\n            return renderForm(<FRMS6ParamsForm {...commonParams} initial={initial} />);\r\n        }\r\n        case DatasetTypes.EMPAD: {\r\n            const initial = formInitial && datasetType === formInitial.type ? formInitial : undefined;\r\n            return renderForm(<EMPADParamsForm {...commonParams} initial={initial} />)\r\n        }\r\n    }\r\n    return assertNotReached(\"unknown dataset type\");\r\n}\r\n\r\nexport default DatasetOpen;\r\n","import * as React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Header, Icon, Message } from \"semantic-ui-react\";\r\nimport { RootReducer } from \"../../store\";\r\n\r\nconst mapStateToProps = (state: RootReducer) => {\r\n    return {\r\n        busy: state.openDataset.busy,\r\n        path: state.openDataset.busyPath,\r\n    };\r\n}\r\n\r\ntype MergedProps = ReturnType<typeof mapStateToProps>;\r\n\r\nconst DatasetOpenSpinner: React.SFC<MergedProps> = ({ busy, path }) => {\r\n    if (!busy) {\r\n        return null;\r\n    }\r\n    return (\r\n        <>\r\n            <Header as=\"h2\" dividing={true}>Loading...</Header>\r\n            <Message icon={true}>\r\n                <Icon name='cog' loading={true} />\r\n                <Message.Content>\r\n                    <Message.Header>Detecting parameters for {path}</Message.Header>\r\n                </Message.Content>\r\n            </Message>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default connect(mapStateToProps)(DatasetOpenSpinner);","import * as React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport BrowserWrapper from \"../../browser/components/BrowserWrapper\";\r\nimport { RootReducer } from \"../../store\";\r\nimport { DatasetsState } from \"../types\";\r\nimport Dataset from \"./Dataset\";\r\nimport DatasetOpen from \"./DatasetOpen\";\r\nimport DatasetOpenSpinner from \"./DatasetOpenSpinner\";\r\n\r\ninterface DatasetListProps {\r\n    datasets: DatasetsState\r\n}\r\n\r\nconst mapStateToProps = (state: RootReducer) => {\r\n    return {\r\n        datasets: state.datasets,\r\n        formVisible: state.openDataset.formVisible,\r\n        formPath: state.openDataset.formPath,\r\n    };\r\n}\r\n\r\ntype MergedProps = DatasetListProps & ReturnType<typeof mapStateToProps>;\r\n\r\nclass DatasetList extends React.Component<MergedProps> {\r\n    public render() {\r\n        const { formVisible, datasets } = this.props;\r\n\r\n        return (\r\n            <>\r\n                {datasets.ids.map((dsId: string) => <Dataset dataset={datasets.byId[dsId]} key={dsId} />)}\r\n                <DatasetOpenSpinner />\r\n                {formVisible && <DatasetOpen />}\r\n                <BrowserWrapper />\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(DatasetList);","import * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Dispatch } from 'redux';\r\nimport { Message } from 'semantic-ui-react';\r\nimport * as errorActions from '../actions';\r\nimport { ErrorMessage } from '../reducers';\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch, ownProps: ErrorProps) => {\r\n    return {\r\n        dismiss: () => dispatch(errorActions.Actions.dismiss(ownProps.error.id)),\r\n    }\r\n}\r\n\r\ninterface ErrorProps {\r\n    error: ErrorMessage,\r\n}\r\n\r\ntype MergedProps = ErrorProps & ReturnType<typeof mapDispatchToProps>;\r\n\r\nconst ErrorComponent: React.SFC<MergedProps> = ({ dismiss, error }) => {\r\n    return (\r\n        <Message negative={true} onDismiss={dismiss}>{error.msg}</Message>\r\n    )\r\n}\r\n\r\nexport default connect(null, mapDispatchToProps)(ErrorComponent);","import * as React from \"react\";\r\nimport { connect, useDispatch } from \"react-redux\";\r\nimport { Modal } from \"semantic-ui-react\";\r\nimport { useDismissEscape } from \"../../helpers/hooks\";\r\nimport { RootReducer } from \"../../store\";\r\nimport { Actions } from \"../actions\";\r\nimport Error from \"./Error\";\r\n\r\nconst mapStateToProps = (state: RootReducer) => {\r\n    return {\r\n        errors: state.errors,\r\n        clusterConnected: state.clusterConnection.status === \"connected\",\r\n        channelConnected: (state.channelStatus.status === \"connected\" ||\r\n            state.channelStatus.status === \"ready\"),\r\n    }\r\n}\r\n\r\ntype MergedProps = ReturnType<typeof mapStateToProps>;\r\n\r\nconst ErrorList: React.SFC<MergedProps> = ({ errors, clusterConnected, channelConnected }) => {\r\n    const numShown = 3;\r\n    const latestErrors = errors.ids.slice(Math.max(0, errors.ids.length - numShown));\r\n    const showModal = errors.ids.length > 0 && clusterConnected && channelConnected;\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const doDismiss = () => {\r\n        dispatch(Actions.dismissAll());\r\n    }\r\n\r\n    useDismissEscape(doDismiss);\r\n\r\n    return (\r\n        <Modal open={showModal}>\r\n            {latestErrors.map(error => <Error error={errors.byId[error]} key={error} />)}\r\n        </Modal>\r\n    );\r\n}\r\n\r\nexport default connect(mapStateToProps)(ErrorList);","import React from \"react\";\r\n\r\nexport const useDismissEscape = (dismiss: () => void) => {\r\n    React.useEffect(() => {\r\n        const handleEsc = (ev: KeyboardEvent) => {\r\n            if(ev.code === \"Escape\" || ev.keyCode === 27) {\r\n                dismiss();\r\n            }\r\n        }\r\n        document.addEventListener(\"keyup\", handleEsc);\r\n\r\n        return () => {\r\n            document.removeEventListener(\"keyup\", handleEsc);\r\n        };\r\n    });\r\n}","import * as React from 'react';\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport { Container, Icon, Modal, Popup } from 'semantic-ui-react';\r\nimport About from './About';\r\nimport ChannelStatus from './channel/components/ChannelStatus';\r\nimport DatasetList from './dataset/components/DatasetList';\r\nimport ErrorList from './errors/components/ErrorList';\r\nimport logo from './images/LiberTEM logo-medium.png';\r\n\r\nclass App extends React.Component {\r\n    public render() {\r\n        return (\r\n            <Container style={{ margin: \"5em 1em 5em 1em\" }}>\r\n                <div style={{ display: \"flex\" }}>\r\n                    <img src={logo} width=\"200\" height=\"46\" alt=\"LiberTEM\" style={{ marginBottom: \"20px\" }} />\r\n                    {' '}\r\n                    <Modal trigger={\r\n                        <Icon name=\"info circle\" link={true} style={{ alignSelf: \"flex-start\" }} />\r\n                    }>\r\n                        <Popup.Header>About LiberTEM</Popup.Header>\r\n                        <Popup.Content>\r\n                            <About />\r\n                        </Popup.Content>\r\n                    </Modal>\r\n                </div>\r\n                <ErrorList />\r\n                <ChannelStatus>\r\n                    <DatasetList />\r\n                </ChannelStatus>\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// tslint:disable:no-console\r\n// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the 'N+1' visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL!,\r\n      window.location.toString()\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker) {\r\n          installingWorker.onstatechange = () => {\r\n            if (installingWorker.state === 'installed') {\r\n              if (navigator.serviceWorker.controller) {\r\n                // At this point, the old content will have been purged and\r\n                // the fresh content will have been added to the cache.\r\n                // It's the perfect time to display a 'New content is\r\n                // available; please refresh.' message in your web app.\r\n                console.log('New content is available; please refresh.');\r\n              } else {\r\n                // At this point, everything has been precached.\r\n                // It's the perfect time to display a\r\n                // 'Content is cached for offline use.' message.\r\n                console.log('Content is cached for offline use.');\r\n              }\r\n            }\r\n          };\r\n        }\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type')!.indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import _ from 'lodash';\r\nimport { MsgPartConfig } from \"../messages\";\r\nimport { ConfigParams, ConfigState, LocalConfig } from \"./reducers\";\r\n\r\nconst CONFIG_KEY = \"LiberTEM.config\";\r\n\r\nexport function joinPaths(config: ConfigState, ...parts: string[]) {\r\n    const removeSep = (part: string) => part.replace(new RegExp(`${_.escapeRegExp(config.separator)}$`), \"\")\r\n    parts = [removeSep(parts[0]), ...parts.slice(1)];\r\n    return parts.map(part => part.trim()).join(config.separator);\r\n}\r\n\r\nexport function mergeLocalStorage(serverConfig: MsgPartConfig): ConfigParams {\r\n    const localSettings = window.localStorage.getItem(CONFIG_KEY);\r\n    if (localSettings === null) {\r\n        return Object.assign({}, serverConfig, getDefaultLocalConfig(serverConfig));\r\n    }\r\n    const localSettingsParsed = JSON.parse(localSettings);\r\n    const defaultConfig = getDefaultLocalConfig(serverConfig);\r\n    const mergedConfig = Object.assign({}, defaultConfig, serverConfig, localSettingsParsed);\r\n    return mergedConfig;\r\n}\r\n\r\nexport function setLocalStorage(config: ConfigState): void {\r\n    const localSettings: LocalConfig = {\r\n        cwd: config.cwd,\r\n        lastOpened: config.lastOpened,\r\n        fileHistory: config.fileHistory,\r\n    }\r\n\r\n    window.localStorage.setItem(CONFIG_KEY, JSON.stringify(localSettings));\r\n}\r\n\r\nexport function clearLocalStorage(): void {\r\n    window.localStorage.removeItem(CONFIG_KEY);\r\n}\r\n\r\nexport function getDefaultLocalConfig(config: MsgPartConfig): LocalConfig {\r\n    return {\r\n        lastOpened: {},\r\n        fileHistory: [],\r\n        cwd: \"/\",\r\n    };\r\n}\r\n\r\nexport function makeUnique<T>(inp: T[]): T[] {\r\n    return inp.reduce((acc: T[], curr: T) => {\r\n        if (acc.indexOf(curr) === -1) {\r\n            return [...acc, curr];\r\n        } else {\r\n            return acc;\r\n        }\r\n    }, [] as T[]);\r\n}","import { DirectoryListingResponse } from \"../messages\";\r\n\r\nexport function getDirectoryListing(path: string): Promise<DirectoryListingResponse> {\r\n    const url = `/api/browse/localfs/?path=${encodeURIComponent(path)}`;\r\n    return fetch(url, {\r\n        method: 'GET',\r\n        credentials: \"same-origin\",\r\n    }).then(r => r.json());\r\n}","import { ActionsUnion, createAction } from '../helpers/actionHelpers';\r\nimport { JobResultType } from '../job/types';\r\nimport { AnalysisDetails, MsgPartAnalysis, MsgPartCompoundAnalysis, MsgPartInitialDataset, MsgPartJob } from '../messages';\r\n\r\n\r\nexport type PartialResultType = JobResultType;\r\n\r\nexport enum ActionTypes {\r\n    INITIAL_STATE = 'CHANNEL_INITIAL_STATE',\r\n    JOB_STARTED = 'CHANNEL_JOB_STARTED',\r\n    FINISH_JOB = 'CHANNEL_FINISH_JOB',\r\n    TASK_RESULT = 'CHANNEL_TASK_RESULT',\r\n    JOB_ERROR = 'CHANNEL_JOB_ERROR',\r\n    OPEN = \"CHANNEL_OPEN\",\r\n    CLOSE = \"CHANNEL_CLOSE\",\r\n    ERROR = \"CHANNEL_ERROR\",\r\n    CANCELLED = \"CANCELLED\",\r\n    ANALYSIS_CREATED = 'ANALYSIS_CREATED',\r\n    ANALYSIS_UPDATED = 'ANALYSIS_UPDATED',\r\n    ANALYSIS_REMOVED = 'ANALYSIS_REMOVED',\r\n}\r\n\r\nexport const Actions = {\r\n    initialState: (jobs: MsgPartJob[], datasets: MsgPartInitialDataset[], compoundAnalyses: MsgPartCompoundAnalysis[], analyses: MsgPartAnalysis[], timestamp: number) => createAction(ActionTypes.INITIAL_STATE, { jobs, datasets, timestamp, compoundAnalyses, analyses }),\r\n    jobStarted: (job: string, dataset: string, timestamp: number) => createAction(ActionTypes.JOB_STARTED, { job, timestamp, dataset }),\r\n    finishJob: (job: string, results: JobResultType[], timestamp: number) => createAction(ActionTypes.FINISH_JOB, { job, results, timestamp }),\r\n    taskResult: (job: string, results: PartialResultType[], timestamp: number) => createAction(ActionTypes.TASK_RESULT, { job, results, timestamp }),\r\n    jobError: (job: string, msg: string, id: string, timestamp: number) => createAction(ActionTypes.JOB_ERROR, { job, msg, id, timestamp }),\r\n    open: (timestamp: number) => createAction(ActionTypes.OPEN, { timestamp }),\r\n    close: (timestamp: number) => createAction(ActionTypes.CLOSE, { timestamp }),\r\n    error: (msg: string, timestamp: number, id: string) => createAction(ActionTypes.ERROR, { msg, timestamp, id }),\r\n    cancelled: (job: string) => createAction(ActionTypes.CANCELLED, { job }),\r\n    analysisCreated: (analysis: string, dataset: string, details: AnalysisDetails) => createAction(ActionTypes.ANALYSIS_CREATED, { dataset, analysis, details }),\r\n    analysisUpdated: (analysis: string, dataset: string, details: AnalysisDetails) => createAction(ActionTypes.ANALYSIS_UPDATED, { dataset, analysis, details }),\r\n    analysisRemoved: (analysis: string) => createAction(ActionTypes.ANALYSIS_REMOVED, { analysis }),\r\n}\r\n\r\nexport type Actions = ActionsUnion<typeof Actions>;","import { call, fork, put, select, take } from \"redux-saga/effects\";\r\nimport uuid from 'uuid/v4';\r\nimport { joinPaths } from \"../config/helpers\";\r\nimport { ConfigState } from \"../config/reducers\";\r\nimport { DirectoryListingResponse } from \"../messages\";\r\nimport { RootReducer } from \"../store\";\r\nimport * as browserActions from './actions';\r\nimport { getDirectoryListing } from \"./api\";\r\nimport { DirectoryBrowserState } from \"./types\";\r\n\r\nexport function* directoryListingSaga() {\r\n    yield fork(fetchOnRequest);\r\n    yield fork(fetchDirectoryListOnOpen);\r\n}\r\n\r\nfunction* fetchOnRequest() {\r\n    while (true) {\r\n        const action: ReturnType<typeof browserActions.Actions.list> = yield take(browserActions.ActionTypes.LIST_DIRECTORY);\r\n\r\n        const { name, path } = action.payload;\r\n        const config: ConfigState = yield select((state: RootReducer) => state.config)\r\n        const newPath = name !== undefined ? joinPaths(config, path, name) : path;\r\n        yield fork(fetchDirectoryListing, newPath);\r\n    }\r\n}\r\n\r\nfunction* fetchDirectoryListing(path: string) {\r\n    try {\r\n        const result: DirectoryListingResponse = yield call(getDirectoryListing, path);\r\n        if (result.status === \"ok\") {\r\n            yield put(browserActions.Actions.dirListing(result.path, result.dirs, result.files, result.drives, result.places));\r\n        } else if (result.status === \"error\") {\r\n            const browserState: DirectoryBrowserState = yield select((state: RootReducer) => state.browser);\r\n            const timestamp = Date.now();\r\n            const id = uuid();\r\n            const alternative = result.alternative ? result.alternative : browserState.places.home.path;\r\n            yield put(browserActions.Actions.error(`Error browsing directory: ${result.msg}`, timestamp, id));\r\n            yield put(browserActions.Actions.list(alternative));\r\n        }\r\n    } catch (e) {\r\n        const browserState: DirectoryBrowserState = yield select((state: RootReducer) => state.browser);\r\n        const timestamp = Date.now();\r\n        const id = uuid();\r\n        yield put(browserActions.Actions.error(`Error browsing directory: ${e.toString()}`, timestamp, id));\r\n        yield put(browserActions.Actions.list(browserState.places.home.path));\r\n    }\r\n}\r\n\r\nfunction* fetchDirectoryListOnOpen() {\r\n    while (true) {\r\n        yield take(browserActions.ActionTypes.OPEN);\r\n        const config: ConfigState = yield select((state: RootReducer) => state.config)\r\n        yield put(browserActions.Actions.list(config.cwd));\r\n    }\r\n}","import { ActionCreatorsMapObject } from \"redux\";\r\nimport { AnalysisDetails, CompoundAnalysisDetails, FollowupPart, MsgPartAnalysis, MsgPartCompoundAnalysis, MsgPartInitialDataset, MsgPartJob } from \"../messages\";\r\n\r\nexport interface Message<T extends string> {\r\n    messageType: T\r\n}\r\n\r\nexport function createMessage<T extends string, O>(messageType: T, attribs: O) {\r\n    return Object.assign({ messageType }, attribs);\r\n}\r\n\r\nexport enum MessageTypes {\r\n    INITIAL_STATE = \"INITIAL_STATE\",\r\n    JOB_STARTED = \"JOB_STARTED\",\r\n    FINISH_JOB = \"FINISH_JOB\",\r\n    TASK_RESULT = \"TASK_RESULT\",\r\n    JOB_ERROR = \"JOB_ERROR\",\r\n    BINARY = \"BINARY\",\r\n    OPEN = \"OPEN\",\r\n    CLOSE = \"CLOSE\",\r\n    ERROR = \"ERROR\",\r\n    DELETE_DATASET = \"DELETE_DATASET\",\r\n    CREATE_DATASET = \"CREATE_DATASET\",\r\n    CANCEL_JOB_DONE = \"CANCEL_JOB_DONE\",\r\n    ANALYSIS_CREATED = \"ANALYSIS_CREATED\",\r\n    ANALYSIS_UPDATED = \"ANALYSIS_UPDATED\",\r\n    ANALYSIS_REMOVED = \"ANALYSIS_REMOVED\",\r\n    COMPOUND_ANALYSIS_CREATED = \"COMPOUND_ANALYSIS_CREATED\",\r\n    COMPOUND_ANALYSIS_UPDATED = \"COMPOUND_ANALYSIS_UPDATED\",\r\n    COMPOUND_ANALYSIS_REMOVED = \"COMPOUND_ANALYSIS_REMOVED\",\r\n}\r\n\r\nexport const Messages = {\r\n    initialState: (\r\n        jobs: MsgPartJob[],\r\n        datasets: MsgPartInitialDataset[],\r\n        analyses: MsgPartAnalysis[],\r\n        compoundAnalyses: MsgPartCompoundAnalysis[]\r\n    ) => createMessage(MessageTypes.INITIAL_STATE, {\r\n        jobs, datasets, compoundAnalyses, analyses,\r\n    }),\r\n\r\n    startJob: (job: string, dataset: string) => createMessage(MessageTypes.JOB_STARTED, { job, dataset }),\r\n    finishJob: (job: string, followup: FollowupPart) => createMessage(MessageTypes.FINISH_JOB, { job, followup }),\r\n    taskResult: (job: string, followup: FollowupPart) => createMessage(MessageTypes.TASK_RESULT, { job, followup }),\r\n    jobError: (job: string, msg: string) => createMessage(MessageTypes.JOB_ERROR, { job, msg }),\r\n    binary: (objectURL: string) => createMessage(MessageTypes.BINARY, { objectURL }),\r\n    open: () => createMessage(MessageTypes.OPEN, {}),\r\n    close: () => createMessage(MessageTypes.CLOSE, {}),\r\n    error: (msg: string) => createMessage(MessageTypes.ERROR, { msg }),\r\n    deleteDataset: (dataset: string) => createMessage(MessageTypes.DELETE_DATASET, { dataset }),\r\n    cancelled: (job: string) => createMessage(MessageTypes.CANCEL_JOB_DONE, { job }),\r\n    analysisCreated: (analysis: string, dataset: string, details: AnalysisDetails) => createMessage(MessageTypes.ANALYSIS_CREATED, { dataset, analysis, details }),\r\n    analysisUpdated: (analysis: string, dataset: string, details: AnalysisDetails) => createMessage(MessageTypes.ANALYSIS_UPDATED, { dataset, analysis, details }),\r\n    analysisRemoved: (analysis: string) => createMessage(MessageTypes.ANALYSIS_REMOVED, { analysis }),\r\n\r\n    compoundAnalysisCreated: (compoundAnalysis: string, dataset: string, details: CompoundAnalysisDetails) => createMessage(MessageTypes.COMPOUND_ANALYSIS_CREATED, { dataset, compoundAnalysis, details }),\r\n    compoundAnalysisUpdated: (compoundAnalysis: string, dataset: string, details: CompoundAnalysisDetails) => createMessage(MessageTypes.COMPOUND_ANALYSIS_UPDATED, { dataset, compoundAnalysis, details }),\r\n    compoundAnalysisRemoved: (compoundAnalysis: string) => createMessage(MessageTypes.ANALYSIS_REMOVED, { compoundAnalysis }),\r\n}\r\n\r\nexport type MessagesUnion<A extends ActionCreatorsMapObject> = ReturnType<A[keyof A]>\r\nexport type Messages = MessagesUnion<typeof Messages>;\r\n\r\n// types of messages sent by the server:\r\n/*\r\nexport type InitialStateMessage = ReturnType<typeof Messages.initialState>;\r\nexport type StartJobMessage = ReturnType<typeof Messages.startJob>;\r\nexport type FinishJobMessage = ReturnType<typeof Messages.finishJob>;\r\nexport type TaskResultMessage = ReturnType<typeof Messages.taskResult>;\r\n*/\r\n\r\nexport type BinaryMessage = ReturnType<typeof Messages.binary>;","import { END, eventChannel, EventChannel } from \"redux-saga\";\r\nimport { call, delay, fork, put, take } from \"redux-saga/effects\";\r\nimport uuid from 'uuid/v4';\r\nimport * as datasetActions from '../dataset/actions';\r\nimport * as channelActions from \"./actions\";\r\nimport * as channelMessages from './messages';\r\n\r\ntype SocketChannel = EventChannel<channelMessages.Messages>;\r\n\r\n\r\n/**\r\n * create typesafe messages from the websocket messages\r\n * \r\n * also creates some synthetic events like open, close, error\r\n */\r\nfunction createWebSocketChannel(/* addr */): SocketChannel {\r\n    return eventChannel(emit => {\r\n        function onMessage(msg: MessageEvent) {\r\n            if (msg.data instanceof Blob) {\r\n                // TODO: cleanup createObjectURL results somewhere\r\n                emit(channelMessages.Messages.binary(URL.createObjectURL(msg.data)));\r\n            } else {\r\n                const parsed = JSON.parse(msg.data) as channelMessages.Messages;\r\n                emit(parsed);\r\n            }\r\n        }\r\n\r\n        function onOpen() {\r\n            emit(channelMessages.Messages.open());\r\n        }\r\n\r\n        function onClose() {\r\n            emit(channelMessages.Messages.close());\r\n            emit(END);\r\n        }\r\n\r\n        function onError(err: Event) {\r\n            emit(channelMessages.Messages.error(\"Error in weboscket connection\"));\r\n        }\r\n\r\n        const ws = new WebSocket(`ws://${window.location.hostname}:${window.location.port}/api/events/`);\r\n        ws.addEventListener(\"message\", onMessage);\r\n        ws.addEventListener(\"open\", onOpen);\r\n        ws.addEventListener(\"close\", onClose);\r\n        ws.addEventListener(\"error\", onError);\r\n\r\n        // return cleanup function:\r\n        return () => {\r\n            ws.removeEventListener(\"message\", onMessage);\r\n            ws.removeEventListener(\"open\", onOpen);\r\n            ws.removeEventListener(\"close\", onClose);\r\n            ws.removeEventListener(\"error\", onError);\r\n            // TODO: close connection if still open\r\n            // (or is it guaranteed that if an error was thrown, the connection is closed?)\r\n        };\r\n    });\r\n}\r\n\r\n/**\r\n * handles the connection lifecycle for our websocket\r\n */\r\nexport function* webSocketSaga() {\r\n    while (true) {\r\n        const socketChannel = yield call(createWebSocketChannel);\r\n        yield fork(actionsFromChannel, socketChannel);\r\n        const action: channelActions.Actions = yield take([\r\n            channelActions.ActionTypes.OPEN,\r\n            channelActions.ActionTypes.CLOSE,\r\n        ]);\r\n        if (action.type === channelActions.ActionTypes.OPEN) {\r\n            yield take([\r\n                channelActions.ActionTypes.CLOSE,\r\n                channelActions.ActionTypes.ERROR,\r\n            ]);\r\n        }\r\n        yield delay(1000);\r\n    }\r\n}\r\n\r\n/**\r\n * translates the messages from the channel to redux actions, handles aggregation etc.\r\n */\r\nexport function* actionsFromChannel(socketChannel: SocketChannel) {\r\n    try {\r\n        while (true) {\r\n            const msg = yield take(socketChannel);\r\n            const timestamp = Date.now();\r\n            switch (msg.messageType) {\r\n                case channelMessages.MessageTypes.OPEN: {\r\n                    yield put(channelActions.Actions.open(timestamp));\r\n                    break;\r\n                }\r\n                case channelMessages.MessageTypes.CLOSE: {\r\n                    yield put(channelActions.Actions.close(timestamp));\r\n                    break;\r\n                }\r\n                case channelMessages.MessageTypes.ERROR: {\r\n                    const id = uuid();\r\n                    yield put(channelActions.Actions.error(msg.msg, timestamp, id));\r\n                    break;\r\n                }\r\n                case channelMessages.MessageTypes.INITIAL_STATE: {\r\n                    yield put(channelActions.Actions.initialState(msg.jobs, msg.datasets, msg.compoundAnalyses, msg.analyses, timestamp));\r\n                    break;\r\n                }\r\n                case channelMessages.MessageTypes.JOB_STARTED: {\r\n                    yield put(channelActions.Actions.jobStarted(msg.job, msg.details.dataset, timestamp));\r\n                    break;\r\n                }\r\n                case channelMessages.MessageTypes.FINISH_JOB: {\r\n                    yield call(handleFinishJob, msg, socketChannel, timestamp);\r\n                    break;\r\n                }\r\n                case channelMessages.MessageTypes.TASK_RESULT: {\r\n                    yield call(handleTaskResult, msg, socketChannel, timestamp);\r\n                    break;\r\n                }\r\n                case channelMessages.MessageTypes.CREATE_DATASET: {\r\n                    yield put(datasetActions.Actions.created(msg.details));\r\n                    break;\r\n                }\r\n                case channelMessages.MessageTypes.DELETE_DATASET: {\r\n                    yield put(datasetActions.Actions.deleted(msg.dataset));\r\n                    break;\r\n                }\r\n                case channelMessages.MessageTypes.JOB_ERROR: {\r\n                    const id = uuid();\r\n                    yield put(channelActions.Actions.jobError(msg.job, msg.msg, id, timestamp));\r\n                    break;\r\n                }\r\n                case channelMessages.MessageTypes.CANCEL_JOB_DONE: {\r\n                    yield put(channelActions.Actions.cancelled(msg.job));\r\n                    break;\r\n                }\r\n                /*\r\n                // FIXME: server needs to know about compount analyses\r\n                case channelMessages.MessageTypes.ANALYSIS_CREATED: {\r\n                    yield put(channelActions.Actions.analysisCreated(\r\n                        msg.analysis,\r\n                        msg.dataset,\r\n                        msg.details,\r\n                    ));\r\n                    break;\r\n                }\r\n                case channelMessages.MessageTypes.ANALYSIS_UPDATED: {\r\n                    yield put(channelActions.Actions.analysisUpdated(\r\n                        msg.analysis,\r\n                        msg.dataset,\r\n                        msg.details,\r\n                    ));\r\n                    break;\r\n                }\r\n                case channelMessages.MessageTypes.ANALYSIS_REMOVED: {\r\n                    yield put(channelActions.Actions.analysisRemoved(\r\n                        msg.analysis,\r\n                    ));\r\n                    break;\r\n                }\r\n                */\r\n            }\r\n        }\r\n    } finally {\r\n        // disconnected\r\n    }\r\n}\r\n\r\nexport function* handleBinaryParts(numParts: number, socketChannel: SocketChannel) {\r\n    const parts: channelMessages.BinaryMessage[] = [];\r\n    while (parts.length < numParts) {\r\n        const binMsg = yield take(socketChannel)\r\n        parts.push(binMsg);\r\n    }\r\n    return parts;\r\n}\r\n\r\nexport function* handleTaskResult(msg: ReturnType<typeof channelMessages.Messages.taskResult>, socketChannel: SocketChannel, timestamp: number) {\r\n    const parts: channelMessages.BinaryMessage[] = yield call(handleBinaryParts, msg.followup.numMessages, socketChannel);\r\n    const images = parts.map((part, idx) => ({ imageURL: part.objectURL, description: msg.followup.descriptions[idx] }));\r\n    yield put(channelActions.Actions.taskResult(msg.job, images, timestamp));\r\n}\r\n\r\nexport function* handleFinishJob(msg: ReturnType<typeof channelMessages.Messages.finishJob>, socketChannel: SocketChannel, timestamp: number) {\r\n    const parts: channelMessages.BinaryMessage[] = yield call(handleBinaryParts, msg.followup.numMessages, socketChannel);\r\n    const images = parts.map((part, idx) => ({ imageURL: part.objectURL, description: msg.followup.descriptions[idx] }));\r\n    yield put(channelActions.Actions.finishJob(msg.job, images, timestamp));\r\n}","import { ConnectRequest, ConnectRequestParams, ConnectResponse } from \"../messages\";\r\n\r\nexport function connectToCluster(params: ConnectRequestParams): Promise<ConnectResponse> {\r\n    const payload: ConnectRequest = {\r\n        connection: params\r\n    }\r\n    return fetch(`/api/config/connection/`, {\r\n        body: JSON.stringify(payload),\r\n        credentials: \"same-origin\",\r\n        method: \"PUT\",\r\n    }).then(r => r.json());\r\n}\r\n\r\nexport function checkClusterConnection(): Promise<ConnectResponse> {\r\n    return fetch(`/api/config/connection/`, {\r\n        method: 'GET',\r\n    }).then(r => r.json());\r\n}","import { ActionsUnion, createAction } from \"../helpers/actionHelpers\";\r\nimport { AnalysisDetails, AnalysisTypes } from \"../messages\";\r\nimport { AnalysisState } from \"./types\";\r\n\r\n\r\nexport enum ActionTypes {\r\n    CREATE = 'ANALYSIS_CREATE',\r\n    CREATED = 'ANALYSIS_CREATED',\r\n    UPDATED = 'ANALYSIS_UPDATED',\r\n    REMOVE = 'ANALYSIS_REMOVE',\r\n    REMOVED = 'ANALYSIS_REMOVED',\r\n    ERROR = 'ANALYSIS_ERROR',\r\n}\r\n\r\nexport const Actions = {\r\n    create: (\r\n        dataset: string, analysisType: AnalysisTypes\r\n    ) => createAction(ActionTypes.CREATE, { dataset, analysisType }),\r\n\r\n    created: (\r\n        analysis: AnalysisState, compoundAnalysis: string, analysisIndex: number\r\n    ) => createAction(ActionTypes.CREATED, {\r\n        analysis, compoundAnalysis, analysisIndex\r\n    }),\r\n\r\n    updated: (\r\n        id: string, details: AnalysisDetails\r\n    ) => createAction(ActionTypes.UPDATED, { id, details }),\r\n\r\n    remove: (id: string) => createAction(ActionTypes.REMOVE, { id }),\r\n    removed: (id: string) => createAction(ActionTypes.REMOVED, { id }),\r\n    error: (\r\n        msg: string, timestamp: number, id: string\r\n    ) => createAction(ActionTypes.ERROR, { msg, timestamp, id }),\r\n}\r\n\r\nexport type Actions = ActionsUnion<typeof Actions>;\r\n\r\nexport type ActionParts = {\r\n    [K in keyof typeof Actions]: ReturnType<typeof Actions[K]>\r\n}\r\n","import { all, call, put, take, takeEvery } from \"redux-saga/effects\";\r\nimport * as channelActions from '../channel/actions';\r\nimport { ConnectResponse } from \"../messages\";\r\nimport * as clusterActions from './actions';\r\nimport { checkClusterConnection, connectToCluster } from \"./api\";\r\n\r\nfunction* connectSaga(action: ReturnType<typeof clusterActions.Actions.connect>) {\r\n    const conn: ConnectResponse = yield call(connectToCluster, action.payload.params);\r\n    yield call(putClusterStatus, conn);\r\n}\r\n\r\nfunction* putClusterStatus(conn: ConnectResponse) {\r\n    if (conn.status === \"ok\") {\r\n        yield put(clusterActions.Actions.connected(conn.connection.connection));\r\n    } else {\r\n        yield put(clusterActions.Actions.notConnected());\r\n    }\r\n}\r\n\r\n/**\r\n * when the channel is connected, check if cluster is connected and update status accordingly\r\n */\r\nfunction* trackClusterConnection() {\r\n    while (true) {\r\n        yield take(channelActions.ActionTypes.OPEN)\r\n        const conn: ConnectResponse = yield call(checkClusterConnection);\r\n        yield call(putClusterStatus, conn);\r\n    }\r\n}\r\n\r\nexport function* clusterConnectionSaga() {\r\n    yield takeEvery(clusterActions.ActionTypes.CONNECT, connectSaga);\r\n    yield all([\r\n        trackClusterConnection(),\r\n    ])\r\n}","import { ActionsUnion, createAction } from \"../helpers/actionHelpers\";\r\n\r\nexport enum ActionTypes {\r\n    CREATE = 'JOB_CREATE',\r\n}\r\n\r\nexport const Actions = {\r\n    create: (id: string, analysis: string, timestamp: number) => createAction(ActionTypes.CREATE, { id, analysis, timestamp }),\r\n}\r\n\r\nexport type Actions = ActionsUnion<typeof Actions>;\r\n\r\nexport type ActionParts = {\r\n    [K in keyof typeof Actions]: ReturnType<typeof Actions[K]>\r\n}","import { CancelJobResponse, StartJobRequest, StartJobResponse } from \"../messages\";\r\n\r\nexport function startJob(jobId: string, analysis: string): Promise<StartJobResponse> {\r\n    const payload: StartJobRequest = {\r\n        job: {\r\n            analysis,\r\n        }\r\n    }\r\n    return fetch(`/api/jobs/${jobId}/`, {\r\n        body: JSON.stringify(payload),\r\n        credentials: \"same-origin\",\r\n        method: \"PUT\",\r\n    }).then(r => r.json());\r\n}\r\n\r\nexport function cancelJob(jobId: string): Promise<CancelJobResponse> {\r\n    return fetch(`/api/jobs/${jobId}/`, {\r\n        method: \"DELETE\",\r\n        credentials: \"same-origin\",\r\n    }).then(r => r.json());\r\n}\r\n\r\n\r\n","import {\r\n    AnalysisDetails, CompoundAnalysisDetails, CreateAnalysisResponse,\r\n    CreateCompoundAnalysisResponse, CreateOrUpdateAnalysisRequest,\r\n    CreateOrUpdateCompoundAnalysisRequest, RemoveAnalysisResponse,\r\n    RemoveCompoundAnalysisResponse\r\n} from \"../messages\";\r\n\r\nexport async function createOrUpdateAnalysis(\r\n    compoundAnalysisId: string, analysisId: string,\r\n    dataset: string, details: AnalysisDetails\r\n): Promise<CreateAnalysisResponse> {\r\n    const payload: CreateOrUpdateAnalysisRequest = {\r\n        dataset,\r\n        details,\r\n    };\r\n    const r = await fetch(`/api/compoundAnalyses/${compoundAnalysisId}/analyses/${analysisId}/`, {\r\n        body: JSON.stringify(payload),\r\n        credentials: \"same-origin\",\r\n        method: \"PUT\",\r\n    });\r\n    return await r.json();\r\n}\r\n\r\nexport async function removeAnalysis(compoundAnalysisId: string, analysisId: string): Promise<RemoveAnalysisResponse> {\r\n    const r = await fetch(`/api/compoundAnalyses/${compoundAnalysisId}/analyses/${analysisId}/`, {\r\n        credentials: \"same-origin\",\r\n        method: \"DELETE\",\r\n    });\r\n    return await r.json();\r\n}\r\n\r\nexport async function createOrUpdateCompoundAnalysis(compoundAnalysisId: string, dataset: string, details: CompoundAnalysisDetails): Promise<CreateCompoundAnalysisResponse> {\r\n    const payload: CreateOrUpdateCompoundAnalysisRequest = {\r\n        dataset,\r\n        details,\r\n    };\r\n    const r = await fetch(`/api/compoundAnalyses/${compoundAnalysisId}/`, {\r\n        body: JSON.stringify(payload),\r\n        credentials: \"same-origin\",\r\n        method: \"PUT\",\r\n    });\r\n    return await r.json();\r\n}\r\n\r\nexport async function removeCompoundAnalysis(compoundAnalysisId: string): Promise<RemoveCompoundAnalysisResponse> {\r\n    const r = await fetch(`/api/compoundAnalyses/${compoundAnalysisId}/`, {\r\n        credentials: \"same-origin\",\r\n        method: \"DELETE\",\r\n    });\r\n    return await r.json();\r\n}\r\n","import { ActionsUnion, createAction } from \"../helpers/actionHelpers\";\r\nimport { ConfigParams } from \"./reducers\";\r\n\r\nexport enum ActionTypes {\r\n    FETCHED = \"CONFIG_FETCHED\",\r\n    FETCH = \"CONFIG_FETCH\",\r\n    FETCH_FAILED = \"CONFIG_FETCH_FAILED\",\r\n}\r\n\r\nexport const Actions = {\r\n    fetch: () => createAction(ActionTypes.FETCH),\r\n    fetched: (config: ConfigParams) => createAction(ActionTypes.FETCHED, { config }),\r\n    fetchFailed: (msg: string, timestamp: number, id: string) => createAction(ActionTypes.FETCH_FAILED, { msg, timestamp, id }),\r\n}\r\n\r\nexport type Actions = ActionsUnion<typeof Actions>;","import { buffers, Task } from 'redux-saga';\r\nimport { actionChannel, call, cancel, fork, put, select, take, takeEvery } from 'redux-saga/effects';\r\nimport uuid from 'uuid/v4';\r\nimport * as analysisActions from '../analysis/actions';\r\nimport { AnalysisState } from '../analysis/types';\r\nimport * as channelActions from '../channel/actions';\r\nimport * as jobActions from '../job/actions';\r\nimport { cancelJob, startJob } from '../job/api';\r\nimport { JobState } from '../job/types';\r\nimport { AnalysisDetails, DatasetState, DatasetStatus } from '../messages';\r\nimport { RootReducer } from '../store';\r\nimport * as compoundAnalysisActions from './actions';\r\nimport { createOrUpdateAnalysis, createOrUpdateCompoundAnalysis, removeAnalysis, removeCompoundAnalysis } from \"./api\";\r\nimport { CompoundAnalysis, CompoundAnalysisState } from './types';\r\n\r\nfunction selectDataset(state: RootReducer, dataset: string) {\r\n    return state.datasets.byId[dataset];\r\n}\r\n\r\nfunction selectCompoundAnalysis(state: RootReducer, id: string) {\r\n    return state.compoundAnalyses.byId[id];\r\n}\r\n\r\nfunction selectAnalysis(state: RootReducer, id: string) {\r\n    return state.analyses.byId[id];\r\n}\r\n\r\nfunction selectJob(state: RootReducer, id: string) {\r\n    return state.jobs.byId[id];\r\n}\r\n\r\nexport function* cleanupOnRemove(compoundAnalysis: CompoundAnalysis, sidecarTask: Task) {\r\n    while (true) {\r\n        const removeAction: ReturnType<typeof compoundAnalysisActions.Actions.remove> = yield take(compoundAnalysisActions.ActionTypes.REMOVE);\r\n        if (removeAction.payload.id === compoundAnalysis.compoundAnalysis) {\r\n            yield cancel(sidecarTask);\r\n        }\r\n    }\r\n}\r\n\r\nexport function* createCompoundAnalysisSaga(action: ReturnType<typeof compoundAnalysisActions.Actions.create>) {\r\n    try {\r\n        const datasetState: DatasetState = yield select(selectDataset, action.payload.dataset)\r\n        if (datasetState.status !== DatasetStatus.OPEN) {\r\n            throw new Error(\"invalid dataset status\");\r\n        }\r\n        const compoundAnalysis: CompoundAnalysis = {\r\n            compoundAnalysis: uuid(),\r\n            dataset: action.payload.dataset,\r\n            details: {\r\n                mainType: action.payload.analysisType,\r\n                analyses: [],\r\n            }\r\n        }\r\n\r\n        yield call(\r\n            createOrUpdateCompoundAnalysis,\r\n            compoundAnalysis.compoundAnalysis,\r\n            compoundAnalysis.dataset,\r\n            compoundAnalysis.details,\r\n        );\r\n\r\n        const sidecarTask = yield fork(analysisSidecar, compoundAnalysis.compoundAnalysis, { doAutoStart: true });\r\n\r\n        yield put(compoundAnalysisActions.Actions.created(compoundAnalysis, true));\r\n        yield fork(cleanupOnRemove, compoundAnalysis, sidecarTask);\r\n    } catch (e) {\r\n        const timestamp = Date.now();\r\n        const id = uuid();\r\n        yield put(compoundAnalysisActions.Actions.error(`Error creating analysis: ${e.toString()}`, timestamp, id));\r\n    }\r\n}\r\n\r\nexport function* createFromServerState(action: ReturnType<typeof channelActions.Actions.initialState>) {\r\n    for (const msgPart of action.payload.compoundAnalyses) {\r\n        const compoundAnalysis: CompoundAnalysisState = yield select(selectCompoundAnalysis, msgPart.compoundAnalysis);\r\n        const sidecarTask = yield fork(analysisSidecar, compoundAnalysis.compoundAnalysis, { doAutoStart: false });\r\n        yield fork(cleanupOnRemove, compoundAnalysis, sidecarTask);\r\n    }\r\n}\r\n\r\nexport function* cancelOldJob(analysis: AnalysisState, jobIndex: number) {\r\n    const jobId = analysis.jobs[jobIndex];\r\n    if (jobId === undefined) {\r\n        return;\r\n    } else {\r\n        const job: JobState = yield select(selectJob, jobId);\r\n        if (job.running !== \"DONE\") {\r\n            yield call(cancelJob, jobId);\r\n        }\r\n    }\r\n}\r\n\r\nexport function* createOrUpdate(\r\n    compoundAnalysis: CompoundAnalysisState, analysisId: string | undefined,\r\n    analysisIndex: number, details: AnalysisDetails\r\n) {\r\n    if (analysisId) {\r\n        // update the analysis on the server:\r\n        yield call(createOrUpdateAnalysis,\r\n            compoundAnalysis.compoundAnalysis, analysisId,\r\n            compoundAnalysis.dataset, details\r\n        );\r\n        yield put(analysisActions.Actions.updated(analysisId, details));\r\n\r\n        const analysis: AnalysisState = yield select(selectAnalysis, analysisId);\r\n        const jobs = analysis.jobs ? analysis.jobs : [];\r\n\r\n        for (const oldJobId of jobs) {\r\n            const job: JobState = yield select(selectJob, oldJobId);\r\n            if (job && job.running !== \"DONE\") {\r\n                // wait until the job is cancelled:\r\n                yield call(cancelJob, oldJobId);\r\n            }\r\n        }\r\n        return analysisId;\r\n    } else {\r\n        // create the analysis on the server:\r\n        const newAnalysisId = uuid();\r\n        yield call(createOrUpdateAnalysis,\r\n            compoundAnalysis.compoundAnalysis, newAnalysisId,\r\n            compoundAnalysis.dataset, details\r\n        );\r\n        yield put(analysisActions.Actions.created({\r\n            id: newAnalysisId,\r\n            dataset: compoundAnalysis.dataset,\r\n            details,\r\n            jobs: [],\r\n        }, compoundAnalysis.compoundAnalysis, analysisIndex));\r\n\r\n        const updatedCompoundAnalysis = yield select(selectCompoundAnalysis, compoundAnalysis.compoundAnalysis);\r\n\r\n        yield call(\r\n            createOrUpdateCompoundAnalysis,\r\n            updatedCompoundAnalysis.compoundAnalysis,\r\n            updatedCompoundAnalysis.dataset,\r\n            updatedCompoundAnalysis.details,\r\n        );\r\n        return newAnalysisId;\r\n    }\r\n}\r\n\r\nexport function* analysisSidecar(compoundAnalysisId: string, options: { doAutoStart: boolean }) {\r\n    // channel for incoming actions:\r\n    // all actions that arrive while we block in `call` will be buffered here.\r\n    // because the buffer is sliding of size 1, we only keep the latest action!\r\n    const runOrParamsChannel = yield actionChannel(compoundAnalysisActions.ActionTypes.RUN, buffers.sliding(2));\r\n\r\n    while (true) {\r\n        try {\r\n            const action: compoundAnalysisActions.ActionParts[\"run\"] = yield take(runOrParamsChannel);\r\n\r\n            // ignore actions meant for other analyses\r\n            if (action.payload.id !== compoundAnalysisId) {\r\n                continue;\r\n            }\r\n\r\n            // get the current state incl. configuration\r\n            const compoundAnalysis: CompoundAnalysisState = yield select(selectCompoundAnalysis, compoundAnalysisId);\r\n            const { analysisIndex, details } = action.payload;\r\n\r\n            const existingAnalysisId = compoundAnalysis.details.analyses[analysisIndex];\r\n            const analysisId = yield call(createOrUpdate, compoundAnalysis, existingAnalysisId, analysisIndex, details);\r\n\r\n            // prepare running the job:\r\n            const jobId = uuid();\r\n            yield put(jobActions.Actions.create(jobId, analysisId, Date.now()));\r\n\r\n            // FIXME: we have a race here, as the websocket msg FINISH_JOB may\r\n            // arrive before call(startJob, ...) returns. this causes the apply button\r\n            // to feel unresponsive (the action gets done, but only after we finish here...)\r\n            // best reproduced in \"Slow 3G\" network simulation mode in devtools\r\n\r\n            // wait until the job is started\r\n            yield call(startJob, jobId, analysisId);\r\n            yield put(compoundAnalysisActions.Actions.running(compoundAnalysis.compoundAnalysis, jobId, analysisIndex));\r\n            // tslint:disable-next-line:no-empty\r\n        } catch (e) {\r\n            const timestamp = Date.now();\r\n            const id = uuid();\r\n            yield put(compoundAnalysisActions.Actions.error(`Error running analysis: ${e.toString()}`, timestamp, id));\r\n        }\r\n    }\r\n}\r\n\r\nfunction* removeJobsForAnalysis(analysis: AnalysisState) {\r\n    for (const oldJobId of analysis.jobs) {\r\n        const job: JobState = yield select(selectJob, oldJobId);\r\n        if (job && job.running !== \"DONE\") {\r\n            // wait until the job is cancelled:\r\n            yield call(cancelJob, oldJobId);\r\n        }\r\n    }\r\n}\r\n\r\nexport function* doRemoveAnalysisSaga(action: ReturnType<typeof compoundAnalysisActions.Actions.remove>) {\r\n    const compoundAnalysis: CompoundAnalysisState = yield select(selectCompoundAnalysis, action.payload.id);\r\n    try {\r\n        for (const analysisId of compoundAnalysis.details.analyses) {\r\n            const analysis: AnalysisState = yield select(selectAnalysis, analysisId);\r\n            yield call(removeJobsForAnalysis, analysis);\r\n            yield call(removeAnalysis, compoundAnalysis.compoundAnalysis, analysisId);\r\n            yield put(analysisActions.Actions.removed(analysisId));\r\n        }\r\n        yield call(removeCompoundAnalysis, action.payload.id);\r\n    } finally {\r\n        yield put(compoundAnalysisActions.Actions.removed(action.payload.id));\r\n    }\r\n}\r\n\r\nexport function* analysisRootSaga() {\r\n    yield takeEvery(compoundAnalysisActions.ActionTypes.CREATE, createCompoundAnalysisSaga);\r\n    yield takeEvery(compoundAnalysisActions.ActionTypes.REMOVE, doRemoveAnalysisSaga);\r\n    yield takeEvery(channelActions.ActionTypes.INITIAL_STATE, createFromServerState);\r\n}","import { GetConfigResponse } from \"../messages\";\r\n\r\nexport function getConfig(): Promise<GetConfigResponse> {\r\n    return fetch(`/api/config/`, {\r\n        method: \"GET\",\r\n        credentials: \"same-origin\",\r\n    }).then(r => r.json());\r\n}","import { call, fork, put, select, take, takeEvery } from 'redux-saga/effects';\r\nimport uuid from 'uuid/v4';\r\nimport * as browserActions from '../browser/actions';\r\nimport * as channelActions from '../channel/actions';\r\nimport * as datasetActions from '../dataset/actions';\r\nimport { GetConfigResponse } from '../messages';\r\nimport { RootReducer } from '../store';\r\nimport * as configActions from './actions';\r\nimport { getConfig } from './api';\r\nimport { clearLocalStorage, getDefaultLocalConfig, mergeLocalStorage, setLocalStorage } from './helpers';\r\nimport { ConfigState } from './reducers';\r\n\r\nfunction* getConfigOnReconnect() {\r\n    yield takeEvery(channelActions.ActionTypes.OPEN, getConfigSaga);\r\n}\r\n\r\n/**\r\n * get config from server and try to merge in the localStorage config\r\n */\r\nfunction* getConfigSaga() {\r\n    yield put(configActions.Actions.fetch());\r\n    const configResponse: GetConfigResponse = yield call(getConfig);\r\n    try {\r\n        const mergedConfig = mergeLocalStorage(configResponse.config);\r\n        yield put(configActions.Actions.fetched(mergedConfig));\r\n    } catch (e) {\r\n        try {\r\n            clearLocalStorage();\r\n            // tslint:disable-next-line:no-empty\r\n        } catch (e) { }\r\n        const defaultConfig = Object.assign({}, configResponse.config, getDefaultLocalConfig(configResponse.config));\r\n        yield put(configActions.Actions.fetched(defaultConfig));\r\n    }\r\n}\r\n\r\n/**\r\n * update localStorage config on opening files or using the file browser\r\n */\r\nfunction* updateLocalStorageConfig() {\r\n    while (true) {\r\n        yield take([\r\n            datasetActions.ActionTypes.CREATE,\r\n            browserActions.ActionTypes.DIRECTORY_LISTING\r\n        ]);\r\n        const config: ConfigState = yield select((state: RootReducer) => state.config);\r\n        setLocalStorage(config);\r\n    }\r\n}\r\n\r\nexport function* firstConfigFetch() {\r\n    try {\r\n        yield call(getConfigSaga);\r\n    } catch (e) {\r\n        const timestamp = Date.now();\r\n        const id = uuid();\r\n        yield put(configActions.Actions.fetchFailed(`failed to fetch config: ${e.toString()}`, timestamp, id));\r\n    }\r\n}\r\n\r\nexport function* configRootSaga() {\r\n    yield fork(firstConfigFetch);\r\n    yield fork(getConfigOnReconnect);\r\n    yield fork(updateLocalStorageConfig);\r\n}","import { call, put, select, takeEvery } from 'redux-saga/effects';\r\nimport uuid from 'uuid/v4';\r\nimport * as browserActions from '../browser/actions';\r\nimport { joinPaths } from '../config/helpers';\r\nimport { ConfigState } from '../config/reducers';\r\nimport { DetectDatasetResponse, OpenDatasetResponse } from '../messages';\r\nimport { RootReducer } from '../store';\r\nimport * as datasetActions from \"./actions\";\r\nimport { deleteDataset, detectDataset, openDataset } from './api';\r\nimport { isKnownDatasetType } from './helpers';\r\n\r\n\r\nexport function* createDatasetSaga(action: ReturnType<typeof datasetActions.Actions.create>) {\r\n    try {\r\n        const resp: OpenDatasetResponse = yield call(openDataset, action.payload.dataset.id, { dataset: action.payload.dataset });\r\n        if (resp.status === \"ok\") {\r\n            yield put(datasetActions.Actions.created(resp.details));\r\n        } else if (resp.status === \"error\") {\r\n            const timestamp = Date.now();\r\n            const id = uuid();\r\n            yield put(datasetActions.Actions.error(resp.dataset, resp.msg, timestamp, id));\r\n        }\r\n    } catch (e) {\r\n        const timestamp = Date.now();\r\n        const id = uuid();\r\n        yield put(datasetActions.Actions.error(action.payload.dataset.id, `Error loading dataset: ${e.toString()}`, timestamp, id));\r\n    }\r\n}\r\n\r\nexport function* deleteDatasetSaga(action: ReturnType<typeof datasetActions.Actions.delete>) {\r\n    try {\r\n        yield call(deleteDataset, action.payload.dataset);\r\n    } catch (e) {\r\n        const timestamp = Date.now();\r\n        const id = uuid();\r\n        yield put(datasetActions.Actions.error(action.payload.dataset, `Error closing dataset: ${e.toString()}`, timestamp, id));\r\n    }\r\n}\r\n\r\nexport function* doDetectDataset(fullPath: string) {\r\n    yield put(datasetActions.Actions.detect(fullPath));\r\n    const detectResult: DetectDatasetResponse = yield call(detectDataset, fullPath);\r\n    let detectedParams;\r\n    let shouldOpen = true;\r\n    if (detectResult.status === \"ok\") {\r\n        if (isKnownDatasetType(detectResult.datasetParams.type)) {\r\n          detectedParams = detectResult.datasetParams;\r\n          yield put(datasetActions.Actions.detected(fullPath, detectResult.datasetParams));\r\n        }\r\n        else {\r\n          const timestamp = Date.now();\r\n          const id = uuid();\r\n          yield put(datasetActions.Actions.detectFailed(fullPath));\r\n          shouldOpen = false;\r\n          yield put(datasetActions.Actions.error(id, detectResult.datasetParams.type + ` dataset type is currently not supported in the GUI`, timestamp, id));\r\n        }\r\n    } else {\r\n        yield put(datasetActions.Actions.detectFailed(fullPath));\r\n    }\r\n    return [detectedParams, shouldOpen];\r\n}\r\n\r\nexport function* doOpenDataset(fullPath: string) {\r\n    const config: ConfigState = yield select((state: RootReducer) => state.config);\r\n    const cachedParams = config.lastOpened[fullPath];\r\n    let detectedParams;\r\n    let shouldOpen = true;\r\n    try {\r\n      const doDetectDatasetRes = yield call(doDetectDataset, fullPath);\r\n      detectedParams = doDetectDatasetRes[0];\r\n      shouldOpen = doDetectDatasetRes[1];\r\n    } catch (e) {\r\n        yield put(datasetActions.Actions.detectFailed(fullPath));\r\n    }\r\n    if(shouldOpen) {\r\n      yield put(datasetActions.Actions.open(fullPath, cachedParams, detectedParams));\r\n    }\r\n}\r\n\r\nexport function* openDatasetSagaFullPath(action: ReturnType<typeof browserActions.Actions.selectFullPath>) {\r\n    const fullPath = action.payload.path;\r\n    yield call(doOpenDataset, fullPath);\r\n}\r\n\r\nexport function* openDatasetSaga(action: ReturnType<typeof browserActions.Actions.select>) {\r\n    const config: ConfigState = yield select((state: RootReducer) => state.config);\r\n    const fullPath = joinPaths(config, action.payload.path, action.payload.name);\r\n    yield call(doOpenDataset, fullPath);\r\n}\r\n\r\nexport function* datasetRootSaga() {\r\n    yield takeEvery(datasetActions.ActionTypes.CREATE, createDatasetSaga);\r\n    yield takeEvery(datasetActions.ActionTypes.DELETE, deleteDatasetSaga);\r\n    yield takeEvery(browserActions.ActionTypes.SELECT, openDatasetSaga);\r\n    yield takeEvery(browserActions.ActionTypes.SELECT_FULL_PATH, openDatasetSagaFullPath);\r\n}\r\n","import { all } from 'redux-saga/effects';\r\nimport { directoryListingSaga } from './browser/sagas';\r\nimport { webSocketSaga } from './channel/sagas';\r\nimport { clusterConnectionSaga } from './cluster/sagas';\r\nimport { analysisRootSaga } from './compoundAnalysis/sagas';\r\nimport { configRootSaga } from './config/sagas';\r\nimport { datasetRootSaga } from './dataset/sagas';\r\n\r\nexport function* rootSaga() {\r\n    yield all([\r\n        configRootSaga(),\r\n        webSocketSaga(),\r\n        analysisRootSaga(),\r\n        datasetRootSaga(),\r\n        clusterConnectionSaga(),\r\n        directoryListingSaga(),\r\n    ]);\r\n}","import { AllActions } from \"../actions\";\r\nimport * as channelActions from '../channel/actions';\r\nimport { ById, constructById, filterWithPred, insertById, updateById } from \"../helpers/reducerHelpers\";\r\nimport * as jobActions from '../job/actions';\r\nimport * as analysisActions from \"./actions\";\r\nimport { AnalysisState } from \"./types\";\r\n\r\n\r\nexport type AnalysisReducerState = ById<AnalysisState>;\r\n\r\nconst initialAnalysisState: AnalysisReducerState = {\r\n    byId: {},\r\n    ids: [],\r\n}\r\n\r\nexport function analysisReducer(state = initialAnalysisState, action: AllActions): AnalysisReducerState {\r\n    switch (action.type) {\r\n        case analysisActions.ActionTypes.CREATED: {\r\n            return insertById(state, action.payload.analysis.id, action.payload.analysis);\r\n        }\r\n        case analysisActions.ActionTypes.REMOVED: {\r\n            return filterWithPred(state, (r: AnalysisState) => r.id !== action.payload.id);\r\n        }\r\n        case analysisActions.ActionTypes.UPDATED: {\r\n            return updateById(state, action.payload.id, {\r\n                details: action.payload.details,\r\n            });\r\n        }\r\n        case jobActions.ActionTypes.CREATE: {\r\n            const analysis = state.byId[action.payload.analysis];\r\n            // FIXME: remove old jobs\r\n            const oldJobs = analysis.jobs ? analysis.jobs : [];\r\n            return updateById(state, action.payload.analysis, {\r\n                jobs: [action.payload.id, ...oldJobs],\r\n            })\r\n        }\r\n        case channelActions.ActionTypes.INITIAL_STATE: {\r\n            const analysisState: AnalysisState[] = action.payload.analyses.map(item => {\r\n                return {\r\n                    doAutoStart: false,\r\n                    id: item.analysis,\r\n                    dataset: item.dataset,\r\n                    details: item.details,\r\n                    // FIXME: add jobs!\r\n                    jobs: item.jobs,\r\n                };\r\n            });\r\n            return {\r\n                byId: constructById(analysisState, analysis => analysis.id),\r\n                ids: action.payload.analyses.map(analysis => analysis.analysis),\r\n            }\r\n        }\r\n        case channelActions.ActionTypes.FINISH_JOB:\r\n        case channelActions.ActionTypes.TASK_RESULT: {\r\n            const analysisIdForJob = state.ids.find(id => {\r\n                const analysis = state.byId[id];\r\n                const jobs = analysis.jobs ? analysis.jobs : [];\r\n                return jobs.some(job => job === action.payload.job)\r\n            });\r\n            if (!analysisIdForJob) {\r\n                return state;\r\n            }\r\n            return updateById(state, analysisIdForJob, {\r\n                displayedJob: action.payload.job,\r\n            });\r\n        }\r\n    }\r\n    return state;\r\n}\r\n","import { AllActions } from \"../actions\";\r\nimport * as configActions from '../config/actions';\r\nimport { DirectoryListingDetails, FSPlace } from \"../messages\";\r\nimport * as browserActions from './actions';\r\nimport { DirectoryBrowserState } from \"./types\";\r\n\r\nconst initialBrowserState: DirectoryBrowserState = {\r\n    isOpen: false,\r\n    isLoading: true,\r\n    path: \"/\",\r\n    drives: [],\r\n    places: {},\r\n    files: [] as DirectoryListingDetails[],\r\n    dirs: [] as DirectoryListingDetails[],\r\n}\r\n\r\nexport function directoryBrowserReducer(state: DirectoryBrowserState = initialBrowserState, action: AllActions): DirectoryBrowserState {\r\n    switch (action.type) {\r\n        case configActions.ActionTypes.FETCHED: {\r\n            return Object.assign({}, state, {\r\n                path: action.payload.config.cwd,\r\n            })\r\n        }\r\n        case browserActions.ActionTypes.OPEN: {\r\n            return Object.assign({}, state, {\r\n                isOpen: true,\r\n            })\r\n        }\r\n        case browserActions.ActionTypes.CANCEL: {\r\n            return Object.assign({}, state, {\r\n                isOpen: false,\r\n            })\r\n        }\r\n        case browserActions.ActionTypes.LIST_DIRECTORY: {\r\n            return Object.assign({}, state, {\r\n                isLoading: true,\r\n            })\r\n        }\r\n        case browserActions.ActionTypes.DIRECTORY_LISTING: {\r\n            const places = action.payload.places.reduce((acc, place: FSPlace) => {\r\n                return Object.assign({}, acc, {\r\n                    [place.key]: place,\r\n                })\r\n            }, {});\r\n            return Object.assign({}, state, {\r\n                isLoading: false,\r\n                path: action.payload.path,\r\n                files: action.payload.files,\r\n                dirs: action.payload.dirs,\r\n                drives: action.payload.drives,\r\n                places,\r\n            })\r\n        }\r\n        case browserActions.ActionTypes.SELECT_FULL_PATH:\r\n        case browserActions.ActionTypes.SELECT: {\r\n            return Object.assign({}, state, {\r\n                isLoading: false,\r\n                isOpen: false,\r\n            });\r\n        }\r\n    }\r\n    return state;\r\n}","import { AllActions } from \"../actions\";\r\nimport * as channelActions from './actions';\r\n\r\nexport interface ChannelStatusReducer {\r\n    status: ChannelStatusCodes,\r\n}\r\n\r\nexport enum ChannelStatusCodes {\r\n    CONNECTING = \"connecting\",\r\n    CONNECTED = \"connected\",\r\n    READY = \"ready\",\r\n    WAITING = \"waiting\",\r\n}\r\n\r\nconst initialChannelState: ChannelStatusReducer = {\r\n    status: ChannelStatusCodes.WAITING,\r\n}\r\n\r\nexport function channelStatusReducer(state = initialChannelState, action: AllActions): ChannelStatusReducer {\r\n    switch (action.type) {\r\n        case channelActions.ActionTypes.OPEN: {\r\n            return { status: ChannelStatusCodes.CONNECTED };\r\n        }\r\n        case channelActions.ActionTypes.INITIAL_STATE: {\r\n            return { status: ChannelStatusCodes.READY };\r\n        }\r\n        case channelActions.ActionTypes.CLOSE: {\r\n            return { status: ChannelStatusCodes.WAITING };\r\n        }\r\n    }\r\n    return state;\r\n}","import { AllActions } from \"../actions\";\r\nimport { ConnectRequestParams } from \"../messages\";\r\nimport * as clusterActions from './actions';\r\n\r\nexport type ClusterConnectionState = {\r\n    status: \"connected\",\r\n    params: ConnectRequestParams,\r\n} | {\r\n    status: \"disconnected\",\r\n} | {\r\n    status: \"unknown\",\r\n}\r\n\r\nconst initialClusterConnectionState: ClusterConnectionState = {\r\n    status: \"unknown\"\r\n}\r\n\r\nexport function clusterConnectionReducer(state = initialClusterConnectionState, action: AllActions): ClusterConnectionState {\r\n    switch (action.type) {\r\n        case clusterActions.ActionTypes.NOT_CONNECTED: {\r\n            return {\r\n                status: \"disconnected\"\r\n            };\r\n        }\r\n        case clusterActions.ActionTypes.CONNECTED: {\r\n            return {\r\n                status: \"connected\",\r\n                params: action.payload.params,\r\n            }\r\n        }\r\n    }\r\n    return state;\r\n}","import { AllActions } from \"../actions\";\r\nimport * as analysisActions from \"../analysis/actions\";\r\nimport * as channelActions from '../channel/actions';\r\nimport * as datasetActions from \"../dataset/actions\";\r\nimport { ById, constructById, filterWithPred, insertById, updateById } from \"../helpers/reducerHelpers\";\r\nimport * as compoundAnalysisActions from \"./actions\";\r\nimport { CompoundAnalysisState } from \"./types\";\r\n\r\nexport type CompoundAnalysisReducerState = ById<CompoundAnalysisState>;\r\n\r\nconst initialCompoundAnalysisState: CompoundAnalysisReducerState = {\r\n    byId: {},\r\n    ids: [],\r\n}\r\n\r\nexport function compoundAnalysisReducer(state = initialCompoundAnalysisState, action: AllActions): CompoundAnalysisReducerState {\r\n    switch (action.type) {\r\n        case compoundAnalysisActions.ActionTypes.CREATED: {\r\n            const newCompoundAnalysis = {\r\n                doAutoStart: action.payload.autoStart,\r\n                ...action.payload.compoundAnalysis,\r\n            }\r\n            return insertById(state, action.payload.compoundAnalysis.compoundAnalysis, newCompoundAnalysis);\r\n        }\r\n        case compoundAnalysisActions.ActionTypes.REMOVED: {\r\n            return filterWithPred(state, (r: CompoundAnalysisState) => r.compoundAnalysis !== action.payload.id);\r\n        }\r\n        case compoundAnalysisActions.ActionTypes.ENABLE_AUTOSTART: {\r\n            return updateById(state, action.payload.compoundAnalysisId, {\r\n                doAutoStart: true,\r\n            })\r\n        }\r\n        case datasetActions.ActionTypes.DELETE: {\r\n            return filterWithPred(state, (r: CompoundAnalysisState) => r.dataset !== action.payload.dataset);\r\n        }\r\n        case analysisActions.ActionTypes.CREATED: {\r\n            const compoundAnalysis = state.byId[action.payload.compoundAnalysis];\r\n            const newAnalyses = [...compoundAnalysis.details.analyses];\r\n            newAnalyses[action.payload.analysisIndex] = action.payload.analysis.id;\r\n            return updateById(state, action.payload.compoundAnalysis, {\r\n                details: {\r\n                    analyses: newAnalyses,\r\n                    mainType: compoundAnalysis.details.mainType,\r\n                }\r\n            });\r\n        }\r\n        case channelActions.ActionTypes.INITIAL_STATE: {\r\n            const compoundAnalyses = action.payload.compoundAnalyses.map(ca => ({ doAutoStart: false, ...ca }));\r\n            return {\r\n                byId: constructById(compoundAnalyses, ca => ca.compoundAnalysis),\r\n                ids: compoundAnalyses.map(ca => ca.compoundAnalysis),\r\n            };\r\n        }\r\n    }\r\n    return state;\r\n}","import { AllActions } from \"../actions\";\r\nimport * as browserActions from '../browser/actions';\r\nimport * as datasetActions from '../dataset/actions';\r\nimport { DatasetFormParams, MsgPartConfig } from \"../messages\";\r\nimport * as configActions from './actions';\r\nimport { makeUnique } from \"./helpers\";\r\n\r\nexport interface LocalConfig {\r\n    cwd: string,\r\n    fileHistory: string[],\r\n    lastOpened: {\r\n        [path: string]: DatasetFormParams\r\n    }\r\n}\r\n\r\nexport type ConfigParams = MsgPartConfig & LocalConfig;\r\nexport type ConfigState = ConfigParams & {\r\n    haveConfig: boolean,\r\n};\r\n\r\nconst initialConfigState: ConfigState = {\r\n    version: \"\",\r\n    revision: \"\",\r\n    localCores: 0,\r\n    cwd: \"/\",\r\n    separator: \"/\",\r\n    lastOpened: {},\r\n    resultFileFormats: {},\r\n    fileHistory: [],\r\n    haveConfig: false,\r\n}\r\n\r\nexport function configReducer(state = initialConfigState, action: AllActions): ConfigState {\r\n    switch (action.type) {\r\n        case configActions.ActionTypes.FETCHED: {\r\n            return Object.assign({}, action.payload.config, { haveConfig: true });\r\n        }\r\n        case browserActions.ActionTypes.DIRECTORY_LISTING: {\r\n            return Object.assign({}, state, {\r\n                cwd: action.payload.path,\r\n            });\r\n        }\r\n        case datasetActions.ActionTypes.CREATE: {\r\n            const newLastOpened = Object.assign({}, state.lastOpened, { [action.payload.dataset.params.path]: action.payload.dataset.params });\r\n            const newFileHistory = makeUnique([\r\n                action.payload.dataset.params.path, ...state.fileHistory\r\n            ]).slice(0, 11);\r\n            return Object.assign({}, state, {\r\n                lastOpened: newLastOpened,\r\n                fileHistory: newFileHistory,\r\n            });\r\n        }\r\n    }\r\n    return state;\r\n}","import { AllActions } from \"../actions\";\r\nimport * as channelActions from '../channel/actions';\r\nimport { constructById, filterWithPred, insertById, updateById } from \"../helpers/reducerHelpers\";\r\nimport { Dataset, DatasetState, DatasetStatus } from \"../messages\";\r\nimport * as datasetActions from './actions';\r\nimport { DatasetsState, OpenDatasetState } from \"./types\";\r\n\r\nconst initialDatasetState: DatasetsState = {\r\n    byId: {},\r\n    ids: [],\r\n};\r\n\r\nexport function datasetReducer(state = initialDatasetState, action: AllActions): DatasetsState {\r\n    switch (action.type) {\r\n        case channelActions.ActionTypes.INITIAL_STATE: {\r\n            const datasets = action.payload.datasets.map(ds => Object.assign({}, ds, { status: DatasetStatus.OPEN }));\r\n            return {\r\n                byId: constructById(datasets, ds => ds.id),\r\n                ids: datasets.map(ds => ds.id),\r\n            }\r\n        }\r\n        case datasetActions.ActionTypes.CREATE: {\r\n            const ds: Dataset = {\r\n                ...action.payload.dataset,\r\n                status: DatasetStatus.OPENING\r\n            };\r\n            return insertById(state, action.payload.dataset.id, ds);\r\n        }\r\n        case datasetActions.ActionTypes.CREATED: {\r\n            const ds = Object.assign({}, action.payload.dataset, { status: DatasetStatus.OPEN });\r\n            if (state.byId[action.payload.dataset.id]) {\r\n                return updateById(state, action.payload.dataset.id, ds);\r\n            } else {\r\n                return insertById(state, action.payload.dataset.id, ds);\r\n            }\r\n        }\r\n        case datasetActions.ActionTypes.ERROR: {\r\n            return filterWithPred(state, (r: DatasetState) => r.id !== action.payload.dataset);\r\n        }\r\n        case datasetActions.ActionTypes.DELETE: {\r\n            return updateById(state, action.payload.dataset, { status: DatasetStatus.DELETING });\r\n        }\r\n        case datasetActions.ActionTypes.DELETED: {\r\n            return filterWithPred(state, (r: DatasetState) => r.id !== action.payload.dataset);\r\n        }\r\n    }\r\n    return state;\r\n}\r\n\r\nconst initialOpenDatasetState: OpenDatasetState = {\r\n    busy: false,\r\n    busyPath: \"\",\r\n    formVisible: false,\r\n    formPath: \"/\",\r\n    formCachedParams: undefined,\r\n    formDetectedParams: undefined,\r\n}\r\n\r\nexport function openDatasetReducer(state = initialOpenDatasetState, action: AllActions): OpenDatasetState {\r\n    switch (action.type) {\r\n        case datasetActions.ActionTypes.OPEN: {\r\n            return {\r\n                ...state,\r\n                formVisible: true,\r\n                formPath: action.payload.path,\r\n                formCachedParams: action.payload.cachedParams,\r\n                formDetectedParams: action.payload.detectedParams,\r\n            };\r\n        }\r\n        case datasetActions.ActionTypes.CANCEL_OPEN: {\r\n            return {\r\n                ...state,\r\n                formVisible: false,\r\n            }\r\n        }\r\n        case datasetActions.ActionTypes.CREATE: {\r\n            return {\r\n                ...state,\r\n                formVisible: false,\r\n            }\r\n        }\r\n        case datasetActions.ActionTypes.DETECT: {\r\n            return {\r\n                ...state,\r\n                busyPath: action.payload.path,\r\n                busy: true,\r\n            }\r\n        }\r\n        case datasetActions.ActionTypes.DETECTED:\r\n        case datasetActions.ActionTypes.DETECT_FAILED: {\r\n            return {\r\n                ...state,\r\n                busyPath: \"\",\r\n                busy: false,\r\n            }\r\n        }\r\n    }\r\n    return state;\r\n}","import { AllActions } from \"../actions\";\r\nimport * as browserActions from '../browser/actions';\r\nimport * as channelActions from '../channel/actions';\r\nimport * as analysisActions from '../compoundAnalysis/actions';\r\nimport * as datasetActions from '../dataset/actions';\r\nimport { ById, filterWithPred, insertById } from \"../helpers/reducerHelpers\";\r\nimport * as errorActions from './actions';\r\n\r\nexport interface ErrorMessage {\r\n    id: string,\r\n    msg: string,\r\n    timestamp: number,\r\n}\r\n\r\nexport type ErrorState = ById<ErrorMessage>;\r\n\r\nconst initialErrorState: ErrorState = {\r\n    byId: {},\r\n    ids: [],\r\n};\r\n\r\nexport function errorReducer(state = initialErrorState, action: AllActions): ErrorState {\r\n    switch (action.type) {\r\n        case browserActions.ActionTypes.ERROR:\r\n        case datasetActions.ActionTypes.ERROR:\r\n        case channelActions.ActionTypes.ERROR:\r\n        case analysisActions.ActionTypes.ERROR:\r\n        case channelActions.ActionTypes.JOB_ERROR: {\r\n            return insertById(state, action.payload.id, {\r\n                id: action.payload.id,\r\n                msg: action.payload.msg,\r\n                timestamp: action.payload.timestamp,\r\n            });\r\n        }\r\n        case channelActions.ActionTypes.OPEN: {\r\n            return initialErrorState;\r\n        }\r\n        case errorActions.ActionTypes.DISMISS: {\r\n            return filterWithPred(state, (r: ErrorMessage) => r.id !== action.payload.id);\r\n        }\r\n        case errorActions.ActionTypes.DISMISS_ALL: {\r\n            return initialErrorState;\r\n        }\r\n    }\r\n    return state;\r\n}","import { AllActions } from \"../actions\";\r\nimport * as channelActions from '../channel/actions';\r\nimport { ById, constructById, insertById, updateById } from \"../helpers/reducerHelpers\";\r\nimport * as jobActions from './actions';\r\nimport { JobRunning, JobState, JobStatus } from \"./types\";\r\n\r\nexport type JobReducerState = ById<JobState>;\r\n\r\nconst initialJobState: JobReducerState = {\r\n    byId: {},\r\n    ids: [],\r\n};\r\n\r\nexport function jobReducer(state = initialJobState, action: AllActions): JobReducerState {\r\n    switch (action.type) {\r\n        case jobActions.ActionTypes.CREATE: {\r\n            const createResult = insertById(\r\n                state,\r\n                action.payload.id,\r\n                {\r\n                    id: action.payload.id,\r\n                    analysis: action.payload.analysis,\r\n                    running: JobRunning.CREATING,\r\n                    status: JobStatus.CREATING,\r\n                    results: [],\r\n                    startTimestamp: action.payload.timestamp,\r\n                }\r\n            )\r\n            return createResult;\r\n        }\r\n        case channelActions.ActionTypes.JOB_STARTED: {\r\n            return updateById(\r\n                state,\r\n                action.payload.job,\r\n                {\r\n                    running: JobRunning.RUNNING,\r\n                    status: JobStatus.IN_PROGRESS,\r\n                    startTimestamp: action.payload.timestamp,\r\n                }\r\n            )\r\n        }\r\n        case channelActions.ActionTypes.TASK_RESULT: {\r\n            return updateById(\r\n                state,\r\n                action.payload.job,\r\n                {\r\n                    results: action.payload.results,\r\n                }\r\n            );\r\n        }\r\n        case channelActions.ActionTypes.FINISH_JOB: {\r\n            const { job, timestamp, results } = action.payload;\r\n            return updateById(\r\n                state,\r\n                job,\r\n                {\r\n                    running: JobRunning.DONE,\r\n                    status: JobStatus.SUCCESS,\r\n                    results,\r\n                    endTimestamp: timestamp,\r\n                }\r\n            );\r\n        }\r\n        case channelActions.ActionTypes.JOB_ERROR: {\r\n            const { job, timestamp } = action.payload;\r\n            return updateById(\r\n                state,\r\n                job,\r\n                {\r\n                    running: JobRunning.DONE,\r\n                    status: JobStatus.ERROR,\r\n                    endTimestamp: timestamp,\r\n                }\r\n            )\r\n        }\r\n        case channelActions.ActionTypes.INITIAL_STATE: {\r\n            const jobs = action.payload.jobs;\r\n            const jobState: JobState[] = jobs.map(job => {\r\n                return {\r\n                    id: job.id,\r\n                    analysis: job.analysis,\r\n                    // FIXME: right job status!\r\n                    status: JobStatus.SUCCESS,\r\n                    startTimestamp: 0,\r\n                    // FIXME: result blobs?\r\n                    results: [],\r\n                    // FIXME: right job running status!\r\n                    running: JobRunning.DONE,\r\n                    endTimestamp: 0,\r\n                };\r\n            })\r\n\r\n            return {\r\n                byId: constructById(jobState, job => job.id),\r\n                ids: jobState.map(job => job.id),\r\n            };\r\n        }\r\n    }\r\n    return state;\r\n}","import { combineReducers } from \"redux\";\r\nimport { analysisReducer } from \"./analysis/reducers\";\r\nimport { directoryBrowserReducer } from './browser/reducers';\r\nimport { channelStatusReducer } from \"./channel/reducers\";\r\nimport { clusterConnectionReducer } from \"./cluster/reducers\";\r\nimport { compoundAnalysisReducer } from \"./compoundAnalysis/reducers\";\r\nimport { configReducer } from \"./config/reducers\";\r\nimport { datasetReducer, openDatasetReducer } from \"./dataset/reducers\";\r\nimport { errorReducer } from \"./errors/reducers\";\r\nimport { jobReducer } from \"./job/reducers\";\r\n\r\nexport const rootReducer = combineReducers({\r\n    compoundAnalyses: compoundAnalysisReducer,\r\n    analyses: analysisReducer,\r\n    channelStatus: channelStatusReducer,\r\n    clusterConnection: clusterConnectionReducer,\r\n    datasets: datasetReducer,\r\n    openDataset: openDatasetReducer,\r\n    jobs: jobReducer,\r\n    errors: errorReducer,\r\n    config: configReducer,\r\n    browser: directoryBrowserReducer,\r\n})\r\n\r\nexport type RootReducer = ReturnType<typeof rootReducer>;","// tslint:disable:ordered-imports\r\nimport \"core-js/fn/symbol/iterator.js\";\r\nimport \"core-js/es6/symbol.js\";\r\nimport 'react-app-polyfill/ie11';\r\n// tslint:enable:ordered-imports\r\n\r\nimport * as React from 'react';\r\nimport * as ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { applyMiddleware, compose, createStore } from 'redux';\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport App from './App';\r\nimport registerServiceWorker from './registerServiceWorker';\r\nimport { rootSaga } from './sagas';\r\nimport { rootReducer } from './store';\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nconst composeEnhancers = (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nconst store = createStore(rootReducer, composeEnhancers(\r\n    applyMiddleware(\r\n        sagaMiddleware,\r\n    )\r\n));\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>,\r\n    document.getElementById('root') as HTMLElement\r\n);\r\nregisterServiceWorker();\r\n\r\nsagaMiddleware.run(rootSaga);"],"sourceRoot":""}