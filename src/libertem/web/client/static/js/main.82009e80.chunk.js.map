{"version":3,"sources":["job/components/ResultImage.module.css","images/LiberTEM logo-medium.png","cluster/actions.ts","About.tsx","helpers/actionHelpers.ts","helpers/index.ts","messages.ts","browser/actions.ts","cluster/components/LocalConnectionForm.tsx","cluster/components/TCPConnectionForm.tsx","cluster/components/ClusterConnectionForm.tsx","channel/components/ChannelConnecting.tsx","channel/components/ChannelStatus.tsx","browser/components/FileBrowserEntry.tsx","browser/components/FileBrowserHeader.tsx","browser/components/FileEntry.tsx","browser/components/FolderEntry.tsx","browser/components/PathDropDownItem.tsx","browser/components/PathInput.tsx","browser/components/RecentFiles.tsx","browser/components/PathBar.tsx","browser/components/FileBrowser.tsx","browser/components/BrowserWrapper.tsx","widgets/constraints.ts","widgets/styles.ts","widgets/Disk.tsx","widgets/kbdHandler.ts","widgets/DraggableHandle.tsx","analysis/actions.ts","job/types.ts","widgets/BusySpinner.tsx","widgets/BusyWrapper.tsx","widgets/HandleParent.tsx","job/components/ResultImage.tsx","job/components/Result.tsx","job/components/Selectors.tsx","job/components/ResultList.tsx","analysis/components/FrameViewModeSelector.tsx","analysis/components/PickHandle.tsx","analysis/components/Toolbar.tsx","analysis/components/AnalysisItem.tsx","analysis/components/CenterOfMassAnalysis.tsx","analysis/components/DiskMaskAnalysis.tsx","analysis/components/PointSelectionAnalysis.tsx","helpers/svg.ts","widgets/Ring.tsx","analysis/components/RingMaskAnalysis.tsx","analysis/components/Analysis.tsx","analysis/components/AnalysisList.tsx","helpers/reducerHelpers.ts","analysis/types.ts","dataset/actions.ts","analysis/components/AnalysisSelect.tsx","dataset/components/AddAnalysis.tsx","dataset/components/DatasetParams.tsx","dataset/components/DatasetInfo.tsx","dataset/components/DatasetToolbar.tsx","dataset/components/Dataset.tsx","dataset/helpers.ts","dataset/components/BLOParamsForm.tsx","errors/actions.ts","dataset/components/DatasetTypeSelect.tsx","dataset/components/FRMS6ParamsForm.tsx","dataset/components/HDF5ParamsForm.tsx","dataset/components/HDFSParamsForm.tsx","dataset/components/K2ISParamsForm.tsx","dataset/components/MIBParamsForm.tsx","dataset/components/RawFileParamsForm.tsx","dataset/components/SERParamsForm.tsx","dataset/components/DatasetOpen.tsx","dataset/components/DatasetOpenSpinner.tsx","dataset/components/DatasetList.tsx","errors/components/Error.tsx","errors/components/ErrorList.tsx","App.tsx","registerServiceWorker.ts","job/actions.ts","job/api.ts","analysis/sagas.ts","config/helpers.ts","browser/api.ts","channel/actions.ts","browser/sagas.ts","channel/messages.ts","channel/sagas.ts","cluster/api.ts","config/actions.ts","cluster/sagas.ts","config/api.ts","config/sagas.ts","dataset/api.ts","dataset/sagas.ts","sagas.ts","analysis/reducers.ts","browser/reducers.ts","channel/reducers.ts","cluster/reducers.ts","config/reducers.ts","dataset/reducers.ts","errors/reducers.ts","job/reducers.ts","store.ts","index.tsx"],"names":["module","exports","default","fallback","__webpack_require__","p","ActionTypes","connect","state","version","config","revision","_ref","react","Header","as","slice","List","Item","Icon","name","Content","href","src","alt","createAction","type","payload","meta","undefined","Actions","notConnected","NOT_CONNECTED","params","CONNECT","connected","CONNECTED","assertNotReached","message","Error","defaultDebounce","fn","delay","arguments","length","_","maxWait","getEnumValues","e","Object","keys","ClusterTypes","DatasetTypes","DatasetStatus","AnalysisTypes","ClusterTypeMetadata","_ClusterTypeMetadata","defineProperty","LOCAL","label","TCP","helpText","withFormik","mapPropsToValues","ownProps","numWorkers","localCores","handleSubmit","values","formikBag","onSubmit","props","objectSpread","touched","errors","isSubmitting","dirty","handleChange","handleBlur","handleReset","Form","Field","htmlFor","value","onChange","onBlur","Button","primary","disabled","address","mapDispatchToProps","connectToCluster","clusterActions","clusterTypeOptions","map","t","text","ClusterConnectionForm","clusterType","setType","_this","setState","data","this","components_LocalConnectionForm","components_TCPConnectionForm","Dropdown","inline","options","Segment","renderForm","React","ChannelConnecting","msg","Message","icon","loading","messages","waiting","connecting","clusterMessages","channelStatus","clusterConnection","haveConfig","children","status","components_ChannelConnecting","components_ClusterConnectionForm","list","path","LIST_DIRECTORY","dirListing","dirs","files","drives","places","DIRECTORY_LISTING","open","OPEN","cancel","CANCEL","select","SELECT","selectFullPath","SELECT_FULL_PATH","error","timestamp","id","ERROR","detectParams","DETECT_PARAMS","paramsDetected","PARAMS_DETECTED","TimeStamp","ts","date","Date","fmtDate","toLocaleDateString","fmtTime","toLocaleTimeString","title","concat","style","display","whiteSpace","width","marginRight","FileSize","_ref2","fmtSize","bytes","si","thresh","Math","abs","size","unit","units","u","toFixed","humanFileSize","textAlign","Cell","_ref3","overflow","textOverflow","FileBrowserEntry","onClick","_this$props","details","myStyle","cursor","tsStyles","paddingRight","flexGrow","FileBrowserEntry_Cell","FileBrowserEntry_FileSize","owner","FileBrowserEntry_TimeStamp","ctime","mtime","FileBrowserHeader","alignRight","paddingBottom","FileEntry","components_FileBrowserEntry","dispatch","browserActions","window","setTimeout","toString","objectWithoutProperties","newProps","initialPath","enableReinitialize","Input","autoComplete","lastOpened","fileHistory","separator","recentFiles","filter","item","floating","Menu","content","option","idx","key","refresh","currentPath","handleInputChange","goUp","driveOptions","placeOptions","components_RecentFiles","components_PathDropDownItem","components_PathInput","listRef","scrollToTop","current","scrollToItem","sortByKey","array","getKey","sort","a","b","x","y","browser","isLoading","getSortKey","toLowerCase","dirEntries","dir","components_FolderEntry","fileEntries","f","components_FileEntry","entries","index_esm","overflowY","ref","height","itemCount","itemSize","index","Group","components_PathBar","components_FileBrowserHeader","isOpen","components_FileBrowser","labelPosition","inRectConstraint","max","min","cbToRadius","cx","cy","cb","dx","dy","sqrt","dist","keepOnCY","riConstraint","outerPos","otherX","roConstraints","innerPos","defaultMaskStyles","imageWidth","fillOpacity","fill","strokeOpacity","stroke","strokeWidth","Disk","imageHeight","r","handleKeyEvent","update","delta","shiftKey","preventDefault","StyledCircle","styled","circle","_templateObject","Cross","_templateObject2","FocusGroup","g","_templateObject3","Handle","scale","withCross","focusRef","args","transform","crossSpec","cross","d","assign","relativeCoords","parent","elem","svg","ownerSVGElement","inWidthAttr","getAttribute","inWidth","getBoundingClientRect","getScalingFactor","parentPos","pageX","left","pageXOffset","pageY","top","pageYOffset","DraggableHandle","_React$Component","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","posRef","dragging","drag","externalMouseMove","move","externalLeave","stopDrag","externalMouseUp","applyConstraint","constraint","startDrag","parentOnDragStart","assertThisInitialized","focus","onDragMove","constrained","parentOnDrop","_this$state","handleKeyDown","newCoords","inherits","createClass","visibility","DraggableHandle_Handle","onMouseUp","onMouseMove","onMouseDown","onKeyDown","tabIndex","_this$state$drag","renderCommon","_this$props2","renderDragging","JobRunning","JobStatus","create","dataset","analysisType","CREATE","created","analysis","CREATED","updateParameters","parameters","kind","UPDATE_PARAMETERS","setFrameViewMode","mode","initialParams","SET_FRAMEVIEW_MODE","prepareRun","job","PREPARE_RUN","run","RUN","running","RUNNING","remove","REMOVE","removed","REMOVED","BusySpinner","margin","padding","position","bottom","right","color","opacity","BusyWrapper","busy","widgets_BusySpinner","HandleParent","_getPrototypeOf2","_len","Array","_key","apply","currentHandle","handleDragStart","h","handleDrop","handleMouseMove","handleMouseLeave","handleMouseUp","onMouseLeave","onKeyboardEvent","outline","renderHandles","_this2","handles","i","ResultImage","result","results","className","styles","viewBox","xlinkHref","imageURL","ResultWrapper","Result_templateObject","analysisActions","Result","extraHandles","toConsumableArray","widgets_HandleParent","extraWidgets","DONE","widgets_BusyWrapper","components_ResultImage","Selectors","div","Selectors_templateObject","ResultList","selectedChannel","selectChannel","getJob","currentJob","jobsById","history","jobHistory","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","tmpJob","err","return","selectors","pickCoords","currentResult","border","components_Result","dt","endTimestamp","startTimestamp","components_Selectors","ResultList_ResultImageSelector","selectedImg","ResultImageSelector","availableImages","description","analyses","byId","jobId","jobs","ds","datasets","frameDetails","SUM_FRAMES","frameViewModeOptions","PICK_FRAME","FrameViewModeSelector","scanWidth","scanHeight","round","shape","onDragStart","onDrop","_analysis$frameDetail","widgets_DraggableHandle","pickX","pickY","newX","newY","RESULT","getAnalysisStatus","handleApply","handleRemove","applyIconProps","attached","AnalysisItem","frameViewHandles","frameViewWidgets","subtitle","resultWidth","resultHeight","frameWidth","frameHeight","Grid","columns","Row","Column","components_ResultList","components_FrameViewModeSelector","components_PickHandle","components_Toolbar","handleCenterChange","handleRChange","rHandle","widgets_Disk","components_AnalysisItem","DraggableHandle_DraggableHandle","getPathArc","center","start","end","radius","degree","points","push","getLocationFromAngle","clockWise","join","getCirclePath","radian","PI","cos","sin","Ring","ri","pathSpec","ro","fillRule","handleRIChange","handleROChange","riHandle","roHandle","widgets_Ring","resultDetails","APPLY_DISK_MASK","components_DiskMaskAnalysis","APPLY_RING_MASK","components_RingMaskAnalysis","CENTER_OF_MASS","components_CenterOfMassAnalysis","APPLY_POINT_SELECTOR","components_PointSelectionAnalysis","AnalysisList","ids","analysisId","Analysis","updateById","partialRecord","newObj","newById","insertById","record","filterWithPred","pred","reduce","acc","AnalysisMetadata","_AnalysisMetadata","long","short","showInUI","getMetadata","analysisTypeOptions","AnalysisSelect","labeled","button","handleAddAnalysis","components_AnalysisSelect","renderParams","Table","DatasetParams","HeaderCell","Body","DiagElem","DatasetInfo_DiagElems","diagnostics","renderValue","DiagElems","DatasetInfo_DiagElem","DatasetInfo","components_DatasetParams","cancelOpen","CANCEL_OPEN","delete","DELETE","deleted","DELETED","detect","DETECT","detected","DETECTED","detectFailed","DETECT_FAILED","handleRemoveDataset","datasetActions","DatasetContainer","_msg","OPENING","DELETING","dividing","marginTop","marginBottom","horizontal","Modal","trigger","link","Popup","components_DatasetInfo","flexShrink","components_DatasetToolbar","components_AnalysisList","components_AddAnalysis","parseNumList","nums","split","part","getInitial","otherwise","initial","tileshape","_formikBag$props","BLO","onCancel","datasetTypeOptions","DatasetTypeSelect","currentType","FRMS6","ds_path","HDF5","HDFS","K2IS","scan_size","MIB","components_RawFileParamsForm","detector_size_raw","crop_detector_to","dtype","RAW","SER","DatasetOpen","datasetType","setDatasetType","formInitial","formPath","createDataset","form","components_DatasetTypeSelect","components_HDF5ParamsForm","components_HDFSParamsForm","MIBParamsForm","BLOParamsForm","K2ISParamsForm","components_SERParamsForm","components_FRMS6ParamsForm","formVisible","openDataset","formInitialParams","uuid","busyPath","DatasetList","dsId","Dataset","components_DatasetOpenSpinner","components_DatasetOpen","components_BrowserWrapper","DISMISS","dismiss","errorActions","negative","onDismiss","clusterConnected","channelConnected","latestErrors","showModal","components_Error","App","Container","logo","alignSelf","src_About","components_ErrorList","components_ChannelStatus","components_DatasetList","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","startJob","datasetId","fetch","body","JSON","stringify","credentials","method","json","cancelJob","createAnalysisSaga","cancelOldJob","analysisSidecar","updateFrameViewMode","updateFrameViewParams","doRemoveAnalysisSaga","analysisRootSaga","getAnalysisDetails","minLength","selectDataset","selectAnalysis","selectJob","action","datasetState","sidecarTask","regenerator_default","wrap","_context","prev","sent","FRAME","fork","put","take","t0","now","stop","_marked","_context2","abrupt","_marked2","runOrParamsChannel","oldJobId","_context3","actionChannel","buffers","sliding","jobActions","_marked3","_context4","_marked4","_context5","_marked5","_context6","finish","_marked6","_context7","takeEvery","_marked7","CONFIG_KEY","joinPaths","parts","replace","RegExp","trim","mergeLocalStorage","serverConfig","localSettings","localStorage","getItem","localSettingsParsed","parse","defaultConfig","setLocalStorage","setItem","getDirectoryListing","url","directoryListingSaga","fetchOnRequest","fetchDirectoryListing","fetchDirectoryListOnOpen","sagas_marked","_action$payload","newPath","sagas_marked2","browserState","alternative","_browserState","_timestamp","_id","home","sagas_marked3","cwd","sagas_marked4","MessageTypes","initialState","INITIAL_STATE","jobStarted","JOB_STARTED","finishJob","FINISH_JOB","taskResult","TASK_RESULT","jobError","JOB_ERROR","close","CLOSE","createMessage","messageType","attribs","Messages","followup","binary","objectURL","BINARY","deleteDataset","DELETE_DATASET","webSocketSaga","actionsFromChannel","handleBinaryParts","handleTaskResult","handleFinishJob","createWebSocketChannel","eventChannel","emit","onMessage","Blob","channelMessages","URL","createObjectURL","parsed","onOpen","onClose","END","onError","ws","WebSocket","port","addEventListener","removeEventListener","socketChannel","channelActions","channel_sagas_marked","channel_sagas_marked2","numParts","binMsg","channel_sagas_marked3","images","numMessages","descriptions","channel_sagas_marked4","sagas_marked5","connection","checkClusterConnection","connectSaga","putClusterStatus","trackClusterConnection","clusterConnectionSaga","conn","cluster_sagas_marked","cluster_sagas_marked2","cluster_sagas_marked3","all","cluster_sagas_marked4","FETCH","fetched","FETCHED","fetchFailed","FETCH_FAILED","getConfig","getConfigOnReconnect","getConfigSaga","updateLocalStorageConfig","firstConfigFetch","configRootSaga","config_sagas_marked","configResponse","mergedConfig","configActions","removeItem","config_sagas_marked2","config_sagas_marked3","config_sagas_marked4","config_sagas_marked5","detectDataset","createDatasetSaga","deleteDatasetSaga","doOpenDataset","openDatasetSagaFullPath","openDatasetSaga","datasetRootSaga","resp","dataset_sagas_marked","dataset_sagas_marked2","fullPath","prefillParams","detectResult","datasetParams","dataset_sagas_marked3","dataset_sagas_marked4","dataset_sagas_marked5","sagas_marked6","rootSaga","src_sagas_marked","initialAnalysisState","ChannelStatusCodes","initialBrowserState","initialChannelState","WAITING","initialClusterConnectionState","initialConfigState","initialDatasetState","initialOpenDatasetState","initialErrorState","initialJobState","rootReducer","combineReducers","newDetails","oldJob","newJobs","newFrameDetails","READY","items","CREATING","IN_PROGRESS","SUCCESS","_action$payload2","inp","newLastOpened","newFileHistory","curr","indexOf","place","sagaMiddleware","createSagaMiddleware","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","ReactDOM","es","src_App","document","getElementById","process","origin","response","headers","get","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.82009e80.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"default\":\"ResultImage_default__3UGMF\",\"fallback\":\"ResultImage_fallback__7NTHF\"};","module.exports = __webpack_public_path__ + \"static/media/LiberTEM logo-medium.7999e0dc.png\";","import { ActionsUnion, createAction } from '../helpers/actionHelpers';\nimport { ConnectRequestParams } from '../messages';\n\nexport enum ActionTypes {\n    NOT_CONNECTED = 'CLUSTER_NOT_CONNECTED',\n    CONNECT = 'CLUSTER_CONNECT',\n    CONNECTED = 'CLUSTER_CONNECTED',\n}\n\nexport const Actions = {\n    notConnected: () => createAction(ActionTypes.NOT_CONNECTED),\n    connect: (params: ConnectRequestParams) => createAction(ActionTypes.CONNECT, { params }),\n    connected: (params: ConnectRequestParams) => createAction(ActionTypes.CONNECTED, { params }),\n}\n\nexport type Actions = ActionsUnion<typeof Actions>;\n","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Header, List } from \"semantic-ui-react\";\nimport { RootReducer } from \"./store\";\n\nconst mapStateToProps = (state: RootReducer) => {\n    return {\n        version: state.config.version,\n        revision: state.config.revision,\n    }\n}\n\ntype MergedProps = ReturnType<typeof mapStateToProps>;\n\nconst About: React.SFC<MergedProps> = ({ version, revision }) => {\n    return (\n        <>\n            <Header as=\"h3\">This is LiberTEM version {version} (revision {revision.slice(0, 8)})</Header>\n            <List>\n                <List.Item>\n                    <List.Icon name=\"github\" />\n                    <List.Content>\n                        Find us on <a href=\"https://github.com/LiberTEM/LiberTEM\">GitHub</a>\n                    </List.Content>\n                </List.Item>\n                <List.Item>\n                    <List.Icon name=\"bug\" />\n                    <List.Content>\n                        Found a bug? Got a feature request? Please <a href=\"https://github.com/LiberTEM/LiberTEM/issues/new\">open an issue!</a>\n                    </List.Content>\n                </List.Item>\n                <List.Item>\n                    <List.Icon name=\"legal\" />\n                    <List.Content>\n                        LiberTEM is licensed under the <a href=\"https://github.com/LiberTEM/LiberTEM/blob/master/LICENSE\">GNU General Public License v3.0</a>\n                    </List.Content>\n                </List.Item>\n                <List.Item>\n                    <List.Icon name=\"book\" />\n                    <List.Content>\n                        Read <a href=\"https://libertem.github.io/LiberTEM/\">the documentation</a>\n                    </List.Content>\n                </List.Item>\n                <List.Item>\n                    <List.Icon name=\"user\" />\n                    <List.Content>\n                        Read <a href=\"https://libertem.github.io/LiberTEM/acknowledgments.html\">the acknowledgments</a>\n                    </List.Content>\n                </List.Item>\n                <List.Item>\n                    <List.Icon name=\"gitter\" />\n                    <List.Content>\n                        Join our <a href=\"https://gitter.im/LiberTEM/Lobby\">chat on gitter!</a>\n                    </List.Content>\n                </List.Item>\n                <List.Item>\n                    <List.Icon name=\"linkify\" />\n                    <List.Content>\n                    <a href=\"https://doi.org/10.5281/zenodo.1478763\"><img src=\"https://zenodo.org/badge/DOI/10.5281/zenodo.1478763.svg\" alt=\"DOI\"/></a>\n                    </List.Content>\n                </List.Item>\n            </List>\n        </>\n    );\n}\n\nexport default connect(mapStateToProps)(About);","import { ActionCreatorsMapObject } from \"redux\";\n\nexport interface Action<T extends string> {\n    type: T\n}\n\nexport interface ActionWithPayload<T extends string, P> extends Action<T> {\n    payload: P\n}\n\nexport interface ActionWithMeta<T extends string, P, M> extends ActionWithPayload<T, P> {\n    meta: M\n}\n\nexport function createAction<T extends string>(type: T): Action<T>\nexport function createAction<T extends string, P, M>(type: T, payload?: P): ActionWithPayload<T, P>\nexport function createAction<T extends string, P, M>(type: T, payload?: P, meta?: M): ActionWithMeta<T, P, M>\nexport function createAction<T extends string, P, M>(type: T, payload?: P, meta?: M) {\n    if (meta === undefined && payload === undefined) {\n        return { type };\n    } else if (meta === undefined) {\n        return { type, payload };\n    } else {\n        return { type, payload, meta }\n    }\n}\n\nexport type ActionsUnion<A extends ActionCreatorsMapObject> = ReturnType<A[keyof A]>","import * as _ from \"lodash\";\n\nexport function assertNotReached(message: string): never {\n    throw new Error(message);\n}\n\nexport function defaultDebounce<T extends (...args: any[]) => any>(fn: T, delay: number = 50) {\n    return _.debounce(fn, delay, { maxWait: delay });\n}\n\nexport function getEnumValues<E>(e: E): Array<keyof E> {\n    return Object.keys(e) as Array<keyof E>;\n}","\n/* \n * Common\n */\n\nexport interface FollowupPart {\n    numMessages: number,\n    descriptions: Array<{ title: string, desc: string }>,\n}\n\nexport interface MsgPartConfig {\n    version: string,\n    revision: string,\n    localCores: number,\n    cwd: string,\n    separator: string,\n}\n\nexport interface GetConfigResponse {\n    status: \"ok\",\n    config: MsgPartConfig,\n}\n\n/*\n * Connection\n */\n\nexport enum ClusterTypes {\n    LOCAL = \"LOCAL\",\n    TCP = \"TCP\",\n}\n\nexport const ClusterTypeMetadata: { [s: string]: { [s: string]: string } } = {\n    [ClusterTypes.LOCAL]: {\n        label: \"Create local cluster\",\n    },\n    [ClusterTypes.TCP]: {\n        label: \"Connect to cluster\",\n        helpText: \"can be either local or remote, connection via TCP\",\n    }\n}\n\nexport interface ConnectRequestLocalCluster {\n    type: ClusterTypes.LOCAL,\n    numWorkers?: number,\n}\n\nexport interface ConnectRequestTCP {\n    type: ClusterTypes.TCP,\n    address: string,\n}\n\nexport type ConnectRequestParams = ConnectRequestLocalCluster | ConnectRequestTCP\n\nexport interface ConnectRequest {\n    connection: ConnectRequestParams\n}\n\nexport type ConnectResponse = {\n    status: \"ok\",\n    connection: ConnectRequest,\n} | {\n    status: \"disconnected\",\n    connection: {},\n}\n\n/*\n * Dataset\n */\n\nexport enum DatasetTypes {\n    HDF5 = \"HDF5\",\n    HDFS = \"HDFS\",\n    RAW = \"RAW\",\n    MIB = \"MIB\",\n    BLO = \"BLO\",\n    K2IS = \"K2IS\",\n    SER = \"SER\",\n    FRMS6 = \"FRMS6\",\n}\n\nexport interface DatasetParamsCommon {\n    name: string,\n}\n\nexport type DatasetParamsHDFS = {\n    type: DatasetTypes.HDFS,\n    path: string,\n    tileshape: number[],\n} & DatasetParamsCommon;\n\nexport type DatasetParamsHDF5 = {\n    type: DatasetTypes.HDF5,\n    path: string,\n    ds_path: string,\n    tileshape: number[],\n} & DatasetParamsCommon\n\nexport type DatasetParamsRaw = {\n    type: DatasetTypes.RAW,\n    path: string,\n    dtype: string,\n    detector_size_raw: number[],\n    crop_detector_to: number[],\n    scan_size: number[],\n    tileshape: number[],\n} & DatasetParamsCommon\n\nexport type DatasetParamsMIB = {\n    type: DatasetTypes.MIB,\n    path: string,\n    scan_size: number[],\n    tileshape: number[],\n} & DatasetParamsCommon\n\nexport type DatasetParamsBLO = {\n    type: DatasetTypes.BLO,\n    path: string,\n    tileshape: number[],\n} & DatasetParamsCommon\n\nexport type DatasetParamsK2IS = {\n    type: DatasetTypes.K2IS,\n    path: string,\n} & DatasetParamsCommon\n\nexport type DatasetParamsSER = {\n    type: DatasetTypes.SER,\n    path: string,\n} & DatasetParamsCommon\n\nexport type DatasetParamsFRMS6 = {\n    type: DatasetTypes.FRMS6,\n    path: string,\n} & DatasetParamsCommon\n\nexport type DatasetFormParams = DatasetParamsHDF5 | DatasetParamsHDFS | DatasetParamsRaw | DatasetParamsMIB | DatasetParamsBLO | DatasetParamsK2IS | DatasetParamsSER | DatasetParamsFRMS6\n\nexport interface DatasetCreateParams {\n    id: string,\n    params: DatasetFormParams,\n}\n\nexport enum DatasetStatus {\n    OPEN = \"OPEN\",\n    OPENING = \"OPENING\",\n    DELETING = \"DELETING\",\n}\n\nexport interface DiagElemMsg {\n    name: string,\n    value: string | DiagElemMsg[],\n}\n\ninterface DatasetCommon {\n    id: string,\n    params: DatasetFormParams,\n}\n\nexport type DatasetOpening = DatasetCommon & {\n    status: DatasetStatus.OPENING,\n}\n\nexport type DatasetDeleting = DatasetCommon & {\n    status: DatasetStatus.DELETING,\n}\n\nexport type DatasetOpen = DatasetCommon & {\n    status: DatasetStatus.OPEN,\n    params: {\n        shape: number[],\n    }\n    diagnostics: DiagElemMsg[],\n}\n\nexport type Dataset = DatasetOpening | DatasetOpen | DatasetDeleting;\n\nexport interface OpenDatasetRequest {\n    dataset: DatasetCreateParams\n}\n\nexport interface OpenDatasetResponseOk {\n    status: \"ok\",\n    dataset: string,  // TODO: uuid type?\n    details: Dataset,\n}\n\nexport interface OpenDatasetResponseError {\n    status: \"error\",\n    dataset: string,\n    msg: string,\n}\n\nexport type OpenDatasetResponse = OpenDatasetResponseOk | OpenDatasetResponseError\n\nexport interface DeleteDatasetResponse {\n    status: \"ok\",\n    dataset: string,\n}\n\nexport interface DetectDatasetSuccessResponse {\n    status: \"ok\",\n    datasetParams: DatasetFormParams,\n}\n\nexport interface DetectDatasetErrorResponse {\n    status: \"error\",\n    path: string,\n    msg: string,\n}\n\nexport type DetectDatasetResponse = DetectDatasetSuccessResponse | DetectDatasetErrorResponse;\n\nexport type MsgPartInitialDataset = DatasetOpen\n\n// type alias to add client-side state to datasets\nexport type DatasetState = Dataset & {}\n\n/*\n * Job\n */\nexport interface MsgPartJob {\n    id: string,\n    dataset: string,\n}\n\nexport interface MaskDefRing {\n    shape: \"ring\",\n    cx: number,\n    cy: number,\n    ri: number,\n    ro: number\n}\n\nexport interface MaskDefDisk {\n    shape: \"disk\",\n    cx: number,\n    cy: number,\n    r: number,\n}\n\nexport interface PointDef {\n    shape: \"point\",\n    cx: number,\n    cy: number,\n}\n\n// TODO: shape doesn't really make sense here, needs to be restructured\nexport interface CenterOfMassParams {\n    shape: \"com\",\n    cx: number,\n    cy: number,\n    r: number,\n}\n\nexport interface PickFrameParams {\n    x: number,\n    y: number,\n}\n\nexport enum AnalysisTypes {\n    APPLY_RING_MASK = \"APPLY_RING_MASK\",\n    APPLY_DISK_MASK = \"APPLY_DISK_MASK\",\n    APPLY_POINT_SELECTOR = \"APPLY_POINT_SELECTOR\",\n    CENTER_OF_MASS = \"CENTER_OF_MASS\",\n    SUM_FRAMES = \"SUM_FRAMES\",\n    PICK_FRAME = \"PICK_FRAME\",\n}\n\nexport interface RingMaskDetails {\n    type: AnalysisTypes.APPLY_RING_MASK,\n    parameters: MaskDefRing,\n}\n\nexport interface DiskMaskDetails {\n    type: AnalysisTypes.APPLY_DISK_MASK,\n    parameters: MaskDefDisk,\n}\n\nexport interface PointDefDetails {\n    type: AnalysisTypes.APPLY_POINT_SELECTOR,\n    parameters: PointDef,\n}\n\nexport interface CenterOfMassDetails {\n    type: AnalysisTypes.CENTER_OF_MASS,\n    parameters: CenterOfMassParams,\n}\n\nexport interface SumFramesDetails {\n    type: AnalysisTypes.SUM_FRAMES,\n    parameters: {},\n}\n\nexport interface PickFrameDetails {\n    type: AnalysisTypes.PICK_FRAME,\n    parameters: PickFrameParams,\n}\n\nexport type AnalysisParameters = MaskDefRing | MaskDefDisk | CenterOfMassParams | PointDef | PickFrameParams;\nexport type AnalysisDetails = RingMaskDetails | DiskMaskDetails | CenterOfMassDetails | PointDefDetails | SumFramesDetails | PickFrameDetails;\n\nexport interface StartJobRequest {\n    job: {\n        dataset: string,\n        analysis: AnalysisDetails,\n    }\n}\n\nexport interface StartJobResponse {\n    status: \"ok\",\n    job: string,\n    details: MsgPartJob,\n}\n\nexport interface CancelJobResponse {\n    status: \"ok\",\n    job: string,\n}\n\n\n/*\n * fs browser \n */\n\n// some named place, i.e. \"Documents\", \"Home\", ...\nexport interface FSPlace {\n    title: string,\n    path: string,\n    key: string,\n}\n\nexport interface DirectoryListingDetails {\n    name: string,\n    size: number,\n    ctime: number,\n    mtime: number,\n    owner: string,\n}\n\nexport interface DirectoryListingResponseOK {\n    status: \"ok\",\n    path: string,\n    files: DirectoryListingDetails[],\n    dirs: DirectoryListingDetails[],\n    drives: string[],\n    places: FSPlace[],\n}\n\nexport interface DirectoryListingResponseError {\n    status: \"error\",\n    path: string,\n    code: string,\n    msg: string,\n    alternative?: string,\n}\n\nexport type DirectoryListingResponse = DirectoryListingResponseOK | DirectoryListingResponseError;\n","import { ActionsUnion, createAction } from \"../helpers/actionHelpers\";\nimport { DatasetFormParams, DirectoryListingDetails, FSPlace } from \"../messages\";\n\nexport enum ActionTypes {\n    LIST_DIRECTORY = 'BROWSER_LIST_DIRECTORY',\n    LIST_FULL_PATH = 'BROWSER_LIST_DIRECTORY_FULL',\n    DIRECTORY_LISTING = 'BROWSER_DIRECTORY_LISTING',\n    DETECT_PARAMS = 'BROWSER_DETECT_PARAMS',\n    PARAMS_DETECTED = 'BROWSER_PARAMS_DETECTED',\n    ERROR = 'BROWSER_ERROR',\n    OPEN = 'BROWSER_OPEN',\n    CANCEL = 'BROWSER_CANCEL',\n    SELECT = 'BROWSER_SELECT',\n    SELECT_FULL_PATH = 'BROWSER_SELECT_FULL_PATH',\n}\n\nexport const Actions = {\n    list: (path: string, name?: string) => createAction(ActionTypes.LIST_DIRECTORY, { path, name }),\n    dirListing: (path: string, dirs: DirectoryListingDetails[], files: DirectoryListingDetails[], drives: string[], places: FSPlace[]) => createAction(ActionTypes.DIRECTORY_LISTING, { path, dirs, files, drives, places }),\n    open: () => createAction(ActionTypes.OPEN),\n    cancel: () => createAction(ActionTypes.CANCEL),\n    select: (path: string, name: string) => createAction(ActionTypes.SELECT, { path, name }),\n    selectFullPath: (path: string) => createAction(ActionTypes.SELECT_FULL_PATH, { path }),\n    error: (msg: string, timestamp: number, id: string) => createAction(ActionTypes.ERROR, { msg, timestamp, id }),\n    detectParams: (path: string) => createAction(ActionTypes.DETECT_PARAMS, { path }),\n    paramsDetected: (path: string, params: DatasetFormParams) => createAction(ActionTypes.PARAMS_DETECTED, { path, params }),\n}\n\nexport type Actions = ActionsUnion<typeof Actions>;","import { FormikProps, withFormik } from \"formik\";\nimport * as React from \"react\";\nimport { Button, Form } from \"semantic-ui-react\";\nimport { ConfigState } from \"../../config/reducers\";\nimport { Omit } from \"../../helpers/types\";\nimport { ClusterTypes, ConnectRequestLocalCluster } from \"../../messages\";\n\ntype FormValues = Omit<ConnectRequestLocalCluster, \"type\">;\n\ninterface FormProps {\n    onSubmit: (params: ConnectRequestLocalCluster) => void,\n    config: ConfigState,\n}\n\ntype MergedProps = FormikProps<FormValues> & FormProps;\n\nconst LocalConnectionForm: React.SFC<MergedProps> = ({\n    values,\n    touched,\n    errors,\n    dirty,\n    isSubmitting,\n    handleChange,\n    handleBlur,\n    handleSubmit,\n    handleReset,\n}) => {\n    return (\n        <Form onSubmit={handleSubmit}>\n            <Form.Field>\n                <label htmlFor=\"numWorkers\">Number of Workers:</label>\n                <input type=\"number\" name=\"numWorkers\" value={values.numWorkers}\n                    onChange={handleChange}\n                    onBlur={handleBlur} />\n                {errors.numWorkers && touched.numWorkers && errors.numWorkers}\n            </Form.Field>\n            <Button primary={true} type=\"submit\" disabled={isSubmitting}>Connect</Button>\n        </Form>\n    )\n}\n\nexport default withFormik<FormProps, FormValues>({\n    mapPropsToValues: (ownProps: FormProps) => ({\n        numWorkers: ownProps.config.localCores,\n    }),\n    handleSubmit: (values, formikBag) => {\n        const { onSubmit } = formikBag.props;\n        onSubmit({\n            type: ClusterTypes.LOCAL,\n            ...values,\n        });\n    }\n})(LocalConnectionForm);\n","\nimport { FormikProps, withFormik } from \"formik\";\nimport * as React from \"react\";\nimport { Button, Form } from \"semantic-ui-react\";\nimport { Omit } from \"../../helpers/types\";\nimport { ClusterTypes, ConnectRequestTCP } from \"../../messages\";\n\ntype FormValues = Omit<ConnectRequestTCP, \"type\">;\n\ninterface FormProps {\n    onSubmit: (params: ConnectRequestTCP) => void,\n}\n\ntype MergedProps = FormikProps<FormValues> & FormProps;\n\nconst TCPConnectionForm: React.SFC<MergedProps> = ({\n    values,\n    touched,\n    errors,\n    dirty,\n    isSubmitting,\n    handleChange,\n    handleBlur,\n    handleSubmit,\n    handleReset,\n}) => {\n    return (\n        <Form onSubmit={handleSubmit}>\n            <Form.Field>\n                <label htmlFor=\"address\">Scheduler URI</label>\n                <input type=\"text\" name=\"address\" value={values.address}\n                    onChange={handleChange}\n                    onBlur={handleBlur} />\n                {errors.address && touched.address && errors.address}\n            </Form.Field>\n            <Button primary={true} type=\"submit\" disabled={isSubmitting}>Connect</Button>\n        </Form>\n    )\n}\n\nexport default withFormik<FormProps, FormValues>({\n    mapPropsToValues: () => ({\n        address: \"tcp://localhost:8786\",\n    }),\n    handleSubmit: (values, formikBag) => {\n        const { onSubmit } = formikBag.props;\n        onSubmit({\n            type: ClusterTypes.TCP,\n            ...values\n        });\n    }\n})(TCPConnectionForm);\n","\nimport * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Dropdown, DropdownProps, Segment } from \"semantic-ui-react\";\nimport * as clusterActions from \"../../cluster/actions\";\nimport { getEnumValues } from \"../../helpers\";\nimport { ClusterTypeMetadata, ClusterTypes, ConnectRequestParams } from \"../../messages\";\nimport { RootReducer } from \"../../store\";\nimport LocalConnectionForm from \"./LocalConnectionForm\";\nimport TCPConnectionForm from \"./TCPConnectionForm\";\n\n\nconst mapDispatchToProps = {\n    connectToCluster: clusterActions.Actions.connect,\n};\n\nconst mapStateToProps = (state: RootReducer) => {\n    return {\n        config: state.config,\n    }\n}\n\ntype MergedProps = DispatchProps<typeof mapDispatchToProps> & ReturnType<typeof mapStateToProps>;\n\nconst clusterTypeKeys = getEnumValues(ClusterTypes);\nconst clusterTypeOptions = clusterTypeKeys.map(t => ({\n    text: ClusterTypeMetadata[ClusterTypes[t]].label,\n    value: ClusterTypes[t],\n}));\n\ninterface ConnectionParamsState {\n    clusterType: ClusterTypes\n}\n\nclass ClusterConnectionForm extends React.Component<MergedProps, ConnectionParamsState> {\n    public state = {\n        clusterType: ClusterTypes.LOCAL,\n    }\n\n    public setType = (type: ClusterTypes) => {\n        this.setState({\n            clusterType: type,\n        });\n    }\n\n    public handleChange = (e: React.SyntheticEvent, data: DropdownProps) => {\n        const value = data.value as ClusterTypes;\n        this.setType(value);\n    }\n\n    public handleSubmit = (params: ConnectRequestParams) => {\n        this.props.connectToCluster(params);\n    }\n\n    public renderForm() {\n        const { clusterType } = this.state;\n        const { config } = this.props;\n\n        switch (clusterType) {\n            case ClusterTypes.LOCAL: {\n                return <LocalConnectionForm config={config} onSubmit={this.handleSubmit} />\n            }\n            case ClusterTypes.TCP: {\n                return <TCPConnectionForm onSubmit={this.handleSubmit} />\n            }\n        }\n    }\n\n    public render() {\n        return (\n            <>\n                <div>\n                    <Dropdown\n                        inline={true}\n                        options={clusterTypeOptions}\n                        value={this.state.clusterType}\n                        onChange={this.handleChange}\n                    />\n                </div>\n                <Segment>\n                    {this.renderForm()}\n                </Segment>\n            </>\n        )\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ClusterConnectionForm);","import * as React from 'react';\nimport { Icon, Message } from 'semantic-ui-react';\n\ninterface ChannelConnectingProps {\n    msg: string,\n}\n\nconst ChannelConnecting: React.SFC<ChannelConnectingProps> = ({ msg }) => (\n    <Message icon={true}>\n        <Icon name='cog' loading={true} />\n        <Message.Content>\n            <Message.Header>Connecting to LiberTEM</Message.Header>\n            {msg}\n        </Message.Content>\n    </Message>\n)\n\nexport default ChannelConnecting;","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport ClusterConnectionForm from \"../../cluster/components/ClusterConnectionForm\";\nimport { RootReducer } from \"../../store\";\nimport ChannelConnecting from \"./ChannelConnecting\";\n\nconst mapStateToProps = (state: RootReducer) => {\n    return {\n        channelStatus: state.channelStatus,\n        clusterConnection: state.clusterConnection,\n        haveConfig: state.config.haveConfig,\n    }\n}\n\n\ntype MergedProps = ReturnType<typeof mapStateToProps>;\n\nconst messages = {\n    waiting: \"Waiting...\",\n    connecting: \"Connecting...\",\n}\n\nconst clusterMessages = {\n    connected: \"Connected, waiting for initial state...\",\n    unknown: \"Connected, fetching cluster status...\",\n}\n\nconst ChannelStatus: React.SFC<MergedProps> = ({ haveConfig, children, channelStatus, clusterConnection }) => {\n    switch (channelStatus.status) {\n        case \"waiting\":\n        case \"connecting\": {\n            return <ChannelConnecting msg={messages[channelStatus.status]} />;\n        }\n        case \"connected\": {\n            if (!haveConfig) {\n                return <ChannelConnecting msg=\"waiting for configuration...\" />;\n            }\n            if (clusterConnection.status === \"disconnected\") {\n                return <ClusterConnectionForm />\n            } else if (clusterConnection.status === \"connected\") {\n                return <ChannelConnecting msg={clusterMessages.connected} />;\n            } else if (clusterConnection.status === \"unknown\") {\n                return <ChannelConnecting msg={clusterMessages.unknown} />;\n            }\n        }\n    }\n    return <>{children}</>;\n}\n\nexport default connect(mapStateToProps)(ChannelStatus);","import * as React from \"react\";\nimport { Icon, SemanticICONS } from \"semantic-ui-react\";\nimport { DirectoryListingDetails } from \"../../messages\";\n\n\ninterface FileBrowserEntryProps {\n    style: object,\n    details: DirectoryListingDetails,\n    onClick?: () => void,\n    icon?: SemanticICONS,\n}\n\ninterface TimeStampProps {\n    ts: number,\n}\n\nexport const TimeStamp: React.SFC<TimeStampProps> = ({ ts }) => {\n    const date = new Date(ts * 1000);\n    const fmtDate = date.toLocaleDateString();\n    const fmtTime = date.toLocaleTimeString();\n    const title = `${fmtDate} ${fmtTime}`;\n    return (\n        <div style={{ display: \"flex\", whiteSpace: \"nowrap\" }} title={title}>\n            <div style={{ width: \"50%\", marginRight: \"10px\" }}>{fmtDate}</div>\n            <div style={{ width: \"45%\" }}>{fmtTime}</div>\n        </div>\n    )\n}\n\n// adapted from https://stackoverflow.com/a/14919494/540644\nfunction humanFileSize(bytes: number, si: boolean = false) {\n    const thresh = si ? 1000 : 1024;\n    if (Math.abs(bytes) < thresh) {\n        return {\n            size: bytes,\n            unit: 'B',\n        }\n    }\n    const units = si\n        ? ['kB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB']\n        : ['KiB', 'MiB', 'GiB', 'TiB', 'PiB', 'EiB', 'ZiB', 'YiB'];\n    let u = -1;\n    do {\n        bytes /= thresh;\n        ++u;\n    } while (Math.abs(bytes) >= thresh && u < units.length - 1);\n\n    return {\n        size: bytes.toFixed(1),\n        unit: units[u],\n    }\n}\n\ninterface FileSizeProps {\n    size: number,\n    si?: boolean,\n}\n\nexport const FileSize: React.SFC<FileSizeProps> = ({ size, si }) => {\n    const fmtSize = humanFileSize(size, si)\n    return (\n        <div style={{ textAlign: \"right\" }}>\n            {fmtSize.size} {fmtSize.unit}\n        </div>\n    );\n}\n\nexport const Cell: React.SFC<{ title?: string }> = ({ children, title }) => {\n    const styles: React.CSSProperties = {\n        whiteSpace: \"nowrap\",\n        overflow: \"hidden\",\n        textOverflow: \"ellipsis\",\n        marginRight: \"10px\",\n    }\n    return (\n        <div style={styles} title={title}>{children}</div>\n    );\n}\n\n\nclass FileBrowserEntry extends React.Component<FileBrowserEntryProps> {\n    public onClick = (e: React.MouseEvent) => {\n        const { onClick } = this.props;\n        if (onClick) {\n            onClick();\n        }\n    }\n\n    public render() {\n        const { details, style, icon } = this.props;\n        const myStyle: React.CSSProperties = {\n            cursor: \"pointer\",\n            ...style,\n        };\n\n        const tsStyles: React.CSSProperties = {\n            textAlign: \"right\",\n        };\n\n        return (\n            <div onClick={this.onClick} style={myStyle}>\n                <div style={{ display: \"flex\", paddingRight: \"10px\" }}>\n                    <div style={{ width: \"20%\", flexGrow: 1 }}>\n                        <Cell title={details.name}>\n                            {icon && <Icon name={icon} />}\n                            {details.name}\n                        </Cell>\n                    </div>\n                    <div style={{ width: \"10%\" }}><Cell><FileSize size={details.size} si={false} /></Cell></div>\n                    <div style={{ width: \"10%\" }}><Cell>{details.owner}</Cell></div>\n                    <div style={{ width: \"18%\", ...tsStyles }}>\n                        <Cell><TimeStamp ts={details.ctime} /></Cell>\n                    </div>\n                    <div style={{ width: \"18%\", ...tsStyles }}>\n                        <Cell><TimeStamp ts={details.mtime} /></Cell>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default FileBrowserEntry;","import * as React from \"react\";\nimport { Cell } from \"./FileBrowserEntry\";\n\nconst FileBrowserHeader: React.SFC = () => {\n    const alignRight: React.CSSProperties = {\n        textAlign: \"right\",\n    };\n\n    // ugly hack: padding-right to compensate for scrollbar size\n    return (\n        <div style={{ paddingRight: \"20px\", paddingBottom: \"10px\" }}>\n            <div style={{ display: \"flex\" }}>\n                <div style={{ width: \"20%\", flexGrow: 1 }}>\n                    <Cell>Name</Cell>\n                </div>\n                <div style={{ width: \"10%\", ...alignRight }}>\n                    <Cell>Size</Cell>\n                </div>\n                <div style={{ width: \"10%\" }}>\n                    <Cell>Owner</Cell>\n                </div>\n                <div style={{ width: \"18%\", ...alignRight }}>\n                    <Cell>Created</Cell>\n                </div>\n                <div style={{ width: \"18%\", ...alignRight }}>\n                    <Cell>Modified</Cell>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default FileBrowserHeader;","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { DirectoryListingDetails } from \"../../messages\";\nimport * as browserActions from '../actions';\nimport FileBrowserEntry from \"./FileBrowserEntry\";\n\ninterface FileEntryProps {\n    path: string,\n    style: object,\n    details: DirectoryListingDetails,\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch, ownProps: FileEntryProps) => {\n    return {\n        select: () => dispatch(browserActions.Actions.select(ownProps.path, ownProps.details.name)),\n    };\n}\n\ntype MergedProps = FileEntryProps & ReturnType<typeof mapDispatchToProps>;\n\nclass FileEntry extends React.Component<MergedProps> {\n    public render() {\n        const { details, style, select } = this.props;\n\n        return (\n            <FileBrowserEntry onClick={select} style={style} details={details}\n                icon=\"file outline\" />\n        )\n    }\n}\n\nexport default connect(null, mapDispatchToProps)(FileEntry);","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { DirectoryListingDetails } from \"../../messages\";\nimport * as browserActions from '../actions';\nimport FileBrowserEntry from \"./FileBrowserEntry\";\n\nconst mapDispatchToProps = (dispatch: Dispatch, ownProps: FolderEntryProps) => {\n    return {\n        list: () => {\n            dispatch(browserActions.Actions.list(ownProps.path, ownProps.details.name));\n            window.setTimeout(() => ownProps.onChange(), 0);\n        },\n    };\n}\n\ninterface FolderEntryProps {\n    path: string,\n    style: object,\n    details: DirectoryListingDetails,\n    onChange: () => void,\n}\n\ntype MergedProps = FolderEntryProps & ReturnType<typeof mapDispatchToProps>;\n\nconst FolderEntry: React.SFC<MergedProps> = ({ list, details, style, onChange }) => {\n    return (\n        <FileBrowserEntry onClick={list} style={style} details={details} icon=\"folder\" />\n    )\n}\n\nexport default connect(null, mapDispatchToProps)(FolderEntry);\n","import * as React from 'react';\nimport { connect } from \"react-redux\";\nimport { Dispatch } from 'redux';\nimport { Dropdown, DropdownItemProps } from \"semantic-ui-react\";\nimport * as browserActions from '../actions';\n\nconst mapDispatchToProps = (dispatch: Dispatch, ownProps: DropdownItemProps) => {\n    return {\n        list: () => {\n            if (ownProps.value !== undefined) {\n                dispatch(browserActions.Actions.list(ownProps.value.toString()));\n                window.setTimeout(() => ownProps.onChange(), 0);\n            }\n        },\n    };\n}\n\ntype MergedProps = ReturnType<typeof mapDispatchToProps> & DropdownItemProps & {\n    onChange: () => void,\n};\n\nconst PathDropDownItem: React.SFC<MergedProps> = ({ list, ...props }) => {\n    const newProps = {\n        onClick: list,\n        ...props,\n    }\n    return <Dropdown.Item {...newProps} />;\n}\n\nexport default connect(null, mapDispatchToProps)(PathDropDownItem);","import { FormikProps, withFormik } from \"formik\";\nimport * as React from \"react\";\nimport { Form, Input } from \"semantic-ui-react\";\n\ninterface FormValues {\n    path: string,\n}\n\ninterface PathInputProps {\n    onChange: (path: string) => void,\n    initialPath: string,\n}\n\ntype MergedProps = FormikProps<FormValues> & PathInputProps;\n\nconst PathInput: React.SFC<MergedProps> = ({\n    values,\n    touched,\n    errors,\n    dirty,\n    isSubmitting,\n    handleChange,\n    handleBlur,\n    handleSubmit,\n    handleReset,\n}) => {\n    return (\n        <Form onSubmit={handleSubmit} style={{ flexGrow: 1 }}>\n            <Form.Field>\n                <Input autoComplete=\"off\" onBlur={handleBlur} onChange={handleChange} value={values.path} name=\"path\" />\n            </Form.Field>\n        </Form>\n    )\n}\n\nexport default withFormik<PathInputProps, FormValues>({\n    mapPropsToValues: ({ initialPath }) => ({\n        path: initialPath,\n    }),\n    handleSubmit: (values, formikBag) => {\n        const { onChange } = formikBag.props;\n        onChange(values.path);\n    },\n    enableReinitialize: true,\n})(PathInput);","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { Dropdown, DropdownItemProps } from \"semantic-ui-react\";\nimport { DatasetTypes } from \"../../messages\";\nimport { RootReducer } from \"../../store\";\nimport * as browserActions from '../actions';\n\n\ntype DropdownOptions = Array<{\n    text: string,\n    value: {\n        type: DatasetTypes,\n        path: string,\n    },\n}>;\n\nconst mapStateToProps = (state: RootReducer) => {\n    return {\n        lastOpened: state.config.lastOpened,\n        fileHistory: state.config.fileHistory,\n        separator: state.config.separator,\n    };\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch) => {\n    return {\n        select: (path: string) => dispatch(browserActions.Actions.selectFullPath(path)),\n    };\n}\n\ntype MergedProps = ReturnType<typeof mapStateToProps> & ReturnType<typeof mapDispatchToProps>;\n\nconst RecentFiles: React.SFC<MergedProps> = ({ lastOpened, fileHistory, select }) => {\n\n    const recentFiles: DropdownOptions = fileHistory.filter((path: string) => lastOpened[path]).map((path: string) => {\n        const item = lastOpened[path];\n        return {\n            text: item.path,\n            value: {\n                type: item.type,\n                path: item.path,\n            },\n        };\n    });\n\n    const onClick = (e: React.MouseEvent<HTMLDivElement>, data: DropdownItemProps) => data.value && select(data.value.toString())\n\n    return (\n        <Dropdown item={true} text=\"Recent\" floating={true}>\n            <Dropdown.Menu>\n                <Dropdown.Header content=\"recent datasets\" />\n                {recentFiles.map((option, idx) => (\n                    <Dropdown.Item key={idx} value={option.value.path} content={option.text} onClick={onClick} />\n                ))}\n            </Dropdown.Menu>\n        </Dropdown>\n    );\n}\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RecentFiles);","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { Dropdown, Menu } from \"semantic-ui-react\";\nimport * as browserActions from '../actions';\nimport { FSPlaces } from \"../types\";\nimport PathDropDownItem from \"./PathDropDownItem\";\nimport PathInput from \"./PathInput\";\nimport RecentFiles from \"./RecentFiles\";\n\nconst mapDispatchToProps = (dispatch: Dispatch, ownProps: PathBarProps) => {\n    return {\n        refresh: () => {\n            dispatch(browserActions.Actions.list(ownProps.currentPath));\n            window.setTimeout(() => ownProps.onChange(), 0);\n        },\n        handleInputChange: (path: string) => {\n            dispatch(browserActions.Actions.list(path));\n            window.setTimeout(() => ownProps.onChange(), 0);\n        },\n        goUp: () => {\n            dispatch(browserActions.Actions.list(ownProps.currentPath, '..'));\n            window.setTimeout(() => ownProps.onChange(), 0);\n        },\n    };\n}\n\ninterface PathBarProps {\n    currentPath: string,\n    onChange: () => void,\n    drives: string[],\n    places: FSPlaces,\n}\n\ntype MergedProps = ReturnType<typeof mapDispatchToProps> & PathBarProps;\n\nconst PathBar: React.SFC<MergedProps> = ({ currentPath, drives, places, onChange, refresh, goUp, handleInputChange }) => {\n    const driveOptions = drives.map((path) => ({ key: path, text: path }));\n    const placeOptions = Object.keys(places).map((key) => ({ key: places[key].path, text: places[key].title }))\n    return (\n        <Menu>\n            <RecentFiles />\n            <Dropdown text=\"Go to...\" floating={true} item={true}>\n                <Dropdown.Menu>\n                    <Dropdown.Header content=\"Drives\" />\n                    {driveOptions.map((option) => {\n                        return <PathDropDownItem key={option.key} value={option.key} content={option.text} onChange={onChange} />\n                    })}\n                    <Dropdown.Header content=\"Places\" />\n                    {placeOptions.map((option) => {\n                        return <PathDropDownItem key={option.key} value={option.key} content={option.text} onChange={onChange} />\n                    })}\n                </Dropdown.Menu>\n            </Dropdown>\n            <Menu.Item icon=\"arrow up\" onClick={goUp} />\n            <Menu.Item style={{ flexGrow: 1 }}>\n                <PathInput onChange={handleInputChange} initialPath={currentPath} />\n            </Menu.Item>\n            <Menu.Item icon=\"refresh\" onClick={refresh} />\n        </Menu>\n    );\n}\n\n\nexport default connect(null, mapDispatchToProps)(PathBar);","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { FixedSizeList as List } from \"react-window\";\nimport { Dispatch } from \"redux\";\nimport { Button, Header, Segment } from \"semantic-ui-react\";\nimport { DirectoryListingDetails } from \"../../messages\";\nimport { RootReducer } from \"../../store\";\nimport * as browserActions from '../actions';\nimport FileBrowserHeader from \"./FileBrowserHeader\";\nimport FileEntry from \"./FileEntry\";\nimport FolderEntry from \"./FolderEntry\";\nimport PathBar from \"./PathBar\";\n\nconst mapStateToProps = (state: RootReducer) => {\n    const { browser } = state;\n    return {\n        files: browser.files,\n        dirs: browser.dirs,\n        path: browser.path,\n        drives: browser.drives,\n        places: browser.places,\n        isLoading: browser.isLoading,\n    };\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch) => {\n    return {\n        cancel: () => dispatch(browserActions.Actions.cancel()),\n    };\n}\n\ntype MergedProps = ReturnType<typeof mapStateToProps> & ReturnType<typeof mapDispatchToProps>;\n\ninterface EntryFnArgs {\n    index: number,\n    style: object\n}\ntype EntryFn = (arg: EntryFnArgs) => void\n\nconst listRef = React.createRef<List>();\n\nconst scrollToTop = () => {\n    if (listRef.current === null) {\n        return;\n    }\n    listRef.current.scrollToItem(0);\n}\n\nfunction sortByKey<T extends object>(array: T[], getKey: (item: T) => any) {\n    return array.sort((a, b) => {\n        const x = getKey(a);\n        const y = getKey(b);\n        return ((x < y) ? -1 : ((x > y) ? 1 : 0));\n    });\n}\n\nconst FileBrowser: React.SFC<MergedProps> = ({ files, dirs, path, drives, places, cancel, isLoading }) => {\n    const getSortKey = (item: DirectoryListingDetails) => item.name.toLowerCase();\n    const dirEntries = sortByKey(dirs, getSortKey).map((dir) => (style: object) => <FolderEntry style={style} onChange={scrollToTop} path={path} details={dir} />);\n    const fileEntries = sortByKey(files, getSortKey).map((f) => ((style: object) => <FileEntry style={style} path={path} details={f} />));\n    const entries = dirEntries.concat(fileEntries);\n\n    const cellFn: EntryFn = ({ index, style }) => {\n        return entries[index](style)\n    }\n\n    let list = (\n        <List style={{ overflowY: \"scroll\" }} ref={listRef} height={300} width=\"100%\" itemCount={entries.length} itemSize={35}>\n            {cellFn}\n        </List>\n    );\n\n    if (isLoading) {\n        // FIXME: hardcoded height\n        list = (\n            <Segment loading={true} style={{ height: \"300px\" }} />\n        )\n    }\n\n    return (\n        <Segment.Group>\n            <Segment>\n                <Header as=\"h2\">Open dataset</Header>\n            </Segment>\n            <Segment>\n                <PathBar currentPath={path} drives={drives} places={places} onChange={scrollToTop} />\n            </Segment>\n            <Segment>\n                <FileBrowserHeader />\n                {list}\n            </Segment>\n            <Segment>\n                <Button onClick={cancel}>Cancel</Button>\n            </Segment>\n        </Segment.Group>\n    );\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FileBrowser);","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Button, Icon } from \"semantic-ui-react\";\nimport { RootReducer } from \"../../store\";\nimport * as browserActions from '../actions';\nimport FileBrowser from \"./FileBrowser\";\n\nexport const mapStateToProps = (state: RootReducer) => {\n    return {\n        isOpen: state.browser.isOpen,\n    }\n}\n\nexport const mapDispatchToProps = {\n    open: browserActions.Actions.open,\n}\n\ntype MergedProps = ReturnType<typeof mapStateToProps> & DispatchProps<typeof mapDispatchToProps>;\n\nconst BrowserWrapper: React.SFC<MergedProps> = ({ isOpen, open }) => {\n    if (!isOpen) {\n        return (\n            <Button icon={true} labelPosition=\"left\" onClick={open}>\n                <Icon name='add' />\n                Browse\n            </Button>\n        );\n    }\n    return (\n        <FileBrowser />\n    );\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(BrowserWrapper)","export const inRectConstraint = (width: number, height: number) => (p: Point2D) => {\n    return {\n        x: Math.max(0, Math.min(width - 1, p.x)),\n        y: Math.max(0, Math.min(height - 1, p.y)),\n    }\n}\n\nexport const dist = (cx: number, cy: number, x: number, y: number) => {\n    const dx = cx - x;\n    const dy = cy - y;\n    return Math.sqrt(dx * dx + dy * dy);\n}\n\nexport const cbToRadius = (cx: number, cy: number, cb: ((r: number) => void) | undefined) => (x: number, y: number) => cb && cb(dist(cx, cy, x, y))\n\nexport const keepOnCY = (cy: number) => (p: Point2D) => {\n    return {\n        x: p.x,\n        y: cy,\n    }\n}\n\nexport const keepXLargerThan = (otherX: number) => (p: Point2D) => {\n    return {\n        x: otherX > p.x ? otherX : p.x,\n        y: p.y,\n    }\n}\n\nexport const keepXSmallerThan = (otherX: number) => (p: Point2D) => {\n    return {\n        x: otherX < p.x ? otherX : p.x,\n        y: p.y,\n    }\n}\n\nexport const riConstraint = (outerPos: number, cy: number) => (p: Point2D) => {\n    return keepXLargerThan(outerPos)(\n        keepOnCY(cy)(p)\n    );\n}\n\nexport const roConstraints = (innerPos: number, cy: number) => (p: Point2D) => {\n    return keepXSmallerThan(innerPos)(\n        keepOnCY(cy)(p)\n    );\n}","import { CSSProperties } from \"react\";\n\nexport const defaultMaskStyles = (imageWidth: number): CSSProperties => ({\n    fillOpacity: 0.3,\n    fill: \"red\",\n    strokeOpacity: 0.7,\n    stroke: \"red\",\n    strokeWidth: imageWidth / 128 / 3,\n});","import * as React from \"react\";\nimport { defaultMaskStyles } from \"./styles\";\n\nexport interface DiskProps {\n    imageWidth: number,\n    imageHeight: number,\n    cx: number,\n    cy: number,\n    r: number,\n}\n\nconst Disk: React.SFC<DiskProps> = ({ imageWidth, imageHeight, cx, cy, r }) => {\n    return (\n        <circle cx={cx} cy={cy} r={r} style={{ ...defaultMaskStyles(imageWidth) }} />\n    );\n}\n\nexport default Disk;","export type ModifyCoords = ((x: number, y: number) => ({ x: number, y: number }));\n\n/**\n * Call this function whenever a keyboard event happens. The keyboard event is then translated\n * to a coordinate transformation, which is passed to the update callback. The update callback is\n * only called if relevant keys were pressed (example: arrow keys).\n * \n * @param e keyboard event\n * @param update a callback to handle coordinate updates\n */\nexport const handleKeyEvent = (e: React.KeyboardEvent<SVGElement>, update: (fn: ModifyCoords) => void) => {\n    let delta = 1;\n    if (e.shiftKey) {\n        delta = 10;\n    }\n    switch (e.key) {\n        case \"ArrowUp\":\n            update((x: number, y: number) => ({ x, y: y - delta }));\n            break;\n        case \"ArrowDown\":\n            update((x: number, y: number) => ({ x, y: y + delta }));\n            break;\n        case \"ArrowLeft\":\n            update((x: number, y: number) => ({ x: x - delta, y }));\n            break;\n        case \"ArrowRight\":\n            update((x: number, y: number) => ({ x: x + delta, y }));\n            break;\n        default:\n            return;\n    }\n    e.preventDefault();\n}\n","import * as React from \"react\";\nimport styled from 'styled-components';\nimport { handleKeyEvent, ModifyCoords } from \"./kbdHandler\";\n\nexport type HandleProps = {\n    x: number,\n    y: number,\n    scale: number,\n    withCross?: boolean,\n    focusRef: React.RefObject<SVGGElement>,\n} & React.SVGProps<SVGGElement>;\n\nconst StyledCircle = styled.circle`\n    stroke: red;\n    stroke-width: 1;\n    fill: transparent;\n    g:focus > & {\n        stroke: lightgreen;\n    }\n`;\n\nconst Cross = styled.path`\n    stroke: red;\n    stroke-width: 1;\n    fill: transparent;\n    g:focus > & {\n        stroke: lightgreen;\n    }\n`;\n\nconst FocusGroup = styled.g`\n    &:focus { outline: none; }\n`;\n\nconst Handle: React.SFC<HandleProps> = ({ scale, x, y, withCross, focusRef, ...args }) => {\n    const r = 3;\n    // scaleMatrix is needed to set the origin of the scale\n    const scaleMatrix = `matrix(${scale}, 0, 0, ${scale}, ${x - scale * x}, ${y - scale * y})`;\n    const style: React.CSSProperties = { transform: scaleMatrix };\n    const crossSpec = `\n        M${x - r / 2} ${y} L ${x + r / 2} ${y}\n        M${x} ${y - r / 2} L ${x} ${y + r / 2}\n    `;\n    const cross = withCross ? <Cross d={crossSpec} style={style} /> : null;\n    return (\n        <FocusGroup {...args} ref={focusRef}>\n            <StyledCircle cx={x} cy={y} r={r} style={style} />\n            {cross}\n        </FocusGroup>\n    )\n}\n\nexport interface DraggableHandleProps {\n    x: number,\n    y: number,\n    withCross?: boolean,\n    imageWidth?: number,\n    onDragMove?: (x: number, y: number) => void,\n    parentOnDragStart: (h: DraggableHandle) => void,\n    parentOnDrop: (x: number, y: number) => void,\n    onKeyboardEvent?: (e: React.KeyboardEvent<SVGElement>) => void,\n    constraint?: (p: Point2D) => Point2D,\n}\n\nexport function getScalingFactor(elem: SVGElement): number {\n    const svg = elem.ownerSVGElement;\n    if (svg === null) {\n        throw new Error(\"no owner SVG element?\");\n    }\n    const inWidthAttr = svg.getAttribute(\"width\");\n    if (inWidthAttr === null) {\n        throw new Error(\"no width on SVG element?\");\n    }\n    const inWidth = +inWidthAttr;\n    const svgMeasurements = svg.getBoundingClientRect();\n    return svgMeasurements.width / inWidth;\n}\n\nfunction relativeCoords(e: React.MouseEvent, parent: SVGElement) {\n    const f = getScalingFactor(parent);\n    const parentPos = parent.getBoundingClientRect();\n    const res = {\n        x: (e.pageX - (parentPos.left + window.pageXOffset)) / f,\n        y: (e.pageY - (parentPos.top + window.pageYOffset)) / f,\n    }\n    return res;\n}\n\n/**\n * stateful draggable handle, to be used as part of <svg/>\n */\nexport class DraggableHandle extends React.Component<DraggableHandleProps> {\n    public posRef: React.RefObject<SVGRectElement>;\n    public focusRef: React.RefObject<SVGGElement>;\n\n    public state = {\n        dragging: false,\n        drag: { x: 0, y: 0 },\n    }\n\n    constructor(props: DraggableHandleProps) {\n        super(props);\n        this.posRef = React.createRef<SVGRectElement>();\n        this.focusRef = React.createRef<SVGGElement>();\n    }\n\n    // mousemove event from outside (delegated from surrounding element)\n    public externalMouseMove = (e: React.MouseEvent<SVGElement>): void => {\n        this.move(e);\n    }\n\n    // mouseleave event from outside (delegated from surrounding element)\n    public externalLeave = (e: React.MouseEvent<SVGElement>): void => {\n        this.stopDrag(e);\n    }\n\n    // mouseup event from outside (delegated from surrounding element)\n    public externalMouseUp = (e: React.MouseEvent<SVGElement>): void => {\n        this.stopDrag(e);\n    }\n\n    public applyConstraint = (p: Point2D) => {\n        const { constraint } = this.props;\n        if (constraint) {\n            return constraint(p);\n        } else {\n            return p;\n        }\n    }\n\n    public startDrag = (e: React.MouseEvent<SVGElement>): void => {\n        e.preventDefault();\n        const { parentOnDragStart } = this.props;\n        if (this.posRef.current) {\n            this.setState({\n                dragging: true,\n                drag: this.applyConstraint(relativeCoords(e, this.posRef.current)),\n            });\n            if (parentOnDragStart) {\n                parentOnDragStart(this);\n            }\n            if (this.focusRef.current && this.focusRef.current.focus) {\n                this.focusRef.current.focus();\n            }\n        } else {\n            throw new Error(\"startDrag without posRef\");\n        }\n    }\n\n    public move = (e: React.MouseEvent<SVGElement>): void => {\n        const { onDragMove } = this.props;\n        if (!this.state.dragging) {\n            return;\n        }\n        if (this.posRef.current) {\n            this.setState({\n                drag: this.applyConstraint(relativeCoords(e, this.posRef.current)),\n            }, () => {\n                if (onDragMove) {\n                    const constrained = this.applyConstraint(this.state.drag)\n                    onDragMove(constrained.x, constrained.y);\n                }\n            })\n        } else {\n            throw new Error(\"move without posRef\");\n        }\n    }\n\n    public stopDrag = (e: React.MouseEvent<SVGElement>): void => {\n        const { parentOnDrop } = this.props;\n        const { dragging, drag } = this.state;\n        if (!dragging) {\n            return;\n        }\n        this.setState({\n            dragging: false,\n        })\n        if (parentOnDrop) {\n            parentOnDrop(drag.x, drag.y);\n        }\n    }\n\n    public handleKeyDown = (e: React.KeyboardEvent<SVGElement>) => {\n        const update = (fn: ModifyCoords) => {\n            const { x, y, onDragMove } = this.props;\n            const newCoords = fn(x, y);\n            const constrained = this.applyConstraint(newCoords);\n            if (onDragMove) {\n                onDragMove(constrained.x, constrained.y);\n            }\n        }\n        handleKeyEvent(e, update);\n    }\n\n    public renderCommon(x: number, y: number) {\n        const { imageWidth } = this.props;\n        const scale = imageWidth === undefined ? 1 : imageWidth / 128;\n        // empty zero-size <rect> as relative position reference\n        return (\n            <g>\n                <rect\n                    style={{ visibility: \"hidden\" }}\n                    ref={this.posRef}\n                    x={0} y={0} width={0} height={0}\n                />\n                <Handle scale={scale} x={x + .5} y={y + .5} withCross={this.props.withCross}\n                    focusRef={this.focusRef}\n                    onMouseUp={this.stopDrag}\n                    onMouseMove={this.move}\n                    onMouseDown={this.startDrag}\n                    onKeyDown={this.handleKeyDown}\n                    tabIndex={0}\n                />\n            </g>\n        );\n    }\n\n    public renderDragging() {\n        const { x, y } = this.state.drag;\n        return this.renderCommon(x, y);\n    }\n\n    public render() {\n        const { x, y } = this.props;\n        // either render from state (when dragging) or from props\n        if (this.state.dragging) {\n            return this.renderDragging();\n        } else {\n            return this.renderCommon(x, y);\n        }\n    }\n}\n\nexport default DraggableHandle;","import { ActionsUnion, createAction } from \"../helpers/actionHelpers\";\nimport { AnalysisParameters, AnalysisTypes } from \"../messages\";\nimport { AnalysisState, FrameMode, JobKind } from \"./types\";\n\n\nexport enum ActionTypes {\n    CREATE = 'ANALYSIS_CREATE',\n    CREATED = 'ANALYSIS_CREATED',\n    UPDATE_PARAMETERS = 'ANALYSIS_UPDATE_PARAMETERS',\n    PREPARE_RUN = 'ANALYSIS_PREPARE_RUN',\n    RUN = 'ANALYSIS_RUN',\n    RUNNING = 'ANALYSIS_RUNNING',\n    REMOVE = 'ANALYSIS_REMOVE',\n    REMOVED = 'ANALYSIS_REMOVED',\n    ERROR = 'ANALYSIS_ERROR',\n    SET_FRAMEVIEW_MODE = 'ANALYSIS_SET_FRAMEVIEW_MODE',\n}\n\nexport const Actions = {\n    create: (dataset: string, analysisType: AnalysisTypes) => createAction(ActionTypes.CREATE, { dataset, analysisType }),\n    created: (analysis: AnalysisState) => createAction(ActionTypes.CREATED, { analysis }),\n    updateParameters: (id: string, parameters: Partial<AnalysisParameters>, kind: JobKind) => createAction(ActionTypes.UPDATE_PARAMETERS, { id, kind, parameters }),\n    setFrameViewMode: (id: string, mode: FrameMode, initialParams: Partial<AnalysisParameters>) => createAction(ActionTypes.SET_FRAMEVIEW_MODE, { id, mode, initialParams }),\n    prepareRun: (id: string, kind: JobKind, job: string) => createAction(ActionTypes.PREPARE_RUN, { id, kind, job }),\n    run: (id: string, kind: JobKind) => createAction(ActionTypes.RUN, { id, kind }),\n    running: (id: string, job: string, kind: JobKind) => createAction(ActionTypes.RUNNING, { id, job, kind }),\n    remove: (id: string) => createAction(ActionTypes.REMOVE, { id }),\n    removed: (id: string) => createAction(ActionTypes.REMOVED, { id }),\n    error: (msg: string, timestamp: number, id: string) => createAction(ActionTypes.ERROR, { msg, timestamp, id }),\n}\n\nexport type Actions = ActionsUnion<typeof Actions>;\n\nexport type ActionParts = {\n    [K in keyof typeof Actions]: ReturnType<typeof Actions[K]>\n}","\nexport interface JobResultType {\n    imageURL: string,\n    description: { title: string, desc: string },\n}\n\nexport enum JobRunning {\n    CREATING = 'CREATING',\n    RUNNING = 'RUNNING',\n    DONE = 'DONE',\n}\n\nexport enum JobStatus {\n    CREATING = 'CREATING',\n    IN_PROGRESS = 'IN_PROGRESS',\n    CANCELLED = 'CANCELLED',\n    SUCCESS = 'SUCCESS',\n    ERROR = 'ERROR',\n}\n\nexport interface JobStateCommon {\n    id: string,\n    dataset: string,\n    status: JobStatus,\n    startTimestamp: number,\n    results: JobResultType[],\n}\n\nexport type JobStateStart = JobStateCommon & {\n    running: JobRunning.CREATING | JobRunning.RUNNING,\n}\n\nexport type JobStateDone = JobStateCommon & {\n    running: JobRunning.DONE,\n    endTimestamp: number,\n}\n\nexport type JobState = JobStateStart | JobStateDone;","import * as React from \"react\";\nimport { Icon } from \"semantic-ui-react\";\n\nconst BusySpinner: React.SFC = () => {\n    const styles: React.CSSProperties = {\n        margin: 0,\n        padding: 0,\n        position: \"absolute\",\n        bottom: \"10px\",\n        right: \"10px\",\n        color: \"white\",\n        opacity: 0.7,\n        filter: \"drop-shadow(0 0 3px #000)\",\n    };\n    return (\n        <Icon name=\"cog\" loading={true} style={styles} />\n    )\n}\n\nexport default BusySpinner;","import * as React from \"react\";\nimport BusySpinner from \"./BusySpinner\";\n\ninterface BusyWrapperProps {\n    busy: boolean,\n}\n\nconst BusyWrapper: React.SFC<BusyWrapperProps> = ({ children, busy }) => {\n    const styles: React.CSSProperties = {\n        position: \"relative\",\n    };\n    return (\n        <div style={styles}>\n            {children}\n            {busy && <BusySpinner />}\n        </div>\n    )\n}\n\nexport default BusyWrapper;","import * as React from \"react\";\nimport { DraggableHandle } from \"./DraggableHandle\";\nimport { HandleRenderFunction } from \"./types\";\n\nexport interface HandleParentProps {\n    width: number,\n    height: number,\n    onKeyboardEvent?: React.KeyboardEventHandler<SVGElement>,\n    handles: HandleRenderFunction[],\n}\n\nexport class HandleParent extends React.Component<HandleParentProps> {\n    public currentHandle: DraggableHandle | undefined;\n\n    public handleDragStart = (h: DraggableHandle): void => {\n        this.currentHandle = h;\n    }\n\n    public handleDrop = (): void => {\n        this.currentHandle = undefined;\n    }\n\n    public handleMouseMove = (e: React.MouseEvent<SVGElement>): void => {\n        if (this.currentHandle) {\n            return this.currentHandle.externalMouseMove(e);\n        }\n    }\n\n    public handleMouseLeave = (e: React.MouseEvent<SVGElement>): void => {\n        if (this.currentHandle) {\n            this.currentHandle.externalLeave(e);\n        }\n    }\n\n    public handleMouseUp = (e: React.MouseEvent<SVGElement>): void => {\n        if (this.currentHandle) {\n            this.currentHandle.externalMouseUp(e);\n        }\n    }\n\n    public render() {\n        const { width, height } = this.props;\n        const styles = {\n            outline: \"1px dashed black\"\n        }\n        return (\n            <g\n                onMouseMove={this.handleMouseMove}\n                onMouseLeave={this.handleMouseLeave}\n                onMouseUp={this.handleMouseUp}\n                onKeyDown={this.props.onKeyboardEvent}\n                style={styles}\n                tabIndex={0}\n            >\n                <rect style={{ fill: \"transparent\" }}\n                    x={0} y={0} width={width} height={height}\n                />\n                {this.renderHandles()}\n            </g>\n        );\n    }\n\n    public renderHandles() {\n        const { handles, onKeyboardEvent } = this.props;\n        // we need to inform the handle when there are move/up/leave events\n        // on this parent element, for which we need to know the current handle.\n        // so we pass the handle a dragstart/drop function and kindly ask it\n        // to call us if it starts to be dragged or is dropped.\n        return handles.map((h, i) => {\n            const elem = h(this.handleDragStart, this.handleDrop, onKeyboardEvent);\n            if (React.isValidElement(elem)) {\n                return React.cloneElement(elem, { key: i });\n            }\n        });\n    }\n}\n\nexport default HandleParent;","import * as React from \"react\";\nimport { JobState } from \"../types\";\nimport styles from \"./ResultImage.module.css\";\n\ninterface ResultImageProps {\n    job: JobState,\n    idx: number,\n    width: number,\n    height: number,\n}\n\nconst ResultImage: React.SFC<ResultImageProps> = ({ job, idx, width, height }) => {\n    const result = job.results[idx];\n    if (result === undefined) {\n        return (\n            <svg className={styles.fallback} width={width} height={height} viewBox={`0 0 ${width} ${height}`} key={-1} />\n        )\n    }\n    return (\n        <image className={styles.default} xlinkHref={result.imageURL} width={width} height={height} />\n    );\n}\n\nexport default ResultImage;","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport styled from 'styled-components';\nimport * as analysisActions from '../../analysis/actions';\nimport { AnalysisState, JobKind } from \"../../analysis/types\";\nimport { DatasetState } from \"../../messages\";\nimport BusyWrapper from \"../../widgets/BusyWrapper\";\nimport HandleParent from \"../../widgets/HandleParent\";\nimport { HandleRenderFunction } from \"../../widgets/types\";\nimport { JobRunning, JobState } from \"../types\";\nimport ResultImage from \"./ResultImage\";\n\ninterface ResultProps {\n    width: number,\n    height: number,\n    job: JobState,\n    dataset: DatasetState,\n    analysis: AnalysisState,\n    extraHandles?: HandleRenderFunction,\n    extraWidgets?: React.ReactElement<SVGElement>,\n    idx: number,\n    kind: JobKind,\n}\n\nconst ResultWrapper = styled.svg`\n    display: block;\n    border: 1px solid black;\n    width: 100%;\n    height: auto;\n`;\n\nconst mapDispatchToProps = {\n    updateParameters: analysisActions.Actions.updateParameters,\n};\n\ntype MergedProps = ResultProps & DispatchProps<typeof mapDispatchToProps>;\n\nclass Result extends React.Component<MergedProps> {\n    public renderHandles() {\n        const { width, height, extraHandles } = this.props;\n        let handles: HandleRenderFunction[] = [];\n        if (extraHandles) {\n            handles = [...handles, extraHandles];\n        }\n\n        return (\n            <HandleParent width={width} height={height} handles={handles} />\n        )\n    }\n\n    public render() {\n        const { job, idx, width, height, extraWidgets } = this.props;\n        const busy = job.running !== JobRunning.DONE;\n\n        return (\n            <BusyWrapper busy={busy}>\n                <ResultWrapper width={width} height={height} viewBox={`0 0 ${width} ${height}`}>\n                    <ResultImage job={job} idx={idx} width={width} height={height} />\n                    {extraWidgets}\n                    {this.renderHandles()}\n                </ResultWrapper>\n            </BusyWrapper>\n        );\n    }\n};\n\nexport default connect(null, mapDispatchToProps)(Result);","import styled from 'styled-components';\n\n\nconst Selectors = styled.div`\n    display: flex;\n    & > * {\n        margin-right: 10px;\n    }\n`;\n\n\n\nexport default Selectors;","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Dropdown, DropdownProps } from \"semantic-ui-react\";\nimport { JobKind } from \"../../analysis/types\";\nimport { AnalysisTypes } from \"../../messages\";\nimport { RootReducer } from \"../../store\";\nimport { HandleRenderFunction } from \"../../widgets/types\";\nimport { JobRunning, JobState } from \"../types\";\nimport Result from \"./Result\";\nimport Selectors from \"./Selectors\";\n\ninterface ResultListProps {\n    width: number,\n    height: number,\n    kind: JobKind,\n    selectors?: React.ReactElement<any>,\n    extraHandles?: HandleRenderFunction,\n    extraWidgets?: React.ReactElement<SVGElement>,\n}\n\ninterface ExternalResultListProps {\n    analysis: string,\n    kind: JobKind,\n}\n\nconst mapStateToProps = (state: RootReducer, ownProps: ExternalResultListProps) => {\n    const analysis = state.analyses.byId[ownProps.analysis];\n    const jobId = analysis.jobs[ownProps.kind];\n    const job = jobId ? state.jobs.byId[jobId] : undefined;\n    const ds = job ? state.datasets.byId[job.dataset] : undefined;\n    const pickCoords = (\n        (analysis.frameDetails.type === AnalysisTypes.SUM_FRAMES || ownProps.kind === \"FRAME\") ?\n            null\n            : <>Pick: x={analysis.frameDetails.parameters.x}, y={analysis.frameDetails.parameters.y} &emsp;</>\n    );\n\n    return {\n        currentJob: job,\n        jobsById: state.jobs.byId,\n        analysis,\n        dataset: ds,\n        pickCoords,\n    };\n};\n\ntype MergedProps = ResultListProps & ReturnType<typeof mapStateToProps>;\n\ninterface ResultListState {\n    selectedChannel: number,\n}\n\nclass ResultList extends React.Component<MergedProps, ResultListState> {\n    public state: ResultListState = { selectedChannel: 0 };\n\n    public selectChannel = (e: React.SyntheticEvent, data: DropdownProps) => {\n        const value = data.value as number;\n        this.setState({ selectedChannel: value });\n    }\n\n    public getJob = () => {\n        const { currentJob, analysis, jobsById, kind } = this.props;\n        if (!currentJob) {\n            return;\n        }\n        if (currentJob.results.length > 0) {\n            return currentJob;\n        }\n        const history = analysis.jobHistory[kind];\n        for (const tmpJobId of history) {\n            const tmpJob = jobsById[tmpJobId];\n            if (tmpJob.results.length > 0) {\n                return tmpJob;\n            }\n        }\n        return;\n    }\n\n    public render() {\n        const {\n            kind, selectors, analysis, dataset, children, width, height, pickCoords,\n            extraHandles, extraWidgets\n        } = this.props;\n        let msg;\n        let currentResult = (\n            // placeholder:\n            <svg style={{ display: \"block\", border: \"1px solid black\", width: \"100%\", height: \"auto\" }} width={width} height={height} viewBox={`0 0 ${width} ${height}`} key={-1} />\n        );\n        const job = this.getJob();\n        if (!job || !dataset) {\n            msg = <>&nbsp;</>;\n        } else {\n            currentResult = (\n                <Result analysis={analysis} job={job} dataset={dataset}\n                    kind={kind}\n                    extraHandles={extraHandles}\n                    extraWidgets={extraWidgets}\n                    width={width} height={height}\n                    idx={this.state.selectedChannel}\n                />\n            );\n            if (job.running === JobRunning.DONE) {\n                const dt = (job.endTimestamp - job.startTimestamp) / 1000;\n                msg = <>Analysis done in {dt.toFixed(3)}s</>;\n            } else {\n                msg = <>Analysis running...</>;\n            }\n        }\n        return (\n            <div>\n                {currentResult}\n                {children}\n                <Selectors>\n                    <ResultImageSelector job={job} handleChange={this.selectChannel} selectedImg={this.state.selectedChannel} />\n                    {selectors}\n                </Selectors>\n                <p>{pickCoords} {msg}</p>\n            </div>\n        );\n    }\n}\n\ninterface ImageSelectorProps {\n    job?: JobState,\n    handleChange: (e: React.SyntheticEvent, data: DropdownProps) => void,\n    selectedImg: number,\n}\n\nconst ResultImageSelector: React.SFC<ImageSelectorProps> = ({ job, handleChange, selectedImg }) => {\n    if (!job) {\n        return null;\n    }\n    const availableImages = job.results.map((result, idx) => ({ text: result.description.title, value: idx }));\n    return (\n        <>\n            <div>\n                Channel:{' '}\n                <Dropdown\n                    inline={true}\n                    options={availableImages}\n                    value={selectedImg}\n                    onChange={handleChange}\n                />\n            </div>\n        </>\n    )\n}\n\n\nexport default connect(mapStateToProps)(ResultList);\n","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Dropdown, DropdownProps } from \"semantic-ui-react\";\nimport { AnalysisTypes, DatasetStatus } from \"../../messages\";\nimport { RootReducer } from \"../../store\";\nimport * as analysisActions from '../actions';\nimport { AnalysisState, FrameMode } from \"../types\";\n\nconst frameViewModeOptions = [\n    {\n        text: \"Average\",\n        value: AnalysisTypes.SUM_FRAMES,\n    },\n    {\n        text: \"Pick\",\n        value: AnalysisTypes.PICK_FRAME,\n    }\n]\n\nconst mapDispatchToProps = {\n    setFrameViewMode: analysisActions.Actions.setFrameViewMode,\n}\n\nconst mapStateToProps = (state: RootReducer, ownProps: PMSProps) => {\n    const dataset = state.datasets.byId[ownProps.analysis.dataset]\n    if (dataset.status !== DatasetStatus.OPEN) {\n        throw Error(\"invalid dataset status\");\n    }\n    const shape = dataset.params.shape;\n    const scanWidth = shape[1];\n    const scanHeight = shape[0];\n    return {\n        scanWidth,\n        scanHeight,\n    }\n}\n\ninterface PMSProps {\n    analysis: AnalysisState,\n}\n\ntype MergedProps = PMSProps & DispatchProps<typeof mapDispatchToProps> & ReturnType<typeof mapStateToProps>;\n\nclass FrameViewModeSelector extends React.Component<MergedProps> {\n    public handleChange = (e: React.SyntheticEvent, data: DropdownProps) => {\n        const value = data.value as FrameMode;\n        const { analysis, scanWidth, scanHeight } = this.props;\n        let initialParams = {};\n        if (value === AnalysisTypes.PICK_FRAME) {\n            initialParams = {\n                x: Math.round(scanWidth / 2),\n                y: Math.round(scanHeight / 2),\n            }\n        }\n        this.props.setFrameViewMode(analysis.id, value, initialParams);\n    }\n\n    public render() {\n        const { analysis } = this.props;\n\n        return (\n            <>\n                <div>\n                    Mode:{' '}\n                    <Dropdown\n                        inline={true}\n                        options={frameViewModeOptions}\n                        value={analysis.frameDetails.type}\n                        onChange={this.handleChange}\n                    />\n                </div>\n            </>\n        )\n    }\n\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FrameViewModeSelector);","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport * as analysisActions from '../../analysis/actions';\nimport { AnalysisTypes } from \"../../messages\";\nimport { inRectConstraint } from \"../../widgets/constraints\";\nimport DraggableHandle from \"../../widgets/DraggableHandle\";\nimport { HandleDragStartFn, HandleDropFn } from \"../../widgets/types\";\nimport { AnalysisState } from \"../types\";\n\ninterface PickHandleProps {\n    analysis: AnalysisState,\n    width: number,\n    height: number,\n    onDragStart: HandleDragStartFn,\n    onDrop: HandleDropFn,\n}\n\nconst mapDispatchToProps = {\n    updateParameters: analysisActions.Actions.updateParameters,\n};\n\ntype MergedProps = DispatchProps<typeof mapDispatchToProps> & PickHandleProps;\n\nconst PickHandle: React.SFC<MergedProps> = ({\n    analysis,\n    width,\n    height,\n    updateParameters,\n    onDragStart,\n    onDrop,\n}) => {\n    if (analysis.frameDetails.type !== AnalysisTypes.PICK_FRAME) {\n        return null;\n    }\n    const { x, y } = analysis.frameDetails.parameters;\n    const onPickChange = (pickX: number, pickY: number) => {\n        if (analysis.frameDetails.type !== AnalysisTypes.PICK_FRAME) {\n            return;\n        }\n        const newX = Math.round(pickX);\n        const newY = Math.round(pickY);\n        if (x === newX && y === newY) {\n            return;\n        }\n        updateParameters(analysis.id, {\n            x: newX,\n            y: newY,\n        }, \"FRAME\");\n    }\n\n\n    return (\n        <DraggableHandle x={x} y={y} withCross={true}\n            imageWidth={width}\n            onDragMove={onPickChange}\n            parentOnDragStart={onDragStart}\n            parentOnDrop={onDrop}\n            constraint={inRectConstraint(width, height)} />\n    );\n}\n\nexport default connect(null, mapDispatchToProps)(PickHandle);","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { Button, Icon, IconProps, Segment } from \"semantic-ui-react\";\nimport { JobReducerState } from \"../../job/reducers\";\nimport { JobRunning } from \"../../job/types\";\nimport { RootReducer } from \"../../store\";\nimport * as analysisActions from \"../actions\";\nimport { AnalysisState } from \"../types\";\n\ninterface ToolbarProps {\n    analysis: AnalysisState,\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch, ownProps: ToolbarProps) => {\n    return {\n        handleApply: () => {\n            dispatch(analysisActions.Actions.run(ownProps.analysis.id, \"RESULT\"))\n        },\n        handleRemove: () => dispatch(analysisActions.Actions.remove(ownProps.analysis.id)),\n    }\n}\n\ntype MergedProps = ToolbarProps & ReturnType<typeof mapDispatchToProps> & ReturnType<typeof mapStateToProps>;\n\nconst Toolbar: React.SFC<MergedProps> = ({ status, handleApply, handleRemove }) => {\n    const running = status === \"busy\";\n    const applyIconProps: IconProps = running ? { name: 'cog', loading: true } : { name: 'check' }\n    return (\n        <Segment attached=\"bottom\">\n            <Button.Group>\n                <Button primary={true} onClick={handleApply} icon={true}>\n                    <Icon {...applyIconProps} />\n                    Apply\n                </Button>\n                <Button onClick={handleRemove} icon={true}>\n                    <Icon name='remove' />\n                    Remove\n                </Button>\n            </Button.Group>\n        </Segment>\n    );\n}\n\nconst getAnalysisStatus = (analysis: AnalysisState, jobs: JobReducerState): \"idle\" | \"busy\" => {\n    const jobId = analysis.jobs.RESULT;\n    if (jobId === undefined) {\n        return \"idle\";\n    }\n    const isDone = jobs.byId[jobId].running === JobRunning.DONE;\n    return isDone ? \"idle\" : \"busy\";\n}\n\nconst mapStateToProps = (state: RootReducer, ownProps: ToolbarProps) => {\n    const status = getAnalysisStatus(ownProps.analysis, state.jobs);\n    return {\n        status,\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Toolbar);","import * as React from \"react\";\nimport { Grid, Header, Icon, Segment } from \"semantic-ui-react\";\nimport ResultList from \"../../job/components/ResultList\";\nimport { DatasetOpen } from \"../../messages\";\nimport { HandleRenderFunction } from \"../../widgets/types\";\nimport { AnalysisState } from \"../types\";\nimport FrameViewModeSelector from \"./FrameViewModeSelector\";\nimport PickHandle from \"./PickHandle\";\nimport Toolbar from \"./Toolbar\";\n\ninterface AnalysisItemProps {\n    analysis: AnalysisState,\n    dataset: DatasetOpen,\n    title: string,\n    subtitle: React.ReactNode,\n    frameViewHandles?: HandleRenderFunction,\n    frameViewWidgets?: React.ReactElement<SVGElement>,\n}\n\ntype MergedProps = AnalysisItemProps;\n\nconst AnalysisItem: React.SFC<MergedProps> = ({\n    frameViewHandles, frameViewWidgets,\n    analysis, dataset, title, subtitle,\n}) => {\n    const { shape } = dataset.params;\n    const resultWidth = shape[1];\n    const resultHeight = shape[0];\n    const frameWidth = shape[3];\n    const frameHeight = shape[2];\n\n    const resultHandles: HandleRenderFunction = (handleDragStart, handleDrop) => (\n        <PickHandle\n            analysis={analysis}\n            width={resultWidth}\n            height={resultHeight}\n            onDragStart={handleDragStart}\n            onDrop={handleDrop}\n        />\n    );\n\n    return (\n        <>\n            <Header as='h3' attached=\"top\">\n                <Icon name=\"cog\" />\n                <Header.Content>{title}</Header.Content>\n            </Header>\n            <Segment attached={true}>\n                <Grid columns={2}>\n                    <Grid.Row>\n                        <Grid.Column>\n                            <ResultList\n                                extraHandles={frameViewHandles} extraWidgets={frameViewWidgets}\n                                kind=\"FRAME\"\n                                analysis={analysis.id} width={frameWidth} height={frameHeight}\n                                selectors={\n                                    <FrameViewModeSelector analysis={analysis} />\n                                } />\n                            <p>{subtitle}</p>\n                        </Grid.Column>\n                        <Grid.Column>\n                            <ResultList\n                                extraHandles={resultHandles}\n                                kind='RESULT'\n                                analysis={analysis.id} width={resultWidth} height={resultHeight}\n                            />\n                        </Grid.Column>\n                    </Grid.Row>\n                </Grid>\n            </Segment>\n            <Toolbar analysis={analysis} />\n        </>\n    )\n}\n\nexport default AnalysisItem","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { defaultDebounce } from \"../../helpers\";\nimport { CenterOfMassParams, DatasetOpen } from \"../../messages\";\nimport { cbToRadius, inRectConstraint, keepOnCY } from \"../../widgets/constraints\";\nimport Disk from \"../../widgets/Disk\";\nimport { DraggableHandle } from \"../../widgets/DraggableHandle\";\nimport { HandleRenderFunction } from \"../../widgets/types\";\nimport * as analysisActions from \"../actions\";\nimport { AnalysisState } from \"../types\";\nimport AnalysisItem from \"./AnalysisItem\";\n\ninterface AnalysisProps {\n    parameters: CenterOfMassParams,\n    analysis: AnalysisState,\n    dataset: DatasetOpen,\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch, ownProps: AnalysisProps) => {\n    return {\n        handleCenterChange: defaultDebounce((cx: number, cy: number) => {\n            dispatch(analysisActions.Actions.updateParameters(ownProps.analysis.id, { cx, cy }, \"RESULT\"));\n        }),\n        handleRChange: defaultDebounce((r: number) => {\n            dispatch(analysisActions.Actions.updateParameters(ownProps.analysis.id, { r }, \"RESULT\"));\n        }),\n    }\n}\n\n\ntype MergedProps = AnalysisProps & ReturnType<typeof mapDispatchToProps>\n\nconst CenterOfMassAnalysis: React.SFC<MergedProps> = ({ parameters, analysis, dataset, handleRChange, handleCenterChange }) => {\n    const { shape } = dataset.params;\n\n    const imageWidth = shape[3];\n    const imageHeight = shape[2];\n\n    const { cx, cy, r } = parameters;\n\n    const rHandle = {\n        x: cx - r,\n        y: cy,\n    }\n\n    const frameViewHandles: HandleRenderFunction = (handleDragStart, handleDrop) => (<>\n        <DraggableHandle x={cx} y={cy}\n            imageWidth={imageWidth}\n            onDragMove={handleCenterChange}\n            parentOnDragStart={handleDragStart}\n            parentOnDrop={handleDrop}\n            constraint={inRectConstraint(imageWidth, imageHeight)} />\n        <DraggableHandle x={rHandle.x} y={rHandle.y}\n            imageWidth={imageWidth}\n            onDragMove={cbToRadius(cx, cy, handleRChange)}\n            parentOnDragStart={handleDragStart}\n            parentOnDrop={handleDrop}\n            constraint={keepOnCY(cy)} />\n    </>);\n\n    const frameViewWidgets = (\n        <Disk cx={parameters.cx} cy={parameters.cy} r={parameters.r}\n            imageWidth={imageWidth} imageHeight={imageHeight} />\n    )\n\n    const subtitle = <>Disk: center=(x={parameters.cx.toFixed(2)}, y={parameters.cy.toFixed(2)}), r={parameters.r.toFixed(2)}</>;\n\n    return (\n        <AnalysisItem analysis={analysis} dataset={dataset}\n            title=\"COM analysis\" subtitle={subtitle}\n            frameViewHandles={frameViewHandles} frameViewWidgets={frameViewWidgets}\n        />\n    );\n}\n\nexport default connect(null, mapDispatchToProps)(CenterOfMassAnalysis);","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { defaultDebounce } from \"../../helpers\";\nimport { DatasetOpen, MaskDefDisk } from \"../../messages\";\nimport { cbToRadius, inRectConstraint, keepOnCY } from \"../../widgets/constraints\";\nimport Disk from \"../../widgets/Disk\";\nimport DraggableHandle from \"../../widgets/DraggableHandle\";\nimport { HandleRenderFunction } from \"../../widgets/types\";\nimport * as analysisActions from \"../actions\";\nimport { AnalysisState } from \"../types\";\nimport AnalysisItem from \"./AnalysisItem\";\n\ninterface AnalysisProps {\n    parameters: MaskDefDisk,\n    analysis: AnalysisState,\n    dataset: DatasetOpen,\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch, ownProps: AnalysisProps) => {\n    return {\n        handleCenterChange: defaultDebounce((cx: number, cy: number) => {\n            dispatch(analysisActions.Actions.updateParameters(ownProps.analysis.id, { cx, cy }, \"RESULT\"));\n        }),\n        handleRChange: defaultDebounce((r: number) => {\n            dispatch(analysisActions.Actions.updateParameters(ownProps.analysis.id, { r }, \"RESULT\"));\n        }),\n    }\n}\n\n\ntype MergedProps = AnalysisProps & ReturnType<typeof mapDispatchToProps>\n\nconst DiskMaskAnalysis: React.SFC<MergedProps> = ({ parameters, analysis, dataset, handleRChange, handleCenterChange }) => {\n    const { shape } = dataset.params;\n    const imageWidth = shape[3];\n    const imageHeight = shape[2];\n\n    const { cx, cy, r } = parameters;\n\n    const rHandle = {\n        x: cx - r,\n        y: cy,\n    }\n\n    const frameViewHandles: HandleRenderFunction = (handleDragStart, handleDrop) => (<>\n        <DraggableHandle x={cx} y={cy}\n            imageWidth={imageWidth}\n            onDragMove={handleCenterChange}\n            parentOnDragStart={handleDragStart}\n            parentOnDrop={handleDrop}\n            constraint={inRectConstraint(imageWidth, imageHeight)} />\n        <DraggableHandle x={rHandle.x} y={rHandle.y}\n            imageWidth={imageWidth}\n            onDragMove={cbToRadius(cx, cy, handleRChange)}\n            parentOnDragStart={handleDragStart}\n            parentOnDrop={handleDrop}\n            constraint={keepOnCY(cy)} />\n    </>);\n\n    const frameViewWidgets = (\n        <Disk cx={parameters.cx} cy={parameters.cy} r={parameters.r}\n            imageWidth={imageWidth} imageHeight={imageHeight}\n        />\n    );\n\n    const subtitle = <>Disk: center=(x={parameters.cx.toFixed(2)}, y={parameters.cy.toFixed(2)}), r={parameters.r.toFixed(2)}</>;\n\n    return (\n        <AnalysisItem analysis={analysis} dataset={dataset}\n            title=\"Disk analysis\" subtitle={subtitle}\n            frameViewHandles={frameViewHandles} frameViewWidgets={frameViewWidgets}\n        />\n    );\n}\n\nexport default connect(null, mapDispatchToProps)(DiskMaskAnalysis);","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { defaultDebounce } from \"../../helpers\";\nimport { DatasetOpen, PointDef } from \"../../messages\";\nimport { inRectConstraint } from \"../../widgets/constraints\";\nimport DraggableHandle from \"../../widgets/DraggableHandle\";\nimport { HandleRenderFunction } from \"../../widgets/types\";\nimport * as analysisActions from \"../actions\";\nimport { AnalysisState } from \"../types\";\nimport AnalysisItem from \"./AnalysisItem\";\n\ninterface AnalysisProps {\n    parameters: PointDef,\n    analysis: AnalysisState,\n    dataset: DatasetOpen,\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch, ownProps: AnalysisProps) => {\n    return {\n        handleCenterChange: defaultDebounce((cx: number, cy: number) => {\n            dispatch(analysisActions.Actions.updateParameters(ownProps.analysis.id, { cx, cy }, \"RESULT\"));\n        }),\n    }\n}\n\n\ntype MergedProps = AnalysisProps & ReturnType<typeof mapDispatchToProps>\n\nconst PointSelectionAnalysis: React.SFC<MergedProps> = ({ parameters, analysis, dataset, handleCenterChange }) => {\n    const { shape } = dataset.params;\n    const imageWidth = shape[3];\n    const imageHeight = shape[2];\n\n    const { cx, cy } = parameters;\n\n    const frameViewHandles: HandleRenderFunction = (handleDragStart, handleDrop) => (<>\n        <DraggableHandle x={cx} y={cy} withCross={true}\n            onDragMove={handleCenterChange}\n            imageWidth={imageWidth}\n            parentOnDragStart={handleDragStart}\n            parentOnDrop={handleDrop}\n            constraint={inRectConstraint(imageWidth, imageHeight)} />\n    </>);\n\n    const subtitle = (\n        <>Point: center=(x={parameters.cx.toFixed(2)}, y={parameters.cy.toFixed(2)})</>\n    )\n\n    return (\n        <AnalysisItem analysis={analysis} dataset={dataset}\n            title=\"Point analysis\" subtitle={subtitle}\n            frameViewHandles={frameViewHandles}\n        />\n    );\n}\n\nexport default connect(null, mapDispatchToProps)(PointSelectionAnalysis);","// from https://stackoverflow.com/a/45100420/540644\nexport function getPathArc(center: { x: number, y: number }, start: number, end: number, radius: number) {\n    if (end === start) { end += 360; }\n    let degree = end - start;\n    degree = degree < 0 ? (degree + 360) : degree;\n    const points = [];\n    points.push(getLocationFromAngle(start, radius, center));\n    points.push(getLocationFromAngle(start + degree / 3, radius, center));\n    points.push(getLocationFromAngle(start + degree * 2 / 3, radius, center));\n    points.push(getLocationFromAngle(end, radius, center));\n    return getCirclePath(points, radius, (degree < 180) ? 0 : 1);\n}\n\nfunction getCirclePath(points: Array<{ x: number, y: number }>, radius: number, clockWise: 0 | 1) {\n    return ['M', points[0].x, points[0].y,\n        'A', radius, radius, 0, 0, clockWise, points[1].x, points[1].y,\n        'A', radius, radius, 0, 0, clockWise, points[2].x, points[2].y,\n        'A', radius, radius, 0, 0, clockWise, points[3].x, points[3].y\n    ].join(' ');\n}\n\nfunction getLocationFromAngle(degree: number, radius: number, center: { x: number, y: number }) {\n    const radian = (degree * Math.PI) / 180;\n    return {\n        x: Math.cos(radian) * radius + center.x,\n        y: Math.sin(radian) * radius + center.y\n    }\n}\n","import * as React from \"react\";\nimport { getPathArc } from \"../helpers/svg\";\nimport { defaultMaskStyles } from \"./styles\";\n\nexport interface RingProps {\n    imageWidth: number,\n    cx: number,\n    cy: number,\n    ri: number,\n    ro: number,\n}\n\nconst Ring: React.SFC<RingProps> = ({ imageWidth, cx, cy, ri, ro }) => {\n    // see also: https://stackoverflow.com/a/37883328/540644\n    const pathSpecs = [\n        getPathArc({ x: cx, y: cy }, 90, 90, ro),\n        getPathArc({ x: cx, y: cy }, 90, 90, ri)\n    ]\n    const pathSpec = pathSpecs.join(' ');\n\n    return (\n        <path d={pathSpec} fillRule=\"evenodd\" style={{ ...defaultMaskStyles(imageWidth) }} />\n    );\n}\n\nexport default Ring;","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { defaultDebounce } from \"../../helpers\";\nimport { DatasetOpen, MaskDefRing } from \"../../messages\";\nimport { cbToRadius, inRectConstraint, riConstraint, roConstraints } from \"../../widgets/constraints\";\nimport DraggableHandle from \"../../widgets/DraggableHandle\";\nimport Ring from \"../../widgets/Ring\";\nimport { HandleRenderFunction } from \"../../widgets/types\";\nimport * as analysisActions from \"../actions\";\nimport { AnalysisState } from \"../types\";\nimport AnalysisItem from \"./AnalysisItem\";\n\ninterface AnalysisProps {\n    parameters: MaskDefRing,\n    analysis: AnalysisState,\n    dataset: DatasetOpen,\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch, ownProps: AnalysisProps) => {\n    return {\n        handleCenterChange: defaultDebounce((cx: number, cy: number) => {\n            dispatch(analysisActions.Actions.updateParameters(ownProps.analysis.id, { cx, cy }, \"RESULT\"));\n        }),\n        handleRIChange: defaultDebounce((ri: number) => {\n            dispatch(analysisActions.Actions.updateParameters(ownProps.analysis.id, { ri }, \"RESULT\"));\n        }),\n        handleROChange: defaultDebounce((ro: number) => {\n            dispatch(analysisActions.Actions.updateParameters(ownProps.analysis.id, { ro }, \"RESULT\"));\n        }),\n    }\n}\n\ntype MergedProps = AnalysisProps & ReturnType<typeof mapDispatchToProps>\n\nconst RingMaskAnalysis: React.SFC<MergedProps> = ({ analysis, dataset, parameters, handleCenterChange, handleRIChange, handleROChange }) => {\n    const { shape } = dataset.params;\n    const imageWidth = shape[3];\n    const imageHeight = shape[2];\n\n    const { cx, cy, ri, ro } = parameters;\n\n    const riHandle = {\n        x: cx - ri,\n        y: cy,\n    }\n    const roHandle = {\n        x: cx - ro,\n        y: cy,\n    }\n\n    const frameViewHandles: HandleRenderFunction = (handleDragStart, handleDrop) => (<>\n        <DraggableHandle x={cx} y={cy}\n            imageWidth={imageWidth}\n            onDragMove={handleCenterChange}\n            parentOnDrop={handleDrop}\n            parentOnDragStart={handleDragStart}\n            constraint={inRectConstraint(imageWidth, imageHeight)} />\n        <DraggableHandle x={roHandle.x} y={roHandle.y}\n            imageWidth={imageWidth}\n            onDragMove={cbToRadius(cx, cy, handleROChange)}\n            parentOnDrop={handleDrop}\n            parentOnDragStart={handleDragStart}\n            constraint={roConstraints(riHandle.x, cy)} />\n        <DraggableHandle x={riHandle.x} y={riHandle.y}\n            imageWidth={imageWidth}\n            parentOnDrop={handleDrop}\n            parentOnDragStart={handleDragStart}\n            onDragMove={cbToRadius(cx, cy, handleRIChange)}\n            constraint={riConstraint(roHandle.x, cy)} />\n    </>);\n\n    const frameViewWidgets = (\n        <Ring cx={parameters.cx} cy={parameters.cy} ri={parameters.ri} ro={parameters.ro}\n            imageWidth={imageWidth} />\n    )\n\n    const subtitle = (\n        <>Ring: center=(x={parameters.cx.toFixed(2)}, y={parameters.cy.toFixed(2)}), ri={parameters.ri.toFixed(2)}, ro={parameters.ro.toFixed(2)}</>\n    )\n\n\n    return (\n        <AnalysisItem analysis={analysis} dataset={dataset}\n            title=\"Ring analysis\" subtitle={subtitle}\n            frameViewHandles={frameViewHandles} frameViewWidgets={frameViewWidgets}\n        />\n    );\n}\n\nexport default connect(null, mapDispatchToProps)(RingMaskAnalysis);","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { assertNotReached } from '../../helpers';\nimport { AnalysisTypes, DatasetStatus } from \"../../messages\";\nimport { RootReducer } from \"../../store\";\nimport { AnalysisState } from \"../types\";\nimport CenterOfMassAnalysis from \"./CenterOfMassAnalysis\";\nimport DiskMaskAnalysis from \"./DiskMaskAnalysis\";\nimport PointSelectionAnalysis from \"./PointSelectionAnalysis\";\nimport RingMaskAnalysis from \"./RingMaskAnalysis\";\n\ninterface AnalysisProps {\n    analysis: AnalysisState,\n}\n\nconst mapStateToProps = (state: RootReducer, ownProps: AnalysisProps) => {\n    return {\n        dataset: state.datasets.byId[ownProps.analysis.dataset],\n    }\n}\n\ntype MergedProps = AnalysisProps & ReturnType<typeof mapStateToProps>;\n\nconst AnalysisComponent: React.SFC<MergedProps> = ({ analysis, dataset }) => {\n    if (dataset.status !== DatasetStatus.OPEN) {\n        return null;\n    }\n\n    switch (analysis.resultDetails.type) {\n        case AnalysisTypes.APPLY_DISK_MASK: {\n            return <DiskMaskAnalysis dataset={dataset} analysis={analysis} parameters={analysis.resultDetails.parameters} />;\n        };\n        case AnalysisTypes.APPLY_RING_MASK: {\n            return <RingMaskAnalysis dataset={dataset} analysis={analysis} parameters={analysis.resultDetails.parameters} />;\n        }\n        case AnalysisTypes.CENTER_OF_MASS: {\n            return <CenterOfMassAnalysis dataset={dataset} analysis={analysis} parameters={analysis.resultDetails.parameters} />;\n        }\n        case AnalysisTypes.APPLY_POINT_SELECTOR: {\n            return <PointSelectionAnalysis dataset={dataset} analysis={analysis} parameters={analysis.resultDetails.parameters} />\n        }\n    }\n\n    return assertNotReached(\"unknown analysis type\");\n}\n\nexport default connect(mapStateToProps)(AnalysisComponent);","import * as React from \"react\";\nimport { AnalysisReducerState } from \"../reducers\";\nimport Analysis from \"./Analysis\";\n\ninterface AnalysisProps {\n    analyses: AnalysisReducerState,\n}\n\nconst AnalysisList: React.SFC<AnalysisProps> = ({ analyses }) => {\n    return (<>{\n        analyses.ids.map(analysisId => <Analysis key={analysisId} analysis={analyses.byId[analysisId]} />)\n    }</>);\n}\n\nexport default AnalysisList;","interface IdMap<R> {\n    [s: string]: R\n}\n\nexport interface ById<R> {\n    ids: string[],\n    byId: IdMap<R>,\n};\n\n// TODO: make ById DeepReadonly\n// import { DeepReadonly } from 'utility-types'\n\nexport function updateById<R>(state: ById<R>, id: string, partialRecord: Partial<R>): ById<R> {\n    const newObj = Object.assign({}, state.byId[id], partialRecord);\n    const newById = Object.assign({}, state.byId, { [id]: newObj });\n    return Object.assign({}, state, { byId: newById });\n}\n\nexport function insertById<R>(state: ById<R>, id: string, record: R): ById<R> {\n    const newById = Object.assign({}, state.byId, { [id]: record });\n    const newIds = [...state.ids, id];\n    return { byId: newById, ids: newIds };\n}\n\nexport function constructById<R>(items: R[], key: (k: R) => string): IdMap<R> {\n    const byId = items.reduce((acc, item) => Object.assign(acc, {\n        [key(item)]: item,\n    }), {} as IdMap<R>);\n    return byId;\n}\n\nexport type Predicate<R> = (item: R) => boolean;\n\nexport function filterWithPred<R>(state: ById<R>, pred: Predicate<R>): ById<R> {\n    const ids = state.ids.filter(id => pred(state.byId[id]));\n    const byId: IdMap<R> = ids.reduce((acc, id) => Object.assign(acc, {\n        [id]: state.byId[id],\n    }), {});\n    return {\n        byId,\n        ids,\n    };\n}","import { AnalysisDetails, AnalysisTypes, PickFrameDetails, SumFramesDetails } from \"../messages\";\n\nexport type FrameMode = AnalysisTypes.PICK_FRAME | AnalysisTypes.SUM_FRAMES;\n\nexport type JobKind = \"FRAME\" | \"RESULT\";\n\nexport type AnalysisStatus = \"busy\" | \"idle\";\n\nexport type JobList = Partial<{ [K in JobKind]: string }>;\n\nexport type JobHistory = {\n    [K in JobKind]: string[]\n};\n\nexport type FrameAnalysisDetails = PickFrameDetails | SumFramesDetails;\n\nexport interface Analysis {\n    id: string,\n    dataset: string,\n    jobs: JobList,\n    jobHistory: JobHistory,\n    frameDetails: FrameAnalysisDetails,\n    resultDetails: AnalysisDetails,\n}\n\nexport type AnalysisState = Analysis & {\n};\n\ninterface AnalysisMetadataItem {\n    long: string,\n    short: string,\n    showInUI: boolean,\n}\n\nexport const AnalysisMetadata: { [s: string]: AnalysisMetadataItem } = {\n    [AnalysisTypes.APPLY_RING_MASK]: {\n        long: \"Apply a ring mask with center cx, cy; inner radius ri, outer radius ro\",\n        short: \"Ring\",\n        showInUI: true,\n    },\n    [AnalysisTypes.APPLY_DISK_MASK]: {\n        long: \"Apply a disk mask with center cx, cy; radius r\",\n        short: \"Disk\",\n        showInUI: true,\n    },\n    [AnalysisTypes.CENTER_OF_MASS]: {\n        long: \"Compute the center of mass of all diffraction images\",\n        short: \"Center of mass\",\n        showInUI: true,\n    },\n    [AnalysisTypes.APPLY_POINT_SELECTOR]: {\n        long: \"Create an image from a single pixel selected in the detector\",\n        short: \"Point selection\",\n        showInUI: true,\n    },\n    [AnalysisTypes.SUM_FRAMES]: {\n        long: \"Create a sum of all detector frames\",\n        short: \"Sum all frames\",\n        showInUI: false,\n    },\n    [AnalysisTypes.PICK_FRAME]: {\n        long: \"Pick a single frame\",\n        short: \"Pick frame\",\n        showInUI: false,\n    },\n}","import { ActionsUnion, createAction } from '../helpers/actionHelpers';\nimport { DatasetCreateParams, DatasetFormParams, DatasetState } from '../messages';\n\nexport enum ActionTypes {\n    OPEN = 'DATASET_OPEN',\n    CANCEL_OPEN = 'DATASET_CANCEL_OPEN',\n    CREATE = 'DATASET_CREATE',\n    CREATED = 'DATASET_CREATED',\n    ERROR = 'DATASET_ERROR',\n    DELETE = 'DATASET_DELETE',\n    DELETED = 'DATASET_DELETED',\n    DETECT = 'DATASET_DETECT',\n    DETECTED = 'DATASET_DETECTED',\n    DETECT_FAILED = 'DATASET_DETECT_FAILED',\n}\n\nexport const Actions = {\n    open: (path: string, initialParams?: DatasetFormParams) => createAction(ActionTypes.OPEN, { path, initialParams }),\n    cancelOpen: () => createAction(ActionTypes.CANCEL_OPEN),\n    create: (dataset: DatasetCreateParams) => createAction(ActionTypes.CREATE, { dataset }),\n    created: (dataset: DatasetState) => createAction(ActionTypes.CREATED, { dataset }),\n    error: (dataset: string, msg: string, timestamp: number, id: string) => createAction(ActionTypes.ERROR, { dataset, msg, timestamp, id }),\n    delete: (dataset: string) => createAction(ActionTypes.DELETE, { dataset }),\n    deleted: (dataset: string) => createAction(ActionTypes.DELETED, { dataset }),\n    detect: (path: string) => createAction(ActionTypes.DETECT, { path }),\n    detected: (path: string, params: DatasetFormParams) => createAction(ActionTypes.DETECTED, { path, params }),\n    detectFailed: (path: string) => createAction(ActionTypes.DETECT_FAILED, { path }),\n}\n\nexport type Actions = ActionsUnion<typeof Actions>;\n","import * as React from \"react\";\nimport { Dropdown, DropdownItemProps } from \"semantic-ui-react\";\nimport { getEnumValues } from \"../../helpers\";\nimport { AnalysisTypes } from \"../../messages\";\nimport { AnalysisMetadata } from \"../types\";\n\n\nconst getMetadata = (t: any) => AnalysisMetadata[AnalysisTypes[t]];\nconst analysisTypeKeys = getEnumValues(AnalysisTypes);\nconst analysisTypeOptions = analysisTypeKeys.filter(t => getMetadata(t).showInUI).map(t => ({\n    text: getMetadata(t).short,\n    value: AnalysisTypes[t],\n}));\n\ninterface AnalysisSelectProps {\n    onClick: (analysisType: AnalysisTypes) => void,\n    label: string,\n}\n\nconst selectData = (fn: (v: AnalysisTypes) => void) => (e: React.MouseEvent, data: DropdownItemProps) => {\n    return fn(data.value as AnalysisTypes);\n}\n\nconst AnalysisSelect: React.SFC<AnalysisSelectProps> = ({ onClick, label }) => {\n    return (\n        <Dropdown text={label} icon='add' floating={true} labeled={true} button={true} className='icon'>\n            <Dropdown.Menu>\n                <Dropdown.Header content='implemented analyses' />\n                {analysisTypeOptions.map(option => <Dropdown.Item key={option.value} onClick={selectData(onClick)} {...option} />)}\n            </Dropdown.Menu>\n        </Dropdown>\n    );\n}\n\nexport default AnalysisSelect;","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport * as analysisActions from \"../../analysis/actions\";\nimport AnalysisSelect from \"../../analysis/components/AnalysisSelect\";\nimport { AnalysisTypes, DatasetState } from \"../../messages\";\n\ninterface DatasetProps {\n    dataset: DatasetState\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch, ownProps: DatasetProps) => {\n    return {\n        handleAddAnalysis: (type: AnalysisTypes) => {\n            dispatch(analysisActions.Actions.create(ownProps.dataset.id, type));\n        },\n    }\n}\ntype MergedProps = DatasetProps & ReturnType<typeof mapDispatchToProps>;\n\nconst AddAnalysis: React.SFC<MergedProps> = ({ handleAddAnalysis }) => {\n    return <AnalysisSelect onClick={handleAddAnalysis} label='Add analysis' />\n}\n\n\nexport default connect(null, mapDispatchToProps)(AddAnalysis);","import * as React from \"react\";\nimport { Table } from \"semantic-ui-react\";\nimport { DatasetState } from \"../../messages\";\n\ninterface DatasetProps {\n    dataset: DatasetState\n}\n\nconst renderParamValue = (value: any) => {\n    if (value instanceof Array) {\n        return `(${value.join(\",\")})`;\n    } else {\n        return value;\n    }\n}\n\nconst renderParams = (params: any) => {\n    return Object.keys(params).map((key: string, idx: number) => {\n        return (\n            <Table.Row key={idx}>\n                <Table.Cell>{key}</Table.Cell>\n                <Table.Cell>{renderParamValue(params[key])}</Table.Cell>\n            </Table.Row>\n        );\n    })\n}\n\n\nconst DatasetParams: React.SFC<DatasetProps> = ({ dataset }) => {\n    return (\n        <Table>\n            <Table.Header>\n                <Table.Row>\n                    <Table.HeaderCell>Parameter</Table.HeaderCell>\n                    <Table.HeaderCell>Value</Table.HeaderCell>\n                </Table.Row>\n            </Table.Header>\n            <Table.Body>\n                {renderParams(dataset.params)}\n            </Table.Body>\n        </Table>\n    );\n}\n\n\nexport default DatasetParams;","import * as React from \"react\";\nimport { Table } from \"semantic-ui-react\";\nimport { DatasetOpen, DiagElemMsg } from \"../../messages\";\nimport DatasetParams from \"./DatasetParams\";\n\ninterface DatasetInfoProps {\n    dataset: DatasetOpen,\n}\n\nconst renderValue = (elem: DiagElemMsg) => {\n    if (elem.value instanceof Array) {\n        return <DiagElems diagnostics={elem.value} />\n    } else {\n        return elem.value;\n    }\n}\n\nconst DiagElem: React.SFC<{ elem: DiagElemMsg }> = ({ elem }) => {\n    return (\n        <Table.Row>\n            <Table.Cell>{elem.name}</Table.Cell>\n            <Table.Cell>{renderValue(elem)}</Table.Cell>\n        </Table.Row>\n    )\n}\n\nconst DiagElems: React.SFC<{ diagnostics: DiagElemMsg[] }> = ({ diagnostics }) => {\n    if (diagnostics.length === 0) {\n        return null;\n    }\n    return (\n        <Table>\n            <Table.Header>\n                <Table.Row>\n                    <Table.HeaderCell>Name</Table.HeaderCell>\n                    <Table.HeaderCell>Value</Table.HeaderCell>\n                </Table.Row>\n            </Table.Header>\n            <Table.Body>\n                {diagnostics.map((elem, idx) => (\n                    <DiagElem elem={elem} key={idx} />\n                ))}\n            </Table.Body>\n        </Table>\n    );\n}\n\nconst DatasetInfo: React.SFC<DatasetInfoProps> = ({ dataset }) => {\n    return (\n        <>\n            <DatasetParams dataset={dataset} />\n            <DiagElems diagnostics={dataset.diagnostics} />\n        </>\n    );\n}\n\nexport default DatasetInfo;","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { Button } from \"semantic-ui-react\";\nimport { DatasetState } from \"../../messages\";\nimport * as datasetActions from \"../actions\";\n\ninterface DatasetProps {\n    dataset: DatasetState,\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch, ownProps: DatasetProps) => {\n    return {\n        handleRemoveDataset: () => {\n            dispatch(datasetActions.Actions.delete(ownProps.dataset.id));\n        }\n    }\n}\n\ntype MergedProps = DatasetProps & ReturnType<typeof mapDispatchToProps>;\n\nconst DatasetToolbar: React.SFC<MergedProps> = ({ dataset, handleRemoveDataset }) => {\n    return (\n        <>\n            <Button icon=\"remove\" labelPosition=\"left\" onClick={handleRemoveDataset} content='Close Dataset' />\n        </>\n    );\n}\n\n\nexport default connect(null, mapDispatchToProps)(DatasetToolbar);","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Header, Icon, Message, Modal, Popup, Segment } from 'semantic-ui-react';\nimport AnalysisList from \"../../analysis/components/AnalysisList\";\nimport { AnalysisState } from \"../../analysis/types\";\nimport { filterWithPred } from \"../../helpers/reducerHelpers\";\nimport { DatasetState, DatasetStatus } from \"../../messages\";\nimport { RootReducer } from \"../../store\";\nimport AddAnalysis from \"./AddAnalysis\";\nimport DatasetInfo from \"./DatasetInfo\";\nimport DatasetToolbar from \"./DatasetToolbar\";\n\ninterface DatasetProps {\n    dataset: DatasetState\n}\n\nconst mapStateToProps = (state: RootReducer, ownProps: DatasetProps) => {\n    const p = (analysis: AnalysisState) => analysis.dataset === ownProps.dataset.id;\n    return {\n        analyses: filterWithPred(state.analyses, p),\n    }\n}\n\ntype MergedProps = DatasetProps & ReturnType<typeof mapStateToProps>;\n\nconst DatasetComponent: React.SFC<MergedProps> = ({ dataset, analyses }) => {\n    const msg = {\n        [DatasetStatus.OPENING]: `Opening dataset ${dataset.params.name}`,\n        [DatasetStatus.DELETING]: `Closing dataset ${dataset.params.name}`,\n    }\n    if (dataset.status === DatasetStatus.OPENING || dataset.status === DatasetStatus.DELETING) {\n        return (\n            <>\n                <Header as=\"h2\" dividing={true}>{dataset.params.name}</Header>\n                <Message icon={true}>\n                    <Icon name='cog' loading={true} />\n                    <Message.Content>\n                        <Message.Header>{msg[dataset.status]}</Message.Header>\n                    </Message.Content>\n                </Message>\n            </>\n        );\n    }\n\n    return (\n        <Segment.Group style={{ marginTop: \"3em\", marginBottom: \"3em\" }}>\n            <Segment.Group horizontal={true}>\n                <Segment>\n                    <Header as=\"h2\">\n                        <Icon name=\"database\" />\n                        <Modal trigger={\n                            <Header.Content>\n                                {dataset.params.name}\n                                {' '}\n                                <Icon name=\"info circle\" size=\"small\" link={true} />\n                            </Header.Content>\n                        }>\n                            <Popup.Header>{dataset.params.type} Dataset {dataset.params.name}</Popup.Header>\n                            <Popup.Content>\n                                <DatasetInfo dataset={dataset} />\n                            </Popup.Content>\n                        </Modal>\n                    </Header>\n                </Segment>\n                <Segment style={{ flexShrink: 1, flexGrow: 0 }}>\n                    <DatasetToolbar dataset={dataset} />\n                </Segment>\n            </Segment.Group>\n            {\n                analyses.ids.length > 0 ? (\n                    <>\n                        <Segment>\n                            <AnalysisList analyses={analyses} />\n                        </Segment>\n                    </>\n                ) : null\n            }\n            <Segment textAlign=\"center\">\n                <AddAnalysis dataset={dataset} />\n            </Segment>\n        </Segment.Group>\n    );\n}\n\nconst DatasetContainer = connect(mapStateToProps)(DatasetComponent);\n\nexport default DatasetContainer;","\nexport function parseNumList(nums: string) {\n    return nums.split(\",\").map(part => +part);\n}\n\nexport function getInitial<T extends object, K extends keyof T>(key: K, otherwise: string, values?: T): string {\n    if (!values) {\n        return otherwise;\n    }\n    return (values[key] ? values[key] : otherwise).toString();\n}","import { FormikProps, withFormik } from \"formik\";\nimport * as React from \"react\";\nimport { Button, Form } from \"semantic-ui-react\";\nimport { Omit } from \"../../helpers/types\";\nimport { DatasetParamsBLO, DatasetTypes } from \"../../messages\";\nimport { getInitial, parseNumList } from \"../helpers\";\nimport { OpenFormProps } from \"../types\";\n\n// some fields have different types in the form vs. in messages\ntype DatasetParamsBLOForForm = Omit<DatasetParamsBLO,\n    \"path\"\n    | \"type\"\n    | \"tileshape\"> & {\n        tileshape: string,\n    };\n\ntype FormValues = DatasetParamsBLOForForm\n\n\ntype MergedProps = FormikProps<FormValues> & OpenFormProps<DatasetParamsBLO>;\n\nconst BLOFileParamsForm: React.SFC<MergedProps> = ({\n    values,\n    touched,\n    errors,\n    dirty,\n    isSubmitting,\n    handleChange,\n    handleBlur,\n    handleSubmit,\n    handleReset,\n    onCancel,\n}) => {\n    return (\n        <Form onSubmit={handleSubmit}>\n            <Form.Field>\n                <label htmlFor=\"name\">Name:</label>\n                <input type=\"text\" name=\"name\" value={values.name}\n                    onChange={handleChange}\n                    onBlur={handleBlur} />\n                {errors.name && touched.name && errors.name}\n            </Form.Field>\n            <Form.Field>\n                <label htmlFor=\"tileshape\">Tileshape:</label>\n                <input type=\"text\" name=\"tileshape\" value={values.tileshape}\n                    onChange={handleChange} onBlur={handleBlur} />\n            </Form.Field>\n\n            <Button primary={true} type=\"submit\" disabled={isSubmitting}>Load Dataset</Button>\n            <Button type=\"button\" onClick={onCancel}>Cancel</Button>\n        </Form>\n    )\n}\n\nexport default withFormik<OpenFormProps<DatasetParamsBLO>, FormValues>({\n    mapPropsToValues: ({ initial }) => ({\n        name: getInitial(\"name\", \"\", initial),\n        tileshape: getInitial(\"tileshape\", \"1, 8, 128, 128\", initial),\n    }),\n    handleSubmit: (values, formikBag) => {\n        const { onSubmit, path } = formikBag.props;\n        onSubmit({\n            path,\n            type: DatasetTypes.BLO,\n            name: values.name,\n            tileshape: parseNumList(values.tileshape),\n        });\n    }\n})(BLOFileParamsForm);\n","import { ActionsUnion, createAction } from \"../helpers/actionHelpers\";\n\nexport enum ActionTypes {\n    DISMISS = \"ERROR_DISMISS\",\n}\n\nexport const Actions = {\n    dismiss: (id: string) => createAction(ActionTypes.DISMISS, { id }),\n}\n\nexport type Actions = ActionsUnion<typeof Actions>;","import * as React from \"react\";\nimport { Dropdown, DropdownProps } from \"semantic-ui-react\";\nimport { getEnumValues } from \"../../helpers\";\nimport { DatasetTypes } from \"../../messages\";\n\n\nconst datasetTypeKeys = getEnumValues(DatasetTypes);\nconst datasetTypeOptions = datasetTypeKeys.map(t => ({\n    // text: DatasetTypeMetadata[DatasetTypes[t as any]].short,\n    text: DatasetTypes[t],\n    value: DatasetTypes[t],\n}));\n\ninterface DatasetTypeSelectProps {\n    onClick: (e: React.SyntheticEvent, data: DropdownProps) => void,\n    currentType: DatasetTypes,\n}\n\nconst DatasetTypeSelect: React.SFC<DatasetTypeSelectProps> = ({ currentType, onClick }) => {\n    return (\n        <>\n            <Dropdown\n                inline={true}\n                options={datasetTypeOptions}\n                value={currentType}\n                onChange={onClick}\n            />\n        </>\n    );\n}\n\nexport default DatasetTypeSelect;","import { DatasetParamsFRMS6 } from \"../../messages\";\n\nimport { FormikProps, withFormik } from \"formik\";\nimport * as React from \"react\";\nimport { Button, Form } from \"semantic-ui-react\";\nimport { Omit } from \"../../helpers/types\";\nimport { DatasetTypes } from \"../../messages\";\nimport { getInitial } from \"../helpers\";\nimport { OpenFormProps } from \"../types\";\n\n// some fields have different types in the form vs. in messages\ntype DatasetParamsFRMS6ForForm = Omit<DatasetParamsFRMS6,\n    \"path\" | \"type\">;\n\ntype FormValues = DatasetParamsFRMS6ForForm\n\n\ntype MergedProps = FormikProps<FormValues> & OpenFormProps<DatasetParamsFRMS6>;\nconst FRMS6ParamsForm: React.SFC<MergedProps> = ({\n    values,\n    touched,\n    errors,\n    dirty,\n    isSubmitting,\n    handleChange,\n    handleBlur,\n    handleSubmit,\n    handleReset,\n    onCancel,\n}) => {\n    return (\n        <Form onSubmit={handleSubmit}>\n            <Form.Field>\n                <label htmlFor=\"name\">Name:</label>\n                <input type=\"text\" name=\"name\" value={values.name}\n                    onChange={handleChange}\n                    onBlur={handleBlur} />\n                {errors.name && touched.name && errors.name}\n            </Form.Field>\n\n            <Button primary={true} type=\"submit\" disabled={isSubmitting}>Load Dataset</Button>\n            <Button type=\"button\" onClick={onCancel}>Cancel</Button>\n        </Form>\n    )\n}\n\nexport default withFormik<OpenFormProps<DatasetParamsFRMS6>, FormValues>({\n    mapPropsToValues: ({ initial }) => ({\n        name: getInitial(\"name\", \"\", initial),\n    }),\n    handleSubmit: (values, formikBag) => {\n        const { onSubmit, path } = formikBag.props;\n        onSubmit({\n            path,\n            type: DatasetTypes.FRMS6,\n            name: values.name,\n        });\n    }\n})(FRMS6ParamsForm);\n","import { FormikProps, withFormik } from \"formik\";\nimport * as React from \"react\";\nimport { Button, Form } from \"semantic-ui-react\";\nimport { Omit } from \"../../helpers/types\";\nimport { DatasetParamsHDF5, DatasetTypes } from \"../../messages\";\nimport { getInitial } from \"../helpers\";\nimport { OpenFormProps } from \"../types\";\n\ntype DatasetParamsHDF5ForForm = Omit<DatasetParamsHDF5, \"path\" | \"type\" | \"tileshape\"> & { tileshape: string, };\n\ntype FormValues = DatasetParamsHDF5ForForm\n\ntype MergedProps = FormikProps<FormValues> & OpenFormProps<DatasetParamsHDF5>;\n\nconst HDF5ParamsForm: React.SFC<MergedProps> = ({\n    values,\n    touched,\n    errors,\n    dirty,\n    isSubmitting,\n    handleChange,\n    handleBlur,\n    handleSubmit,\n    handleReset,\n    onCancel,\n}) => {\n    return (\n        <Form onSubmit={handleSubmit}>\n            <Form.Field>\n                <label htmlFor=\"name\">Name:</label>\n                <input type=\"text\" name=\"name\" value={values.name}\n                    onChange={handleChange}\n                    onBlur={handleBlur} />\n                {errors.name && touched.name && errors.name}\n            </Form.Field>\n            <Form.Field>\n                <label htmlFor=\"ds_path\">HDF5 Dataset Path:</label>\n                <input type=\"text\" name=\"ds_path\" value={values.ds_path}\n                    onChange={handleChange} onBlur={handleBlur} />\n            </Form.Field>\n            <Form.Field>\n                <label htmlFor=\"tileshape\">Tileshape:</label>\n                <input type=\"text\" name=\"tileshape\" value={values.tileshape}\n                    onChange={handleChange} onBlur={handleBlur} />\n            </Form.Field>\n            <Button primary={true} type=\"submit\" disabled={isSubmitting}>Load Dataset</Button>\n            <Button onClick={onCancel} >Cancel</Button>\n        </Form>\n    )\n}\n\nexport default withFormik<OpenFormProps<DatasetParamsHDF5>, FormValues>({\n    mapPropsToValues: ({ initial }) => ({\n        name: getInitial(\"name\", \"\", initial),\n        tileshape: getInitial(\"tileshape\", \"1, 8, 128, 128\", initial),\n        ds_path: getInitial(\"ds_path\", \"\", initial),\n    }),\n    handleSubmit: (values, formikBag) => {\n        const { onSubmit, path } = formikBag.props;\n        onSubmit({\n            path,\n            type: DatasetTypes.HDF5,\n            name: values.name,\n            ds_path: values.ds_path,\n            tileshape: values.tileshape.split(\",\").map(part => +part),\n        });\n    }\n})(HDF5ParamsForm);","import { FormikProps, withFormik } from \"formik\";\nimport * as React from \"react\";\nimport { Button, Form } from \"semantic-ui-react\";\nimport { Omit } from \"../../helpers/types\";\nimport { DatasetParamsHDFS, DatasetTypes } from \"../../messages\";\nimport { getInitial } from \"../helpers\";\nimport { OpenFormProps } from \"../types\";\n\ntype RawDatasetParamsHDFS = Omit<DatasetParamsHDFS, \"path\" | \"type\" | \"tileshape\"> & {\n    tileshape: string,\n};\n\ntype FormValues = RawDatasetParamsHDFS\n\ntype MergedProps = FormikProps<FormValues> & OpenFormProps<DatasetParamsHDFS>;\n\nconst HDFSParamsForm: React.SFC<MergedProps> = ({\n    values,\n    touched,\n    errors,\n    dirty,\n    isSubmitting,\n    handleChange,\n    handleBlur,\n    handleSubmit,\n    handleReset,\n    onCancel,\n}) => {\n    return (\n        <Form onSubmit={handleSubmit}>\n            <Form.Field>\n                <label htmlFor=\"name\">Name:</label>\n                <input type=\"text\" name=\"name\" value={values.name}\n                    onChange={handleChange}\n                    onBlur={handleBlur} />\n                {errors.name && touched.name && errors.name}\n            </Form.Field>\n            <Form.Field>\n                <label htmlFor=\"tileshape\">Tileshape:</label>\n                <input type=\"text\" name=\"tileshape\" value={values.tileshape}\n                    onChange={handleChange} onBlur={handleBlur} />\n            </Form.Field>\n            <Button primary={true} type=\"submit\" disabled={isSubmitting}>Load Dataset</Button>\n            <Button type=\"button\" onClick={onCancel}>Cancel</Button>\n        </Form>\n    )\n}\n\nexport default withFormik<OpenFormProps<DatasetParamsHDFS>, FormValues>({\n    mapPropsToValues: ({ initial }) => ({\n        name: getInitial(\"name\", \"\", initial),\n        tileshape: getInitial(\"tileshape\", \"1, 8, 128, 128\", initial),\n    }),\n    handleSubmit: (values, formikBag) => {\n        const { onSubmit, path } = formikBag.props;\n        onSubmit({\n            path,\n            type: DatasetTypes.HDFS,\n            name: values.name,\n            tileshape: values.tileshape.split(\",\").map(part => +part),\n        });\n    }\n})(HDFSParamsForm);","import { FormikProps, withFormik } from \"formik\";\nimport * as React from \"react\";\nimport { Button, Form } from \"semantic-ui-react\";\nimport { Omit } from \"../../helpers/types\";\nimport { DatasetParamsK2IS, DatasetTypes } from \"../../messages\";\nimport { getInitial } from \"../helpers\";\nimport { OpenFormProps } from \"../types\";\n\n// some fields have different types in the form vs. in messages\ntype DatasetParamsK2ISForForm = Omit<DatasetParamsK2IS,\n    \"path\" | \"type\">;\n\ntype FormValues = DatasetParamsK2ISForForm\n\n\ntype MergedProps = FormikProps<FormValues> & OpenFormProps<DatasetParamsK2IS>;\n\nconst K2ISFileParamsForm: React.SFC<MergedProps> = ({\n    values,\n    touched,\n    errors,\n    dirty,\n    isSubmitting,\n    handleChange,\n    handleBlur,\n    handleSubmit,\n    handleReset,\n    onCancel,\n}) => {\n    return (\n        <Form onSubmit={handleSubmit}>\n            <Form.Field>\n                <label htmlFor=\"name\">Name:</label>\n                <input type=\"text\" name=\"name\" value={values.name}\n                    onChange={handleChange}\n                    onBlur={handleBlur} />\n                {errors.name && touched.name && errors.name}\n            </Form.Field>\n\n            <Button primary={true} type=\"submit\" disabled={isSubmitting}>Load Dataset</Button>\n            <Button type=\"button\" onClick={onCancel}>Cancel</Button>\n        </Form>\n    )\n}\n\nexport default withFormik<OpenFormProps<DatasetParamsK2IS>, FormValues>({\n    mapPropsToValues: ({ initial }) => ({\n        name: getInitial(\"name\", \"\", initial),\n    }),\n    handleSubmit: (values, formikBag) => {\n        const { onSubmit, path } = formikBag.props;\n        onSubmit({\n            path,\n            type: DatasetTypes.K2IS,\n            name: values.name,\n        });\n    }\n})(K2ISFileParamsForm);\n\n","import { FormikProps, withFormik } from \"formik\";\nimport * as React from \"react\";\nimport { Button, Form } from \"semantic-ui-react\";\nimport { Omit } from \"../../helpers/types\";\nimport { DatasetParamsMIB, DatasetTypes } from \"../../messages\";\nimport { getInitial, parseNumList } from \"../helpers\";\nimport { OpenFormProps } from \"../types\";\n\n// some fields have different types in the form vs. in messages\ntype DatasetParamsMIBForForm = Omit<DatasetParamsMIB,\n    \"path\"\n    | \"type\"\n    | \"tileshape\"\n    | \"scan_size\"\n> & {\n    tileshape: string,\n    scan_size: string,\n};\n\ntype FormValues = DatasetParamsMIBForForm\n\ntype MergedProps = FormikProps<FormValues> & OpenFormProps<DatasetParamsMIB>;\n\nconst RawFileParamsForm: React.SFC<MergedProps> = ({\n    values,\n    touched,\n    errors,\n    dirty,\n    isSubmitting,\n    handleChange,\n    handleBlur,\n    handleSubmit,\n    handleReset,\n    onCancel,\n}) => {\n    return (\n        <Form onSubmit={handleSubmit}>\n            <Form.Field>\n                <label htmlFor=\"name\">Name:</label>\n                <input type=\"text\" name=\"name\" value={values.name}\n                    onChange={handleChange}\n                    onBlur={handleBlur} />\n                {errors.name && touched.name && errors.name}\n            </Form.Field>\n            <Form.Field>\n                <label htmlFor=\"tileshape\">Tileshape:</label>\n                <input type=\"text\" name=\"tileshape\" value={values.tileshape}\n                    onChange={handleChange} onBlur={handleBlur} />\n            </Form.Field>\n            <Form.Field>\n                <label htmlFor=\"scan_size\">Scan Size:</label>\n                <input type=\"text\" name=\"scan_size\" value={values.scan_size}\n                    onChange={handleChange} onBlur={handleBlur} />\n            </Form.Field>\n            <Button primary={true} type=\"submit\" disabled={isSubmitting}>Load Dataset</Button>\n            <Button type=\"button\" onClick={onCancel}>Cancel</Button>\n        </Form>\n    )\n}\n\nexport default withFormik<OpenFormProps<DatasetParamsMIB>, FormValues>({\n    mapPropsToValues: ({ initial }) => ({\n        name: getInitial(\"name\", \"\", initial),\n        tileshape: getInitial(\"tileshape\", \"1, 8, 256, 256\", initial),\n        scan_size: getInitial(\"scan_size\", \"256, 256\", initial),\n    }),\n    handleSubmit: (values, formikBag) => {\n        const { onSubmit, path } = formikBag.props;\n        onSubmit({\n            path,\n            type: DatasetTypes.MIB,\n            name: values.name,\n            tileshape: parseNumList(values.tileshape),\n            scan_size: parseNumList(values.scan_size),\n        });\n    }\n})(RawFileParamsForm);\n","import { FormikProps, withFormik } from \"formik\";\nimport * as React from \"react\";\nimport { Button, Form } from \"semantic-ui-react\";\nimport { Omit } from \"../../helpers/types\";\nimport { DatasetParamsRaw, DatasetTypes } from \"../../messages\";\nimport { getInitial, parseNumList } from \"../helpers\";\nimport { OpenFormProps } from \"../types\";\n\n// some fields have different types in the form vs. in messages\ntype DatasetParamsRawForForm = Omit<DatasetParamsRaw,\n    \"type\"\n    | \"tileshape\"\n    | \"path\"\n    | \"scan_size\"\n    | \"detector_size_raw\"\n    | \"crop_detector_to\"> & {\n        tileshape: string,\n        scan_size: string\n        detector_size_raw: string,\n        crop_detector_to: string,\n    };\n\ntype FormValues = DatasetParamsRawForForm\n\ntype MergedProps = FormikProps<FormValues> & OpenFormProps<DatasetParamsRaw>;\n\nconst RawFileParamsForm: React.SFC<MergedProps> = ({\n    values,\n    touched,\n    errors,\n    dirty,\n    isSubmitting,\n    handleChange,\n    handleBlur,\n    handleSubmit,\n    handleReset,\n    onCancel,\n}) => {\n    return (\n        <Form onSubmit={handleSubmit}>\n            <Form.Field>\n                <label htmlFor=\"name\">Name:</label>\n                <input type=\"text\" name=\"name\" value={values.name}\n                    onChange={handleChange}\n                    onBlur={handleBlur} />\n                {errors.name && touched.name && errors.name}\n            </Form.Field>\n            <Form.Field>\n                <label htmlFor=\"tileshape\">Tileshape:</label>\n                <input type=\"text\" name=\"tileshape\" value={values.tileshape}\n                    onChange={handleChange} onBlur={handleBlur} />\n            </Form.Field>\n            <Form.Field>\n                <label htmlFor=\"scan_size\">Scan Size:</label>\n                <input type=\"text\" name=\"scan_size\" value={values.scan_size}\n                    onChange={handleChange} onBlur={handleBlur} />\n            </Form.Field>\n            <Form.Field>\n                <label htmlFor=\"dtype\">Datatype (uint16, uint32, float32, float64, &gt;u2, ..., can be anything that is <a href=\"https://docs.scipy.org/doc/numpy-1.15.1/reference/arrays.dtypes.html\">understood by numpy as a dtype</a>):</label>\n                <input type=\"text\" name=\"dtype\" value={values.dtype}\n                    onChange={handleChange} onBlur={handleBlur} />\n            </Form.Field>\n\n            <Form.Field>\n                <label htmlFor=\"detector_size_raw\">Detector Size (as in the file):</label>\n                <input type=\"text\" name=\"detector_size_raw\" value={values.detector_size_raw}\n                    onChange={handleChange} onBlur={handleBlur} />\n            </Form.Field>\n            <Form.Field>\n                <label htmlFor=\"crop_detector_to\">Detector Size Crop:</label>\n                <input type=\"text\" name=\"crop_detector_to\" value={values.crop_detector_to}\n                    onChange={handleChange} onBlur={handleBlur} />\n            </Form.Field>\n            <Button primary={true} type=\"submit\" disabled={isSubmitting}>Load Dataset</Button>\n            <Button type=\"button\" onClick={onCancel}>Cancel</Button>\n        </Form>\n    )\n}\n\nexport default withFormik<OpenFormProps<DatasetParamsRaw>, FormValues>({\n    mapPropsToValues: ({ initial }) => ({\n        name: getInitial(\"name\", \"\", initial),\n        tileshape: getInitial(\"tileshape\", \"1, 8, 128, 128\", initial),\n        detector_size_raw: getInitial(\"detector_size_raw\", \"130, 128\", initial),\n        crop_detector_to: getInitial(\"crop_detector_to\", \"128, 128\", initial),\n        scan_size: getInitial(\"scan_size\", \"256, 256\", initial),\n        dtype: getInitial(\"dtype\", \"float32\", initial),\n    }),\n    handleSubmit: (values, formikBag) => {\n        const { onSubmit, path } = formikBag.props;\n        onSubmit({\n            path,\n            type: DatasetTypes.RAW,\n            name: values.name,\n            dtype: values.dtype,\n            tileshape: parseNumList(values.tileshape),\n            scan_size: parseNumList(values.scan_size),\n            detector_size_raw: parseNumList(values.detector_size_raw),\n            crop_detector_to: parseNumList(values.crop_detector_to),\n        });\n    }\n})(RawFileParamsForm);\n","import { DatasetParamsSER } from \"../../messages\";\n\nimport { FormikProps, withFormik } from \"formik\";\nimport * as React from \"react\";\nimport { Button, Form } from \"semantic-ui-react\";\nimport { Omit } from \"../../helpers/types\";\nimport { DatasetTypes } from \"../../messages\";\nimport { getInitial } from \"../helpers\";\nimport { OpenFormProps } from \"../types\";\n\n// some fields have different types in the form vs. in messages\ntype DatasetParamsSERForForm = Omit<DatasetParamsSER,\n    \"path\" | \"type\">;\n\ntype FormValues = DatasetParamsSERForForm\n\n\ntype MergedProps = FormikProps<FormValues> & OpenFormProps<DatasetParamsSER>;\nconst SERParamsForm: React.SFC<MergedProps> = ({\n    values,\n    touched,\n    errors,\n    dirty,\n    isSubmitting,\n    handleChange,\n    handleBlur,\n    handleSubmit,\n    handleReset,\n    onCancel,\n}) => {\n    return (\n        <Form onSubmit={handleSubmit}>\n            <Form.Field>\n                <label htmlFor=\"name\">Name:</label>\n                <input type=\"text\" name=\"name\" value={values.name}\n                    onChange={handleChange}\n                    onBlur={handleBlur} />\n                {errors.name && touched.name && errors.name}\n            </Form.Field>\n\n            <Button primary={true} type=\"submit\" disabled={isSubmitting}>Load Dataset</Button>\n            <Button type=\"button\" onClick={onCancel}>Cancel</Button>\n        </Form>\n    )\n}\n\nexport default withFormik<OpenFormProps<DatasetParamsSER>, FormValues>({\n    mapPropsToValues: ({ initial }) => ({\n        name: getInitial(\"name\", \"\", initial),\n    }),\n    handleSubmit: (values, formikBag) => {\n        const { onSubmit, path } = formikBag.props;\n        onSubmit({\n            path,\n            type: DatasetTypes.SER,\n            name: values.name,\n        });\n    }\n})(SERParamsForm);","import * as React from \"react\";\nimport { connect } from 'react-redux';\nimport { Dispatch } from \"redux\";\nimport { DropdownProps, Header, Segment } from \"semantic-ui-react\";\nimport uuid from \"uuid/v4\";\nimport { assertNotReached } from \"../../helpers\";\nimport { DatasetFormParams, DatasetTypes } from '../../messages';\nimport { RootReducer } from \"../../store\";\nimport * as datasetActions from \"../actions\";\nimport BLOParamsForm from \"./BLOParamsForm\";\nimport DatasetTypeSelect from \"./DatasetTypeSelect\";\nimport FRMS6ParamsForm from \"./FRMS6ParamsForm\";\nimport HDF5ParamsForm from \"./HDF5ParamsForm\";\nimport HDFSParamsForm from './HDFSParamsForm';\nimport K2ISParamsForm from \"./K2ISParamsForm\";\nimport MIBParamsForm from \"./MIBParamsForm\";\nimport RawFileParamsForm from \"./RawFileParamsForm\";\nimport SERParamsForm from \"./SERParamsForm\";\n\nconst mapDispatchToProps = (dispatch: Dispatch) => {\n    return {\n        createDataset: (params: DatasetFormParams) => {\n            dispatch(datasetActions.Actions.create({\n                id: uuid(),\n                params,\n            }));\n        },\n        onCancel: () => dispatch(datasetActions.Actions.cancelOpen()),\n    };\n}\n\nconst mapStateToProps = (state: RootReducer) => {\n    return {\n        formVisible: state.openDataset.formVisible,\n        formPath: state.openDataset.formPath,\n        formInitial: state.openDataset.formInitialParams,\n    };\n}\n\n\ntype MergedProps = ReturnType<typeof mapDispatchToProps> & ReturnType<typeof mapStateToProps>;\n\ninterface DatasetOpenState {\n    datasetType: DatasetTypes\n}\n\n\nclass DatasetOpen extends React.Component<MergedProps, DatasetOpenState> {\n    public state = {\n        datasetType: DatasetTypes.RAW,\n    }\n\n    constructor(props: MergedProps) {\n        super(props);\n        if (props.formInitial !== undefined) {\n            this.state = {\n                datasetType: props.formInitial.type,\n            };\n        }\n    }\n\n    public setDatasetType = (e: React.SyntheticEvent, data: DropdownProps) => {\n        const type = data.value as DatasetTypes;\n        this.setState({\n            datasetType: type,\n        })\n    }\n\n    public render() {\n        const { formPath, formInitial, createDataset, onCancel } = this.props;\n        const { datasetType } = this.state;\n\n        const renderForm = (form: React.ReactNode) => {\n            return (\n                <Segment>\n                    Type: <DatasetTypeSelect onClick={this.setDatasetType} currentType={datasetType} />\n                    <Header as=\"h2\">Open: {formPath}</Header>\n                    {form}\n                </Segment>\n            );\n        }\n        switch (datasetType) {\n            case DatasetTypes.HDF5: {\n                const initial = formInitial && datasetType === formInitial.type ? formInitial : undefined;\n                return renderForm(<HDF5ParamsForm path={formPath} initial={initial} onSubmit={createDataset} onCancel={onCancel} />);\n            }\n            case DatasetTypes.HDFS: {\n                const initial = formInitial && datasetType === formInitial.type ? formInitial : undefined;\n                return renderForm(<HDFSParamsForm path={formPath} initial={initial} onSubmit={createDataset} onCancel={onCancel} />);\n            }\n            case DatasetTypes.RAW: {\n                const initial = formInitial && datasetType === formInitial.type ? formInitial : undefined;\n                return renderForm(<RawFileParamsForm path={formPath} initial={initial} onSubmit={createDataset} onCancel={onCancel} />);\n            }\n            case DatasetTypes.MIB: {\n                const initial = formInitial && datasetType === formInitial.type ? formInitial : undefined;\n                return renderForm(<MIBParamsForm path={formPath} initial={initial} onSubmit={createDataset} onCancel={onCancel} />);\n            }\n            case DatasetTypes.BLO: {\n                const initial = formInitial && datasetType === formInitial.type ? formInitial : undefined;\n                return renderForm(<BLOParamsForm path={formPath} initial={initial} onSubmit={createDataset} onCancel={onCancel} />);\n            }\n            case DatasetTypes.K2IS: {\n                const initial = formInitial && datasetType === formInitial.type ? formInitial : undefined;\n                return renderForm(<K2ISParamsForm path={formPath} initial={initial} onSubmit={createDataset} onCancel={onCancel} />);\n            }\n            case DatasetTypes.SER: {\n                const initial = formInitial && datasetType === formInitial.type ? formInitial : undefined;\n                return renderForm(<SERParamsForm path={formPath} initial={initial} onSubmit={createDataset} onCancel={onCancel} />);\n            }\n            case DatasetTypes.FRMS6: {\n                const initial = formInitial && datasetType === formInitial.type ? formInitial : undefined;\n                return renderForm(<FRMS6ParamsForm path={formPath} initial={initial} onSubmit={createDataset} onCancel={onCancel} />);\n\n            }\n        }\n        return assertNotReached(\"unknown dataset type\");\n    }\n\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DatasetOpen)","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Header, Icon, Message } from \"semantic-ui-react\";\nimport { RootReducer } from \"../../store\";\n\nconst mapStateToProps = (state: RootReducer) => {\n    return {\n        busy: state.openDataset.busy,\n        path: state.openDataset.busyPath,\n    };\n}\n\ntype MergedProps = ReturnType<typeof mapStateToProps>;\n\nconst DatasetOpenSpinner: React.SFC<MergedProps> = ({ busy, path }) => {\n    if (!busy) {\n        return null;\n    }\n    return (\n        <>\n            <Header as=\"h2\" dividing={true}>Loading...</Header>\n            <Message icon={true}>\n                <Icon name='cog' loading={true} />\n                <Message.Content>\n                    <Message.Header>Detecting parameters for {path}</Message.Header>\n                </Message.Content>\n            </Message>\n        </>\n    );\n}\n\nexport default connect(mapStateToProps)(DatasetOpenSpinner);","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport BrowserWrapper from \"../../browser/components/BrowserWrapper\";\nimport { RootReducer } from \"../../store\";\nimport { DatasetsState } from \"../types\";\nimport Dataset from \"./Dataset\";\nimport DatasetOpen from \"./DatasetOpen\";\nimport DatasetOpenSpinner from \"./DatasetOpenSpinner\";\n\ninterface DatasetListProps {\n    datasets: DatasetsState\n}\n\nconst mapStateToProps = (state: RootReducer) => {\n    return {\n        datasets: state.datasets,\n        formVisible: state.openDataset.formVisible,\n        formPath: state.openDataset.formPath,\n    };\n}\n\ntype MergedProps = DatasetListProps & ReturnType<typeof mapStateToProps>;\n\nclass DatasetList extends React.Component<MergedProps> {\n    public render() {\n        const { formVisible, datasets } = this.props;\n\n        return (\n            <>\n                {datasets.ids.map((dsId: string) => <Dataset dataset={datasets.byId[dsId]} key={dsId} />)}\n                <DatasetOpenSpinner />\n                {formVisible && <DatasetOpen />}\n                <BrowserWrapper />\n            </>\n        );\n    }\n}\n\nexport default connect(mapStateToProps)(DatasetList);","import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { Dispatch } from 'redux';\nimport { Message } from 'semantic-ui-react';\nimport * as errorActions from '../actions';\nimport { ErrorMessage } from '../reducers';\n\nconst mapDispatchToProps = (dispatch: Dispatch, ownProps: ErrorProps) => {\n    return {\n        dismiss: () => dispatch(errorActions.Actions.dismiss(ownProps.error.id)),\n    }\n}\n\ninterface ErrorProps {\n    error: ErrorMessage,\n}\n\ntype MergedProps = ErrorProps & ReturnType<typeof mapDispatchToProps>;\n\nconst ErrorComponent: React.SFC<MergedProps> = ({ dismiss, error }) => {\n    return (\n        <Message negative={true} onDismiss={dismiss}>{error.msg}</Message>\n    )\n}\n\nexport default connect(null, mapDispatchToProps)(ErrorComponent);","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Modal } from \"semantic-ui-react\";\nimport { RootReducer } from \"../../store\";\nimport Error from \"./Error\";\n\nconst mapStateToProps = (state: RootReducer) => {\n    return {\n        errors: state.errors,\n        clusterConnected: state.clusterConnection.status === \"connected\",\n        channelConnected: (state.channelStatus.status === \"connected\" ||\n            state.channelStatus.status === \"ready\"),\n    }\n}\n\ntype MergedProps = ReturnType<typeof mapStateToProps>;\n\nconst ErrorList: React.SFC<MergedProps> = ({ errors, clusterConnected, channelConnected }) => {\n    const numShown = 3;\n    const latestErrors = errors.ids.slice(Math.max(0, errors.ids.length - numShown));\n    const showModal = errors.ids.length > 0 && clusterConnected && channelConnected;\n    return (\n        <Modal open={showModal}>\n            {latestErrors.map(error => <Error error={errors.byId[error]} key={error} />)}\n        </Modal>\n    );\n}\n\nexport default connect(mapStateToProps)(ErrorList);","import * as React from 'react';\nimport 'semantic-ui-css/semantic.min.css';\nimport { Container, Icon, Modal, Popup } from 'semantic-ui-react';\nimport About from './About';\nimport ChannelStatus from './channel/components/ChannelStatus';\nimport DatasetList from './dataset/components/DatasetList';\nimport ErrorList from './errors/components/ErrorList';\nimport logo from './images/LiberTEM logo-medium.png';\n\nclass App extends React.Component {\n    public render() {\n        return (\n            <Container style={{ margin: \"5em 1em 5em 1em\" }}>\n                <div style={{ display: \"flex\" }}>\n                    <img src={logo} width=\"200\" height=\"46\" alt=\"LiberTEM\" style={{ marginBottom: \"20px\" }} />\n                    {' '}\n                    <Modal trigger={\n                        <Icon name=\"info circle\" link={true} style={{ alignSelf: \"flex-start\" }} />\n                    }>\n                        <Popup.Header>About LiberTEM</Popup.Header>\n                        <Popup.Content>\n                            <About />\n                        </Popup.Content>\n                    </Modal>\n                </div>\n                <ErrorList />\n                <ChannelStatus>\n                    <DatasetList />\n                </ChannelStatus>\n            </Container>\n        );\n    }\n}\n\nexport default App;\n","// tslint:disable:no-console\n// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the 'N+1' visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL!,\n      window.location.toString()\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker) {\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the old content will have been purged and\n                // the fresh content will have been added to the cache.\n                // It's the perfect time to display a 'New content is\n                // available; please refresh.' message in your web app.\n                console.log('New content is available; please refresh.');\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // 'Content is cached for offline use.' message.\n                console.log('Content is cached for offline use.');\n              }\n            }\n          };\n        }\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type')!.indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { ActionsUnion, createAction } from \"../helpers/actionHelpers\";\n\nexport enum ActionTypes {\n    CREATE = 'JOB_CREATE',\n}\n\nexport const Actions = {\n    create: (id: string, dataset: string, timestamp: number) => createAction(ActionTypes.CREATE, { id, dataset, timestamp }),\n}\n\nexport type Actions = ActionsUnion<typeof Actions>;\n\nexport type ActionParts = {\n    [K in keyof typeof Actions]: ReturnType<typeof Actions[K]>\n}","import { AnalysisDetails, CancelJobResponse, StartJobRequest, StartJobResponse } from \"../messages\";\n\nexport function startJob(jobId: string, datasetId: string, analysis: AnalysisDetails): Promise<StartJobResponse> {\n    const payload: StartJobRequest = {\n        job: {\n            dataset: datasetId,\n            analysis,\n        }\n    }\n    return fetch(`/api/jobs/${jobId}/`, {\n        body: JSON.stringify(payload),\n        credentials: \"same-origin\",\n        method: \"PUT\",\n    }).then(r => r.json());\n}\n\nexport function cancelJob(jobId: string): Promise<CancelJobResponse> {\n    return fetch(`/api/jobs/${jobId}/`, {\n        method: \"DELETE\",\n        credentials: \"same-origin\",\n    }).then(r => r.json());\n}","import { buffers } from 'redux-saga';\nimport { actionChannel, call, cancel, fork, put, select, take, takeEvery } from 'redux-saga/effects';\nimport uuid from 'uuid/v4';\nimport { assertNotReached } from '../helpers';\nimport * as jobActions from '../job/actions';\nimport { cancelJob, startJob } from '../job/api';\nimport { JobState } from '../job/types';\nimport { AnalysisDetails, AnalysisTypes, DatasetOpen, DatasetState, DatasetStatus } from '../messages';\nimport { RootReducer } from '../store';\nimport * as analysisActions from './actions';\nimport { AnalysisState, JobKind } from './types';\n\n\n// TODO: flip this around - create classes for each analysis type\n// classes should provide:\n//  + methods for default parameters\n//  + creation of a job from current parameters\nfunction getAnalysisDetails(analysisType: AnalysisTypes, dataset: DatasetOpen): AnalysisDetails {\n    const shape = dataset.params.shape;\n    const width = shape[3];\n    const height = shape[2];\n    const minLength = Math.min(width, height);\n\n    switch (analysisType) {\n        case AnalysisTypes.APPLY_DISK_MASK: {\n            return {\n                type: analysisType,\n                parameters: {\n                    shape: \"disk\",\n                    cx: width / 2,\n                    cy: height / 2,\n                    r: minLength / 2,\n                }\n            };\n        }\n        case AnalysisTypes.APPLY_RING_MASK: {\n            return {\n                type: analysisType,\n                parameters: {\n                    shape: \"ring\",\n                    cx: width / 2,\n                    cy: height / 2,\n                    ri: minLength / 4,\n                    ro: minLength / 2,\n                }\n            }\n        }\n        case AnalysisTypes.CENTER_OF_MASS: {\n            return {\n                type: analysisType,\n                parameters: {\n                    shape: \"com\",\n                    cx: width / 2,\n                    cy: height / 2,\n                    r: minLength / 2,\n                },\n            };\n        }\n        case AnalysisTypes.APPLY_POINT_SELECTOR: {\n            return {\n                type: analysisType,\n                parameters: {\n                    shape: \"point\",\n                    cx: width / 2,\n                    cy: width / 2,\n                }\n            }\n        }\n        case AnalysisTypes.SUM_FRAMES: {\n            return {\n                type: AnalysisTypes.SUM_FRAMES,\n                parameters: {},\n            }\n        }\n        case AnalysisTypes.PICK_FRAME: {\n            return {\n                type: AnalysisTypes.PICK_FRAME,\n                parameters: {\n                    x: Math.round(width / 2),\n                    y: Math.round(height / 2),\n                }\n            }\n        }\n    }\n    return assertNotReached(\"unhandeled analysis type\");\n}\n\nfunction selectDataset(state: RootReducer, dataset: string) {\n    return state.datasets.byId[dataset];\n}\n\nfunction selectAnalysis(state: RootReducer, id: string) {\n    return state.analyses.byId[id];\n}\n\nfunction selectJob(state: RootReducer, id: string) {\n    return state.jobs.byId[id];\n}\n\n\nexport function* createAnalysisSaga(action: ReturnType<typeof analysisActions.Actions.create>) {\n    try {\n        const datasetState: DatasetState = yield select(selectDataset, action.payload.dataset)\n        if (datasetState.status !== DatasetStatus.OPEN) {\n            throw new Error(\"invalid dataset status\");\n        }\n        const analysis: AnalysisState = {\n            id: uuid(),\n            dataset: action.payload.dataset,\n            resultDetails: getAnalysisDetails(action.payload.analysisType, datasetState),\n            frameDetails: { type: AnalysisTypes.SUM_FRAMES, parameters: {} },\n            jobs: {},\n            jobHistory: {\n                FRAME: [],\n                RESULT: [],\n            }\n        }\n\n        const sidecarTask = yield fork(analysisSidecar, analysis.id);\n\n        yield put(analysisActions.Actions.created(analysis));\n        yield put(analysisActions.Actions.run(analysis.id, \"FRAME\"));\n\n        while (true) {\n            const removeAction: ReturnType<typeof analysisActions.Actions.remove> = yield take(analysisActions.ActionTypes.REMOVE);\n            if (removeAction.payload.id === analysis.id) {\n                yield cancel(sidecarTask);\n            }\n        }\n    } catch (e) {\n        const timestamp = Date.now();\n        const id = uuid();\n        yield put(analysisActions.Actions.error(`Error creating analysis: ${e.toString()}`, timestamp, id));\n    }\n}\n\nexport function* cancelOldJob(analysis: AnalysisState, kind: JobKind) {\n    const jobId = analysis.jobs[kind]\n    if (jobId === undefined) {\n        return;\n    } else {\n        const job: JobState = yield select(selectJob, jobId);\n        if (job.running !== \"DONE\") {\n            yield call(cancelJob, jobId);\n        }\n    }\n}\n\nexport function* analysisSidecar(analysisId: string) {\n    // channel for incoming actions:\n    // all actions that arrive while we block in `call` will be buffered here.\n    // because the buffer is sliding of size 1, we only keep the latest action!\n    const runOrParamsChannel = yield actionChannel(analysisActions.ActionTypes.RUN, buffers.sliding(1));\n\n    while (true) {\n        try {\n            const action: analysisActions.ActionParts[\"run\"] = yield take(runOrParamsChannel);\n\n            // ignore actions meant for other analyses\n            if (action.payload.id !== analysisId) {\n                continue;\n            }\n\n            // get the current state incl. configuration\n            const analysis: AnalysisState = yield select(selectAnalysis, analysisId);\n            const { kind } = action.payload;\n\n            // prepare running the job:\n            const jobId = uuid();\n            yield put(jobActions.Actions.create(jobId, analysis.dataset, Date.now()));\n            yield put(analysisActions.Actions.prepareRun(analysis.id, kind, jobId));\n\n            const oldJobId = analysis.jobs[kind];\n            if (oldJobId !== undefined) {\n                const job: JobState = yield select(selectJob, oldJobId);\n                if (job && job.running !== \"DONE\") {\n                    // wait until the job is cancelled:\n                    yield call(cancelJob, oldJobId);\n                }\n            }\n\n            // FIXME: we have a race here, as the websocket msg FINISH_JOB may\n            // arrive before call(startJob, ...) returns. this causes the apply button\n            // to feel unresponsive (the action gets done, but only after we finish here...)\n            // best reproduced in \"Slow 3G\" network simulation mode in devtools\n\n            // wait until the job is started\n            if (kind === \"FRAME\") {\n                yield call(startJob, jobId, analysis.dataset, analysis.frameDetails);\n            } else if (kind === \"RESULT\") {\n                yield call(startJob, jobId, analysis.dataset, analysis.resultDetails);\n            }\n            yield put(analysisActions.Actions.running(analysis.id, jobId, kind))\n        } catch (e) {\n            const timestamp = Date.now();\n            const id = uuid();\n            yield put(analysisActions.Actions.error(`Error running analysis: ${e.toString()}`, timestamp, id));\n        }\n    }\n}\n\nexport function* updateFrameViewMode(action: ReturnType<typeof analysisActions.Actions.setFrameViewMode>) {\n    yield put(analysisActions.Actions.run(action.payload.id, \"FRAME\"));\n}\n\nexport function* updateFrameViewParams(action: ReturnType<typeof analysisActions.Actions.updateParameters>) {\n    if (action.payload.kind === \"FRAME\") {\n        yield put(analysisActions.Actions.run(action.payload.id, \"FRAME\"));\n    }\n}\n\nexport function* doRemoveAnalysisSaga(action: ReturnType<typeof analysisActions.Actions.remove>) {\n    const analysis: AnalysisState = yield select(selectAnalysis, action.payload.id)\n    try {\n        yield call(cancelOldJob, analysis, \"RESULT\");\n        yield call(cancelOldJob, analysis, \"FRAME\");\n    } finally {\n        yield put(analysisActions.Actions.removed(action.payload.id));\n    }\n}\n\nexport function* analysisRootSaga() {\n    yield takeEvery(analysisActions.ActionTypes.CREATE, createAnalysisSaga);\n    yield takeEvery(analysisActions.ActionTypes.REMOVE, doRemoveAnalysisSaga);\n    yield takeEvery(analysisActions.ActionTypes.SET_FRAMEVIEW_MODE, updateFrameViewMode);\n    yield takeEvery(analysisActions.ActionTypes.UPDATE_PARAMETERS, updateFrameViewParams);\n}","import * as _ from 'lodash';\nimport { MsgPartConfig } from \"../messages\";\nimport { ConfigParams, ConfigState, LocalConfig } from \"./reducers\";\n\nconst CONFIG_KEY = \"LiberTEM.config\";\n\nexport function joinPaths(config: ConfigState, ...parts: string[]) {\n    const removeSep = (part: string) => part.replace(new RegExp(`${_.escapeRegExp(config.separator)}$`), \"\")\n    parts = [removeSep(parts[0]), ...parts.slice(1)];\n    return parts.map(part => part.trim()).join(config.separator);\n}\n\nexport function mergeLocalStorage(serverConfig: MsgPartConfig): ConfigParams {\n    const localSettings = window.localStorage.getItem(CONFIG_KEY);\n    if (localSettings === null) {\n        return Object.assign({}, serverConfig, getDefaultLocalConfig(serverConfig));\n    }\n    const localSettingsParsed = JSON.parse(localSettings);\n    const defaultConfig = getDefaultLocalConfig(serverConfig);\n    const mergedConfig = Object.assign({}, defaultConfig, serverConfig, localSettingsParsed);\n    return mergedConfig;\n}\n\nexport function setLocalStorage(config: ConfigState): void {\n    const keys: Array<Partial<keyof ConfigState>> = [\"cwd\", \"lastOpened\", \"fileHistory\"];\n    const localSettings = keys.reduce((acc, item) => {\n        acc[item] = config[item];\n        return acc;\n    }, {} as ConfigState);\n    window.localStorage.setItem(CONFIG_KEY, JSON.stringify(localSettings));\n}\n\nexport function clearLocalStorage(): void {\n    window.localStorage.removeItem(CONFIG_KEY);\n}\n\nexport function getDefaultLocalConfig(config: MsgPartConfig): LocalConfig {\n    return {\n        lastOpened: {},\n        fileHistory: [],\n    };\n}\n\nexport function makeUnique<T>(inp: T[]): T[] {\n    return inp.reduce((acc: T[], curr: T) => {\n        if (acc.indexOf(curr) === -1) {\n            return [...acc, curr];\n        } else {\n            return acc;\n        }\n    }, [] as T[]);\n}","import { DirectoryListingResponse } from \"../messages\";\n\nexport function getDirectoryListing(path: string): Promise<DirectoryListingResponse> {\n    const url = `/api/browse/localfs/?path=${path}`;\n    return fetch(url, {\n        method: 'GET',\n        credentials: \"same-origin\",\n    }).then(r => r.json());\n}","import { ActionsUnion, createAction } from '../helpers/actionHelpers';\nimport { JobResultType } from '../job/types';\nimport { MsgPartInitialDataset, MsgPartJob } from '../messages';\n\n\nexport type PartialResultType = JobResultType;\n\nexport enum ActionTypes {\n    INITIAL_STATE = 'CHANNEL_INITIAL_STATE',\n    JOB_STARTED = 'CHANNEL_JOB_STARTED',\n    FINISH_JOB = 'CHANNEL_FINISH_JOB',\n    TASK_RESULT = 'CHANNEL_TASK_RESULT',\n    JOB_ERROR = 'CHANNEL_JOB_ERROR',\n    OPEN = \"CHANNEL_OPEN\",\n    CLOSE = \"CHANNEL_CLOSE\",\n    ERROR = \"CHANNEL_ERROR\",\n}\n\nexport const Actions = {\n    initialState: (jobs: MsgPartJob[], datasets: MsgPartInitialDataset[], timestamp: number) => createAction(ActionTypes.INITIAL_STATE, { jobs, datasets, timestamp }),\n    jobStarted: (job: string, dataset: string, timestamp: number) => createAction(ActionTypes.JOB_STARTED, { job, timestamp, dataset }),\n    finishJob: (job: string, results: JobResultType[], timestamp: number) => createAction(ActionTypes.FINISH_JOB, { job, results, timestamp }),\n    taskResult: (job: string, results: PartialResultType[], timestamp: number) => createAction(ActionTypes.TASK_RESULT, { job, results, timestamp }),\n    jobError: (job: string, msg: string, id: string, timestamp: number) => createAction(ActionTypes.JOB_ERROR, { job, msg, id, timestamp }),\n    open: (timestamp: number) => createAction(ActionTypes.OPEN, { timestamp }),\n    close: (timestamp: number) => createAction(ActionTypes.CLOSE, { timestamp }),\n    error: (msg: string, timestamp: number, id: string) => createAction(ActionTypes.ERROR, { msg, timestamp, id }),\n}\n\nexport type Actions = ActionsUnion<typeof Actions>;","import { call, fork, put, select, take } from \"redux-saga/effects\";\nimport uuid from 'uuid/v4';\nimport { joinPaths } from \"../config/helpers\";\nimport { ConfigState } from \"../config/reducers\";\nimport { DirectoryListingResponse } from \"../messages\";\nimport { RootReducer } from \"../store\";\nimport * as browserActions from './actions';\nimport { getDirectoryListing } from \"./api\";\nimport { DirectoryBrowserState } from \"./types\";\n\nexport function* directoryListingSaga() {\n    yield fork(fetchOnRequest);\n    yield fork(fetchDirectoryListOnOpen);\n}\n\nfunction* fetchOnRequest() {\n    while (true) {\n        const action: ReturnType<typeof browserActions.Actions.list> = yield take(browserActions.ActionTypes.LIST_DIRECTORY);\n\n        const { name, path } = action.payload;\n        const config: ConfigState = yield select((state: RootReducer) => state.config)\n        const newPath = name !== undefined ? joinPaths(config, path, name) : path;\n        yield fork(fetchDirectoryListing, newPath);\n    }\n}\n\nfunction* fetchDirectoryListing(path: string) {\n    try {\n        const result: DirectoryListingResponse = yield call(getDirectoryListing, path);\n        if (result.status === \"ok\") {\n            yield put(browserActions.Actions.dirListing(result.path, result.dirs, result.files, result.drives, result.places));\n        } else if (result.status === \"error\") {\n            const browserState: DirectoryBrowserState = yield select((state: RootReducer) => state.browser);\n            const timestamp = Date.now();\n            const id = uuid();\n            const alternative = result.alternative ? result.alternative : browserState.places.home.path;\n            yield put(browserActions.Actions.error(`Error browsing directory: ${result.msg}`, timestamp, id));\n            yield put(browserActions.Actions.list(alternative));\n        }\n    } catch (e) {\n        const browserState: DirectoryBrowserState = yield select((state: RootReducer) => state.browser);\n        const timestamp = Date.now();\n        const id = uuid();\n        yield put(browserActions.Actions.error(`Error browsing directory: ${e.toString()}`, timestamp, id));\n        yield put(browserActions.Actions.list(browserState.places.home.path));\n    }\n}\n\nfunction* fetchDirectoryListOnOpen() {\n    while (true) {\n        yield take(browserActions.ActionTypes.OPEN);\n        const config: ConfigState = yield select((state: RootReducer) => state.config)\n        yield put(browserActions.Actions.list(config.cwd));\n    }\n}","import { ActionCreatorsMapObject } from \"redux\";\nimport { FollowupPart, MsgPartInitialDataset, MsgPartJob } from \"../messages\";\n\nexport interface Message<T extends string> {\n    messageType: T\n}\n\nexport function createMessage<T extends string, O>(messageType: T, attribs: O) {\n    return Object.assign({ messageType }, attribs);\n}\n\nexport enum MessageTypes {\n    INITIAL_STATE = \"INITIAL_STATE\",\n    JOB_STARTED = \"JOB_STARTED\",\n    FINISH_JOB = \"FINISH_JOB\",\n    TASK_RESULT = \"TASK_RESULT\",\n    JOB_ERROR = \"JOB_ERROR\",\n    BINARY = \"BINARY\",\n    OPEN = \"OPEN\",\n    CLOSE = \"CLOSE\",\n    ERROR = \"ERROR\",\n    DELETE_DATASET = \"DELETE_DATASET\"\n}\n\nexport const Messages = {\n    initialState: (jobs: MsgPartJob[], datasets: MsgPartInitialDataset[]) => createMessage(MessageTypes.INITIAL_STATE, { jobs, datasets }),\n    startJob: (job: string, dataset: string) => createMessage(MessageTypes.JOB_STARTED, { job, dataset }),\n    finishJob: (job: string, followup: FollowupPart) => createMessage(MessageTypes.FINISH_JOB, { job, followup }),\n    taskResult: (job: string, followup: FollowupPart) => createMessage(MessageTypes.TASK_RESULT, { job, followup }),\n    jobError: (job: string, msg: string) => createMessage(MessageTypes.JOB_ERROR, { job, msg }),\n    binary: (objectURL: string) => createMessage(MessageTypes.BINARY, { objectURL }),\n    open: () => createMessage(MessageTypes.OPEN, {}),\n    close: () => createMessage(MessageTypes.CLOSE, {}),\n    error: (msg: string) => createMessage(MessageTypes.ERROR, { msg }),\n    deleteDataset: (dataset: string) => createMessage(MessageTypes.DELETE_DATASET, { dataset }),\n}\n\nexport type MessagesUnion<A extends ActionCreatorsMapObject> = ReturnType<A[keyof A]>\nexport type Messages = MessagesUnion<typeof Messages>;\n\n// types of messages sent by the server:\n/*\nexport type InitialStateMessage = ReturnType<typeof Messages.initialState>;\nexport type StartJobMessage = ReturnType<typeof Messages.startJob>;\nexport type FinishJobMessage = ReturnType<typeof Messages.finishJob>;\nexport type TaskResultMessage = ReturnType<typeof Messages.taskResult>;\n*/\n\nexport type BinaryMessage = ReturnType<typeof Messages.binary>;","import { Channel, delay, END, eventChannel } from \"redux-saga\";\nimport { call, fork, put, take } from \"redux-saga/effects\";\nimport uuid from 'uuid/v4';\nimport * as datasetActions from '../dataset/actions';\nimport * as channelActions from \"./actions\";\nimport * as channelMessages from './messages';\n\ntype SocketChannel = Channel<channelMessages.Messages>;\n\n\n/**\n * create typesafe messages from the websocket messages\n * \n * also creates some synthetic events like open, close, error\n */\nfunction createWebSocketChannel(/* addr */): SocketChannel {\n    return eventChannel(emit => {\n        function onMessage(msg: MessageEvent) {\n            if (msg.data instanceof Blob) {\n                // TODO: cleanup createObjectURL results somewhere\n                emit(channelMessages.Messages.binary(URL.createObjectURL(msg.data)));\n            } else {\n                const parsed = JSON.parse(msg.data) as channelMessages.Messages;\n                emit(parsed);\n            }\n        }\n\n        function onOpen() {\n            emit(channelMessages.Messages.open());\n        }\n\n        function onClose() {\n            emit(channelMessages.Messages.close());\n            emit(END);\n        }\n\n        function onError(err: Event) {\n            emit(channelMessages.Messages.error(\"Error in weboscket connection\"));\n        }\n\n        const ws = new WebSocket(`ws://${window.location.hostname}:${window.location.port}/api/events/`);\n        ws.addEventListener(\"message\", onMessage);\n        ws.addEventListener(\"open\", onOpen);\n        ws.addEventListener(\"close\", onClose);\n        ws.addEventListener(\"error\", onError);\n\n        // return cleanup function:\n        return () => {\n            ws.removeEventListener(\"message\", onMessage);\n            ws.removeEventListener(\"open\", onOpen);\n            ws.removeEventListener(\"close\", onClose);\n            ws.removeEventListener(\"error\", onError);\n            // TODO: close connection if still open\n            // (or is it guaranteed that if an error was thrown, the connection is closed?)\n        };\n    });\n}\n\n/**\n * handles the connection lifecycle for our websocket\n */\nexport function* webSocketSaga() {\n    while (true) {\n        const socketChannel = yield call(createWebSocketChannel);\n        yield fork(actionsFromChannel, socketChannel);\n        const action: channelActions.Actions = yield take([\n            channelActions.ActionTypes.OPEN,\n            channelActions.ActionTypes.CLOSE,\n        ]);\n        if (action.type === channelActions.ActionTypes.OPEN) {\n            yield take([\n                channelActions.ActionTypes.CLOSE,\n                channelActions.ActionTypes.ERROR,\n            ]);\n        }\n        yield delay(1000);\n    }\n}\n\n/**\n * translates the messages from the channel to redux actions, handles aggregation etc.\n */\nexport function* actionsFromChannel(socketChannel: SocketChannel) {\n    try {\n        while (true) {\n            const msg = yield take(socketChannel);\n            const timestamp = Date.now();\n            switch (msg.messageType) {\n                case channelMessages.MessageTypes.OPEN: {\n                    yield put(channelActions.Actions.open(timestamp));\n                    break;\n                }\n                case channelMessages.MessageTypes.CLOSE: {\n                    yield put(channelActions.Actions.close(timestamp));\n                    break;\n                }\n                case channelMessages.MessageTypes.ERROR: {\n                    const id = uuid();\n                    yield put(channelActions.Actions.error(msg.msg, timestamp, id));\n                    break;\n                }\n                case channelMessages.MessageTypes.INITIAL_STATE: {\n                    yield put(channelActions.Actions.initialState(msg.jobs, msg.datasets, timestamp));\n                    break;\n                }\n                case channelMessages.MessageTypes.JOB_STARTED: {\n                    yield put(channelActions.Actions.jobStarted(msg.job, msg.details.dataset, timestamp));\n                    break;\n                }\n                case channelMessages.MessageTypes.FINISH_JOB: {\n                    yield call(handleFinishJob, msg, socketChannel, timestamp);\n                    break;\n                }\n                case channelMessages.MessageTypes.TASK_RESULT: {\n                    yield call(handleTaskResult, msg, socketChannel, timestamp);\n                    break;\n                }\n                case channelMessages.MessageTypes.DELETE_DATASET: {\n                    yield put(datasetActions.Actions.deleted(msg.dataset));\n                    break;\n                }\n                case channelMessages.MessageTypes.JOB_ERROR: {\n                    const id = uuid();\n                    yield put(channelActions.Actions.jobError(msg.job, msg.msg, id, timestamp));\n                }\n            }\n        }\n    } finally {\n        // disconnected\n    }\n}\n\nexport function* handleBinaryParts(numParts: number, socketChannel: SocketChannel) {\n    const parts: channelMessages.BinaryMessage[] = [];\n    while (parts.length < numParts) {\n        const binMsg = yield take(socketChannel)\n        parts.push(binMsg);\n    }\n    return parts;\n}\n\nexport function* handleTaskResult(msg: ReturnType<typeof channelMessages.Messages.taskResult>, socketChannel: SocketChannel, timestamp: number) {\n    const parts: channelMessages.BinaryMessage[] = yield call(handleBinaryParts, msg.followup.numMessages, socketChannel);\n    const images = parts.map((part, idx) => ({ imageURL: part.objectURL, description: msg.followup.descriptions[idx] }));\n    yield put(channelActions.Actions.taskResult(msg.job, images, timestamp));\n}\n\nexport function* handleFinishJob(msg: ReturnType<typeof channelMessages.Messages.finishJob>, socketChannel: SocketChannel, timestamp: number) {\n    const parts: channelMessages.BinaryMessage[] = yield call(handleBinaryParts, msg.followup.numMessages, socketChannel);\n    const images = parts.map((part, idx) => ({ imageURL: part.objectURL, description: msg.followup.descriptions[idx] }));\n    yield put(channelActions.Actions.finishJob(msg.job, images, timestamp));\n}","import { ConnectRequest, ConnectRequestParams, ConnectResponse } from \"../messages\";\n\nexport function connectToCluster(params: ConnectRequestParams): Promise<ConnectResponse> {\n    const payload: ConnectRequest = {\n        connection: params\n    }\n    return fetch(`/api/config/connection/`, {\n        body: JSON.stringify(payload),\n        credentials: \"same-origin\",\n        method: \"PUT\",\n    }).then(r => r.json());\n}\n\nexport function checkClusterConnection(): Promise<ConnectResponse> {\n    return fetch(`/api/config/connection/`, {\n        method: 'GET',\n    }).then(r => r.json());\n}","import { ActionsUnion, createAction } from \"../helpers/actionHelpers\";\nimport { ConfigParams } from \"./reducers\";\n\nexport enum ActionTypes {\n    FETCHED = \"CONFIG_FETCHED\",\n    FETCH = \"CONFIG_FETCH\",\n    FETCH_FAILED = \"CONFIG_FETCH_FAILED\",\n}\n\nexport const Actions = {\n    fetch: () => createAction(ActionTypes.FETCH),\n    fetched: (config: ConfigParams) => createAction(ActionTypes.FETCHED, { config }),\n    fetchFailed: (msg: string, timestamp: number, id: string) => createAction(ActionTypes.FETCH_FAILED, { msg, timestamp, id }),\n}\n\nexport type Actions = ActionsUnion<typeof Actions>;","import { all, call, put, take, takeEvery } from \"redux-saga/effects\";\nimport * as channelActions from '../channel/actions';\nimport { ConnectResponse } from \"../messages\";\nimport * as clusterActions from './actions';\nimport { checkClusterConnection, connectToCluster } from \"./api\";\n\nfunction* connectSaga(action: ReturnType<typeof clusterActions.Actions.connect>) {\n    const conn: ConnectResponse = yield call(connectToCluster, action.payload.params);\n    yield call(putClusterStatus, conn);\n}\n\nfunction* putClusterStatus(conn: ConnectResponse) {\n    if (conn.status === \"ok\") {\n        yield put(clusterActions.Actions.connected(conn.connection.connection));\n    } else {\n        yield put(clusterActions.Actions.notConnected());\n    }\n}\n\n/**\n * when the channel is connected, check if cluster is connected and update status accordingly\n */\nfunction* trackClusterConnection() {\n    while (true) {\n        yield take(channelActions.ActionTypes.OPEN)\n        const conn: ConnectResponse = yield call(checkClusterConnection);\n        yield call(putClusterStatus, conn);\n    }\n}\n\nexport function* clusterConnectionSaga() {\n    yield takeEvery(clusterActions.ActionTypes.CONNECT, connectSaga);\n    yield all([\n        trackClusterConnection(),\n    ])\n}","import { GetConfigResponse } from \"../messages\";\n\nexport function getConfig(): Promise<GetConfigResponse> {\n    return fetch(`/api/config/`, {\n        method: \"GET\",\n        credentials: \"same-origin\",\n    }).then(r => r.json());\n}","import { call, fork, put, select, take, takeEvery } from 'redux-saga/effects';\nimport uuid from 'uuid/v4';\nimport * as browserActions from '../browser/actions';\nimport * as channelActions from '../channel/actions';\nimport * as datasetActions from '../dataset/actions';\nimport { GetConfigResponse } from '../messages';\nimport { RootReducer } from '../store';\nimport * as configActions from './actions';\nimport { getConfig } from './api';\nimport { clearLocalStorage, getDefaultLocalConfig, mergeLocalStorage, setLocalStorage } from './helpers';\nimport { ConfigState } from './reducers';\n\nfunction* getConfigOnReconnect() {\n    yield takeEvery(channelActions.ActionTypes.OPEN, getConfigSaga);\n}\n\n/**\n * get config from server and try to merge in the localStorage config\n */\nfunction* getConfigSaga() {\n    yield put(configActions.Actions.fetch());\n    const configResponse: GetConfigResponse = yield call(getConfig);\n    try {\n        const mergedConfig = mergeLocalStorage(configResponse.config);\n        yield put(configActions.Actions.fetched(mergedConfig));\n    } catch (e) {\n        try {\n            clearLocalStorage();\n            // tslint:disable-next-line:no-empty\n        } catch (e) { }\n        const defaultConfig = Object.assign({}, configResponse.config, getDefaultLocalConfig(configResponse.config));\n        yield put(configActions.Actions.fetched(defaultConfig));\n    }\n}\n\n/**\n * update localStorage config on opening files or using the file browser\n */\nfunction* updateLocalStorageConfig() {\n    while (true) {\n        yield take([\n            datasetActions.ActionTypes.CREATE,\n            browserActions.ActionTypes.DIRECTORY_LISTING\n        ]);\n        const config: ConfigState = yield select((state: RootReducer) => state.config);\n        setLocalStorage(config);\n    }\n}\n\nexport function* firstConfigFetch() {\n    try {\n        yield call(getConfigSaga);\n    } catch (e) {\n        const timestamp = Date.now();\n        const id = uuid();\n        yield put(configActions.Actions.fetchFailed(`failed to fetch config: ${e.toString()}`, timestamp, id));\n    }\n}\n\nexport function* configRootSaga() {\n    yield fork(firstConfigFetch);\n    yield fork(getConfigOnReconnect);\n    yield fork(updateLocalStorageConfig);\n}","import { DeleteDatasetResponse, DetectDatasetResponse, OpenDatasetRequest, OpenDatasetResponse } from \"../messages\";\n\nexport function openDataset(id: string, dataset: OpenDatasetRequest): Promise<OpenDatasetResponse> {\n    return fetch(`/api/datasets/${id}/`, {\n        body: JSON.stringify(dataset),\n        credentials: \"same-origin\",\n        method: \"PUT\",\n    }).then(r => r.json());\n}\n\nexport function deleteDataset(id: string): Promise<DeleteDatasetResponse> {\n    return fetch(`/api/datasets/${id}/`, {\n        credentials: \"same-origin\",\n        method: \"DELETE\",\n    }).then(r => r.json());\n}\n\n\nexport function detectDataset(path: string): Promise<DetectDatasetResponse> {\n    return fetch(`/api/datasets/detect/?path=${path}`, {\n        credentials: \"same-origin\",\n        method: \"GET\",\n    }).then(r => r.json());\n}","import { call, put, select, takeEvery } from 'redux-saga/effects';\nimport uuid from 'uuid/v4';\nimport * as browserActions from '../browser/actions';\nimport { joinPaths } from '../config/helpers';\nimport { ConfigState } from '../config/reducers';\nimport { DetectDatasetResponse, OpenDatasetResponse } from '../messages';\nimport { RootReducer } from '../store';\nimport * as datasetActions from \"./actions\";\nimport { deleteDataset, detectDataset, openDataset } from './api';\n\n\nexport function* createDatasetSaga(action: ReturnType<typeof datasetActions.Actions.create>) {\n    try {\n        const resp: OpenDatasetResponse = yield call(openDataset, action.payload.dataset.id, { dataset: action.payload.dataset });\n        if (resp.status === \"ok\") {\n            yield put(datasetActions.Actions.created(resp.details));\n        } else if (resp.status === \"error\") {\n            const timestamp = Date.now();\n            const id = uuid();\n            yield put(datasetActions.Actions.error(resp.dataset, resp.msg, timestamp, id));\n        }\n    } catch (e) {\n        const timestamp = Date.now();\n        const id = uuid();\n        yield put(datasetActions.Actions.error(action.payload.dataset.id, `Error loading dataset: ${e.toString()}`, timestamp, id));\n    }\n}\n\nexport function* deleteDatasetSaga(action: ReturnType<typeof datasetActions.Actions.delete>) {\n    try {\n        yield call(deleteDataset, action.payload.dataset);\n    } catch (e) {\n        const timestamp = Date.now();\n        const id = uuid();\n        yield put(datasetActions.Actions.error(action.payload.dataset, `Error closing dataset: ${e.toString()}`, timestamp, id));\n    }\n}\n\nexport function* doOpenDataset(fullPath: string) {\n    const config: ConfigState = yield select((state: RootReducer) => state.config);\n    let prefillParams = config.lastOpened[fullPath];\n    if (!prefillParams) {\n        try {\n            yield put(datasetActions.Actions.detect(fullPath));\n            const detectResult: DetectDatasetResponse = yield call(detectDataset, fullPath);\n            if (detectResult.status === \"ok\") {\n                prefillParams = detectResult.datasetParams;\n                yield put(datasetActions.Actions.detected(fullPath, detectResult.datasetParams));\n            } else {\n                yield put(datasetActions.Actions.detectFailed(fullPath));\n            }\n        } catch (e) {\n            yield put(datasetActions.Actions.detectFailed(fullPath));\n        }\n    }\n    yield put(datasetActions.Actions.open(fullPath, prefillParams));\n}\n\nexport function* openDatasetSagaFullPath(action: ReturnType<typeof browserActions.Actions.selectFullPath>) {\n    const fullPath = action.payload.path;\n    yield call(doOpenDataset, fullPath);\n}\n\nexport function* openDatasetSaga(action: ReturnType<typeof browserActions.Actions.select>) {\n    const config: ConfigState = yield select((state: RootReducer) => state.config);\n    const fullPath = joinPaths(config, action.payload.path, action.payload.name);\n    yield call(doOpenDataset, fullPath);\n}\n\nexport function* datasetRootSaga() {\n    yield takeEvery(datasetActions.ActionTypes.CREATE, createDatasetSaga);\n    yield takeEvery(datasetActions.ActionTypes.DELETE, deleteDatasetSaga);\n    yield takeEvery(browserActions.ActionTypes.SELECT, openDatasetSaga);\n    yield takeEvery(browserActions.ActionTypes.SELECT_FULL_PATH, openDatasetSagaFullPath);\n}","import { all } from 'redux-saga/effects';\nimport { analysisRootSaga } from './analysis/sagas';\nimport { directoryListingSaga } from './browser/sagas';\nimport { webSocketSaga } from './channel/sagas';\nimport { clusterConnectionSaga } from './cluster/sagas';\nimport { configRootSaga } from './config/sagas';\nimport { datasetRootSaga } from './dataset/sagas';\n\nexport function* rootSaga() {\n    yield all([\n        configRootSaga(),\n        webSocketSaga(),\n        analysisRootSaga(),\n        datasetRootSaga(),\n        clusterConnectionSaga(),\n        directoryListingSaga(),\n    ]);\n}","import { AllActions } from \"../actions\";\nimport * as datasetActions from \"../dataset/actions\";\nimport { ById, filterWithPred, insertById, updateById } from \"../helpers/reducerHelpers\";\nimport * as analysisActions from \"./actions\";\nimport { Analysis, AnalysisState, FrameAnalysisDetails, JobList } from \"./types\";\n\nexport type AnalysisReducerState = ById<AnalysisState>;\n\nconst initialAnalysisState: AnalysisReducerState = {\n    byId: {},\n    ids: [],\n}\n\nexport function analysisReducer(state = initialAnalysisState, action: AllActions): AnalysisReducerState {\n    switch (action.type) {\n        case analysisActions.ActionTypes.CREATED: {\n            return insertById(state, action.payload.analysis.id, action.payload.analysis);\n        }\n        case analysisActions.ActionTypes.UPDATE_PARAMETERS: {\n            const key: keyof Analysis = action.payload.kind === \"FRAME\" ? \"frameDetails\" : \"resultDetails\";\n            const details = state.byId[action.payload.id][key];\n            const newDetails = Object.assign({}, details, {\n                parameters: Object.assign({}, details.parameters, action.payload.parameters),\n            })\n            // TODO: convince typescript that `[key]: newDetails` is a better way...\n            if (action.payload.kind === \"FRAME\") {\n                return updateById(state, action.payload.id, {\n                    frameDetails: newDetails as FrameAnalysisDetails,\n                });\n            } else {\n                return updateById(state, action.payload.id, {\n                    resultDetails: newDetails,\n                });\n            }\n        }\n        case analysisActions.ActionTypes.PREPARE_RUN: {\n            const { kind, id } = action.payload;\n            const analysis = state.byId[id];\n            const oldJob = analysis.jobs[kind];\n            let jobHistory = analysis.jobHistory;\n            if (oldJob !== undefined) {\n                // TODO: length restriction?\n                jobHistory = Object.assign({}, jobHistory, {\n                    [kind]: [oldJob, ...jobHistory[kind]],\n                });\n            }\n            const newJobs: JobList = Object.assign({}, analysis.jobs, {\n                [action.payload.kind]: action.payload.job,\n            });\n            return updateById(state, action.payload.id, { jobs: newJobs, jobHistory })\n        }\n        case analysisActions.ActionTypes.REMOVED: {\n            return filterWithPred(state, (r: AnalysisState) => r.id !== action.payload.id);\n        }\n        case analysisActions.ActionTypes.SET_FRAMEVIEW_MODE: {\n            const newFrameDetails = Object.assign({}, state.byId[action.payload.id].frameDetails, {\n                type: action.payload.mode,\n                parameters: action.payload.initialParams,\n            });\n            return updateById(state, action.payload.id, { frameDetails: newFrameDetails });\n        }\n        case datasetActions.ActionTypes.DELETE: {\n            return filterWithPred(state, (r: AnalysisState) => r.dataset !== action.payload.dataset);\n        }\n    }\n    return state;\n}","import { AllActions } from \"../actions\";\nimport * as configActions from '../config/actions';\nimport { DirectoryListingDetails, FSPlace } from \"../messages\";\nimport * as browserActions from './actions';\nimport { DirectoryBrowserState } from \"./types\";\n\nconst initialBrowserState: DirectoryBrowserState = {\n    isOpen: false,\n    isLoading: true,\n    path: \"/\",\n    drives: [],\n    places: {},\n    files: [] as DirectoryListingDetails[],\n    dirs: [] as DirectoryListingDetails[],\n}\n\nexport function directoryBrowserReducer(state: DirectoryBrowserState = initialBrowserState, action: AllActions): DirectoryBrowserState {\n    switch (action.type) {\n        case configActions.ActionTypes.FETCHED: {\n            return Object.assign({}, state, {\n                path: action.payload.config.cwd,\n            })\n            break;\n        }\n        case browserActions.ActionTypes.OPEN: {\n            return Object.assign({}, state, {\n                isOpen: true,\n            })\n            break;\n        }\n        case browserActions.ActionTypes.CANCEL: {\n            return Object.assign({}, state, {\n                isOpen: false,\n            })\n            break;\n        }\n        case browserActions.ActionTypes.LIST_DIRECTORY: {\n            return Object.assign({}, state, {\n                isLoading: true,\n            })\n            break;\n        }\n        case browserActions.ActionTypes.DIRECTORY_LISTING: {\n            const places = action.payload.places.reduce((acc, place: FSPlace) => {\n                return Object.assign({}, acc, {\n                    [place.key]: place,\n                })\n            }, {});\n            return Object.assign({}, state, {\n                isLoading: false,\n                path: action.payload.path,\n                files: action.payload.files,\n                dirs: action.payload.dirs,\n                drives: action.payload.drives,\n                places,\n            })\n            break;\n        }\n        case browserActions.ActionTypes.SELECT_FULL_PATH:\n        case browserActions.ActionTypes.SELECT: {\n            return Object.assign({}, state, {\n                isLoading: false,\n                isOpen: false,\n            });\n        }\n    }\n    return state;\n}","import { AllActions } from \"../actions\";\nimport * as channelActions from './actions';\n\nexport interface ChannelStatusReducer {\n    status: ChannelStatusCodes,\n}\n\nexport enum ChannelStatusCodes {\n    CONNECTING = \"connecting\",\n    CONNECTED = \"connected\",\n    READY = \"ready\",\n    WAITING = \"waiting\",\n}\n\nconst initialChannelState: ChannelStatusReducer = {\n    status: ChannelStatusCodes.WAITING,\n}\n\nexport function channelStatusReducer(state = initialChannelState, action: AllActions): ChannelStatusReducer {\n    switch (action.type) {\n        case channelActions.ActionTypes.OPEN: {\n            return { status: ChannelStatusCodes.CONNECTED };\n        }\n        case channelActions.ActionTypes.INITIAL_STATE: {\n            return { status: ChannelStatusCodes.READY };\n        }\n        case channelActions.ActionTypes.CLOSE: {\n            return { status: ChannelStatusCodes.WAITING };\n        }\n    }\n    return state;\n}","import { AllActions } from \"../actions\";\nimport { ConnectRequestParams } from \"../messages\";\nimport * as clusterActions from './actions';\n\nexport type ClusterConnectionState = {\n    status: \"connected\",\n    params: ConnectRequestParams,\n} | {\n    status: \"disconnected\",\n} | {\n    status: \"unknown\",\n}\n\nconst initialClusterConnectionState: ClusterConnectionState = {\n    status: \"unknown\"\n}\n\nexport function clusterConnectionReducer(state = initialClusterConnectionState, action: AllActions): ClusterConnectionState {\n    switch (action.type) {\n        case clusterActions.ActionTypes.NOT_CONNECTED: {\n            return {\n                status: \"disconnected\"\n            };\n        }\n        case clusterActions.ActionTypes.CONNECTED: {\n            return {\n                status: \"connected\",\n                params: action.payload.params,\n            }\n        }\n    }\n    return state;\n}","import { AllActions } from \"../actions\";\nimport * as browserActions from '../browser/actions';\nimport * as datasetActions from '../dataset/actions';\nimport { DatasetFormParams, MsgPartConfig } from \"../messages\";\nimport * as configActions from './actions';\nimport { makeUnique } from \"./helpers\";\n\nexport interface LocalConfig {\n    fileHistory: string[],\n    lastOpened: {\n        [path: string]: DatasetFormParams\n    }\n}\n\nexport interface ConfigMeta {\n    haveConfig: boolean,\n}\n\nexport type ConfigParams = MsgPartConfig & LocalConfig;\nexport type ConfigState = ConfigParams & ConfigMeta;\n\nconst initialConfigState: ConfigState = {\n    version: \"\",\n    revision: \"\",\n    localCores: 0,\n    cwd: \"/\",\n    separator: \"/\",\n    lastOpened: {},\n    fileHistory: [],\n    haveConfig: false,\n}\n\nexport function configReducer(state = initialConfigState, action: AllActions): ConfigState {\n    switch (action.type) {\n        case configActions.ActionTypes.FETCHED: {\n            return Object.assign({}, action.payload.config, { haveConfig: true });\n        }\n        case browserActions.ActionTypes.DIRECTORY_LISTING: {\n            return Object.assign({}, state, {\n                cwd: action.payload.path,\n            });\n        }\n        case datasetActions.ActionTypes.CREATE: {\n            const newLastOpened = Object.assign({}, state.lastOpened, { [action.payload.dataset.params.path]: action.payload.dataset.params });\n            const newFileHistory = makeUnique([\n                action.payload.dataset.params.path, ...state.fileHistory\n            ]).slice(0, 11);\n            return Object.assign({}, state, {\n                lastOpened: newLastOpened,\n                fileHistory: newFileHistory,\n            });\n        }\n    }\n    return state;\n}","import { AllActions } from \"../actions\";\nimport * as channelActions from '../channel/actions';\nimport { constructById, filterWithPred, insertById, updateById } from \"../helpers/reducerHelpers\";\nimport { Dataset, DatasetState, DatasetStatus } from \"../messages\";\nimport * as datasetActions from './actions';\nimport { DatasetsState, OpenDatasetState } from \"./types\";\n\nconst initialDatasetState: DatasetsState = {\n    byId: {},\n    ids: [],\n};\n\nexport function datasetReducer(state = initialDatasetState, action: AllActions): DatasetsState {\n    switch (action.type) {\n        case channelActions.ActionTypes.INITIAL_STATE: {\n            const datasets = action.payload.datasets.map(ds => Object.assign({}, ds, { status: DatasetStatus.OPEN }));\n            return {\n                byId: constructById(datasets, ds => ds.id),\n                ids: datasets.map(ds => ds.id),\n            }\n        }\n        case datasetActions.ActionTypes.CREATE: {\n            const ds: Dataset = {\n                ...action.payload.dataset,\n                status: DatasetStatus.OPENING\n            };\n            return insertById(state, action.payload.dataset.id, ds);\n        }\n        case datasetActions.ActionTypes.CREATED: {\n            const ds = Object.assign({}, action.payload.dataset, { status: DatasetStatus.OPEN });\n            return updateById(state, action.payload.dataset.id, ds);\n        }\n        case datasetActions.ActionTypes.ERROR: {\n            return filterWithPred(state, (r: DatasetState) => r.id !== action.payload.dataset);\n        }\n        case datasetActions.ActionTypes.DELETE: {\n            return updateById(state, action.payload.dataset, { status: DatasetStatus.DELETING });\n        }\n        case datasetActions.ActionTypes.DELETED: {\n            return filterWithPred(state, (r: DatasetState) => r.id !== action.payload.dataset);\n        }\n    }\n    return state;\n}\n\nconst initialOpenDatasetState: OpenDatasetState = {\n    busy: false,\n    busyPath: \"\",\n    formVisible: false,\n    formPath: \"/\",\n    formInitialParams: undefined,\n}\n\nexport function openDatasetReducer(state = initialOpenDatasetState, action: AllActions): OpenDatasetState {\n    switch (action.type) {\n        case datasetActions.ActionTypes.OPEN: {\n            return {\n                ...state,\n                formVisible: true,\n                formPath: action.payload.path,\n                formInitialParams: action.payload.initialParams,\n            };\n        }\n        case datasetActions.ActionTypes.CANCEL_OPEN: {\n            return {\n                ...state,\n                formVisible: false,\n            }\n        }\n        case datasetActions.ActionTypes.CREATE: {\n            return {\n                ...state,\n                formVisible: false,\n            }\n        }\n        case datasetActions.ActionTypes.DETECT: {\n            return {\n                ...state,\n                busyPath: action.payload.path,\n                busy: true,\n            }\n        }\n        case datasetActions.ActionTypes.DETECTED:\n        case datasetActions.ActionTypes.DETECT_FAILED: {\n            return {\n                ...state,\n                busyPath: \"\",\n                busy: false,\n            }\n        }\n    }\n    return state;\n}","import { AllActions } from \"../actions\";\nimport * as analysisActions from '../analysis/actions';\nimport * as browserActions from '../browser/actions';\nimport * as channelActions from '../channel/actions';\nimport * as datasetActions from '../dataset/actions';\nimport { ById, filterWithPred, insertById } from \"../helpers/reducerHelpers\";\nimport * as errorActions from './actions';\n\nexport interface ErrorMessage {\n    id: string,\n    msg: string,\n    timestamp: number,\n}\n\nexport type ErrorState = ById<ErrorMessage>;\n\nconst initialErrorState: ErrorState = {\n    byId: {},\n    ids: [],\n};\n\nexport function errorReducer(state = initialErrorState, action: AllActions): ErrorState {\n    switch (action.type) {\n        case browserActions.ActionTypes.ERROR:\n        case datasetActions.ActionTypes.ERROR:\n        case channelActions.ActionTypes.ERROR:\n        case analysisActions.ActionTypes.ERROR:\n        case channelActions.ActionTypes.JOB_ERROR: {\n            return insertById(state, action.payload.id, {\n                id: action.payload.id,\n                msg: action.payload.msg,\n                timestamp: action.payload.timestamp,\n            });\n        }\n        case channelActions.ActionTypes.OPEN: {\n            return initialErrorState;\n        }\n        case errorActions.ActionTypes.DISMISS: {\n            return filterWithPred(state, (r: ErrorMessage) => r.id !== action.payload.id);\n        }\n    }\n    return state;\n}","import { AllActions } from \"../actions\";\nimport * as channelActions from '../channel/actions';\nimport { ById, insertById, updateById } from \"../helpers/reducerHelpers\";\nimport * as jobActions from './actions';\nimport { JobRunning, JobState, JobStatus } from \"./types\";\n\nexport type JobReducerState = ById<JobState>;\n\nconst initialJobState: JobReducerState = {\n    byId: {},\n    ids: [],\n};\n\nexport function jobReducer(state = initialJobState, action: AllActions): JobReducerState {\n    switch (action.type) {\n        case jobActions.ActionTypes.CREATE: {\n            const createResult = insertById(\n                state,\n                action.payload.id,\n                {\n                    id: action.payload.id,\n                    dataset: action.payload.dataset,\n                    running: JobRunning.CREATING,\n                    status: JobStatus.CREATING,\n                    results: [],\n                    startTimestamp: action.payload.timestamp,\n                }\n            )\n            return createResult;\n        }\n        case channelActions.ActionTypes.JOB_STARTED: {\n            return updateById(\n                state,\n                action.payload.job,\n                {\n                    running: JobRunning.RUNNING,\n                    status: JobStatus.IN_PROGRESS,\n                    startTimestamp: action.payload.timestamp,\n                }\n            )\n        }\n        case channelActions.ActionTypes.TASK_RESULT: {\n            return updateById(\n                state,\n                action.payload.job,\n                {\n                    results: action.payload.results,\n                }\n            );\n        }\n        case channelActions.ActionTypes.FINISH_JOB: {\n            const { job, timestamp, results } = action.payload;\n            return updateById(\n                state,\n                job,\n                {\n                    running: JobRunning.DONE,\n                    status: JobStatus.SUCCESS,\n                    results,\n                    endTimestamp: timestamp,\n                }\n            );\n        }\n        case channelActions.ActionTypes.JOB_ERROR: {\n            const { job, timestamp } = action.payload;\n            return updateById(\n                state,\n                job,\n                {\n                    running: JobRunning.DONE,\n                    status: JobStatus.ERROR,\n                    endTimestamp: timestamp,\n                }\n            )\n        }\n    }\n    return state;\n}","import { combineReducers } from \"redux\";\nimport { analysisReducer } from \"./analysis/reducers\";\nimport { directoryBrowserReducer } from './browser/reducers';\nimport { channelStatusReducer } from \"./channel/reducers\";\nimport { clusterConnectionReducer } from \"./cluster/reducers\";\nimport { configReducer } from \"./config/reducers\";\nimport { datasetReducer, openDatasetReducer } from \"./dataset/reducers\";\nimport { errorReducer } from \"./errors/reducers\";\nimport { jobReducer } from \"./job/reducers\";\n\nexport const rootReducer = combineReducers({\n    analyses: analysisReducer,\n    channelStatus: channelStatusReducer,\n    clusterConnection: clusterConnectionReducer,\n    datasets: datasetReducer,\n    openDataset: openDatasetReducer,\n    jobs: jobReducer,\n    errors: errorReducer,\n    config: configReducer,\n    browser: directoryBrowserReducer,\n})\n\nexport type RootReducer = ReturnType<typeof rootReducer>;","// tslint:disable:ordered-imports\nimport \"core-js/fn/symbol/iterator.js\";\nimport \"core-js/es6/symbol.js\";\nimport 'react-app-polyfill/ie11';\n// tslint:enable:ordered-imports\n\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { applyMiddleware, compose, createStore } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\nimport { rootSaga } from './sagas';\nimport { rootReducer } from './store';\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst composeEnhancers = (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(rootReducer, composeEnhancers(\n    applyMiddleware(\n        sagaMiddleware,\n    )\n));\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root') as HTMLElement\n);\nregisterServiceWorker();\n\nsagaMiddleware.run(rootSaga);"],"sourceRoot":""}