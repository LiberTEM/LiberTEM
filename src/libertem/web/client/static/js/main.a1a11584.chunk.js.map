{"version":3,"sources":["job/components/ResultImage.module.css","cluster/actions.ts","helpers/actionHelpers.ts","errors/actions.ts","messages.ts","errors/helpers.ts","helpers/index.ts","browser/actions.ts","cluster/components/GPUSelector.tsx","cluster/components/LocalConnectionForm.tsx","cluster/components/TCPConnectionForm.tsx","cluster/components/ClusterConnectionForm.tsx","channel/components/ChannelConnecting.tsx","channel/components/ChannelShutdown.tsx","channel/components/ChannelStatus.tsx","config/actions.ts","browser/components/FileBrowserEntry.tsx","browser/components/FileBrowserHeader.tsx","browser/components/FileEntry.tsx","browser/components/FolderEntry.tsx","job/types.ts","browser/components/PathDropDownItem.tsx","browser/components/PathInput.tsx","browser/components/RecentFiles.tsx","browser/components/PathBar.tsx","browser/components/FileBrowser.tsx","browser/components/BrowserWrapper.tsx","compoundAnalysis/actions.ts","widgets/BusySpinner.tsx","widgets/BusyWrapper.tsx","widgets/HandleParent.tsx","job/components/ResultImage.tsx","job/components/Result.tsx","job/components/Selectors.tsx","job/components/ResultList.tsx","widgets/constraints.ts","widgets/styles.ts","widgets/Disk.tsx","widgets/DraggableHandle.tsx","widgets/kbdHandler.ts","compoundAnalysis/components/DefaultFrameView.tsx","compoundAnalysis/components/FramePicker.tsx","compoundAnalysis/components/ModeSelector.tsx","widgets/Rect.tsx","compoundAnalysis/components/roi/RectROI.tsx","compoundAnalysis/components/roi/RoiPicker.tsx","dataset/actions.ts","compoundAnalysis/components/roi/DiskROI.tsx","compoundAnalysis/components/layouts/AnalysisLayoutTwoCol.tsx","helpers/apiHelpers.ts","compoundAnalysis/api.ts","compoundAnalysis/getMetadata.tsx","compoundAnalysis/components/Download.tsx","compoundAnalysis/components/Toolbar.tsx","compoundAnalysis/helpers.ts","compoundAnalysis/components/CenterOfMassAnalysis.tsx","helpers/svg.ts","widgets/Ring.tsx","compoundAnalysis/components/layouts/AnalysisLayoutTwoRes.tsx","compoundAnalysis/components/Clustering.tsx","compoundAnalysis/components/DiskMaskAnalysis.tsx","compoundAnalysis/components/FEM.tsx","compoundAnalysis/components/FFTFramePicker.tsx","compoundAnalysis/components/FFTSumFrames.tsx","compoundAnalysis/components/FFTFrameView.tsx","compoundAnalysis/components/layouts/AnalysisLayoutThreeCol.tsx","compoundAnalysis/components/FFTAnalysis.tsx","compoundAnalysis/components/PointSelectionAnalysis.tsx","compoundAnalysis/components/RadialFourierAnalysis.tsx","compoundAnalysis/components/RingMaskAnalysis.tsx","compoundAnalysis/types.ts","compoundAnalysis/components/base/Analysis.tsx","compoundAnalysis/components/base/AnalysisList.tsx","helpers/reducerHelpers.ts","compoundAnalysis/components/base/AnalysisSelect.tsx","dataset/components/AddAnalysis.tsx","dataset/components/DatasetParams.tsx","dataset/components/DatasetInfo.tsx","channel/actions.ts","dataset/components/DatasetToolbar.tsx","dataset/components/Dataset.tsx","dataset/api.ts","dataset/validate.ts","dataset/helpers.ts","dataset/components/TupleInputPart.tsx","dataset/components/TupleInput.tsx","dataset/components/Reshape.tsx","dataset/components/BLOParamsForm.tsx","dataset/components/DatasetTypeSelect.tsx","dataset/components/EMPADParamsForm.tsx","dataset/components/FRMS6ParamsForm.tsx","dataset/components/HDF5ParamsForm.tsx","dataset/components/K2ISParamsForm.tsx","dataset/components/MIBParamsForm.tsx","dataset/components/MRCParamsForm.tsx","dataset/components/RawFileParamsForm.tsx","dataset/components/SEQParamsForm.tsx","dataset/components/SERParamsForm.tsx","dataset/components/DatasetOpen.tsx","dataset/components/DatasetOpenSpinner.tsx","dataset/components/DatasetList.tsx","errors/components/Error.tsx","errors/components/ErrorList.tsx","helpers/hooks.ts","images/LiberTEM logo-medium.png","About.tsx","clusterStatus/api.ts","clusterStatus/components/LocalStatus.tsx","clusterStatus/components/NotConnected.tsx","clusterStatus/components/TCPStatus.tsx","clusterStatus/components/Cluster.tsx","shutdown/api.ts","shutdown/components/ShutdownButton.tsx","Menu.tsx","App.tsx","registerServiceWorker.ts","config/helpers.ts","browser/api.ts","browser/sagas.ts","channel/messages.ts","channel/sagas.ts","cluster/api.ts","cluster/sagas.ts","analysis/actions.ts","job/actions.ts","job/api.ts","compoundAnalysis/sagas.ts","config/api.ts","config/sagas.ts","dataset/sagas.ts","sagas.ts","analysis/reducers.ts","channel/reducers.ts","browser/reducers.ts","cluster/reducers.ts","compoundAnalysis/reducers.ts","config/reducers.ts","dataset/reducers.ts","errors/reducers.ts","job/reducers.ts","store.ts","index.tsx"],"names":["module","exports","ActionTypes","createAction","type","payload","meta","undefined","Actions","notConnected","NOT_CONNECTED","connect","params","CONNECT","connecting","CONNECTING","connected","CONNECTED","error","msg","timestamp","id","ERROR","ClusterTypes","DISMISS","DISMISS_ALL","GENERIC","dispatchGenericError","dispatch","uuid","Date","now","errorActions","assertNotReached","message","Error","defaultDebounce","fn","delay","_","maxWait","getEnumValues","e","Object","keys","writeClipboard","contents","navigator","clipboard","writeText","catch","DatasetTypes","DatasetStatus","AnalysisTypes","ClusterTypeMetadata","LOCAL","label","TCP","helpText","GPUSelector","config","name","value","setFieldValue","options","devices","cudas","map","key","text","hasCupy","has_cupy","haveCudaDevices","length","disabled","showWarning","Message","warning","visible","Header","href","rel","target","Dropdown","onChange","data","placeholder","fluid","multiple","selection","withFormik","mapPropsToValues","ownProps","numWorkers","localCores","handleSubmit","values","formikBag","onSubmit","props","touched","errors","isSubmitting","handleChange","handleBlur","React","Form","Field","htmlFor","onBlur","Modal","trigger","Icon","link","Content","Button","primary","address","lastConnection","primarytype","mapDispatchToProps","connectToCluster","clusterActions","clusterTypeOptions","t","ClusterConnectionForm","state","clusterType","lastConnectionType","setType","setState","this","inline","Segment","renderForm","ChannelConnecting","icon","loading","ChannelShutdown","negative","messages","waiting","clusterMessages","ConnectedNotReady","haveConfig","useSelector","clusterConnection","status","ChannelStatus","children","channelStatus","list","path","LIST_DIRECTORY","dirListing","dirs","files","drives","places","DIRECTORY_LISTING","open","OPEN","cancel","CANCEL","select","SELECT","selectFullPath","SELECT_FULL_PATH","detectParams","DETECT_PARAMS","paramsDetected","PARAMS_DETECTED","TimeStamp","ts","date","fmtDate","toLocaleDateString","fmtTime","toLocaleTimeString","title","style","display","whiteSpace","width","marginRight","FileSize","fmtSize","bytes","si","thresh","Math","abs","size","unit","units","u","toFixed","humanFileSize","textAlign","Cell","overflow","textOverflow","FileBrowserEntry","onClick","details","myStyle","cursor","tsStyles","paddingRight","flexGrow","owner","ctime","mtime","FileBrowserHeader","alignRight","paddingBottom","FileEntry","browserActions","window","setTimeout","JobRunning","JobStatus","FETCH","FETCHED","FETCH_FAILED","TOGGLE_STAR","toString","newProps","Item","initialPath","enableReinitialize","Input","autoComplete","lastOpened","fileHistory","separator","recentFiles","filter","item","floating","Menu","content","option","idx","refresh","currentPath","handleInputChange","goUp","toggleStar","configActions","starred","driveOptions","placeOptions","starOptions","isStarred","includes","starredIcon","bookmarkTitle","listRef","scrollToTop","current","scrollToItem","sortByKey","array","getKey","sort","a","b","x","y","browser","isLoading","getSortKey","toLowerCase","dirEntries","dir","fileEntries","f","entries","concat","overflowY","ref","height","itemCount","itemSize","index","Group","as","isOpen","busy","openDataset","formVisible","labelPosition","BusySpinner","margin","padding","position","bottom","right","color","opacity","BusyWrapper","HandleParent","currentHandle","handleDragStart","h","handleDrop","handleMouseMove","externalMouseMove","handleMouseLeave","externalLeave","handleMouseUp","externalMouseUp","onMouseMove","onMouseLeave","onMouseUp","onKeyDown","onKeyboardEvent","outline","tabIndex","fill","renderHandles","handles","i","elem","ResultImage","job","channel","result","results","className","styles","fallback","viewBox","default","xlinkHref","imageURL","ResultWrapper","styled","svg","Result","extraHandles","extraWidgets","running","DONE","Selectors","div","ResultListPlaceholder","border","ResultList","selectedChannel","selectChannel","analysis","jobsById","displayedJob","dt","endTimestamp","startTimestamp","currentResult","subtitle","selectors","getMsg","selectedImg","getJob","genericRender","ResultImageSelector","availableImages","description","compoundAnalysis","compoundAnalyses","byId","analyses","analysisIndex","jobs","inRectConstraint","p","max","min","cbToRadius","cx","cy","cb","dx","dy","sqrt","dist","keepOnCY","riConstraint","outerPos","otherX","roConstraints","innerPos","defaultMaskStyles","imageWidth","fillOpacity","strokeOpacity","stroke","strokeWidth","Disk","r","StyledCircle","circle","Cross","FocusGroup","g","Handle","scale","withCross","focusRef","args","transform","crossSpec","cross","d","relativeCoords","parent","ownerSVGElement","inWidthAttr","getAttribute","inWidth","getBoundingClientRect","getScalingFactor","parentPos","pageX","left","pageXOffset","pageY","top","pageYOffset","DraggableHandle","posRef","dragging","drag","move","stopDrag","applyConstraint","constraint","startDrag","preventDefault","parentOnDragStart","focus","onDragMove","constrained","parentOnDrop","handleKeyDown","update","delta","shiftKey","handleKeyEvent","newCoords","visibility","onMouseDown","renderCommon","renderDragging","DefaultModes","DefaultRois","dataset","analysisType","CREATE","autoStart","CREATED","compoundAnalysisId","ENABLE_AUTOSTART","RUN","RUNNING","jobIndex","REMOVE","REMOVED","useFramePicker","enabled","scanWidth","scanHeight","setCx","setCy","useDispatch","useEffect","compoundAnalysisActions","PICK_FRAME","parameters","onPickChange","pickX","pickY","newX","round","newY","coords","onDragStart","onDrop","ModeSelector","modes","currentMode","onModeChange","Rect","ymin","xmin","useRectROI","minLength","useState","setx","sety","setwidth","setheight","handleCornerChange","newx","newy","handleShapeChange","smthHandle","rectRoiParameters","roi","shape","rectRoiHandles","rectRoiWidgets","imageHeight","useRoiPicker","roiParameters","handle","analysisActions","clearTimeout","JSON","stringify","useDefaultFrameView","doAutoStart","availableModes","SUM","SD","PICK","availableRois","ALL","DISK","RECT","frameMode","setMode","setRoi","frameModeSelector","newMode","roiSelector","newRoi","widgets","floor","pickCoords","pickHandles","setR","handleCenterChange","newCx","newCy","handleRChange","newR","rHandle","diskRoiParameters","diskRoiHandles","diskRoiWidgets","useDiskROI","SD_FRAMES","SUM_FRAMES","frameViewTitle","AnalysisLayoutTwoCol","toolbar","attached","Grid","columns","Row","Column","getApiBasePath","loc","location","pathname","endsWith","genericDelete","basePath","fetch","credentials","method","json","genericPut","body","createOrUpdateAnalysis","analysisId","removeAnalysis","createOrUpdateCompoundAnalysis","removeCompoundAnalysis","getNotebook","url","getMetadata","typeName","CompoundAnalysisMetadata","DownloadItems","currentFormat","analysesById","some","jobId","SUCCESS","getAnalysisDescription","desc","getDownloadChannels","includeInDownload","join","CopyScripts","dependency","initial_setup","ctx","plot","notebook","setNotebook","cell","code","padded","floated","then","CurrentNotebook","clearing","firstPart","secondPart","scrolling","DownloadScripts","downloadUrl","DownloadResultItem","formatOptions","onFormatChange","Tab","Pane","DownloadNotebookItem","CopyNotebookItem","Download","formats","resultFileFormats","identifier","setFormat","panes","menuItem","render","Toolbar","busyIdxs","onApply","applyIconProps","analysisIdxsToInclude","filteredAnalyses","indexOf","reduce","prevValue","every","getAnalysisStatus","CenterOfMassAnalysis","frameViewWidgets","resultHandles","resultWidgets","CENTER_OF_MASS","getPathArc","center","start","end","radius","degree","points","push","getLocationFromAngle","getCirclePath","clockWise","radian","PI","cos","sin","Ring","ri","ro","pathSpec","fillRule","AnalysisLayoutTwoRes","mid","clustparams","title1","title2","title3","ClustAnalysis","setRi","setRo","riHandle","roHandle","minDist","setMinDist","nPeaks","setNPeaks","nClust","setNClust","handleRIChange","handleROChange","SUM_SIG","CLUST","n_clust","n_peaks","min_dist","paramsVisible","setParamsVisible","Accordion","Title","active","step","event","valueAsNumber","DiskMaskAnalysis","APPLY_DISK_MASK","FEMAnalysis","FEM","useFFTFramePicker","real_rad","real_centerx","real_centery","PICK_FFT_FRAME","useFFTSumFrames","FFTSUM_FRAMES","useFFTFrameView","AnalysisLayoutThreeCol","FFTAnalysis","radIn","radOut","frameViewWidgetsfft","check","setCheck","realCenterX","realCenterY","realRad","frameViewWidgetsreal","APPLY_FFT_MASK","rad_in","rad_out","checked","PointSelectionAnalysis","APPLY_POINT_SELECTOR","RadialFourierAnalysis","nBins","maxOrder","RADIAL_FOURIER","n_bins","max_order","RingMaskAnalysis","APPLY_RING_MASK","component","AnalysisDispatcherComponent","datasets","AnalysisComponent","mainType","AnalysisList","ids","Analysis","updateById","partialRecord","newObj","assign","newById","insertById","record","constructById","items","acc","updateWithMap","filterWithPred","pred","toggleItemInList","analysisTypeOptions","AnalysisSelect","labeled","button","handleAddAnalysis","renderRow","param","Table","Array","DatasetParams","HeaderCell","Body","objKey","keyIdx","renderValue","diagnostics","DiagElem","DiagElems","DatasetInfo","cachedParams","detectedParams","detectedInfo","CANCEL_OPEN","DELETE","DELETED","DETECT","info","DETECTED","DETECT_FAILED","handleRemoveDataset","datasetActions","DatasetContainer","OPENING","DELETING","dividing","marginTop","marginBottom","horizontal","Popup","flexShrink","deleteDataset","detectDataset","encodeURIComponent","schemaCache","getSchema","cached","Promise","resolve","schemaResponse","convertErrors","res","forEach","err","fieldName","instancePath","replace","match","plainName","throwErrors","validateErrors","customValidateErrors","converted","validateOpen","schema","validate","Ajv","compile","parseNumList","nums","split","part","trim","parseNumListProduct","validateSyncOffsetAndSigShape","nativeSigShape","sigShape","syncOffset","imageCount","isSigShapeValid","sig_shape","isSyncOffsetValid","sync_offset","getInitial","otherwise","getInitialName","pathfind","isKnownDatasetType","detectedType","v","withValidation","opts","formToJson","setSubmitting","customValidation","validateOnChange","validateOnBlur","TupleInputPart","tupleKey","tupleInputChangeHandle","commaPressHandle","tupleRef","keyCode","TupleInput","minLen","maxLen","tupleInputValue","maxLength","initialList","slice","parseNumListWithPadding","tupleInputRefsArray","val","newTupleInputValue","newTupleDim","hidden","basic","pop","Reshape","navShape","hideInfo","reshapedNavShape","reshapedSigShape","navShapeProduct","offsetValue","setOffset","offsetVal","parseInt","framesSkippedStart","framesIgnoredEnd","framesInsertedStart","framesInsertedEnd","frameCalcForOffset","required","initial","nav_shape","BLO","native_sig_shape","image_count","handleReset","isValidating","onCancel","datasetTypeOptions","DatasetTypeSelect","currentType","EMPAD","FRMS6","ds_path","HDF5","dsItemsByPath","dsItem","dsPathInput","dsPathOptions","chunks","compression","pathsLength","search","defaultValue","selectedItem","K2IS","MIB","MRC","enable_direct","dtype","RAW","SEQ","SER","getDefaultDSType","didReset","openState","formCachedParams","formDetectedParams","DatasetOpen","setReset","formInitial","newFormCachedParams","scan_size","detector_size","getFormInitial","formInfo","formDetectedInfo","getFormInfo","defaultType","datasetType","setDatasetType","doSetType","form","formPath","commonParams","onReset","MIBParamsForm","BLOParamsForm","K2ISParamsForm","SEQParamsForm","MRCParamsForm","busyPath","DatasetList","dsId","Dataset","dismiss","onDismiss","channelConnected","latestErrors","showModal","handleEsc","ev","document","addEventListener","removeEventListener","version","revision","List","src","alt","getClusterDetail","LocalStatus","cudaText","localCore","host","cpu","cuda","service","clustDetails","setDetails","newDetails","NotConnected","ClusterDetails","clustOverview","setOverview","setIdx","expandMsg","setMsg","overview","node","clusterExpanded","TCPStatus","localcore","ColorType","grey","setColor","setStatus","disable","setDisable","blue","initialState","INITIAL_STATE","jobStarted","JOB_STARTED","finishJob","FINISH_JOB","taskResult","TASK_RESULT","jobError","JOB_ERROR","close","CLOSE","shutdown","SHUTDOWN","closeloop","CLOSE_LOOP","cancelled","CANCELLED","cancelFailed","CANCEL_JOB_FAILED","analysisCreated","ANALYSIS_CREATED","analysisUpdated","ANALYSIS_UPDATED","analysisRemoved","ANALYSIS_REMOVED","doShutdown","closeLoopAction","channelActions","shutdownAction","ShutdownButton","modal","modalOpen","modalClose","handleShutdown","closeOnDimmerClick","onClose","HeaderMenu","fixed","Cluster","App","Container","logo","isLocalhost","Boolean","hostname","registerValidSW","swUrl","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","CONFIG_KEY","joinPaths","parts","removeSep","RegExp","escapeRegExp","mergeLocalStorage","serverConfig","localSettings","localStorage","getItem","getDefaultLocalConfig","localSettingsParsed","parse","defaultConfig","setLocalStorage","cwd","setItem","makeUnique","inp","curr","getDirectoryListing","directoryListingSaga","fetchOnRequest","fetchDirectoryListing","fetchDirectoryListOnOpen","fork","take","action","newPath","call","put","browserState","alternative","home","MessageTypes","createMessage","messageType","attribs","Messages","objectURL","BINARY","webSocketSaga","actionsFromChannel","handleBinaryParts","handleTaskResult","handleFinishJob","createWebSocketChannel","eventChannel","emit","onMessage","Blob","channelMessages","URL","createObjectURL","parsed","onOpen","END","onError","ws","WebSocket","port","getApiWSURL","socketChannel","CREATE_DATASET","DELETE_DATASET","CANCEL_JOB_DONE","numParts","binMsg","followup","numMessages","images","descriptions","connection","checkClusterConnection","connectSaga","putClusterStatus","trackClusterConnection","clusterConnectionSaga","conn","takeEvery","all","UPDATED","startJob","cancelJob","cleanupOnRemove","createCompoundAnalysisSaga","createFromServerState","createOrUpdate","analysisSidecar","removeJobsForAnalysis","doRemoveAnalysisSaga","analysisRootSaga","selectDataset","selectCompoundAnalysis","selectAnalysis","selectJob","sidecarTask","msgPart","oldJobId","newAnalysisId","updatedCompoundAnalysis","actionChannel","buffers","sliding","runOrParamsChannel","existingAnalysisId","jobActions","getConfig","getConfigOnReconnect","getConfigSaga","updateLocalStorageConfig","firstConfigFetch","configRootSaga","configResponse","mergedConfig","removeItem","createDatasetSaga","deleteDatasetSaga","doDetectDataset","doOpenDataset","openDatasetSagaFullPath","openDatasetSaga","datasetRootSaga","resp","fullPath","detectResult","shouldOpen","datasetParams","datasetInfo","rootSaga","ChannelStatusCodes","initialAnalysisState","initialBrowserState","initialChannelState","WAITING","initialClusterConnectionState","initialCompoundAnalysisState","initialConfigState","cpus","initialDatasetState","initialOpenDatasetState","initialErrorState","initialJobState","rootReducer","combineReducers","newCompoundAnalysis","newAnalyses","ca","oldJobs","analysisState","analysisIdForJob","find","READY","DISCONNECTED","ds","createResult","CREATING","IN_PROGRESS","jobState","newLastOpened","newFileHistory","newLastConnection","place","sagaMiddleware","createSagaMiddleware","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","ReactDOM","getElementById","process","origin","response","headers","get","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker","run"],"mappings":"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","file":"static/js/main.a1a11584.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"default\":\"ResultImage_default__3bBhu\",\"fallback\":\"ResultImage_fallback__3KPWu\"};","import { ActionsUnion, createAction } from '../helpers/actionHelpers';\nimport { ConnectRequestParams } from '../messages';\n\nexport enum ActionTypes {\n    NOT_CONNECTED = 'CLUSTER_NOT_CONNECTED',\n    CONNECT = 'CLUSTER_CONNECT',\n    CONNECTING = 'CLUSTER_CONNECTING',\n    CONNECTED = 'CLUSTER_CONNECTED',\n    ERROR = 'CLUSTER_ERROR'\n    \n}\n\nexport const Actions = {\n    notConnected: () => createAction(ActionTypes.NOT_CONNECTED),\n    connect: (params: ConnectRequestParams) => createAction(ActionTypes.CONNECT, { params },),\n    connecting: () => createAction(ActionTypes.CONNECTING),\n    connected: (params: ConnectRequestParams ) => createAction(ActionTypes.CONNECTED, { params }),\n    error: (msg: string, timestamp: number, id: string) => createAction(ActionTypes.ERROR, { msg, timestamp, id }),\n}\n\nexport type Actions = ActionsUnion<typeof Actions>;\n","import { ActionCreatorsMapObject } from \"redux\";\n\nexport interface Action<T extends string> {\n    type: T\n}\n\nexport interface ActionWithPayload<T extends string, P> extends Action<T> {\n    payload: P\n}\n\nexport interface ActionWithMeta<T extends string, P, M> extends ActionWithPayload<T, P> {\n    meta: M\n}\n\nexport function createAction<T extends string>(type: T): Action<T>;\nexport function createAction<T extends string, P>(type: T, payload: P): ActionWithPayload<T, P>;\nexport function createAction<T extends string, P, M>(type: T, payload: P, meta: M): ActionWithMeta<T, P, M>;\n// eslint-disable-next-line prefer-arrow/prefer-arrow-functions\nexport function createAction<T extends string, P, M>(type: T, payload?: P, meta?: M) {\n    if (meta === undefined && payload === undefined) {\n        return { type };\n    } else if (meta === undefined) {\n        return { type, payload };\n    } else {\n        return { type, payload, meta }\n    }\n}\n\nexport type ActionsUnion<A extends ActionCreatorsMapObject> = ReturnType<A[keyof A]>","import { ActionsUnion, createAction } from \"../helpers/actionHelpers\";\n\nexport enum ActionTypes {\n    GENERIC = \"ERROR_GENERIC\",\n    DISMISS = \"ERROR_DISMISS\",\n    DISMISS_ALL = \"ERROR_DISMISS_ALL\",\n}\n\nexport const Actions = {\n    dismiss: (id: string) => createAction(ActionTypes.DISMISS, { id }),\n    dismissAll: () => createAction(ActionTypes.DISMISS_ALL),\n    generic: (id: string, msg: string, timestamp: number) => createAction(ActionTypes.GENERIC, { id, msg, timestamp }),\n}\n\nexport type Actions = ActionsUnion<typeof Actions>;","import { JobList } from \"./analysis/types\"\n\n/*\n * Common\n */\n\nexport interface FollowupPart {\n    numMessages: number,\n    descriptions: Array<{ title: string, desc: string, includeInDownload: boolean }>,\n}\n\nexport interface ResultFileFormat {\n    identifier: string,\n    description: string,\n}\n\nexport interface MsgPartConfig {\n    version: string,\n    revision: string,\n    localCores: number,\n    devices: {\n        cpus: number[],\n        cudas: number[],\n        has_cupy: boolean,\n    }\n    cwd: string,\n    separator: string,\n    resultFileFormats: {\n        [id: string]: ResultFileFormat,\n    },\n}\n\nexport interface GetConfigResponse {\n    status: \"ok\",\n    config: MsgPartConfig,\n}\n\n/*\n * Connection\n */\n\nexport enum ClusterTypes {\n    LOCAL = \"LOCAL\",\n    TCP = \"TCP\",\n}\n\nexport const ClusterTypeMetadata: { [s: string]: { [s: string]: string } } = {\n    [ClusterTypes.LOCAL]: {\n        label: \"Create local cluster\",\n    },\n    [ClusterTypes.TCP]: {\n        label: \"Connect to cluster\",\n        helpText: \"can be either local or remote, connection via TCP\",\n    }\n}\n\nexport interface ConnectRequestLocalCluster {\n    type: ClusterTypes.LOCAL,\n    numWorkers?: number,\n    cudas: number[],\n}\n\nexport interface ConnectRequestTCP {\n    type: ClusterTypes.TCP,\n    address: string,\n}\n\nexport type ConnectRequestParams = ConnectRequestLocalCluster | ConnectRequestTCP\n\nexport interface ConnectRequest {\n    connection: ConnectRequestParams\n}\n\nexport type ConnectResponse = {\n    status: \"ok\",\n    connection: ConnectRequest,\n} | {\n    status: \"disconnected\",\n    connection: Record<string, never>,\n} | {\n    status: \"error\",\n    messageType: string,\n    msg: string,\n}\n\nexport interface HostDetails {\n    host: string,\n    cpu: number,\n    cuda: number,\n    service: number,\n}\n\nexport interface ClusterDetailsResponse {\n    status: \"ok\",\n    messageType: string,\n    details: HostDetails[],\n}\n\n/*\n * Dataset\n */\n\nexport enum DatasetTypes {\n    HDF5 = \"HDF5\",\n    RAW = \"RAW\",\n    MIB = \"MIB\",\n    BLO = \"BLO\",\n    K2IS = \"K2IS\",\n    SER = \"SER\",\n    FRMS6 = \"FRMS6\",\n    EMPAD = \"EMPAD\",\n    SEQ = \"SEQ\",\n    MRC = \"MRC\",\n}\n\nexport interface DatasetParamsCommon {\n    name: string,\n    nav_shape: number[],\n    sig_shape: number[],\n    sync_offset: number,\n    scan_size?: number[],\n    detector_size?: number[],\n}\n\nexport interface DatasetInfoCommon {\n    image_count: number,\n    native_sig_shape: number[],\n}\n\nexport type DatasetParamsHDF5 = {\n    type: DatasetTypes.HDF5,\n    path: string,\n    ds_path: string,\n} & DatasetParamsCommon\n\nexport interface DatasetInfoHDF5Item {\n    path: string,\n    shape: number[],\n    compression: null | string,\n    chunks: null | number[],\n}\n\nexport type DatasetInfoHDF5 = {\n    type: DatasetTypes.HDF5,\n    datasets?: DatasetInfoHDF5Item[],\n} & DatasetInfoCommon\n\nexport type DatasetParamsRaw = {\n    type: DatasetTypes.RAW,\n    path: string,\n    dtype: string,\n    enable_direct: boolean,\n} & DatasetParamsCommon\n\nexport interface DatasetInfoRAW {\n    type: DatasetTypes.RAW,\n}\n\nexport type DatasetParamsMIB = {\n    type: DatasetTypes.MIB,\n    path: string,\n} & DatasetParamsCommon\n\nexport type DatasetInfoMIB = {\n    type: DatasetTypes.MIB,\n} & DatasetInfoCommon\n\nexport type DatasetParamsBLO = {\n    type: DatasetTypes.BLO,\n    path: string,\n} & DatasetParamsCommon\n\nexport type DatasetInfoBLO = {\n    type: DatasetTypes.BLO,\n} & DatasetInfoCommon\n\nexport type DatasetParamsK2IS = {\n    type: DatasetTypes.K2IS,\n    path: string,\n} & DatasetParamsCommon\n\nexport type DatasetInfoK2IS = {\n    type: DatasetTypes.K2IS,\n} & DatasetInfoCommon\n\nexport type DatasetParamsSER = {\n    type: DatasetTypes.SER,\n    path: string,\n} & DatasetParamsCommon\n\nexport type DatasetInfoSER = {\n    type: DatasetTypes.SER,\n} & DatasetInfoCommon\n\nexport type DatasetParamsFRMS6 = {\n    type: DatasetTypes.FRMS6,\n    path: string,\n} & DatasetParamsCommon\n\nexport type DatasetInfoFRMS6 = {\n    type: DatasetTypes.FRMS6,\n} & DatasetInfoCommon\n\nexport type DatasetParamsEMPAD = {\n    type: DatasetTypes.EMPAD,\n    path: string,\n} & DatasetParamsCommon\n\nexport type DatasetInfoEMPAD = {\n    type: DatasetTypes.EMPAD,\n} & DatasetInfoCommon\n\nexport type DatasetParamsSEQ = {\n    type: DatasetTypes.SEQ,\n    path: string,\n} & DatasetParamsCommon\n\nexport type DatasetInfoSEQ = {\n    type: DatasetTypes.SEQ,\n} & DatasetInfoCommon\n\nexport type DatasetParamsMRC = {\n    type: DatasetTypes.MRC,\n    path: string,\n} & DatasetParamsCommon\n\nexport type DatasetInfoMRC = {\n    type: DatasetTypes.MRC,\n} & DatasetInfoCommon\n\nexport type DatasetFormParams = DatasetParamsHDF5 | DatasetParamsRaw | DatasetParamsMIB | DatasetParamsBLO | DatasetParamsK2IS | DatasetParamsSER | DatasetParamsFRMS6 | DatasetParamsEMPAD | DatasetParamsSEQ | DatasetParamsMRC\n\nexport type DatasetFormInfo = DatasetInfoHDF5 | DatasetInfoRAW | DatasetInfoMIB | DatasetInfoBLO | DatasetInfoK2IS | DatasetInfoSER | DatasetInfoFRMS6 | DatasetInfoEMPAD | DatasetInfoSEQ | DatasetInfoMRC\n\nexport interface DatasetCreateParams {\n    id: string,\n    params: DatasetFormParams,\n}\n\nexport enum DatasetStatus {\n    OPEN = \"OPEN\",\n    OPENING = \"OPENING\",\n    DELETING = \"DELETING\",\n}\n\nexport interface DiagElemMsg {\n    name: string,\n    value: string | DiagElemMsg[],\n}\n\ninterface DatasetCommon {\n    id: string,\n    params: DatasetFormParams,\n}\n\nexport type DatasetOpening = DatasetCommon & {\n    status: DatasetStatus.OPENING,\n}\n\nexport type DatasetDeleting = DatasetCommon & {\n    status: DatasetStatus.DELETING,\n}\n\nexport type DatasetOpen = DatasetCommon & {\n    status: DatasetStatus.OPEN,\n    params: {\n        shape: number[],\n    }\n    diagnostics: DiagElemMsg[],\n}\n\nexport type CreateDatasetMessage = Omit<DatasetOpen, \"status\">;\n\nexport type Dataset = DatasetOpening | DatasetOpen | DatasetDeleting;\n\nexport interface OpenDatasetRequest {\n    dataset: DatasetCreateParams\n}\n\nexport interface OpenDatasetResponseOk {\n    status: \"ok\",\n    dataset: string,  // TODO: uuid type?\n    details: DatasetOpen,\n}\n\nexport interface OpenDatasetResponseError {\n    status: \"error\",\n    dataset: string,\n    msg: string,\n}\n\nexport type OpenDatasetResponse = OpenDatasetResponseOk | OpenDatasetResponseError\n\nexport interface DeleteDatasetResponse {\n    status: \"ok\",\n    dataset: string,\n}\n\nexport interface DetectDatasetSuccessResponse {\n    status: \"ok\",\n    datasetParams: DatasetFormParams,\n    datasetInfo: DatasetFormInfo,\n}\n\nexport interface DetectDatasetErrorResponse {\n    status: \"error\",\n    path: string,\n    msg: string,\n}\n\nexport type DetectDatasetResponse = DetectDatasetSuccessResponse | DetectDatasetErrorResponse;\n\nexport interface DataSetOpenSchemaSuccessResponse {\n    status: \"ok\",\n    ds_type: string,\n    schema: Record<string, unknown>,\n}\n\nexport interface DataSetOpenSchemaErrorResponse {\n    status: \"error\",\n    ds_type: string,\n    msg: string,\n}\n\nexport type DataSetOpenSchemaResponse = DataSetOpenSchemaSuccessResponse | DataSetOpenSchemaErrorResponse;\n\nexport type MsgPartInitialDataset = DatasetOpen\n\n// type alias to add client-side state to datasets (currently empty)\nexport type DatasetState = Dataset\n\n/*\n * Job\n */\nexport interface MsgPartJob {\n    id: string,\n    analysis: string,\n}\n\nexport interface MaskDefRing {\n    shape: \"ring\",\n    cx: number,\n    cy: number,\n    ri: number,\n    ro: number\n}\n\n\nexport interface MaskDefDisk {\n    shape: \"disk\",\n    cx: number,\n    cy: number,\n    r: number,\n}\n\nexport interface PointDef {\n    shape: \"point\",\n    cx: number,\n    cy: number,\n}\n\n// TODO: shape doesn't really make sense here, needs to be restructured\nexport interface CenterOfMassParams {\n    shape: \"com\",\n    cx: number,\n    cy: number,\n    r: number,\n}\n\nexport interface PickFrameParams {\n    x: number,\n    y: number,\n}\n\nexport interface FFTSumFramesParams {\n    real_rad: number | null,\n    real_centerx: number | null,\n    real_centery: number | null,\n}\n\nexport interface PickFFTFrameParams {\n    x: number,\n    y: number,\n    real_rad: number | null,\n    real_centerx: number | null,\n    real_centery: number | null,\n}\nexport interface RadialFourierParams {\n    shape: \"radial_fourier\",\n    cx: number,\n    cy: number,\n    ri: number,\n    ro: number,\n    n_bins: number,\n    max_order: number\n}\n\nexport interface FFTParams {\n    rad_in: number,\n    rad_out: number,\n    real_rad: number | null,\n    real_centerx: number | null,\n    real_centery: number | null,\n}\n\nexport interface RectRoiParams {\n    shape: \"rect\",\n    x: number,\n    y: number,\n    width: number,\n    height: number,\n}\n\nexport interface DiskRoiParams {\n    shape: \"disk\",\n    cx: number,\n    cy: number,\n    r: number,\n}\n\nexport interface FrameParams {\n    roi: RectRoiParams | DiskRoiParams | Record<string, never>\n}\n\nexport interface ClustParams {\n    roi: RectRoiParams | Record<string, never>,\n    cx: number,\n    cy: number,\n    ri: number,\n    ro: number,\n    n_peaks: number,\n    n_clust: number,\n    min_dist: number,\n}\n\nexport enum AnalysisTypes {\n    APPLY_RING_MASK = \"APPLY_RING_MASK\",\n    APPLY_DISK_MASK = \"APPLY_DISK_MASK\",\n    APPLY_POINT_SELECTOR = \"APPLY_POINT_SELECTOR\",\n    CENTER_OF_MASS = \"CENTER_OF_MASS\",\n    SUM_FRAMES = \"SUM_FRAMES\",\n    SD_FRAMES = \"SD_FRAMES\",\n    PICK_FRAME = \"PICK_FRAME\",\n    PICK_FFT_FRAME = \"PICK_FFT_FRAME\",\n    APPLY_FFT_MASK = \"APPLY_FFT_MASK\",\n    FFTSUM_FRAMES = \"FFTSUM_FRAMES\",\n    RADIAL_FOURIER = \"RADIAL_FOURIER\",\n    FEM = \"FEM\",\n    CLUST = \"CLUST\",\n    SUM_SIG = \"SUM_SIG\",\n}\n\nexport interface RingMaskDetails {\n    analysisType: AnalysisTypes.APPLY_RING_MASK,\n    parameters: MaskDefRing,\n}\n\nexport interface FFTDetails {\n    analysisType: AnalysisTypes.APPLY_FFT_MASK,\n    parameters: FFTParams,\n}\n\nexport interface FEMDetails {\n    analysisType: AnalysisTypes.FEM,\n    parameters: MaskDefRing,\n}\n\nexport interface DiskMaskDetails {\n    analysisType: AnalysisTypes.APPLY_DISK_MASK,\n    parameters: MaskDefDisk,\n}\n\nexport interface PointDefDetails {\n    analysisType: AnalysisTypes.APPLY_POINT_SELECTOR,\n    parameters: PointDef,\n}\n\nexport interface CenterOfMassDetails {\n    analysisType: AnalysisTypes.CENTER_OF_MASS,\n    parameters: CenterOfMassParams,\n}\n\nexport interface SumFramesDetails {\n    analysisType: AnalysisTypes.SUM_FRAMES,\n    parameters: FrameParams\n}\n\nexport interface SDFramesDetails {\n    analysisType: AnalysisTypes.SD_FRAMES,\n    parameters: FrameParams\n}\n\nexport interface SumSigDetails {\n    analysisType: AnalysisTypes.SUM_SIG,\n    parameters: Record<string, never>\n}\n\nexport interface FFTSumFramesDetails {\n    analysisType: AnalysisTypes.FFTSUM_FRAMES,\n    parameters: FFTSumFramesParams,\n}\n\nexport interface PickFrameDetails {\n    analysisType: AnalysisTypes.PICK_FRAME,\n    parameters: PickFrameParams,\n}\n\nexport interface PickFFTFrameDetails {\n    analysisType: AnalysisTypes.PICK_FFT_FRAME,\n    parameters: PickFFTFrameParams,\n}\n\nexport interface RadialFourierDetails {\n    analysisType: AnalysisTypes.RADIAL_FOURIER,\n    parameters: RadialFourierParams,\n}\n\nexport interface ClustDetails {\n    analysisType: AnalysisTypes.CLUST,\n    parameters: ClustParams,\n}\n\nexport type AnalysisParameters = MaskDefRing | MaskDefDisk | CenterOfMassParams | PointDef | PickFrameParams | RadialFourierParams | FFTParams | PickFFTFrameParams | FFTSumFramesParams | ClustParams;\nexport type AnalysisDetails = RingMaskDetails | DiskMaskDetails | CenterOfMassDetails | PointDefDetails | SumFramesDetails | SDFramesDetails | PickFrameDetails | RadialFourierDetails | FEMDetails | FFTDetails | FFTSumFramesDetails | PickFFTFrameDetails | SumSigDetails | ClustDetails;\n\nexport interface MsgPartAnalysis {\n    analysis: string,\n    dataset: string,\n    details: AnalysisDetails,\n    jobs: JobList,\n}\n\nexport type CreateOrUpdateAnalysisRequest = Omit<MsgPartAnalysis, \"analysis\" | \"jobs\">;\n\nexport type CreateAnalysisResponse = {\n    status: \"ok\",\n    messageType: \"ANALYSIS_CREATED\",\n} & MsgPartAnalysis\n\nexport type UpdateAnalysisResponse = {\n    status: \"ok\",\n    messageType: \"ANALYSIS_UPDATED\",\n} & MsgPartAnalysis\n\nexport type RemoveAnalysisResponse = {\n    status: \"ok\"\n    messageType: \"ANALYSIS_REMOVED\",\n    analysis: string,\n} | {\n    status: \"error\",\n    messageType: \"ANALYSIS_REMOVAL_FAILED\",\n    msg: string,\n    analysis: string,\n}\n\nexport interface CompoundAnalysisDetails {\n    mainType: AnalysisTypes,\n    analyses: string[],\n}\n\nexport interface MsgPartCompoundAnalysis {\n    compoundAnalysis: string,\n    dataset: string,\n    details: CompoundAnalysisDetails,\n}\n\nexport interface CreateOrUpdateCompoundAnalysisRequest {\n    dataset: string,\n    details: CompoundAnalysisDetails,\n}\n\nexport type CreateCompoundAnalysisResponse = {\n    status: \"ok\",\n    messageType: \"COMPOUND_ANALYSIS_CREATED\",\n} & MsgPartCompoundAnalysis;\n\nexport type RemoveCompoundAnalysisResponse = {\n    status: \"ok\"\n    messageType: \"COMPOUND_ANALYSIS_REMOVED\",\n    analysis: string,\n} | {\n    status: \"error\",\n    messageType: \"COMPOUND_ANALYSIS_REMOVAL_FAILED\",\n    msg: string,\n    analysis: string,\n}\n\nexport interface StartJobRequest {\n    job: {\n        analysis: string,\n    }\n}\n\nexport interface StartJobResponse {\n    status: \"ok\",\n    job: string,\n    details: MsgPartJob,\n}\n\nexport interface CancelJobResponse {\n    status: \"ok\",\n    job: string,\n}\n\n/*\n * fs browser\n */\n\n// some named place, i.e. \"Documents\", \"Home\", ...\nexport interface FSPlace {\n    title: string,\n    path: string,\n    key: string,\n}\n\nexport interface DirectoryListingDetails {\n    name: string,\n    size: number,\n    ctime: number,\n    mtime: number,\n    owner: string,\n}\n\nexport interface DirectoryListingResponseOK {\n    status: \"ok\",\n    path: string,\n    files: DirectoryListingDetails[],\n    dirs: DirectoryListingDetails[],\n    drives: string[],\n    places: FSPlace[],\n}\n\nexport interface DirectoryListingResponseError {\n    status: \"error\",\n    path: string,\n    code: string,\n    msg: string,\n    alternative?: string,\n}\n\nexport type DirectoryListingResponse = DirectoryListingResponseOK | DirectoryListingResponseError;\n\nexport interface ShutdownResponse {\n    status: \"ok\",\n    messageType: \"SERVER_SHUTDOWN\",\n}\n\nexport interface  CopyAnalysis{\n    analysis: string,\n    plot: string[],\n}\n\nexport interface CopyNotebookResponse {\n    dependency: string,\n    initial_setup: string,\n    ctx: string,\n    dataset: string,\n    analysis: CopyAnalysis[],\n}\n","import { Dispatch } from \"redux\";\nimport { v4 as uuid } from 'uuid';\nimport { AllActions } from \"../actions\";\nimport * as errorActions from \"./actions\"\n\nexport const dispatchGenericError = (msg: string, dispatch: Dispatch<AllActions>): void => {\n    const id = uuid();\n    const timestamp = Date.now();\n    dispatch(errorActions.Actions.generic(id, \"could not write to clipboard\", timestamp));\n}","import * as _ from \"lodash\";\nimport { Dispatch } from \"redux\";\nimport { AllActions } from \"../actions\";\nimport { dispatchGenericError } from \"../errors/helpers\";\n\nexport const assertNotReached = (message: string): never => {\n    throw new Error(message);\n}\n\nexport const defaultDebounce = <T extends (...args: any[]) => any>(fn: T, delay = 50) => (\n    _.debounce(fn, delay, { maxWait: delay })\n);\n\nexport const getEnumValues = <E>(e: E): Array<keyof E> => (\n    Object.keys(e) as Array<keyof E>\n);\n\nexport const writeClipboard = (contents: string, dispatch: Dispatch<AllActions>): void => {\n    navigator.clipboard.writeText(contents).catch(() => dispatchGenericError(\"could not write to clipboard\", dispatch));\n}","import { ActionsUnion, createAction } from \"../helpers/actionHelpers\";\nimport { DatasetFormParams, DirectoryListingDetails, FSPlace } from \"../messages\";\n\nexport enum ActionTypes {\n    LIST_DIRECTORY = 'BROWSER_LIST_DIRECTORY',\n    LIST_FULL_PATH = 'BROWSER_LIST_DIRECTORY_FULL',\n    DIRECTORY_LISTING = 'BROWSER_DIRECTORY_LISTING',\n    DETECT_PARAMS = 'BROWSER_DETECT_PARAMS',\n    PARAMS_DETECTED = 'BROWSER_PARAMS_DETECTED',\n    ERROR = 'BROWSER_ERROR',\n    OPEN = 'BROWSER_OPEN',\n    CANCEL = 'BROWSER_CANCEL',\n    SELECT = 'BROWSER_SELECT',\n    SELECT_FULL_PATH = 'BROWSER_SELECT_FULL_PATH',\n}\n\nexport const Actions = {\n    list: (path: string, name?: string) => createAction(ActionTypes.LIST_DIRECTORY, { path, name }),\n    dirListing: (path: string, dirs: DirectoryListingDetails[], files: DirectoryListingDetails[], drives: string[], places: FSPlace[]) => createAction(ActionTypes.DIRECTORY_LISTING, { path, dirs, files, drives, places }),\n    open: () => createAction(ActionTypes.OPEN),\n    cancel: () => createAction(ActionTypes.CANCEL),\n    select: (path: string, name: string) => createAction(ActionTypes.SELECT, { path, name }),\n    selectFullPath: (path: string) => createAction(ActionTypes.SELECT_FULL_PATH, { path }),\n    error: (msg: string, timestamp: number, id: string) => createAction(ActionTypes.ERROR, { msg, timestamp, id }),\n    detectParams: (path: string) => createAction(ActionTypes.DETECT_PARAMS, { path }),\n    paramsDetected: (path: string, params: DatasetFormParams) => createAction(ActionTypes.PARAMS_DETECTED, { path, params }),\n}\n\nexport type Actions = ActionsUnion<typeof Actions>;","import * as React from \"react\";\nimport { Dropdown, DropdownProps, Message } from \"semantic-ui-react\";\nimport { ConfigState } from \"../../config/reducers\";\n\ninterface GPUSelectorProps {\n    config: ConfigState,\n    name: string,\n    value: number[],\n    setFieldValue: (name: string, value: any) => void,\n}\n\n\nexport const GPUSelector: React.FC<GPUSelectorProps> = ({\n    config, name, value, setFieldValue,\n}) => {\n    const options = config.devices.cudas.map(id => ({ key: id, value: id, text: `GPU ${id}` }));\n    const myHandleChange = (e: React.ChangeEvent<any>, data: DropdownProps) => {\n        setFieldValue(name, data.value);\n    }\n    const hasCupy = config.devices.has_cupy;\n    const haveCudaDevices = config.devices.cudas.length > 0;\n    const disabled = !hasCupy || !haveCudaDevices;\n    const showWarning = !hasCupy && haveCudaDevices;\n    return (\n        <>\n            {showWarning ?\n                <Message warning visible>\n                    <Message.Header>No cupy installation found</Message.Header>\n                    <p>\n                        To make use of the built-in GPU support, make\n                        sure to install <a href=\"https://cupy.dev/\" rel=\"noreferrer noopener\" target=\"_blank\">cupy</a>\n                    </p>\n                </Message> : ''\n            }\n            <Dropdown onChange={myHandleChange}\n                disabled={disabled}\n                placeholder='Select CUDA devices'\n                fluid multiple selection\n                value={value}\n                options={options} />\n        </>\n    );\n};\n","import { FormikProps, withFormik } from \"formik\";\nimport * as React from \"react\";\nimport { Button, Form, Icon, Modal } from \"semantic-ui-react\";\nimport { ConfigState } from \"../../config/reducers\";\nimport { Omit } from \"../../helpers/types\";\nimport { ClusterTypes, ConnectRequestLocalCluster } from \"../../messages\";\nimport { GPUSelector } from \"./GPUSelector\";\n\ntype FormValues = Omit<ConnectRequestLocalCluster, \"type\"> & {\n    cudas: number[],\n};\n\ninterface FormProps {\n    onSubmit: (params: ConnectRequestLocalCluster) => void,\n    config: ConfigState,\n}\n\ntype MergedProps = FormikProps<FormValues> & FormProps;\n\nconst LocalConnectionForm: React.FC<MergedProps> = ({\n    config,\n    values,\n    touched,\n    errors,\n    isSubmitting,\n    handleChange,\n    handleBlur,\n    handleSubmit,\n    setFieldValue,\n}) => {\n    // default value:\n    React.useEffect(() => {\n        setFieldValue(\"cudas\", config.devices.cudas);\n    }, [config.devices.cudas, setFieldValue]);\n\n    return (\n        <Form onSubmit={handleSubmit}>\n            <Form.Field>\n                <label htmlFor=\"numWorkers\">Number of Workers:</label>\n                <input type=\"number\" name=\"numWorkers\" value={values.numWorkers}\n                    onChange={handleChange}\n                    onBlur={handleBlur} />\n                {errors.numWorkers && touched.numWorkers && errors.numWorkers}\n            </Form.Field>\n            <Form.Field>\n                <label htmlFor=\"cudas\">\n                    CUDA devices to use{' '}\n                    <Modal trigger={<Icon name=\"info circle\" link/>}>\n                        <Modal.Header>\n                            CUDA information\n                        </Modal.Header>\n                        <Modal.Content>\n                            <p>\n                                For some operations, LiberTEM can automatically make use of your graphics card,\n                                if it supports CUDA.\n                            </p>\n                            <ul>\n                                <li>Number of CUDA devices found: {config.devices.cudas.length}</li>\n                                <li>cupy installation found:{' '}{config.devices.has_cupy ? 'Yes' : 'No'}</li>\n                            </ul>\n                            <p>cupy needs to be installed to make use of any CUDA devices on your system. Also,\n                                the matching cuda libraries and graphics drivers need to be installed. Please\n                                refer to{' '}\n                                <a href=\"https://docs.cupy.dev/en/stable/install.html\" target=\"_blank\" rel=\"noopener noreferrer\">\n                                    the cupy documentation\n                                </a>{' '}\n                                for more information.\n                            </p>\n                        </Modal.Content>\n                    </Modal>\n                </label>\n                <GPUSelector name=\"cudas\" value={values.cudas} config={config} setFieldValue={setFieldValue} />\n            </Form.Field>\n            <Button primary type=\"submit\" disabled={isSubmitting}>Connect</Button>\n        </Form>\n    )\n}\n\nexport default withFormik<FormProps, FormValues>({\n    mapPropsToValues: (ownProps: FormProps) => ({\n        numWorkers: ownProps.config.localCores,\n        cudas: [],\n    }),\n    handleSubmit: (values, formikBag) => {\n        const { onSubmit } = formikBag.props;\n        onSubmit({\n            type: ClusterTypes.LOCAL,\n            ...values,\n        });\n    }\n})(LocalConnectionForm);\n","import { FormikProps, withFormik } from \"formik\";\nimport * as React from \"react\";\nimport { Button, Form } from \"semantic-ui-react\";\nimport { ConfigState } from \"../../config/reducers\";\nimport { Omit } from \"../../helpers/types\";\nimport { ClusterTypes, ConnectRequestTCP } from \"../../messages\";\n\ntype FormValues = Omit<ConnectRequestTCP, \"type\">;\n\ninterface FormProps {\n    onSubmit: (params: ConnectRequestTCP) => void,\n    config: ConfigState,\n}\n\ntype MergedProps = FormikProps<FormValues> & FormProps;\n\nconst TCPConnectionForm: React.FC<MergedProps> = ({\n    values,\n    touched,\n    errors,\n    isSubmitting,\n    handleChange,\n    handleBlur,\n    handleSubmit,\n}) => (\n    <Form onSubmit={handleSubmit}>\n        <Form.Field>\n            <label htmlFor=\"address\">Scheduler URI</label>\n            <input type=\"text\" name=\"address\" value={values.address}\n                onChange={handleChange}\n                onBlur={handleBlur} />\n            {errors.address && touched.address && errors.address}\n        </Form.Field>\n        <Button primarytype=\"submit\" disabled={isSubmitting}>Connect</Button>\n    </Form>\n)\n\nexport default withFormik<FormProps, FormValues>({\n    mapPropsToValues: (ownProps: FormProps) => ({\n        address: ownProps.config.lastConnection.address,\n    }),\n    handleSubmit: (values, formikBag) => {\n        const { onSubmit } = formikBag.props;\n        onSubmit({\n            type: ClusterTypes.TCP,\n            ...values\n        });\n    }\n})(TCPConnectionForm);\n","\nimport * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Dropdown, DropdownProps, Segment } from \"semantic-ui-react\";\nimport * as clusterActions from \"../../cluster/actions\";\nimport { getEnumValues } from \"../../helpers\";\nimport { DispatchProps } from \"../../helpers/props\";\nimport { ClusterTypeMetadata, ClusterTypes, ConnectRequestParams } from \"../../messages\";\nimport { RootReducer } from \"../../store\";\nimport LocalConnectionForm from \"./LocalConnectionForm\";\nimport TCPConnectionForm from \"./TCPConnectionForm\";\n\n\nconst mapDispatchToProps = {\n    connectToCluster: clusterActions.Actions.connect,\n};\n\nconst mapStateToProps = (state: RootReducer) => ({\n    config: state.config,\n    lastConnectionType: state.config.lastConnection.type\n})\n\ntype MergedProps = DispatchProps<typeof mapDispatchToProps> & ReturnType<typeof mapStateToProps>;\n\nconst clusterTypeKeys = getEnumValues(ClusterTypes);\nconst clusterTypeOptions = clusterTypeKeys.map(t => ({\n    text: ClusterTypeMetadata[ClusterTypes[t]].label,\n    value: ClusterTypes[t],\n}));\n\ninterface ConnectionParamsState {\n    clusterType: ClusterTypes\n}\n\nclass ClusterConnectionForm extends React.Component<MergedProps, ConnectionParamsState> {\n    public state = {\n        clusterType: this.props.lastConnectionType,\n    }\n\n    public setType = (type: ClusterTypes) => {\n        this.setState({\n            clusterType: type,\n        });\n    }\n\n    public handleChange = (e: React.SyntheticEvent, data: DropdownProps) => {\n        const value = data.value as ClusterTypes;\n        this.setType(value);\n    }\n\n    public handleSubmit = (params: ConnectRequestParams) => {\n        this.props.connectToCluster(params);\n    }\n\n    public renderForm() {\n        const { clusterType } = this.state;\n        const { config } = this.props;\n\n        switch (clusterType) {\n            case ClusterTypes.LOCAL: {\n                return <LocalConnectionForm config={config} onSubmit={this.handleSubmit} />\n            }\n            case ClusterTypes.TCP: {\n                return <TCPConnectionForm config={config} onSubmit={this.handleSubmit} />\n            }\n        }\n    }\n\n    public render() {\n        return (\n            <>\n                <div>\n                    <Dropdown\n                        inline\n                        options={clusterTypeOptions}\n                        value={this.state.clusterType}\n                        onChange={this.handleChange}\n                    />\n                </div>\n                <Segment>\n                    {this.renderForm()}\n                </Segment>\n            </>\n        )\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ClusterConnectionForm);","import * as React from 'react';\nimport { Icon, Message } from 'semantic-ui-react';\n\ninterface ChannelConnectingProps {\n    msg: string,\n}\n\nconst ChannelConnecting: React.FC<ChannelConnectingProps> = ({ msg }) => (\n    <Message icon>\n        <Icon name='cog' loading />\n        <Message.Content>\n            <Message.Header>Connecting to LiberTEM</Message.Header>\n            {msg}\n        </Message.Content>\n    </Message>\n)\n\nexport default ChannelConnecting;","import * as React from \"react\";\nimport { Icon, Message } from \"semantic-ui-react\";\n\nconst ChannelShutdown: React.FC = () => (\n    <Message negative icon>\n        <Icon name=\"shutdown\" />\n        <Message.Content>\n            <Message.Header>Connection is closed</Message.Header>\n            <p>please close the tab</p>\n        </Message.Content>\n    </Message>\n);\n\nexport default ChannelShutdown;\n","import * as React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport ClusterConnectionForm from \"../../cluster/components/ClusterConnectionForm\";\nimport { assertNotReached } from \"../../helpers\";\nimport { RootReducer } from \"../../store\";\nimport ChannelConnecting from \"./ChannelConnecting\";\nimport ChannelShutdown from './ChannelShutdown'\n\nconst messages = {\n    waiting: \"Waiting...\",\n    connecting: \"Connecting...\",\n}\n\nconst clusterMessages = {\n    connected: \"Connected, waiting for initial state...\",\n    unknown: \"Connected, fetching cluster status...\",\n    connecting: \"Connecting to cluster\"\n}\n\nconst ConnectedNotReady: React.FC = () => {\n    const haveConfig = useSelector((state: RootReducer) => state.config.haveConfig);\n    const clusterConnection = useSelector((state: RootReducer) => state.clusterConnection);\n\n    if (!haveConfig) {\n        return <ChannelConnecting msg=\"waiting for configuration...\" />;\n    }\n    if (clusterConnection.status === \"disconnected\") {\n        return <ClusterConnectionForm />\n    } else if (clusterConnection.status === \"connected\") {\n        return <ChannelConnecting msg={clusterMessages.connected} />;\n    } else if (clusterConnection.status === \"unknown\") {\n        return <ChannelConnecting msg={clusterMessages.unknown} />;\n    } else if (clusterConnection.status === \"connecting\") {\n        return <ChannelConnecting msg={clusterMessages.connecting} />\n    }\n    assertNotReached(\"should not happen\");\n    return null;\n}\n\nconst ChannelStatus: React.FC = ({ children }) => {\n    const channelStatus = useSelector((state: RootReducer) => state.channelStatus);\n\n    switch (channelStatus.status) {\n        case \"waiting\":\n        case \"connecting\": {\n            return <ChannelConnecting msg={messages[channelStatus.status]} />;\n        }\n        case \"connected\": {\n            return <ConnectedNotReady />\n        }\n        case \"ready\":\n            return <>{children}</>;\n        case \"disconnected\":\n            return <ChannelShutdown />\n        default:\n            assertNotReached(\"should not happen\");\n            return null;\n    }\n}\n\nexport default ChannelStatus;","import { ActionsUnion, createAction } from \"../helpers/actionHelpers\";\nimport { ConfigParams } from \"./reducers\";\n\nexport enum ActionTypes {\n    FETCHED = \"CONFIG_FETCHED\",\n    FETCH = \"CONFIG_FETCH\",\n    FETCH_FAILED = \"CONFIG_FETCH_FAILED\",\n    TOGGLE_STAR = \"CONFIG_TOGGLE_STAR\",\n}\n\nexport const Actions = {\n    fetch: () => createAction(ActionTypes.FETCH),\n    fetched: (config: ConfigParams) => createAction(ActionTypes.FETCHED, { config }),\n    fetchFailed: (msg: string, timestamp: number, id: string) => createAction(ActionTypes.FETCH_FAILED, { msg, timestamp, id }),\n    toggleStar: (path: string) => createAction(ActionTypes.TOGGLE_STAR, { path }),\n}\n\nexport type Actions = ActionsUnion<typeof Actions>;","import * as React from \"react\";\nimport { Icon, SemanticICONS } from \"semantic-ui-react\";\nimport { DirectoryListingDetails } from \"../../messages\";\n\n\ninterface FileBrowserEntryProps {\n    style: Record<string, unknown>,\n    details: DirectoryListingDetails,\n    onClick?: () => void,\n    icon?: SemanticICONS,\n}\n\ninterface TimeStampProps {\n    ts: number,\n}\n\nexport const TimeStamp: React.FC<TimeStampProps> = ({ ts }) => {\n    const date = new Date(ts * 1000);\n    const fmtDate = date.toLocaleDateString();\n    const fmtTime = date.toLocaleTimeString();\n    const title = `${fmtDate} ${fmtTime}`;\n    return (\n        <div style={{ display: \"flex\", whiteSpace: \"nowrap\" }} title={title}>\n            <div style={{ width: \"50%\", marginRight: \"10px\" }}>{fmtDate}</div>\n            <div style={{ width: \"45%\" }}>{fmtTime}</div>\n        </div>\n    )\n}\n\n// adapted from https://stackoverflow.com/a/14919494/540644\nconst humanFileSize = (bytes: number, si = false) => {\n    const thresh = si ? 1000 : 1024;\n    if (Math.abs(bytes) < thresh) {\n        return {\n            size: bytes,\n            unit: 'B',\n        }\n    }\n    const units = si\n        ? ['kB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB']\n        : ['KiB', 'MiB', 'GiB', 'TiB', 'PiB', 'EiB', 'ZiB', 'YiB'];\n    let u = -1;\n    do {\n        bytes /= thresh;\n        ++u;\n    } while (Math.abs(bytes) >= thresh && u < units.length - 1);\n\n    return {\n        size: bytes.toFixed(1),\n        unit: units[u],\n    }\n}\n\ninterface FileSizeProps {\n    size: number,\n    si?: boolean,\n}\n\nexport const FileSize: React.FC<FileSizeProps> = ({ size, si }) => {\n    const fmtSize = humanFileSize(size, si)\n    return (\n        <div style={{ textAlign: \"right\" }}>\n            {fmtSize.size} {fmtSize.unit}\n        </div>\n    );\n}\n\nexport const Cell: React.FC<{ title?: string }> = ({ children, title }) => {\n    const styles: React.CSSProperties = {\n        whiteSpace: \"nowrap\",\n        overflow: \"hidden\",\n        textOverflow: \"ellipsis\",\n        marginRight: \"10px\",\n    }\n    return (\n        <div style={styles} title={title}>{children}</div>\n    );\n}\n\n\nclass FileBrowserEntry extends React.Component<FileBrowserEntryProps> {\n    public onClick = (): void => {\n        const { onClick } = this.props;\n        if (onClick) {\n            onClick();\n        }\n    }\n\n    public render(): JSX.Element {\n        const { details, style, icon } = this.props;\n        const myStyle: React.CSSProperties = {\n            cursor: \"pointer\",\n            ...style,\n        };\n\n        const tsStyles: React.CSSProperties = {\n            textAlign: \"right\",\n        };\n\n        return (\n            <div onClick={this.onClick} style={myStyle}>\n                <div style={{ display: \"flex\", paddingRight: \"10px\" }}>\n                    <div style={{ width: \"20%\", flexGrow: 1 }}>\n                        <Cell title={details.name}>\n                            {icon && <Icon name={icon} />}\n                            {details.name}\n                        </Cell>\n                    </div>\n                    <div style={{ width: \"10%\" }}><Cell><FileSize size={details.size} si={false} /></Cell></div>\n                    <div style={{ width: \"10%\" }}><Cell>{details.owner}</Cell></div>\n                    <div style={{ width: \"18%\", ...tsStyles }}>\n                        <Cell><TimeStamp ts={details.ctime} /></Cell>\n                    </div>\n                    <div style={{ width: \"18%\", ...tsStyles }}>\n                        <Cell><TimeStamp ts={details.mtime} /></Cell>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default FileBrowserEntry;","import * as React from \"react\";\nimport { Cell } from \"./FileBrowserEntry\";\n\nconst FileBrowserHeader: React.FC = () => {\n    const alignRight: React.CSSProperties = {\n        textAlign: \"right\",\n    };\n\n    // ugly hack: padding-right to compensate for scrollbar size\n    return (\n        <div style={{ paddingRight: \"20px\", paddingBottom: \"10px\" }}>\n            <div style={{ display: \"flex\" }}>\n                <div style={{ width: \"20%\", flexGrow: 1 }}>\n                    <Cell>Name</Cell>\n                </div>\n                <div style={{ width: \"10%\", ...alignRight }}>\n                    <Cell>Size</Cell>\n                </div>\n                <div style={{ width: \"10%\" }}>\n                    <Cell>Owner</Cell>\n                </div>\n                <div style={{ width: \"18%\", ...alignRight }}>\n                    <Cell>Created</Cell>\n                </div>\n                <div style={{ width: \"18%\", ...alignRight }}>\n                    <Cell>Modified</Cell>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default FileBrowserHeader;","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { DirectoryListingDetails } from \"../../messages\";\nimport * as browserActions from '../actions';\nimport FileBrowserEntry from \"./FileBrowserEntry\";\n\ninterface FileEntryProps {\n    path: string,\n    style: Record<string, unknown>,\n    details: DirectoryListingDetails,\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch, ownProps: FileEntryProps) => ({\n    select: () => dispatch(browserActions.Actions.select(ownProps.path, ownProps.details.name)),\n})\n\ntype MergedProps = FileEntryProps & ReturnType<typeof mapDispatchToProps>;\n\nclass FileEntry extends React.Component<MergedProps> {\n    public render() {\n        const { details, style, select } = this.props;\n\n        return (\n            <FileBrowserEntry onClick={select} style={style} details={details}\n                icon=\"file outline\" />\n        )\n    }\n}\n\nexport default connect(null, mapDispatchToProps)(FileEntry);","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { DirectoryListingDetails } from \"../../messages\";\nimport * as browserActions from '../actions';\nimport FileBrowserEntry from \"./FileBrowserEntry\";\n\nconst mapDispatchToProps = (dispatch: Dispatch, ownProps: FolderEntryProps) => ({\n    list: () => {\n        dispatch(browserActions.Actions.list(ownProps.path, ownProps.details.name));\n        window.setTimeout(() => ownProps.onChange(), 0);\n    },\n})\n\ninterface FolderEntryProps {\n    path: string,\n    style: Record<string, unknown>,\n    details: DirectoryListingDetails,\n    onChange: () => void,\n}\n\ntype MergedProps = FolderEntryProps & ReturnType<typeof mapDispatchToProps>;\n\nconst FolderEntry: React.FC<MergedProps> = ({ list, details, style }) => (\n    <FileBrowserEntry onClick={list} style={style} details={details} icon=\"folder\" />\n);\n\nexport default connect(null, mapDispatchToProps)(FolderEntry);\n","\nexport interface JobResultType {\n    imageURL: string,\n    description: { title: string, desc: string, includeInDownload: boolean },\n}\n\nexport enum JobRunning {\n    CREATING = 'CREATING',\n    RUNNING = 'RUNNING',\n    DONE = 'DONE',\n}\n\nexport enum JobStatus {\n    CREATING = 'CREATING',\n    IN_PROGRESS = 'IN_PROGRESS',\n    CANCELLED = 'CANCELLED',\n    SUCCESS = 'SUCCESS',\n    ERROR = 'ERROR',\n}\n\nexport interface JobStateCommon {\n    id: string,\n    analysis: string,\n    status: JobStatus,\n    startTimestamp: number,\n    results: JobResultType[],\n}\n\nexport type JobStateStart = JobStateCommon & {\n    running: JobRunning.CREATING | JobRunning.RUNNING,\n}\n\nexport type JobStateDone = JobStateCommon & {\n    running: JobRunning.DONE,\n    endTimestamp: number,\n}\n\nexport type JobState = JobStateStart | JobStateDone;","import * as React from 'react';\nimport { connect } from \"react-redux\";\nimport { Dispatch } from 'redux';\nimport { Dropdown, DropdownItemProps } from \"semantic-ui-react\";\nimport * as browserActions from '../actions';\n\ntype PathDropdownItemProps = DropdownItemProps & {\n    onChange: () => void,\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch, ownProps: PathDropdownItemProps) => ({\n    list: () => {\n        if (ownProps.value !== undefined) {\n            dispatch(browserActions.Actions.list(ownProps.value.toString()));\n            window.setTimeout(() => ownProps.onChange(), 0);\n        }\n    },\n})\n\ntype MergedProps = ReturnType<typeof mapDispatchToProps> & PathDropdownItemProps;\n\nconst PathDropDownItem: React.FC<MergedProps> = ({ list, ...props }) => {\n    const newProps = {\n        onClick: list,\n        ...props,\n    }\n    return <Dropdown.Item {...newProps} />;\n}\n\nexport default connect(null, mapDispatchToProps)(PathDropDownItem);","import { FormikProps, withFormik } from \"formik\";\nimport * as React from \"react\";\nimport { Form, Input } from \"semantic-ui-react\";\n\ninterface FormValues {\n    path: string,\n}\n\ninterface PathInputProps {\n    onChange: (path: string) => void,\n    initialPath: string,\n}\n\ntype MergedProps = FormikProps<FormValues> & PathInputProps;\n\nconst PathInput: React.FC<MergedProps> = ({\n    values,\n    handleChange,\n    handleBlur,\n    handleSubmit,\n}) => (\n    <Form onSubmit={handleSubmit} style={{ flexGrow: 1 }}>\n        <Form.Field>\n            <Input autoComplete=\"off\" onBlur={handleBlur} onChange={handleChange} value={values.path} name=\"path\" />\n        </Form.Field>\n    </Form>\n);\n\nexport default withFormik<PathInputProps, FormValues>({\n    mapPropsToValues: ({ initialPath }) => ({\n        path: initialPath,\n    }),\n    handleSubmit: (values, formikBag) => {\n        const { onChange } = formikBag.props;\n        onChange(values.path);\n    },\n    enableReinitialize: true,\n})(PathInput);","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { Dropdown, DropdownItemProps } from \"semantic-ui-react\";\nimport { DatasetTypes } from \"../../messages\";\nimport { RootReducer } from \"../../store\";\nimport * as browserActions from '../actions';\n\n\ntype DropdownOptions = Array<{\n    text: string,\n    value: {\n        type: DatasetTypes,\n        path: string,\n    },\n}>;\n\nconst mapStateToProps = (state: RootReducer) => ({\n    lastOpened: state.config.lastOpened,\n    fileHistory: state.config.fileHistory,\n    separator: state.config.separator,\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n    select: (path: string) => dispatch(browserActions.Actions.selectFullPath(path)),\n})\n\ntype MergedProps = ReturnType<typeof mapStateToProps> & ReturnType<typeof mapDispatchToProps>;\n\nconst RecentFiles: React.FC<MergedProps> = ({ lastOpened, fileHistory, select }) => {\n\n    const recentFiles: DropdownOptions = fileHistory.filter((path: string) => lastOpened[path]).map((path: string) => {\n        const item = lastOpened[path];\n        return {\n            text: item.path,\n            value: {\n                type: item.type,\n                path: item.path,\n            },\n        };\n    });\n\n    const onClick = (e: React.MouseEvent<HTMLDivElement>, data: DropdownItemProps) => data.value && select(data.value.toString())\n\n    return (\n        <Dropdown item text=\"Recent\" floating>\n            <Dropdown.Menu>\n                <Dropdown.Header content=\"recent datasets\" />\n                {recentFiles.map((option, idx) => (\n                    <Dropdown.Item key={idx} value={option.value.path} content={option.text} onClick={onClick} />\n                ))}\n            </Dropdown.Menu>\n        </Dropdown>\n    );\n}\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RecentFiles);","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { Dropdown, Menu } from \"semantic-ui-react\";\nimport * as configActions from '../../config/actions';\nimport * as browserActions from '../actions';\nimport { FSPlaces } from \"../types\";\nimport PathDropDownItem from \"./PathDropDownItem\";\nimport PathInput from \"./PathInput\";\nimport RecentFiles from \"./RecentFiles\";\n\nconst mapDispatchToProps = (dispatch: Dispatch, ownProps: PathBarProps) => ({\n    refresh: () => {\n        dispatch(browserActions.Actions.list(ownProps.currentPath));\n        window.setTimeout(() => ownProps.onChange(), 0);\n    },\n    handleInputChange: (path: string) => {\n        dispatch(browserActions.Actions.list(path));\n        window.setTimeout(() => ownProps.onChange(), 0);\n    },\n    goUp: () => {\n        dispatch(browserActions.Actions.list(ownProps.currentPath, '..'));\n        window.setTimeout(() => ownProps.onChange(), 0);\n    },\n    toggleStar: () => {\n        dispatch(configActions.Actions.toggleStar(ownProps.currentPath));\n    }\n});\n\ninterface PathBarProps {\n    currentPath: string,\n    onChange: () => void,\n    drives: string[],\n    places: FSPlaces,\n    starred: string[],\n}\n\ntype MergedProps = ReturnType<typeof mapDispatchToProps> & PathBarProps;\n\nconst PathBar: React.FC<MergedProps> = ({ currentPath, drives, places, starred, onChange, refresh, goUp, handleInputChange, toggleStar }) => {\n    const driveOptions = drives.map((path) => ({ key: path, text: path }));\n    const placeOptions = Object.keys(places).map((key) => ({ key: places[key].path, text: places[key].title }));\n    const starOptions = starred.map((path) => ({ key: path, text: path }));\n    const isStarred = starred.includes(currentPath);\n    const starredIcon = isStarred ? \"star\" : \"star outline\";\n    const bookmarkTitle = isStarred ? \"Remove from bookmarks\" : \"Bookmark this location\";\n\n    return (\n        <Menu>\n            <RecentFiles />\n            <Dropdown text=\"Go to...\" floating item>\n                <Dropdown.Menu>\n                    <Dropdown.Header content=\"Drives\" />\n                    {driveOptions.map((option) =>\n                        <PathDropDownItem key={option.key} value={option.key} content={option.text} onChange={onChange} />\n                    )}\n                    <Dropdown.Header content=\"Places\" />\n                    {placeOptions.map((option) =>\n                        <PathDropDownItem key={option.key} value={option.key} content={option.text} onChange={onChange} />\n                    )}\n                    <Dropdown.Header content=\"Starred\" />\n                    {starOptions.length === 0 && \n                        <Dropdown.Item key=\"empty\" value=\"empty\" content=\"No bookmarks yet\" />\n                    }\n                    {starOptions.map((option) =>\n                        <PathDropDownItem key={option.key} value={option.key} content={option.text} onChange={onChange} />\n                    )}\n                </Dropdown.Menu>\n            </Dropdown>\n            <Menu.Item title={bookmarkTitle} icon={starredIcon} onClick={toggleStar} />\n            <Menu.Item icon=\"arrow up\" onClick={goUp} />\n            <Menu.Item style={{ flexGrow: 1 }}>\n                <PathInput onChange={handleInputChange} initialPath={currentPath} />\n            </Menu.Item>\n            <Menu.Item icon=\"refresh\" onClick={refresh} />\n        </Menu>\n    );\n}\n\n\nexport default connect(null, mapDispatchToProps)(PathBar);","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { FixedSizeList as List } from \"react-window\";\nimport { Dispatch } from \"redux\";\nimport { Button, Header, Segment } from \"semantic-ui-react\";\nimport { DirectoryListingDetails } from \"../../messages\";\nimport { RootReducer } from \"../../store\";\nimport * as browserActions from '../actions';\nimport FileBrowserHeader from \"./FileBrowserHeader\";\nimport FileEntry from \"./FileEntry\";\nimport FolderEntry from \"./FolderEntry\";\nimport PathBar from \"./PathBar\";\n\nconst mapStateToProps = (state: RootReducer) => {\n    const { browser, config } = state;\n    return {\n        files: browser.files,\n        dirs: browser.dirs,\n        path: browser.path,\n        drives: browser.drives,\n        places: browser.places,\n        isLoading: browser.isLoading,\n        starred: config.starred,\n    };\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n    cancel: () => dispatch(browserActions.Actions.cancel()),\n});\n\ntype MergedProps = ReturnType<typeof mapStateToProps> & ReturnType<typeof mapDispatchToProps>;\n\ninterface EntryFnArgs {\n    index: number,\n    style: Record<string, unknown>,\n}\ntype EntryFn = (arg: EntryFnArgs) => void\n\nconst listRef = React.createRef<List>();\n\nconst scrollToTop = () => {\n    if (listRef.current === null) {\n        return;\n    }\n    listRef.current.scrollToItem(0);\n}\n\nconst sortByKey = <K, T>(array: T[], getKey: (item: T) => K) => (\n    array.sort((a, b) => {\n        const x = getKey(a);\n        const y = getKey(b);\n        return ((x < y) ? -1 : ((x > y) ? 1 : 0));\n    })\n);\n\nconst FileBrowser: React.FC<MergedProps> = ({ files, dirs, path, drives, places, starred, cancel, isLoading }) => {\n    const getSortKey = (item: DirectoryListingDetails) => item.name.toLowerCase();\n    const dirEntries = sortByKey(dirs, getSortKey).map((dir) => (style: Record<string, unknown>) => <FolderEntry style={style} onChange={scrollToTop} path={path} details={dir} />);\n    const fileEntries = sortByKey(files, getSortKey).map((f) => ((style: Record<string, unknown>) => <FileEntry style={style} path={path} details={f} />));\n    const entries = dirEntries.concat(fileEntries);\n\n    const cellFn: EntryFn = ({ index, style }) => entries[index](style);\n\n    let list = (\n        <List style={{ overflowY: \"scroll\" }} ref={listRef} height={300} width=\"100%\" itemCount={entries.length} itemSize={35}>\n            {cellFn}\n        </List>\n    );\n\n    if (isLoading) {\n        // FIXME: hardcoded height\n        list = (\n            <Segment loading style={{ height: \"300px\" }} />\n        )\n    }\n\n    return (\n        <Segment.Group>\n            <Segment>\n                <Header as=\"h2\">Open dataset</Header>\n            </Segment>\n            <Segment>\n                <PathBar currentPath={path} drives={drives} places={places} starred={starred} onChange={scrollToTop} />\n            </Segment>\n            <Segment>\n                <FileBrowserHeader />\n                {list}\n            </Segment>\n            <Segment>\n                <Button onClick={cancel}>Cancel</Button>\n            </Segment>\n        </Segment.Group>\n    );\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FileBrowser);","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Button, Icon } from \"semantic-ui-react\";\nimport { DispatchProps } from \"../../helpers/props\";\nimport { RootReducer } from \"../../store\";\nimport * as browserActions from '../actions';\nimport FileBrowser from \"./FileBrowser\";\n\nconst mapStateToProps = (state: RootReducer) => ({\n    isOpen: state.browser.isOpen,\n    busy: state.openDataset.busy,\n    formVisible: state.openDataset.formVisible,\n});\n\nexport const mapDispatchToProps = {\n    open: browserActions.Actions.open,\n}\n\ntype MergedProps = ReturnType<typeof mapStateToProps> & DispatchProps<typeof mapDispatchToProps>;\n\nconst BrowserWrapper: React.FC<MergedProps> = ({ formVisible, isOpen, open, busy }) => {\n    if(formVisible || busy) {\n        return null;\n    } else if (!isOpen) {\n        return (\n            <Button icon labelPosition=\"left\" onClick={open}>\n                <Icon name='add' />\n                Browse\n            </Button>\n        );\n    } else {\n        return (\n            <FileBrowser />\n        );\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(BrowserWrapper)\n","import { ActionsUnion, createAction } from \"../helpers/actionHelpers\";\nimport { AnalysisDetails, AnalysisTypes, CompoundAnalysisDetails } from \"../messages\";\nimport { CompoundAnalysis } from \"./types\";\n\n\nexport enum ActionTypes {\n    CREATE = 'COMPOUND_ANALYSIS_CREATE',\n    CREATED = 'COMPOUND_ANALYSIS_CREATED',\n    UPDATED = 'COMPOUND_ANALYSIS_UPDATED',\n    RUN = 'COMPOUND_ANALYSIS_RUN',\n    RUNNING = 'COMPOUND_ANALYSIS_RUNNING',\n    REMOVE = 'COMPOUND_ANALYSIS_REMOVE',\n    REMOVED = 'COMPOUND_ANALYSIS_REMOVED',\n    ERROR = 'COMPOUND_ANALYSIS_ERROR',\n    ENABLE_AUTOSTART = 'COMPOUND_ANALYSIS_ENABLE_AUTOSTART',\n}\n\nexport const Actions = {\n    create: (dataset: string, analysisType: AnalysisTypes) => createAction(ActionTypes.CREATE, { dataset, analysisType }),\n    created: (\n        compoundAnalysis: CompoundAnalysis, autoStart: boolean\n    ) => createAction(ActionTypes.CREATED, { compoundAnalysis, autoStart }),\n    enableAutoStart: (\n        compoundAnalysisId: string\n    ) => createAction(ActionTypes.ENABLE_AUTOSTART, { compoundAnalysisId }),\n    updated: (id: string, details: CompoundAnalysisDetails) => createAction(ActionTypes.UPDATED, { id, details }),\n    run: (id: string, analysisIndex: number, details: AnalysisDetails) => createAction(ActionTypes.RUN, { id, analysisIndex, details }),\n    running: (id: string, job: string, analysisIndex: number) => createAction(ActionTypes.RUNNING, { id, job, jobIndex: analysisIndex }),\n    remove: (id: string) => createAction(ActionTypes.REMOVE, { id }),\n    removed: (id: string) => createAction(ActionTypes.REMOVED, { id }),\n    error: (msg: string, timestamp: number, id: string) => createAction(ActionTypes.ERROR, { msg, timestamp, id }),\n}\n\nexport type Actions = ActionsUnion<typeof Actions>;\n\nexport type ActionParts = {\n    [K in keyof typeof Actions]: ReturnType<typeof Actions[K]>\n}","import * as React from \"react\";\nimport { Icon } from \"semantic-ui-react\";\n\nconst BusySpinner: React.FC = () => {\n    const styles: React.CSSProperties = {\n        margin: 0,\n        padding: 0,\n        position: \"absolute\",\n        bottom: \"10px\",\n        right: \"10px\",\n        color: \"white\",\n        opacity: 0.7,\n        filter: \"drop-shadow(0 0 3px #000)\",\n    };\n    return <Icon name=\"cog\" loading style={styles} />\n}\n\nexport default BusySpinner;","import * as React from \"react\";\nimport BusySpinner from \"./BusySpinner\";\n\ninterface BusyWrapperProps {\n    busy: boolean,\n}\n\nconst BusyWrapper: React.FC<BusyWrapperProps> = ({ children, busy }) => {\n    const styles: React.CSSProperties = {\n        position: \"relative\",\n    };\n    return (\n        <div style={styles}>\n            {children}\n            {busy && <BusySpinner />}\n        </div>\n    )\n}\n\nexport default BusyWrapper;","import * as React from \"react\";\nimport { DraggableHandle } from \"./DraggableHandle\";\nimport { HandleRenderFunction } from \"./types\";\n\nexport interface HandleParentProps {\n    width: number,\n    height: number,\n    onKeyboardEvent?: React.KeyboardEventHandler<SVGElement>,\n    handles: HandleRenderFunction[],\n}\n\nexport class HandleParent extends React.Component<HandleParentProps> {\n    public currentHandle: DraggableHandle | undefined;\n\n    public handleDragStart = (h: DraggableHandle): void => {\n        this.currentHandle = h;\n    }\n\n    public handleDrop = (): void => {\n        this.currentHandle = undefined;\n    }\n\n    public handleMouseMove = (e: React.MouseEvent<SVGElement>): void => {\n        if (this.currentHandle) {\n            return this.currentHandle.externalMouseMove(e);\n        }\n    }\n\n    public handleMouseLeave = (): void => {\n        if (this.currentHandle) {\n            this.currentHandle.externalLeave();\n        }\n    }\n\n    public handleMouseUp = (): void => {\n        if (this.currentHandle) {\n            this.currentHandle.externalMouseUp();\n        }\n    }\n\n    public render() {\n        const { width, height } = this.props;\n        const styles = {\n            outline: \"1px dashed black\"\n        }\n        return (\n            <g\n                onMouseMove={this.handleMouseMove}\n                onMouseLeave={this.handleMouseLeave}\n                onMouseUp={this.handleMouseUp}\n                onKeyDown={this.props.onKeyboardEvent}\n                style={styles}\n                tabIndex={0}\n            >\n                <rect style={{ fill: \"transparent\" }}\n                    x={0} y={0} width={width} height={height}\n                />\n                {this.renderHandles()}\n            </g>\n        );\n    }\n\n    public renderHandles() {\n        const { handles, onKeyboardEvent } = this.props;\n        // we need to inform the handle when there are move/up/leave events\n        // on this parent element, for which we need to know the current handle.\n        // so we pass the handle a dragstart/drop function and kindly ask it\n        // to call us if it starts to be dragged or is dropped.\n        return handles.map((h, i) => {\n            const elem = h(this.handleDragStart, this.handleDrop, onKeyboardEvent);\n            if (React.isValidElement(elem)) {\n                return React.cloneElement(elem, { key: i });\n            }\n            return null;\n        });\n    }\n}\n\nexport default HandleParent;","import * as React from \"react\";\nimport { JobState } from \"../types\";\nimport styles from \"./ResultImage.module.css\";\n\ninterface ResultImageProps {\n    job: JobState,\n    channel: number,\n    width: number,\n    height: number,\n}\n\nconst ResultImage: React.FC<ResultImageProps> = ({ job, channel, width, height }) => {\n    const result = job.results[channel];\n    if (result === undefined) {\n        return (\n            <svg className={styles.fallback} width={width} height={height} viewBox={`0 0 ${width} ${height}`} key={-1} />\n        )\n    }\n    return (\n        <image className={styles.default} xlinkHref={result.imageURL} width={width} height={height} />\n    );\n}\n\nexport default ResultImage;","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport styled from 'styled-components';\nimport BusyWrapper from \"../../widgets/BusyWrapper\";\nimport HandleParent from \"../../widgets/HandleParent\";\nimport { HandleRenderFunction } from \"../../widgets/types\";\nimport { JobRunning, JobState } from \"../types\";\nimport ResultImage from \"./ResultImage\";\n\ninterface ResultProps {\n    width: number,\n    height: number,\n    job: JobState,\n    extraHandles?: HandleRenderFunction,\n    extraWidgets?: React.ReactElement<SVGElement>,\n    channel: number,\n}\n\nconst ResultWrapper = styled.svg`\n    display: block;\n    border: 1px solid black;\n    width: 100%;\n    height: auto;\n`;\n\ntype MergedProps = ResultProps;\n\nclass Result extends React.Component<MergedProps> {\n    public renderHandles() {\n        const { width, height, extraHandles } = this.props;\n        let handles: HandleRenderFunction[] = [];\n        if (extraHandles) {\n            handles = [...handles, extraHandles];\n        }\n\n        return (\n            <HandleParent width={width} height={height} handles={handles} />\n        )\n    }\n\n    public render() {\n        const { job, channel, width, height, extraWidgets } = this.props;\n        const busy = job.running !== JobRunning.DONE;\n\n        return (\n            <BusyWrapper busy={busy}>\n                <ResultWrapper width={width} height={height} viewBox={`0 0 ${width} ${height}`}>\n                    <ResultImage job={job} channel={channel} width={width} height={height} />\n                    {extraWidgets}\n                    {this.renderHandles()}\n                </ResultWrapper>\n            </BusyWrapper>\n        );\n    }\n}\n\nexport default connect(null, null)(Result);","import styled from 'styled-components';\n\n\nconst Selectors = styled.div`\n    display: flex;\n    & > * {\n        margin-right: 10px;\n    }\n`;\n\n\n\nexport default Selectors;","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Dropdown, DropdownProps } from \"semantic-ui-react\";\nimport { RootReducer } from \"../../store\";\nimport { HandleRenderFunction } from \"../../widgets/types\";\nimport { JobRunning, JobState } from \"../types\";\nimport Result from \"./Result\";\nimport Selectors from \"./Selectors\";\n\ninterface ResultListProps {\n    width: number,\n    height: number,\n    selectors?: React.ReactElement<any>,\n    extraHandles?: HandleRenderFunction,\n    extraWidgets?: React.ReactElement<SVGElement>,\n    subtitle?: React.ReactNode,\n}\n\ninterface ExternalResultListProps {\n    compoundAnalysis: string,\n    analysisIndex: number,\n}\n\nconst mapStateToProps = (state: RootReducer, ownProps: ExternalResultListProps) => {\n    const compoundAnalysis = state.compoundAnalyses.byId[ownProps.compoundAnalysis];\n    const analysis = state.analyses.byId[compoundAnalysis.details.analyses[ownProps.analysisIndex]];\n\n    return {\n        jobsById: state.jobs.byId,\n        analysis,\n        compoundAnalysis,\n        analysisIndex: ownProps.analysisIndex,\n    };\n};\n\ntype MergedProps = ResultListProps & ReturnType<typeof mapStateToProps>;\n\ninterface ResultListState {\n    selectedChannel: number,\n}\n\nconst ResultListPlaceholder: React.FC<{ width: number, height: number }> = ({ width, height }) => (\n    <svg\n        style={{\n            display: \"block\",\n            border: \"1px solid black\",\n            width: \"100%\",\n            height: \"auto\"\n        }}\n        width={width} height={height}\n        viewBox={`0 0 ${width} ${height}`} key={-1} />\n);\n\n\nclass ResultList extends React.Component<MergedProps, ResultListState> {\n    public state: ResultListState = { selectedChannel: 0 };\n\n    public selectChannel = (e: React.SyntheticEvent, data: DropdownProps) => {\n        const value = data.value as number;\n        this.setState({ selectedChannel: value });\n    }\n\n    public getJob() {\n        const {\n            analysis, jobsById,\n        } = this.props;\n        if (!analysis || !analysis.displayedJob || !jobsById[analysis.displayedJob]) {\n            return undefined;\n        }\n        return jobsById[analysis.displayedJob];\n    }\n\n    public getMsg(job?: JobState) {\n        if (!job) {\n            return <>&nbsp;</>;\n        }\n        if (job.running === JobRunning.DONE) {\n            const dt = (job.endTimestamp - job.startTimestamp) / 1000;\n            return <>Analysis done in {dt.toFixed(3)}s</>;\n        } else {\n            return <>Analysis running...</>;\n        }\n    }\n\n    public genericRender(currentResult: React.ReactElement, job?: JobState) {\n        const { subtitle, children, selectors } = this.props;\n        const msg = this.getMsg(job);\n        return (\n            <div>\n                {currentResult}\n                {children}\n                <Selectors>\n                    <ResultImageSelector job={job} handleChange={this.selectChannel} selectedImg={this.state.selectedChannel} />\n                    {selectors}\n                </Selectors>\n                <p>{subtitle} {msg}</p>\n            </div>\n        );\n    }\n\n    public render() {\n        const job = this.getJob();\n        const {\n            width, height,\n            extraHandles, extraWidgets\n        } = this.props;\n\n        if (!job) {\n            return this.genericRender(<ResultListPlaceholder width={width} height={height} />, job);\n        }\n\n        return this.genericRender(\n            <Result job={job}\n                extraHandles={extraHandles}\n                extraWidgets={extraWidgets}\n                width={width} height={height}\n                channel={this.state.selectedChannel}\n            />,\n            job\n        );\n    }\n}\n\ninterface ImageSelectorProps {\n    job?: JobState,\n    handleChange: (e: React.SyntheticEvent, data: DropdownProps) => void,\n    selectedImg: number,\n}\n\nconst ResultImageSelector: React.FC<ImageSelectorProps> = ({ job, handleChange, selectedImg }) => {\n    if (!job) {\n        return null;\n    }\n    const availableImages = job.results.map((result, idx) => ({ text: result.description.title, value: idx }));\n    return (\n        <>\n            <div>\n                Channel:{' '}\n                <Dropdown\n                    inline\n                    options={availableImages}\n                    value={selectedImg}\n                    onChange={handleChange}\n                />\n            </div>\n        </>\n    )\n}\n\n\nexport default connect(mapStateToProps)(ResultList);\n","import { Point2D } from \"../basicTypes\";\n\ntype Constraint2D = (point: Point2D) => Point2D;\n\n\nexport const inRectConstraint = (width: number, height: number): Constraint2D => (p: Point2D): Point2D => ({\n    x: Math.max(0, Math.min(width - 1, p.x)),\n    y: Math.max(0, Math.min(height - 1, p.y)),\n});\n\nexport const dist = (cx: number, cy: number, x: number, y: number): number => {\n    const dx = cx - x;\n    const dy = cy - y;\n    return Math.sqrt(dx * dx + dy * dy);\n}\n\nexport const cbToRadius = (cx: number, cy: number, cb: ((r: number) => void) | undefined) => (x: number, y: number): (number | void) => cb && cb(dist(cx, cy, x, y))\n\nexport const keepOnCY = (cy: number) => (p: Point2D): Point2D => ({\n    x: p.x,\n    y: cy,\n});\n\nexport const keepXLargerThan = (otherX: number) => (p: Point2D): Point2D => ({\n    x: otherX > p.x ? otherX : p.x,\n    y: p.y,\n});\n\nexport const keepXSmallerThan = (otherX: number) => (p: Point2D): Point2D => ({\n    x: otherX < p.x ? otherX : p.x,\n    y: p.y,\n});\n\nexport const riConstraint = (outerPos: number, cy: number) => (p: Point2D): Point2D => (\n    keepXLargerThan(outerPos)(keepOnCY(cy)(p))\n)\n\nexport const roConstraints = (innerPos: number, cy: number) => (p: Point2D): Point2D => (\n    keepXSmallerThan(innerPos)(keepOnCY(cy)(p))\n);","import { CSSProperties } from \"react\";\n\nexport const defaultMaskStyles = (imageWidth: number): CSSProperties => ({\n    fillOpacity: 0.3,\n    fill: \"red\",\n    strokeOpacity: 0.7,\n    stroke: \"red\",\n    strokeWidth: imageWidth / 128 / 3,\n});","import * as React from \"react\";\nimport { defaultMaskStyles } from \"./styles\";\n\nexport interface DiskProps {\n    imageWidth: number,\n    imageHeight: number,\n    cx: number,\n    cy: number,\n    r: number,\n}\n\nconst Disk: React.FC<DiskProps> = ({ imageWidth, cx, cy, r }) => (\n    <circle cx={cx + .5} cy={cy + .5} r={r} style={{ ...defaultMaskStyles(imageWidth) }} />\n);\n\nexport default Disk;","import * as React from \"react\";\nimport styled from 'styled-components';\nimport { Point2D } from \"../basicTypes\";\nimport { handleKeyEvent, ModifyCoords } from \"./kbdHandler\";\n\nexport type HandleProps = {\n    x: number,\n    y: number,\n    scale: number,\n    withCross?: boolean,\n    focusRef: React.RefObject<SVGGElement>,\n} & React.SVGProps<SVGGElement>;\n\nconst StyledCircle = styled.circle`\n    stroke: red;\n    stroke-width: 1;\n    fill: transparent;\n    g:focus > & {\n        stroke: lightgreen;\n    }\n`;\n\nconst Cross = styled.path`\n    stroke: red;\n    stroke-width: 1;\n    fill: transparent;\n    g:focus > & {\n        stroke: lightgreen;\n    }\n`;\n\nconst FocusGroup = styled.g`\n    &:focus { outline: none; }\n`;\n\nconst Handle: React.FC<HandleProps> = ({ scale, x, y, withCross, focusRef, ...args }) => {\n    const r = 3;\n    // scaleMatrix is needed to set the origin of the scale\n    const scaleMatrix = `matrix(${scale}, 0, 0, ${scale}, ${x - scale * x}, ${y - scale * y})`;\n    const style: React.CSSProperties = { transform: scaleMatrix };\n    const crossSpec = `\n        M${x - 4 - r / 2} ${y} L ${x - r / 2} ${y} M${x + r / 2} ${y} L ${x + 4 + r / 2} ${y}\n        M${x} ${y - 4 - r / 2} L ${x} ${y - r / 2} M${x} ${y + r / 2} L ${x} ${y + 4 + r / 2}\n    `;\n    const cross = withCross ? <Cross d={crossSpec} style={style} /> : null;\n    return (\n        <FocusGroup {...args} ref={focusRef}>\n            <StyledCircle cx={x} cy={y} r={r} style={style} />\n            {cross}\n        </FocusGroup>\n    )\n}\n\nexport interface DraggableHandleProps {\n    x: number,\n    y: number,\n    withCross?: boolean,\n    imageWidth?: number,\n    onDragMove?: (x: number, y: number) => void,\n    parentOnDragStart: (h: DraggableHandle) => void,\n    parentOnDrop: (x: number, y: number) => void,\n    onKeyboardEvent?: (e: React.KeyboardEvent<SVGElement>) => void,\n    constraint?: (p: Point2D) => Point2D,\n}\n\nexport const getScalingFactor = (elem: SVGElement): number => {\n    const svg = elem.ownerSVGElement;\n    if (svg === null) {\n        throw new Error(\"no owner SVG element?\");\n    }\n    const inWidthAttr = svg.getAttribute(\"width\");\n    if (inWidthAttr === null) {\n        throw new Error(\"no width on SVG element?\");\n    }\n    const inWidth = +inWidthAttr;\n    const svgMeasurements = svg.getBoundingClientRect();\n    return svgMeasurements.width / inWidth;\n};\n\nconst relativeCoords = (e: React.MouseEvent, parent: SVGElement) => {\n    const f = getScalingFactor(parent);\n    const parentPos = parent.getBoundingClientRect();\n    const res = {\n        x: (e.pageX - (parentPos.left + window.pageXOffset)) / f,\n        y: (e.pageY - (parentPos.top + window.pageYOffset)) / f,\n    }\n    return res;\n}\n\n/**\n * stateful draggable handle, to be used as part of <svg/>\n */\nexport class DraggableHandle extends React.Component<DraggableHandleProps> {\n    public posRef: React.RefObject<SVGRectElement>;\n    public focusRef: React.RefObject<SVGGElement>;\n\n    public state = {\n        dragging: false,\n        drag: { x: 0, y: 0 },\n    }\n\n    public constructor(props: DraggableHandleProps) {\n        super(props);\n        this.posRef = React.createRef<SVGRectElement>();\n        this.focusRef = React.createRef<SVGGElement>();\n    }\n\n    // mousemove event from outside (delegated from surrounding element)\n    public externalMouseMove = (e: React.MouseEvent<SVGElement>): void => {\n        this.move(e);\n    }\n\n    // mouseleave event from outside (delegated from surrounding element)\n    public externalLeave = (): void => {\n        this.stopDrag();\n    }\n\n    // mouseup event from outside (delegated from surrounding element)\n    public externalMouseUp = (): void => {\n        this.stopDrag();\n    }\n\n    public applyConstraint = (p: Point2D): Point2D => {\n        const { constraint } = this.props;\n        if (constraint) {\n            return constraint(p);\n        } else {\n            return p;\n        }\n    }\n\n    public startDrag = (e: React.MouseEvent<SVGElement>): void => {\n        e.preventDefault();\n        const { parentOnDragStart } = this.props;\n        if (this.posRef.current) {\n            this.setState({\n                dragging: true,\n                drag: this.applyConstraint(relativeCoords(e, this.posRef.current)),\n            });\n            if (parentOnDragStart) {\n                parentOnDragStart(this);\n            }\n            if (this.focusRef.current && this.focusRef.current.focus) {\n                this.focusRef.current.focus();\n            }\n        } else {\n            throw new Error(\"startDrag without posRef\");\n        }\n    }\n\n    public move = (e: React.MouseEvent<SVGElement>): void => {\n        const { onDragMove } = this.props;\n        if (!this.state.dragging) {\n            return;\n        }\n        if (this.posRef.current) {\n            this.setState({\n                drag: this.applyConstraint(relativeCoords(e, this.posRef.current)),\n            }, () => {\n                if (onDragMove) {\n                    const constrained = this.applyConstraint(this.state.drag)\n                    onDragMove(constrained.x, constrained.y);\n                }\n            })\n        } else {\n            throw new Error(\"move without posRef\");\n        }\n    }\n\n    public stopDrag = (): void => {\n        const { parentOnDrop } = this.props;\n        const { dragging, drag } = this.state;\n        if (!dragging) {\n            return;\n        }\n        this.setState({\n            dragging: false,\n        })\n        if (parentOnDrop) {\n            parentOnDrop(drag.x, drag.y);\n        }\n    }\n\n    public handleKeyDown = (e: React.KeyboardEvent<SVGElement>): void => {\n        const update = (fn: ModifyCoords) => {\n            const { x, y, onDragMove } = this.props;\n            const newCoords = fn(x, y);\n            const constrained = this.applyConstraint(newCoords);\n            if (onDragMove) {\n                onDragMove(constrained.x, constrained.y);\n            }\n        }\n        handleKeyEvent(e, update);\n    }\n\n    public renderCommon(x: number, y: number): JSX.Element {\n        const { imageWidth } = this.props;\n        const scale = imageWidth === undefined ? 1 : imageWidth / 128;\n        // empty zero-size <rect> as relative position reference\n        return (\n            <g>\n                <rect\n                    style={{ visibility: \"hidden\" }}\n                    ref={this.posRef}\n                    x={0} y={0} width={0} height={0}\n                />\n                <Handle scale={scale} x={x + .5} y={y + .5} withCross={this.props.withCross}\n                    focusRef={this.focusRef}\n                    onMouseUp={this.stopDrag}\n                    onMouseMove={this.move}\n                    onMouseDown={this.startDrag}\n                    onKeyDown={this.handleKeyDown}\n                    tabIndex={0}\n                />\n            </g>\n        );\n    }\n\n    public renderDragging(): JSX.Element {\n        const { x, y } = this.state.drag;\n        return this.renderCommon(x, y);\n    }\n\n    public render(): JSX.Element {\n        const { x, y } = this.props;\n        // either render from state (when dragging) or from props\n        if (this.state.dragging) {\n            return this.renderDragging();\n        } else {\n            return this.renderCommon(x, y);\n        }\n    }\n}\n\nexport default DraggableHandle;\n","export type ModifyCoords = ((x: number, y: number) => ({ x: number, y: number }));\n\n/**\n * Call this function whenever a keyboard event happens. The keyboard event is then translated\n * to a coordinate transformation, which is passed to the update callback. The update callback is\n * only called if relevant keys were pressed (example: arrow keys).\n * \n * @param e keyboard event\n * @param update a callback to handle coordinate updates\n */\nexport const handleKeyEvent = (e: React.KeyboardEvent<SVGElement>, update: (fn: ModifyCoords) => void): void => {\n    let delta = 1;\n    if (e.shiftKey) {\n        delta = 10;\n    }\n    switch (e.key) {\n        case \"ArrowUp\":\n            update((x: number, y: number) => ({ x, y: y - delta }));\n            break;\n        case \"ArrowDown\":\n            update((x: number, y: number) => ({ x, y: y + delta }));\n            break;\n        case \"ArrowLeft\":\n            update((x: number, y: number) => ({ x: x - delta, y }));\n            break;\n        case \"ArrowRight\":\n            update((x: number, y: number) => ({ x: x + delta, y }));\n            break;\n        default:\n            return;\n    }\n    e.preventDefault();\n}\n","import * as React from \"react\";\nimport { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { AnalysisTypes } from \"../../messages\";\nimport { HandleRenderFunction } from \"../../widgets/types\";\nimport * as compoundAnalysisActions from \"../actions\";\nimport useFramePicker from \"./FramePicker\";\nimport ModeSelector from \"./ModeSelector\";\nimport { useDiskROI } from \"./roi/DiskROI\";\nimport { useRectROI } from \"./roi/RectROI\";\nimport { useRoiPicker } from \"./roi/RoiPicker\";\n\n\nexport enum DefaultModes {\n    SUM = \"SUM\",\n    SD = \"SD\",\n    PICK = \"PICK\",\n}\n\nexport enum DefaultRois {\n    ALL = \"ALL\",\n    DISK = \"DISK\",\n    RECT = \"RECT\",\n}\n\nconst useDefaultFrameView = ({\n    scanWidth, scanHeight, compoundAnalysisId, doAutoStart,\n}: {\n    scanWidth: number, scanHeight: number, compoundAnalysisId: string,\n    doAutoStart: boolean,\n}) => {\n    const availableModes = [\n        {\n            text: \"Average\",\n            value: DefaultModes.SUM,\n        },\n        {\n            text: \"Standard Deviation\",\n            value: DefaultModes.SD,\n        },\n        {\n            text: \"Pick\",\n            value: DefaultModes.PICK,\n        },\n    ]\n\n    const availableRois = [\n        {\n            text: \"All\",\n            value: DefaultRois.ALL,\n        },\n        {\n            text: \"Disk\",\n            value: DefaultRois.DISK,\n        },\n        {\n            text: \"Rect\",\n            value: DefaultRois.RECT,\n        },\n    ]\n\n    const [frameMode, setMode] = useState(DefaultModes.SUM);\n    const [roi, setRoi] = useState(DefaultRois.ALL);\n\n    const dispatch = useDispatch();\n\n    const updateFrameMode = (newMode: string) => {\n        dispatch(compoundAnalysisActions.Actions.enableAutoStart(compoundAnalysisId));\n        setMode(newMode as DefaultModes);\n    }\n\n    const updateRoi = (newRoi: string) => {\n        dispatch(compoundAnalysisActions.Actions.enableAutoStart(compoundAnalysisId));\n        setRoi(newRoi as DefaultRois);\n    }\n\n    const frameModeSelector = <ModeSelector modes={availableModes} currentMode={frameMode} onModeChange={updateFrameMode} label=\"Mode\" />\n\n    let roiSelector = <ModeSelector modes={availableRois} currentMode={roi} onModeChange={updateRoi} label=\"ROI\" />\n\n    if (frameMode === DefaultModes.PICK) {\n        roiSelector = <></>;\n    }\n\n    const [cx, setCx] = React.useState(Math.floor(scanWidth / 2));\n    const [cy, setCy] = React.useState(Math.floor(scanHeight / 2));\n\n    const { coords: pickCoords, handles: pickHandles } = useFramePicker({\n        enabled: frameMode === DefaultModes.PICK,\n        scanWidth, scanHeight,\n        analysisIndex: 0,\n        compoundAnalysisId,\n        cx, cy, setCx, setCy\n    });\n\n    const { rectRoiHandles, rectRoiWidgets, rectRoiParameters } = useRectROI({ scanHeight, scanWidth })\n    const { diskRoiHandles, diskRoiWidgets, diskRoiParameters } = useDiskROI({ scanHeight, scanWidth })\n\n    const nullHandles: HandleRenderFunction = () => null\n    let handles = nullHandles;\n\n    let widgets;\n    let params = { roi: {} };\n    switch (roi) {\n        case DefaultRois.DISK:\n            handles = diskRoiHandles;\n            widgets = diskRoiWidgets;\n            params = diskRoiParameters;\n            break;\n        case DefaultRois.RECT:\n            handles = rectRoiHandles;\n            widgets = rectRoiWidgets;\n            params = rectRoiParameters;\n            break;\n    }\n\n    switch (frameMode) {\n        case DefaultModes.PICK:\n            handles = pickHandles;\n            widgets = undefined;\n            break;\n    }\n\n    useRoiPicker({\n        enabled: frameMode === DefaultModes.SD && doAutoStart,\n        scanWidth, scanHeight,\n        analysisIndex: 0,\n        compoundAnalysisId,\n        roiParameters: params,\n        analysisType: AnalysisTypes.SD_FRAMES\n    })\n\n    useRoiPicker({\n        enabled: frameMode === DefaultModes.SUM && doAutoStart,\n        scanWidth, scanHeight,\n        analysisIndex: 0,\n        compoundAnalysisId,\n        roiParameters: params,\n        analysisType: AnalysisTypes.SUM_FRAMES,\n    })\n\n    const frameViewTitle = (\n        frameMode !== DefaultModes.PICK ? null : <>Pick: x={pickCoords.cx}, y={pickCoords.cy} &emsp;</>\n    )\n\n    return {\n        frameViewTitle,\n        frameModeSelector: (<>{frameModeSelector} {roiSelector}</>),\n        roiSelector,\n        handles,\n        widgets,\n    }\n}\n\nexport default useDefaultFrameView;\n","import React from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { AnalysisParameters, AnalysisTypes } from \"../../messages\";\nimport { inRectConstraint } from \"../../widgets/constraints\";\nimport DraggableHandle from \"../../widgets/DraggableHandle\";\nimport { HandleRenderFunction } from \"../../widgets/types\";\nimport * as compoundAnalysisActions from \"../actions\";\n\nconst useFramePicker = ({\n    enabled, scanWidth, scanHeight, analysisIndex, compoundAnalysisId, cx, cy, setCx, setCy\n}: {\n    enabled: boolean, scanWidth: number, scanHeight: number,\n    analysisIndex: number, compoundAnalysisId: string,\n    cx: number, cy: number, setCx: (newCx: number) => void, setCy: (newCy: number) => void,\n}) => {\n\n    const dispatch = useDispatch();\n\n    React.useEffect(() => {\n        if (enabled) {\n            const params: AnalysisParameters = {\n                x: cx,\n                y: cy,\n            };\n\n            dispatch(compoundAnalysisActions.Actions.run(compoundAnalysisId, analysisIndex, {\n                analysisType: AnalysisTypes.PICK_FRAME,\n                parameters: params,\n            }))\n        }\n    }, [compoundAnalysisId, cx, cy, enabled, analysisIndex, dispatch]);\n\n    const onPickChange = (pickX: number, pickY: number) => {\n        const newX = Math.round(pickX);\n        const newY = Math.round(pickY);\n        if (cx === newX && cy === newY) {\n            return;\n        }\n        setCx(newX);\n        setCy(newY);\n    }\n\n    const renderPickHandle: HandleRenderFunction = (onDragStart, onDrop) => (\n        <DraggableHandle x={cx} y={cy} withCross\n            imageWidth={scanWidth}\n            onDragMove={onPickChange}\n            parentOnDragStart={onDragStart}\n            parentOnDrop={onDrop}\n            constraint={inRectConstraint(scanWidth, scanHeight)} />\n    )\n\n    return { coords: { cx, cy }, handles: renderPickHandle };\n}\n\nexport default useFramePicker;","import * as React from \"react\";\nimport { Dropdown, DropdownProps } from \"semantic-ui-react\";\n\n\ntype ModeOptions = Array<{\n    text: string;\n    value: string;\n}>;\n\ninterface ModeSelectorProps {\n    modes: ModeOptions,\n    currentMode: string,\n    onModeChange: (mode: string) => void,\n    label: string,\n}\n\nconst ModeSelector: React.FunctionComponent<ModeSelectorProps> = ({\n    modes, currentMode, onModeChange, label\n}) => {\n\n    const onChange = (e: React.SyntheticEvent, data: DropdownProps) => {\n        if(data.value !== undefined && typeof data.value === \"string\") {\n            onModeChange(data.value);\n        }\n    }\n\n    return (\n        <>\n            <div>\n                {label}:{' '}\n                <Dropdown\n                    inline\n                    options={modes}\n                    value={currentMode}\n                    onChange={onChange}\n                />\n            </div>\n        </>\n    )\n}\n\nexport default ModeSelector;","import * as React from \"react\";\nimport { defaultMaskStyles } from \"./styles\";\n\nexport interface RectProps {\n    imageWidth: number,\n    imageHeight: number,\n    x: number,\n    y: number,\n    width: number,\n    height: number,\n}\n\nconst Rect: React.FC<RectProps> = ({ imageWidth, x, y, width, height }) => {\n    let ymin: number;\n    let xmin: number;\n    if (height*width > 0) {\n    ymin = Math.min(y, y+height);\n    xmin = Math.min(x, x+width);}\n    else if (height > 0 && width < 0) \n    {ymin = y;\n    xmin = x+width;}\n    else \n    {ymin = y+height;\n    xmin = x;}\n    return (\n        <rect x={xmin + .5} y={ymin + .5} width={Math.abs(width)} height={Math.abs(height)} style={{ ...defaultMaskStyles(imageWidth) }} />\n    );\n}\n\nexport default Rect;\n\n","import { useState } from \"react\";\nimport { RectRoiParams } from \"../../../messages\";\nimport DraggableHandle from \"../../../widgets/DraggableHandle\";\nimport Rect from \"../../../widgets/Rect\";\nimport { HandleRenderFunction } from \"../../../widgets/types\";\n\n\n\nconst useRectROI = ({ scanWidth, scanHeight }: {\n    scanWidth: number;\n    scanHeight: number;\n}) => {\n    const minLength = Math.min(scanWidth, scanHeight);\n    const [x, setx] = useState(scanWidth / 2);\n    const [y, sety] = useState(scanHeight / 2);\n    const [width, setwidth] = useState(minLength / 8);\n    const [height, setheight] = useState(minLength / 8);\n\n\n    const rectRoiParameters: {roi: RectRoiParams} = {\n        roi: {\n            shape: \"rect\",\n            x,\n            y,\n            width,\n            height,\n        },\n    }\n\n\n    const handleCornerChange = (newx: number, newy: number) => {\n        setx(newx);\n        sety(newy);\n    };\n\n    const handleShapeChange = (newx: number, newy: number) => {\n        setwidth(newx - x);\n        setheight(newy - y);\n    };\n\n    const smthHandle = {\n        x: x + width,\n        y: y + height,\n    }\n\n    const rectRoiHandles: HandleRenderFunction = (handleDragStart, handleDrop) => (<>\n        <DraggableHandle x={x} y={y}\n            imageWidth={scanWidth}\n            onDragMove={handleCornerChange}\n            parentOnDragStart={handleDragStart}\n            parentOnDrop={handleDrop} />\n        <DraggableHandle x={smthHandle.x} y={smthHandle.y}\n            imageWidth={scanWidth}\n            onDragMove={handleShapeChange}\n            parentOnDragStart={handleDragStart}\n            parentOnDrop={handleDrop} />\n    </>);\n\n    const rectRoiWidgets = (\n        <Rect x={x} y={y} width={width} height={height}\n            imageWidth={scanWidth} imageHeight={scanHeight}\n        />\n    );\n\n    return {\n        rectRoiParameters,\n        rectRoiHandles,\n        rectRoiWidgets,\n    };\n};\n\nexport { useRectROI };\n\n","import * as React from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { AnalysisTypes, FrameParams } from \"../../../messages\";\nimport * as analysisActions from \"../../actions\";\n\n\nconst useRoiPicker = ({ compoundAnalysisId, enabled, analysisIndex, roiParameters, analysisType }: {\n    scanWidth: number;\n    scanHeight: number;\n    enabled: boolean;\n    analysisIndex: number,\n    compoundAnalysisId: string;\n    roiParameters: FrameParams;\n    analysisType: AnalysisTypes.SD_FRAMES | AnalysisTypes.SUM_FRAMES\n}) => {\n    const dispatch = useDispatch();\n\n    React.useEffect(() => {\n        const handle = setTimeout(() => {\n            if (enabled) {\n                const analysisDetails = {\n                    analysisType,\n                    parameters: roiParameters,\n                };\n                dispatch(analysisActions.Actions.run(compoundAnalysisId, analysisIndex, analysisDetails))\n            }\n        }, 100);\n\n        return () => clearTimeout(handle);\n        // rules-of-hooks can't be statically validated here\n        // eslint-disable-next-line\n    }, [analysisType, compoundAnalysisId, enabled, analysisIndex, JSON.stringify(roiParameters), dispatch]);\n\n    return {\n    };\n};\n\nexport { useRoiPicker };\n\n","import { ActionsUnion, createAction } from '../helpers/actionHelpers';\nimport { CreateDatasetMessage, DatasetCreateParams, DatasetFormInfo, DatasetFormParams } from '../messages';\n\nexport enum ActionTypes {\n    OPEN = 'DATASET_OPEN',\n    CANCEL_OPEN = 'DATASET_CANCEL_OPEN',\n    CREATE = 'DATASET_CREATE',\n    CREATED = 'DATASET_CREATED',\n    ERROR = 'DATASET_ERROR',\n    DELETE = 'DATASET_DELETE',\n    DELETED = 'DATASET_DELETED',\n    DETECT = 'DATASET_DETECT',\n    DETECTED = 'DATASET_DETECTED',\n    DETECT_FAILED = 'DATASET_DETECT_FAILED',\n}\n\nexport const Actions = {\n    open: (path: string, cachedParams?: DatasetFormParams, detectedParams?: DatasetFormParams, detectedInfo?: DatasetFormInfo) => createAction(ActionTypes.OPEN, { path, cachedParams, detectedParams, detectedInfo }),\n    cancelOpen: () => createAction(ActionTypes.CANCEL_OPEN),\n    create: (dataset: DatasetCreateParams) => createAction(ActionTypes.CREATE, { dataset }),\n    created: (dataset: CreateDatasetMessage) => createAction(ActionTypes.CREATED, { dataset }),\n    error: (dataset: string, msg: string, timestamp: number, id: string) => createAction(ActionTypes.ERROR, { dataset, msg, timestamp, id }),\n    delete: (dataset: string) => createAction(ActionTypes.DELETE, { dataset }),\n    deleted: (dataset: string) => createAction(ActionTypes.DELETED, { dataset }),\n    detect: (path: string) => createAction(ActionTypes.DETECT, { path }),\n    detected: (path: string, params: DatasetFormParams, info: DatasetFormInfo) => createAction(ActionTypes.DETECTED, { path, params, info }),\n    detectFailed: (path: string) => createAction(ActionTypes.DETECT_FAILED, { path }),\n}\n\nexport type Actions = ActionsUnion<typeof Actions>;\n","import { useState } from \"react\";\n\nimport { FrameParams } from \"../../../messages\";\nimport { cbToRadius, inRectConstraint, keepOnCY } from \"../../../widgets/constraints\";\nimport Disk from \"../../../widgets/Disk\";\nimport DraggableHandle from \"../../../widgets/DraggableHandle\";\nimport { HandleRenderFunction } from \"../../../widgets/types\";\n\nconst useDiskROI = ({ scanWidth, scanHeight }: {\n    scanWidth: number;\n    scanHeight: number;\n}) => {\n    const minLength = Math.min(scanWidth, scanHeight);\n    const [cx, setCx] = useState(scanWidth / 2);\n    const [cy, setCy] = useState(scanHeight / 2);\n    const [r, setR] = useState(minLength / 8);\n\n\n    const diskRoiParameters: FrameParams = {\n        roi: {\n            shape: \"disk\",\n            cx,\n            cy,\n            r,\n        },\n    }\n\n\n    const handleCenterChange = (newCx: number, newCy: number) => {\n        setCx(newCx);\n        setCy(newCy);\n    };\n\n    const handleRChange = (newR: number) => {\n        setR(newR);\n    };\n\n    const rHandle = {\n        x: cx - r,\n        y: cy,\n    }\n\n    const diskRoiHandles: HandleRenderFunction = (handleDragStart, handleDrop) => (<>\n        <DraggableHandle x={cx} y={cy}\n            imageWidth={scanWidth}\n            onDragMove={handleCenterChange}\n            parentOnDragStart={handleDragStart}\n            parentOnDrop={handleDrop}\n            constraint={inRectConstraint(scanWidth, scanHeight)} />\n        <DraggableHandle x={rHandle.x} y={rHandle.y}\n            imageWidth={scanWidth}\n            onDragMove={cbToRadius(cx, cy, handleRChange)}\n            parentOnDragStart={handleDragStart}\n            parentOnDrop={handleDrop}\n            constraint={keepOnCY(cy)} />\n    </>);\n\n    const diskRoiWidgets = (\n        <Disk cx={cx} cy={cy} r={r}\n            imageWidth={scanWidth} imageHeight={scanHeight}\n        />\n    );\n\n    return {\n        diskRoiParameters,\n        diskRoiHandles,\n        diskRoiWidgets,\n    };\n};\n\nexport { useDiskROI };\n\n","import * as React from \"react\";\nimport { Grid, Header, Icon, Segment } from \"semantic-ui-react\";\n\ninterface AnalysisLayoutTwoColProps {\n    title: string,\n    subtitle: React.ReactNode,\n    left: React.ReactNode,\n    right: React.ReactNode,\n    toolbar?: React.ReactNode,\n}\n\ntype MergedProps = AnalysisLayoutTwoColProps;\n\nconst AnalysisLayoutTwoCol: React.FC<MergedProps> = ({\n    title, subtitle,\n    left, right,\n    toolbar,\n}) => (\n    <>\n        <Header as='h3' attached=\"top\">\n            <Icon name=\"cog\" />\n            <Header.Content>{title}</Header.Content>\n        </Header>\n        <Segment attached>\n            <Grid columns={2}>\n                <Grid.Row>\n                    <Grid.Column>\n                        {left}\n                        <p>{subtitle}</p>\n                    </Grid.Column>\n                    <Grid.Column>\n                        {right}\n                    </Grid.Column>\n                </Grid.Row>\n            </Grid>\n        </Segment>\n        {toolbar}\n    </>\n)\n\nexport default AnalysisLayoutTwoCol","export const getApiBasePath = () : string => {\n    const loc = window.location.pathname;\n\n    if(loc.endsWith('/')) {\n        return `${loc}api/`;\n    } else {\n        return `${loc}/api/`;\n    }\n}\n\nexport const getApiWSURL = () : string => {\n    const basePath = getApiBasePath();\n    return `ws://${window.location.hostname}:${window.location.port}${basePath}events/`;\n}\n\nexport const genericDelete = async <T>(path: string): Promise<T> => {\n    const basePath = getApiBasePath();\n    const r = await fetch(`${basePath}${path}`, {\n        credentials: \"same-origin\",\n        method: \"DELETE\",\n    });\n    return await (r.json() as Promise<T>);\n}\n\n\nexport const genericPut = async <Resp, Payload>(path: string, payload: Payload): Promise<Resp> => {\n    const basePath = getApiBasePath();\n    const r = await fetch(`${basePath}${path}`, {\n        body: JSON.stringify(payload),\n        credentials: \"same-origin\",\n        method: \"PUT\",\n    });\n    return await (r.json() as Promise<Resp>);\n}","import { genericDelete, genericPut, getApiBasePath } from \"../helpers/apiHelpers\";\nimport { AnalysisDetails, CompoundAnalysisDetails, CopyNotebookResponse, CreateAnalysisResponse, CreateCompoundAnalysisResponse, CreateOrUpdateAnalysisRequest, CreateOrUpdateCompoundAnalysisRequest, RemoveAnalysisResponse, RemoveCompoundAnalysisResponse } from \"../messages\";\n\nexport const createOrUpdateAnalysis = async (\n    compoundAnalysisId: string,\n    analysisId: string, dataset: string, details: AnalysisDetails\n): Promise<CreateAnalysisResponse> => {\n    const payload: CreateOrUpdateAnalysisRequest = {\n        dataset,\n        details,\n    };\n    return await genericPut(`compoundAnalyses/${compoundAnalysisId}/analyses/${analysisId}/`, payload);\n}\n\nexport const removeAnalysis = async (compoundAnalysisId: string, analysisId: string): Promise<RemoveAnalysisResponse> => (\n    await genericDelete(`compoundAnalyses/${compoundAnalysisId}/analyses/${analysisId}/`)\n);\n\nexport const createOrUpdateCompoundAnalysis = async (\n    compoundAnalysisId: string,\n    dataset: string,\n    details: CompoundAnalysisDetails,\n): Promise<CreateCompoundAnalysisResponse> => {\n    const payload: CreateOrUpdateCompoundAnalysisRequest = {\n        dataset,\n        details,\n    };\n    return await genericPut(`compoundAnalyses/${compoundAnalysisId}/`, payload);\n}\n\nexport const removeCompoundAnalysis = async (compoundAnalysisId: string): Promise<RemoveCompoundAnalysisResponse> => (\n    await genericDelete(`compoundAnalyses/${compoundAnalysisId}/`)\n);\n\nexport const getNotebook = async (compoundAnalysisId: string): Promise<CopyNotebookResponse> => {\n    const basePath = getApiBasePath();\n    const url = `${basePath}compoundAnalyses/${compoundAnalysisId}/copy/notebook/`;\n    const r = await fetch(url, {\n        method: 'GET',\n        credentials: \"same-origin\",\n    });\n    return await (r.json() as Promise<CopyNotebookResponse>);\n}\n","import { AnalysisTypes } from \"../messages\";\nimport { CompoundAnalysisMetadata, CompoundAnalysisMetadataItem } from \"./types\";\n// keyof typeof: https://stackoverflow.com/a/42623905/540644\nexport const getMetadata = (typeName: keyof typeof AnalysisTypes): CompoundAnalysisMetadataItem => {\n    const type: AnalysisTypes = AnalysisTypes[typeName];\n    return CompoundAnalysisMetadata[type];\n};\n","import * as React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Button, Dropdown, DropdownProps, Header, Icon, Modal, Segment, Tab } from \"semantic-ui-react\";\nimport { AnalysisState } from \"../../analysis/types\";\nimport { dispatchGenericError } from \"../../errors/helpers\";\nimport { writeClipboard } from \"../../helpers\";\nimport { getApiBasePath } from \"../../helpers/apiHelpers\";\nimport { JobStatus } from \"../../job/types\";\nimport { CopyAnalysis } from \"../../messages\";\nimport { RootReducer } from \"../../store\";\nimport { getNotebook } from '../api';\nimport { getMetadata } from \"../getMetadata\";\nimport { CompoundAnalysisState } from \"../types\";\n\ninterface DownloadItemsProps {\n    compoundAnalysis: CompoundAnalysisState,\n    currentFormat: string,\n}\n\nconst DownloadItems: React.FC<DownloadItemsProps> = ({\n    compoundAnalysis, currentFormat\n}) => {\n\n    const basePath = getApiBasePath();\n    const downloadUrl = (analysisId: string) => (\n        `${basePath}compoundAnalyses/${compoundAnalysis.compoundAnalysis}/analyses/${analysisId}/download/${currentFormat}/`\n    )\n\n    const analysesById = useSelector((state: RootReducer) => state.analyses.byId);\n    const jobsById = useSelector((state: RootReducer) => state.jobs.byId);\n\n    const analyses = compoundAnalysis.details.analyses.map(analysis => analysesById[analysis]).filter(analysis =>\n        analysis.jobs.some(jobId => jobsById[jobId].status === JobStatus.SUCCESS)\n    );\n\n    const getAnalysisDescription = (analysis: AnalysisState) => getMetadata(analysis.details.analysisType).desc;\n\n    const getDownloadChannels = (analysis: AnalysisState) => {\n        if (!analysis.displayedJob) {\n            return [];\n        }\n        return jobsById[analysis.displayedJob].results.filter(\n            result => result.description.includeInDownload\n        ).map(\n            result => result.description.title\n        )\n    }\n\n    return (\n        <ul>\n            {analyses.map((analysis) => (\n                <li key={analysis.id}>\n                    <a href={downloadUrl(analysis.id)}>\n                        {getAnalysisDescription(analysis)} (channels: {getDownloadChannels(analysis).join(\", \")})\n                        </a>\n                </li>\n            ))}\n        </ul>\n    )\n}\n\ninterface CopyScriptsProps {\n    compoundAnalysis: CompoundAnalysisState,\n}\n\nconst CopyScripts: React.FC<CopyScriptsProps> = ({ compoundAnalysis }) => {\n    const initialAnalysis: CopyAnalysis[] = [\n        {\n            analysis: \"\",\n            plot: [\"\"],\n        },\n    ];\n\n    const [notebook, setNotebook] = useState({\n        dependency: \"\",\n        initial_setup: \"\",\n        ctx: \"\",\n        dataset: \"\",\n        analysis: initialAnalysis,\n    });\n\n    const dispatch = useDispatch();\n\n    const cell = (code: string) => {\n        const copy = () => {\n            writeClipboard(code, dispatch);\n        };\n\n        return (\n            <Segment padded>\n                <Button floated={\"right\"} icon={\"copy\"} onClick={copy} />\n                <pre>{code}</pre>\n            </Segment>\n        );\n    };\n\n    const copyCompleteNotebook = () => {\n        const firstPart = [notebook.dependency, notebook.initial_setup, notebook.ctx, notebook.dataset].join(\"\\n\\n\");\n        const joinCode = (analysis: CopyAnalysis) => `${analysis.analysis}\\n${analysis.plot.join(\"\\n\\n\")}`\n        const secondPart = notebook.analysis.map(joinCode).join(\"\\n\\n\");\n        writeClipboard(`${firstPart}\\n\\n${secondPart}`, dispatch);\n    };\n\n    useEffect(() => {\n        getNotebook(compoundAnalysis.compoundAnalysis).then(CurrentNotebook => {\n            setNotebook({\n                dependency: CurrentNotebook.dependency,\n                initial_setup: CurrentNotebook.initial_setup,\n                ctx: CurrentNotebook.ctx,\n                dataset: CurrentNotebook.dataset,\n                analysis: CurrentNotebook.analysis,\n            });\n        }).catch(() => dispatchGenericError(\"could not get notebook\", dispatch))\n    }, [compoundAnalysis.compoundAnalysis]);\n\n    return (\n        <>\n            <Segment clearing>\n                <Header floated={\"left\"}>Notebook</Header>\n                <Button icon labelPosition=\"left\" floated={\"right\"} onClick={copyCompleteNotebook}>\n                    <Icon name=\"copy\" />\n                    Complete notebook\n                </Button>\n            </Segment>\n            <Modal.Content scrolling>\n                {[notebook.dependency, notebook.initial_setup, notebook.ctx, notebook.dataset].map(cell)}\n                {notebook.analysis.map(analysis => (\n                    <>\n                        {cell(analysis.analysis)}\n                        {analysis.plot.map(cell)}\n                    </>\n                ))}\n            </Modal.Content>\n        </>\n    );\n};\n\ninterface DownloadScriptsProps {\n    compoundAnalysis: CompoundAnalysisState,\n}\n\nconst DownloadScripts: React.FC<DownloadScriptsProps> = ({ compoundAnalysis }) => {\n    const basePath = getApiBasePath();\n    const downloadUrl = `${basePath}compoundAnalyses/${compoundAnalysis.compoundAnalysis}/download/notebook/`;\n\n    return (\n        <ul>\n            <li>\n                <a href={downloadUrl}>notebook corresponding to analysis</a>\n            </li>\n        </ul>\n    );\n};\n\ninterface DownloadProps {\n    compoundAnalysis: CompoundAnalysisState,\n}\n\ntype FormatOptions = Array<{\n    text: string;\n    value: string;\n}>;\n\ninterface DownloadResultItemProps {\n    formatOptions: FormatOptions,\n    onFormatChange: (e: React.SyntheticEvent, data: DropdownProps) => void,\n    currentFormat: string,\n    compoundAnalysis: CompoundAnalysisState,\n}\n\nconst DownloadResultItem: React.FC<DownloadResultItemProps> = ({\n    formatOptions, onFormatChange, currentFormat, compoundAnalysis,\n}) => (\n    <Tab.Pane>\n        <Header >\n            Download Results, format: <Dropdown inline options={formatOptions} onChange={onFormatChange} value={currentFormat} />\n        </Header>\n        <Header as=\"h3\">Available results:</Header>\n        <DownloadItems compoundAnalysis={compoundAnalysis} currentFormat={currentFormat} />\n    </Tab.Pane>\n);\n\ninterface DownloadNotebookItemProps {\n    compoundAnalysis: CompoundAnalysisState,\n}\n\nconst DownloadNotebookItem: React.FC<DownloadNotebookItemProps> = ({\n    compoundAnalysis\n}) => (\n    <Tab.Pane>\n        <Header as=\"h3\">Available scripts: </Header>\n        <DownloadScripts compoundAnalysis={compoundAnalysis} />\n    </Tab.Pane>\n);\n\ninterface CopyNotebookItemProps {\n    compoundAnalysis: CompoundAnalysisState,\n}\n\nconst CopyNotebookItem: React.FC<CopyNotebookItemProps> = ({\n    compoundAnalysis,\n}) => (\n    <Tab.Pane>\n        <CopyScripts compoundAnalysis={compoundAnalysis} />\n    </Tab.Pane>\n);\n\nconst Download: React.FC<DownloadProps> = ({ compoundAnalysis }) => {\n    const formats = useSelector((state: RootReducer) => state.config.resultFileFormats);\n    const formatOptions: FormatOptions = Object.keys(formats).map(identifier => ({\n        value: identifier,\n        text: formats[identifier].description,\n    }));\n\n    const [currentFormat, setFormat] = useState(formatOptions[0]?.value);\n\n    // we may be called before the config is completely loaded, so we\n    // need to set the format after the list of formats is available\n    React.useEffect(() => {\n        if (formatOptions.length !== 0 && !currentFormat) {\n            setFormat(formatOptions[0].value);\n        }\n    }, [formatOptions, currentFormat])\n\n    const onFormatChange = (e: React.SyntheticEvent, data: DropdownProps) => {\n        if(data.value) {\n            setFormat(data.value.toString());\n        }\n    }\n\n    const panes = [\n        {\n            menuItem: \"Download result\",\n            render: () => <DownloadResultItem formatOptions={formatOptions} onFormatChange={onFormatChange} currentFormat={currentFormat} compoundAnalysis={compoundAnalysis} />\n        },\n        {\n            menuItem: \"Download notebook\",\n            render: () => <DownloadNotebookItem compoundAnalysis={compoundAnalysis} />,\n        },\n        {\n            menuItem: \"Copy notebook\",\n            render: () => <CopyNotebookItem compoundAnalysis={compoundAnalysis} />,\n        },\n    ];\n\n\n    return (\n        <Modal trigger={\n            <Button icon>\n                <Icon name='download' />\n                Download\n            </Button>\n        }>\n            <Tab panes={panes} />\n        </Modal>\n    );\n}\n\nexport default Download;","import * as React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Button, Icon, IconProps, Segment } from \"semantic-ui-react\";\nimport { RootReducer } from \"../../store\";\nimport * as analysisActions from \"../actions\";\nimport { getAnalysisStatus } from \"../helpers\";\nimport { CompoundAnalysisState } from \"../types\";\nimport Download from \"./Download\";\n\ninterface ToolbarProps {\n    compoundAnalysis: CompoundAnalysisState,\n    busyIdxs: number[],\n    onApply: () => void,\n}\n\n\ntype MergedProps = ToolbarProps;\n\nconst Toolbar: React.FC<MergedProps> = ({ busyIdxs, onApply, compoundAnalysis }) => {\n    const dispatch = useDispatch();\n    const handleRemove = () => dispatch(analysisActions.Actions.remove(compoundAnalysis.compoundAnalysis));\n    const analyses = useSelector((state: RootReducer) => state.analyses);\n    const jobs = useSelector((state: RootReducer) => state.jobs);\n    const status = getAnalysisStatus(\n        compoundAnalysis, analyses, jobs,\n        busyIdxs\n    );\n    const running = status === \"busy\";\n    const applyIconProps: IconProps = running ? { name: 'cog', loading: true } : { name: 'check' }\n\n    return (\n        <Segment attached=\"bottom\">\n            <Button.Group>\n                <Button primary onClick={onApply} icon>\n                    <Icon {...applyIconProps} />\n                    Apply\n                </Button>\n                <Download compoundAnalysis={compoundAnalysis} />\n                <Button onClick={handleRemove} icon>\n                    <Icon name='remove' />\n                    Remove\n                </Button>\n            </Button.Group>\n        </Segment>\n    );\n}\n\nexport default Toolbar;","import { AnalysisReducerState } from \"../analysis/reducers\";\nimport { JobReducerState } from \"../job/reducers\";\nimport { JobRunning } from \"../job/types\";\nimport { CompoundAnalysisState } from \"./types\";\n\nexport const getAnalysisStatus = (\n    compoundAnalysis: CompoundAnalysisState,\n    analyses: AnalysisReducerState,\n    jobs: JobReducerState,\n    analysisIdxsToInclude: number[] = []\n): \"idle\" | \"busy\" => {\n    let filteredAnalyses = compoundAnalysis.details.analyses;\n\n    if (analysisIdxsToInclude.length > 0) {\n        filteredAnalyses = filteredAnalyses.filter((analysisId: string, idx: number) => analysisIdxsToInclude.indexOf(idx) !== -1)\n    }\n\n    return filteredAnalyses.reduce((prevValue: \"idle\" | \"busy\", analysisId: string) => {\n        const analysis = analyses.byId[analysisId];\n        if(!analysis) {\n            return prevValue; // no analysis, so \"all jobs\" are done\n        }\n        const allDone = analysis.jobs.every(\n            jobId => jobs.byId[jobId].running === JobRunning.DONE\n        );\n        return allDone ? prevValue : \"busy\";\n    }, \"idle\");\n}","import * as React from \"react\";\nimport { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { defaultDebounce } from \"../../helpers\";\nimport ResultList from \"../../job/components/ResultList\";\nimport { AnalysisTypes } from \"../../messages\";\nimport { cbToRadius, inRectConstraint, keepOnCY } from \"../../widgets/constraints\";\nimport Disk from \"../../widgets/Disk\";\nimport { DraggableHandle } from \"../../widgets/DraggableHandle\";\nimport { HandleRenderFunction } from \"../../widgets/types\";\nimport * as compoundAnalysisActions from \"../actions\";\nimport { CompoundAnalysisProps } from \"../types\";\nimport useDefaultFrameView from \"./DefaultFrameView\";\nimport AnalysisLayoutTwoCol from \"./layouts/AnalysisLayoutTwoCol\";\nimport Toolbar from \"./Toolbar\";\n\nconst CenterOfMassAnalysis: React.FC<CompoundAnalysisProps> = ({ compoundAnalysis, dataset }) => {\n    const { shape } = dataset.params;\n    const [scanHeight, scanWidth, imageHeight, imageWidth] = shape;\n    const minLength = Math.min(imageWidth, imageHeight);\n    const [cx, setCx] = useState(imageWidth / 2);\n    const [cy, setCy] = useState(imageHeight / 2);\n    const [r, setR] = useState(minLength / 4);\n\n    const dispatch = useDispatch();\n\n    const rHandle = {\n        x: cx - r,\n        y: cy,\n    }\n\n    const handleCenterChange = defaultDebounce((newCx: number, newCy: number) => {\n        setCx(newCx);\n        setCy(newCy);\n    });\n    const handleRChange = defaultDebounce(setR);\n\n    const frameViewHandles: HandleRenderFunction = (handleDragStart, handleDrop) => (<>\n        <DraggableHandle x={cx} y={cy}\n            imageWidth={imageWidth}\n            onDragMove={handleCenterChange}\n            parentOnDragStart={handleDragStart}\n            parentOnDrop={handleDrop}\n            constraint={inRectConstraint(imageWidth, imageHeight)} />\n        <DraggableHandle x={rHandle.x} y={rHandle.y}\n            imageWidth={imageWidth}\n            onDragMove={cbToRadius(cx, cy, handleRChange)}\n            parentOnDragStart={handleDragStart}\n            parentOnDrop={handleDrop}\n            constraint={keepOnCY(cy)} />\n    </>);\n\n    const frameViewWidgets = (\n        <Disk cx={cx} cy={cy} r={r}\n            imageWidth={imageWidth} imageHeight={imageHeight} />\n    )\n\n    const {\n        frameViewTitle, frameModeSelector,\n        handles: resultHandles, widgets: resultWidgets\n    } = useDefaultFrameView({\n        scanWidth,\n        scanHeight,\n        compoundAnalysisId: compoundAnalysis.compoundAnalysis,\n        doAutoStart: compoundAnalysis.doAutoStart,\n    })\n\n    const subtitle = <>{frameViewTitle} Disk: center=(x={cx.toFixed(2)}, y={cy.toFixed(2)}), r={r.toFixed(2)}</>;\n\n    const runAnalysis = () => {\n        dispatch(compoundAnalysisActions.Actions.run(compoundAnalysis.compoundAnalysis, 1, {\n            analysisType: AnalysisTypes.CENTER_OF_MASS,\n            parameters: {\n                shape: \"com\",\n                cx,\n                cy,\n                r\n            }\n        }));\n    };\n\n    const toolbar = <Toolbar compoundAnalysis={compoundAnalysis} onApply={runAnalysis} busyIdxs={[1]} />\n\n    return (\n        <AnalysisLayoutTwoCol\n            title=\"COM analysis\" subtitle={subtitle}\n            left={<>\n                <ResultList\n                    extraHandles={frameViewHandles} extraWidgets={frameViewWidgets}\n                    analysisIndex={0} compoundAnalysis={compoundAnalysis.compoundAnalysis}\n                    width={imageWidth} height={imageHeight}\n                    selectors={frameModeSelector}\n                />\n            </>}\n            right={<>\n                <ResultList\n                    analysisIndex={1} compoundAnalysis={compoundAnalysis.compoundAnalysis}\n                    width={scanWidth} height={scanHeight}\n                    extraHandles={resultHandles}\n                    extraWidgets={resultWidgets}\n                />\n            </>}\n            toolbar={toolbar}\n        />\n    );\n}\n\nexport default CenterOfMassAnalysis;","import { Point2D } from \"../basicTypes\";\n\n// from https://stackoverflow.com/a/45100420/540644\nexport const getPathArc = (center: { x: number, y: number }, start: number, end: number, radius: number): string => {\n    if (end === start) { end += 360; }\n    let degree = end - start;\n    degree = degree < 0 ? (degree + 360) : degree;\n    const points = [];\n    points.push(getLocationFromAngle(start, radius, center));\n    points.push(getLocationFromAngle(start + degree / 3, radius, center));\n    points.push(getLocationFromAngle(start + degree * 2 / 3, radius, center));\n    points.push(getLocationFromAngle(end, radius, center));\n    return getCirclePath(points, radius, (degree < 180) ? 0 : 1);\n}\n\nconst getCirclePath = (points: Array<{ x: number, y: number }>, radius: number, clockWise: 0 | 1): string => (\n    ['M', points[0].x, points[0].y,\n        'A', radius, radius, 0, 0, clockWise, points[1].x, points[1].y,\n        'A', radius, radius, 0, 0, clockWise, points[2].x, points[2].y,\n        'A', radius, radius, 0, 0, clockWise, points[3].x, points[3].y\n    ].join(' ')\n);\n\nconst getLocationFromAngle = (degree: number, radius: number, center: { x: number, y: number }): Point2D => {\n    const radian = (degree * Math.PI) / 180;\n    return {\n        x: Math.cos(radian) * radius + center.x,\n        y: Math.sin(radian) * radius + center.y\n    }\n}\n","import * as React from \"react\";\nimport { getPathArc } from \"../helpers/svg\";\nimport { defaultMaskStyles } from \"./styles\";\n\nexport interface RingProps {\n    imageWidth: number,\n    cx: number,\n    cy: number,\n    ri: number,\n    ro: number,\n}\n\nconst Ring: React.FC<RingProps> = ({ imageWidth, cx, cy, ri, ro }) => {\n    // see also: https://stackoverflow.com/a/37883328/540644\n    const pathSpecs = [\n        getPathArc({ x: cx + .5, y: cy + .5 }, 90, 90, ro),\n        getPathArc({ x: cx + .5, y: cy + .5 }, 90, 90, ri)\n    ]\n    const pathSpec = pathSpecs.join(' ');\n\n    return (\n        <path d={pathSpec} fillRule=\"evenodd\" style={{ ...defaultMaskStyles(imageWidth) }} />\n    );\n}\n\nexport default Ring;","import * as React from \"react\";\nimport { Grid, Header, Icon, Segment } from \"semantic-ui-react\";\n\ninterface AnalysisLayoutTwoResProps {\n    title: string,\n    subtitle: React.ReactNode,\n    left: React.ReactNode,\n    mid: React.ReactNode,\n    right: React.ReactNode,\n    clustparams: React.ReactNode,\n    toolbar?: React.ReactNode,\n    title1: string, \n    title2: React.ReactNode,\n    title3:string,\n}\n\ntype MergedProps = AnalysisLayoutTwoResProps;\n\nconst AnalysisLayoutTwoRes: React.FC<MergedProps> = ({\n    title, subtitle,\n    left, mid, right,\n    toolbar, clustparams, title1, title2, title3\n}) => (\n    <>\n        <Header as='h3' attached=\"top\">\n            <Icon name=\"cog\" />\n            <Header.Content>{title}</Header.Content>\n        </Header>\n        <Segment attached>\n            <Grid columns={3}>\n                <Grid.Row>\n                    <Grid.Column width={4}>\n                        <p>{title1}</p>\n                    </Grid.Column>\n\n                    <Grid.Column width={6}>\n                        <p>{title2}</p>\n\n                    </Grid.Column>\n\n                    <Grid.Column width={6}>\n                        <p>{title3}</p>\n                    </Grid.Column>\n                </Grid.Row>\n\n                <Grid.Row>\n                    <Grid.Column width={4}>\n                        {left}\n                    </Grid.Column>\n\n                    <Grid.Column width={6}>\n                        {mid}\n                    </Grid.Column>\n\n                    <Grid.Column width={6}>\n                        {right}\n                    </Grid.Column>\n\n                </Grid.Row>\n\n                <Grid.Row>\n                    <Grid.Column width={16}>\n\n                        <div>{clustparams}</div>\n                        <p>{subtitle}</p>\n\n                    </Grid.Column>\n\n                </Grid.Row>\n            </Grid>\n\n        </Segment>\n\n        {toolbar}\n    </>\n);\n\nexport default AnalysisLayoutTwoRes","import * as React from \"react\";\nimport { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { Accordion, Form, Icon } from \"semantic-ui-react\";\nimport { defaultDebounce } from \"../../helpers\";\nimport ResultList from \"../../job/components/ResultList\";\nimport { AnalysisTypes } from \"../../messages\";\nimport { cbToRadius, inRectConstraint, riConstraint, roConstraints } from \"../../widgets/constraints\";\nimport DraggableHandle from \"../../widgets/DraggableHandle\";\nimport Ring from \"../../widgets/Ring\";\nimport { HandleRenderFunction } from \"../../widgets/types\";\nimport * as compoundAnalysisActions from \"../actions\";\nimport { CompoundAnalysisProps } from \"../types\";\nimport useDefaultFrameView from \"./DefaultFrameView\";\nimport AnalysisLayoutTwoRes from \"./layouts/AnalysisLayoutTwoRes\";\nimport { useRectROI } from \"./roi/RectROI\";\nimport Toolbar from \"./Toolbar\";\n\n\nconst ClustAnalysis: React.FC<CompoundAnalysisProps> = ({ compoundAnalysis, dataset }) => {\n    const { shape } = dataset.params;\n    const [scanHeight, scanWidth, imageHeight, imageWidth] = shape;\n    const minLength = Math.min(imageWidth, imageHeight);\n\n    const [cx, setCx] = useState(imageWidth / 2);\n    const [cy, setCy] = useState(imageHeight / 2);\n    const [ri, setRi] = useState(minLength / 4);\n    const [ro, setRo] = useState(minLength / 2);\n\n    const riHandle = {\n        x: cx - ri,\n        y: cy,\n    }\n    const roHandle = {\n        x: cx - ro,\n        y: cy,\n    }\n\n    const [minDist, setMinDist] = React.useState(1);\n\n    const minDistChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setMinDist(event.target.valueAsNumber);\n    }\n\n    const [nPeaks, setNPeaks] = React.useState(500);\n\n    const peakChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setNPeaks(event.target.valueAsNumber);\n    }\n\n    const [nClust, setNClust] = React.useState(20);\n\n    const clustChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setNClust(event.target.valueAsNumber);\n    }\n\n    const handleCenterChange = defaultDebounce((newCx: number, newCy: number) => {\n        setCx(newCx);\n        setCy(newCy);\n    });\n    const handleRIChange = defaultDebounce(setRi);\n    const handleROChange = defaultDebounce(setRo);\n\n    const frameViewHandles: HandleRenderFunction = (handleDragStart, handleDrop) => (<>\n        <DraggableHandle x={cx} y={cy}\n            imageWidth={imageWidth}\n            onDragMove={handleCenterChange}\n            parentOnDrop={handleDrop}\n            parentOnDragStart={handleDragStart}\n            constraint={inRectConstraint(imageWidth, imageHeight)} />\n        <DraggableHandle x={roHandle.x} y={roHandle.y}\n            imageWidth={imageWidth}\n            onDragMove={cbToRadius(cx, cy, handleROChange)}\n            parentOnDrop={handleDrop}\n            parentOnDragStart={handleDragStart}\n            constraint={roConstraints(riHandle.x, cy)} />\n        <DraggableHandle x={riHandle.x} y={riHandle.y}\n            imageWidth={imageWidth}\n            parentOnDrop={handleDrop}\n            parentOnDragStart={handleDragStart}\n            onDragMove={cbToRadius(cx, cy, handleRIChange)}\n            constraint={riConstraint(roHandle.x, cy)} />\n    </>);\n\n    const frameViewWidgets = (\n        <Ring cx={cx} cy={cy} ri={ri} ro={ro}\n            imageWidth={imageWidth} />\n    )\n\n    const dispatch = useDispatch();\n    const { rectRoiParameters, rectRoiHandles, rectRoiWidgets } = useRectROI({ scanWidth, scanHeight });\n\n    React.useEffect(() => {\n        if (compoundAnalysis.doAutoStart) {\n            dispatch(compoundAnalysisActions.Actions.run(compoundAnalysis.compoundAnalysis, 1, {\n                analysisType: AnalysisTypes.SUM_SIG,\n                parameters: {},\n            }))\n        }\n    }, [compoundAnalysis.compoundAnalysis, dispatch, compoundAnalysis.doAutoStart]);\n\n    const runAnalysis = () => {\n        dispatch(compoundAnalysisActions.Actions.run(compoundAnalysis.compoundAnalysis, 2, {\n            analysisType: AnalysisTypes.CLUST,\n            parameters: {\n                roi: rectRoiParameters.roi,\n                cx,\n                cy,\n                ri,\n                ro,\n                n_clust: nClust,\n                n_peaks: nPeaks,\n                min_dist: minDist\n            }\n        }));\n    };\n\n    const {\n        frameViewTitle, frameModeSelector,\n        handles: resultHandles,\n        widgets: resultWidgets,\n    } = useDefaultFrameView({\n        scanWidth,\n        scanHeight,\n        compoundAnalysisId: compoundAnalysis.compoundAnalysis,\n        doAutoStart: compoundAnalysis.doAutoStart,\n    })\n\n    const subtitle = (\n        <>{frameViewTitle} Ring: center=(x={cx.toFixed(2)}, y={cy.toFixed(2)}), ri={ri.toFixed(2)}, ro={ro.toFixed(2)}</>\n    )\n    const toolbar = <Toolbar compoundAnalysis={compoundAnalysis} onApply={runAnalysis} busyIdxs={[2]} />\n\n    const [paramsVisible, setParamsVisible] = React.useState(false);\n\n    const handleClick = () => {\n        setParamsVisible(!paramsVisible);\n    }\n\n    const clustparams =\n        <Accordion>\n            <Accordion.Title active={paramsVisible} index={0} onClick={handleClick}>\n                <Icon name='dropdown' />\n                Parameters\n            </Accordion.Title>\n            <Accordion.Content active={paramsVisible}>\n                <Form>\n                    <Form.Field>\n                        <label> Number of clusters  <input type=\"number\" value={nClust} step=\"1\" min=\"2\" max=\"100\" onChange={clustChange} /> </label>\n                    </Form.Field>\n                    <Form.Field>\n                        <label>  Maximal number of possible peak positions to detect (better put higher value,\n        the output is limited to the number of peaks the algorithm could find)  <input type=\"number\" value={nPeaks} step=\"1\" min=\"5\" max=\"200\" onChange={peakChange} /> </label>\n                    </Form.Field>\n                    <Form.Field>\n                        <label>  Minimal distance in pixels between peaks  <input type=\"number\" value={minDist} step=\"1\" min=\"0\" max=\"100\" onChange={minDistChange} />  </label>\n                    </Form.Field>\n                </Form>\n            </Accordion.Content>\n        </Accordion>\n    return (\n        <AnalysisLayoutTwoRes\n            title=\"Region clustering\" subtitle={subtitle}\n            left={<>\n                <ResultList\n                    extraHandles={frameViewHandles} extraWidgets={frameViewWidgets}\n                    analysisIndex={0} compoundAnalysis={compoundAnalysis.compoundAnalysis}\n                    width={imageWidth} height={imageHeight}\n                    selectors={frameModeSelector}\n                />\n            </>}\n            mid={<>\n                <ResultList\n                    analysisIndex={1} compoundAnalysis={compoundAnalysis.compoundAnalysis}\n                    width={scanWidth} height={scanHeight}\n                    extraHandles={rectRoiHandles}\n                    extraWidgets={rectRoiWidgets}\n                />\n            </>}\n\n            right={<>\n                <ResultList\n                    analysisIndex={2} compoundAnalysis={compoundAnalysis.compoundAnalysis}\n                    width={scanWidth} height={scanHeight}\n                    extraHandles={resultHandles}\n                    extraWidgets={resultWidgets}\n                />\n            </>}\n            toolbar={toolbar}\n            clustparams={clustparams}\n\n            title1=\"Peaks inside the ring will be considered\"\n            title2=\"Choose specimen region\"\n            title3=\"Clustering result\"\n\n        />\n    );\n}\n\nexport default ClustAnalysis;","import * as React from \"react\";\nimport { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport ResultList from \"../../job/components/ResultList\";\nimport { AnalysisTypes } from \"../../messages\";\nimport { cbToRadius, inRectConstraint, keepOnCY } from \"../../widgets/constraints\";\nimport Disk from \"../../widgets/Disk\";\nimport DraggableHandle from \"../../widgets/DraggableHandle\";\nimport { HandleRenderFunction } from \"../../widgets/types\";\nimport * as compoundAnalysisActions from \"../actions\";\nimport { CompoundAnalysisProps } from \"../types\";\nimport useDefaultFrameView from \"./DefaultFrameView\";\nimport AnalysisLayoutTwoCol from \"./layouts/AnalysisLayoutTwoCol\";\nimport Toolbar from \"./Toolbar\";\n\nconst DiskMaskAnalysis: React.FC<CompoundAnalysisProps> = ({ compoundAnalysis, dataset }) => {\n    const { shape } = dataset.params;\n    const [scanHeight, scanWidth, imageHeight, imageWidth] = shape;\n\n    const minLength = Math.min(imageWidth, imageHeight);\n    const [cx, setCx] = useState(imageWidth / 2);\n    const [cy, setCy] = useState(imageHeight / 2);\n    const [r, setR] = useState(minLength / 4);\n\n    const handleCenterChange = (newCx: number, newCy: number) => {\n        setCx(newCx);\n        setCy(newCy);\n    };\n    const handleRChange = setR;\n\n    const rHandle = {\n        x: cx - r,\n        y: cy,\n    }\n\n    const frameViewHandles: HandleRenderFunction = (handleDragStart, handleDrop) => (<>\n        <DraggableHandle x={cx} y={cy}\n            imageWidth={imageWidth}\n            onDragMove={handleCenterChange}\n            parentOnDragStart={handleDragStart}\n            parentOnDrop={handleDrop}\n            constraint={inRectConstraint(imageWidth, imageHeight)} />\n        <DraggableHandle x={rHandle.x} y={rHandle.y}\n            imageWidth={imageWidth}\n            onDragMove={cbToRadius(cx, cy, handleRChange)}\n            parentOnDragStart={handleDragStart}\n            parentOnDrop={handleDrop}\n            constraint={keepOnCY(cy)} />\n    </>);\n\n    const frameViewWidgets = (\n        <Disk cx={cx} cy={cy} r={r}\n            imageWidth={imageWidth} imageHeight={imageHeight}\n        />\n    );\n\n    const dispatch = useDispatch();\n\n    const runAnalysis = () => {\n        dispatch(compoundAnalysisActions.Actions.run(compoundAnalysis.compoundAnalysis, 1, {\n            analysisType: AnalysisTypes.APPLY_DISK_MASK,\n            parameters: {\n                shape: \"disk\",\n                cx, cy, r\n            }\n        }));\n    };\n\n    const {\n        frameViewTitle, frameModeSelector,\n        handles: resultHandles, widgets: resultWidgets,\n    } = useDefaultFrameView({\n        scanWidth,\n        scanHeight,\n        compoundAnalysisId: compoundAnalysis.compoundAnalysis,\n        doAutoStart: compoundAnalysis.doAutoStart,\n    });\n\n    const subtitle = <>{frameViewTitle} Disk: center=(x={cx.toFixed(2)}, y={cy.toFixed(2)}), r={r.toFixed(2)}</>;\n\n    const toolbar = <Toolbar compoundAnalysis={compoundAnalysis} onApply={runAnalysis} busyIdxs={[1]} />\n\n    return (\n        <AnalysisLayoutTwoCol\n            title=\"Disk analysis\" subtitle={subtitle}\n            left={<>\n                <ResultList\n                    extraHandles={frameViewHandles} extraWidgets={frameViewWidgets}\n                    analysisIndex={0} compoundAnalysis={compoundAnalysis.compoundAnalysis}\n                    width={imageWidth} height={imageHeight}\n                    selectors={frameModeSelector}\n                />\n            </>}\n            right={<>\n                <ResultList\n                    analysisIndex={1} compoundAnalysis={compoundAnalysis.compoundAnalysis}\n                    width={scanWidth} height={scanHeight}\n                    extraHandles={resultHandles}\n                    extraWidgets={resultWidgets}\n                />\n            </>}\n            toolbar={toolbar}\n        />\n    );\n}\n\nexport default DiskMaskAnalysis;","import * as React from \"react\";\nimport { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { defaultDebounce } from \"../../helpers\";\nimport ResultList from \"../../job/components/ResultList\";\nimport { AnalysisTypes } from \"../../messages\";\nimport { cbToRadius, inRectConstraint, riConstraint, roConstraints } from \"../../widgets/constraints\";\nimport DraggableHandle from \"../../widgets/DraggableHandle\";\nimport Ring from \"../../widgets/Ring\";\nimport { HandleRenderFunction } from \"../../widgets/types\";\nimport * as compoundAnalysisActions from \"../actions\";\nimport { CompoundAnalysisProps } from \"../types\";\nimport useDefaultFrameView from \"./DefaultFrameView\";\nimport AnalysisLayoutTwoCol from \"./layouts/AnalysisLayoutTwoCol\";\nimport Toolbar from \"./Toolbar\";\n\nconst FEMAnalysis: React.FC<CompoundAnalysisProps> = ({ compoundAnalysis, dataset }) => {\n    const { shape } = dataset.params;\n    const [scanHeight, scanWidth, imageHeight, imageWidth] = shape;\n    const minLength = Math.min(imageWidth, imageHeight);\n\n    const [cx, setCx] = useState(imageWidth / 2);\n    const [cy, setCy] = useState(imageHeight / 2);\n    const [ri, setRi] = useState(minLength / 4);\n    const [ro, setRo] = useState(minLength / 2);\n\n    const riHandle = {\n        x: cx - ri,\n        y: cy,\n    }\n    const roHandle = {\n        x: cx - ro,\n        y: cy,\n    }\n\n    const handleCenterChange = defaultDebounce((newCx: number, newCy: number) => {\n        setCx(newCx);\n        setCy(newCy);\n    });\n    const handleRIChange = defaultDebounce(setRi);\n    const handleROChange = defaultDebounce(setRo);\n\n    const frameViewHandles: HandleRenderFunction = (handleDragStart, handleDrop) => (<>\n        <DraggableHandle x={cx} y={cy}\n            imageWidth={imageWidth}\n            onDragMove={handleCenterChange}\n            parentOnDrop={handleDrop}\n            parentOnDragStart={handleDragStart}\n            constraint={inRectConstraint(imageWidth, imageHeight)} />\n        <DraggableHandle x={roHandle.x} y={roHandle.y}\n            imageWidth={imageWidth}\n            onDragMove={cbToRadius(cx, cy, handleROChange)}\n            parentOnDrop={handleDrop}\n            parentOnDragStart={handleDragStart}\n            constraint={roConstraints(riHandle.x, cy)} />\n        <DraggableHandle x={riHandle.x} y={riHandle.y}\n            imageWidth={imageWidth}\n            parentOnDrop={handleDrop}\n            parentOnDragStart={handleDragStart}\n            onDragMove={cbToRadius(cx, cy, handleRIChange)}\n            constraint={riConstraint(roHandle.x, cy)} />\n    </>);\n\n    const frameViewWidgets = (\n        <Ring cx={cx} cy={cy} ri={ri} ro={ro}\n            imageWidth={imageWidth} />\n    )\n\n    const dispatch = useDispatch();\n\n    const runAnalysis = () => {\n        dispatch(compoundAnalysisActions.Actions.run(compoundAnalysis.compoundAnalysis, 1, {\n            analysisType: AnalysisTypes.FEM,\n            parameters: {\n                shape: \"ring\",\n                cx, cy, ri, ro,\n            }\n        }));\n    };\n\n    const {\n        frameViewTitle, frameModeSelector,\n        handles: resultHandles,\n        widgets: resultWidgets,\n    } = useDefaultFrameView({\n        scanWidth,\n        scanHeight,\n        compoundAnalysisId: compoundAnalysis.compoundAnalysis,\n        doAutoStart: compoundAnalysis.doAutoStart,\n    })\n\n    const subtitle = (\n        <>{frameViewTitle} Ring: center=(x={cx.toFixed(2)}, y={cy.toFixed(2)}), ri={ri.toFixed(2)}, ro={ro.toFixed(2)}</>\n    )\n\n    const toolbar = <Toolbar compoundAnalysis={compoundAnalysis} onApply={runAnalysis} busyIdxs={[1]} />\n\n    return (\n        <AnalysisLayoutTwoCol\n            title=\"Fluctuation EM (SD over Ring analysis)\" subtitle={subtitle}\n            left={<>\n                <ResultList\n                    extraHandles={frameViewHandles} extraWidgets={frameViewWidgets}\n                    analysisIndex={0} compoundAnalysis={compoundAnalysis.compoundAnalysis}\n                    width={imageWidth} height={imageHeight}\n                    selectors={frameModeSelector}\n                />\n            </>}\n            right={<>\n                <ResultList\n                    analysisIndex={1} compoundAnalysis={compoundAnalysis.compoundAnalysis}\n                    width={scanWidth} height={scanHeight}\n                    extraHandles={resultHandles}\n                    extraWidgets={resultWidgets}\n                />\n            </>}\n            toolbar={toolbar}\n        />\n    );\n}\n\nexport default FEMAnalysis;","import React from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { AnalysisTypes } from \"../../messages\";\nimport { inRectConstraint } from \"../../widgets/constraints\";\nimport DraggableHandle from \"../../widgets/DraggableHandle\";\nimport { HandleRenderFunction } from \"../../widgets/types\";\nimport * as compoundAnalysisActions from \"../actions\";\n\nconst useFFTFramePicker = ({\n    enabled, scanWidth, scanHeight, analysisIndex, compoundAnalysisId,\n    cx, cy, real_rad, real_centerx, real_centery, setCx, setCy\n}: {\n    enabled: boolean, scanWidth: number, scanHeight: number,\n    analysisIndex: number, compoundAnalysisId: string,\n    cx: number, cy: number, setCx: (newCx: number) => void, setCy: (newCy: number) => void,\n    real_rad: number | null, real_centerx: number | null, real_centery: number | null\n}) => {\n\n    const dispatch = useDispatch();\n\n    React.useEffect(() => {\n        if (enabled) {\n            dispatch(compoundAnalysisActions.Actions.run(compoundAnalysisId, analysisIndex, {\n                analysisType: AnalysisTypes.PICK_FFT_FRAME,\n                parameters: { x: cx, y: cy, real_rad, real_centerx, real_centery },\n            }));\n        }\n    }, [compoundAnalysisId, cx, cy, enabled, analysisIndex, real_rad, real_centerx, real_centery, dispatch]);\n\n    const onPickChange = (pickX: number, pickY: number) => {\n        const newX = Math.round(pickX);\n        const newY = Math.round(pickY);\n        if (cx === newX && cy === newY) {\n            return;\n        }\n        setCx(newX);\n        setCy(newY);\n    }\n\n    const renderPickHandle: HandleRenderFunction = (onDragStart, onDrop) => (\n        <DraggableHandle x={cx} y={cy} withCross\n            imageWidth={scanWidth}\n            onDragMove={onPickChange}\n            parentOnDragStart={onDragStart}\n            parentOnDrop={onDrop}\n            constraint={inRectConstraint(scanWidth, scanHeight)} />\n    )\n\n    return { coords: { cx, cy }, handles: renderPickHandle };\n}\n\nexport default useFFTFramePicker;","import React from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { AnalysisTypes } from \"../../messages\";\nimport * as analysisActions from \"../actions\";\n\nconst useFFTSumFrames = ({\n    enabled, analysisIndex: jobIndex, compoundAnalysisId: analysisId, real_rad, real_centerx, real_centery\n}: {\n    enabled: boolean, analysisIndex: number, compoundAnalysisId: string, real_rad: number | null, real_centerx: number | null, real_centery: number | null\n}) => {\n    const dispatch = useDispatch();\n\n    React.useEffect(() => {\n        if (enabled) {\n            dispatch(analysisActions.Actions.run(analysisId, jobIndex, {\n                analysisType: AnalysisTypes.FFTSUM_FRAMES,\n                parameters: { real_rad, real_centerx, real_centery },\n            }));\n        }\n    }, [analysisId, enabled, jobIndex, real_rad, real_centerx, real_centery, dispatch]);\n};\n\nexport default useFFTSumFrames;\n","import * as React from \"react\";\nimport { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { AnalysisTypes } from \"../../messages\";\nimport { HandleRenderFunction } from \"../../widgets/types\";\nimport * as compoundAnalysisActions from \"../actions\";\nimport useFFTFramePicker from \"./FFTFramePicker\";\nimport useFFTSumFrames from \"./FFTSumFrames\";\nimport useFramePicker from \"./FramePicker\";\nimport ModeSelector from \"./ModeSelector\";\nimport { useRoiPicker } from \"./roi/RoiPicker\";\n\nconst useFFTFrameView = ({\n    scanWidth, scanHeight, compoundAnalysisId, real_rad, real_centerx,\n    real_centery, doAutoStart,\n}: {\n    scanWidth: number, scanHeight: number, compoundAnalysisId: string,\n    real_rad: number | null, real_centerx: number | null, real_centery: number | null,\n    doAutoStart: boolean,\n}) => {\n    const availableModes = [\n        {\n            text: \"Pick\",\n            value: AnalysisTypes.PICK_FRAME,\n        },\n        {\n            text: \"Average\",\n            value: AnalysisTypes.SUM_FRAMES,\n        },\n    ];\n\n    const [frameMode, setMode] = useState(AnalysisTypes.SUM_FRAMES);\n\n    const dispatch = useDispatch();\n\n    const updateMode = (newMode: string) => {\n        dispatch(compoundAnalysisActions.Actions.enableAutoStart(compoundAnalysisId));\n        setMode(newMode as AnalysisTypes);\n    }\n\n    const frameModeSelector = <ModeSelector modes={availableModes} currentMode={frameMode} onModeChange={updateMode} label=\"Mode\" />\n\n    const [cx, setCx] = React.useState(Math.floor(scanWidth / 2));\n    const [cy, setCy] = React.useState(Math.floor(scanHeight / 2));\n\n    const { coords: pickCoords, handles: pickHandles } = useFramePicker({\n        enabled: frameMode === AnalysisTypes.PICK_FRAME && doAutoStart,\n        scanWidth, scanHeight,\n        analysisIndex: 1,\n        compoundAnalysisId,\n        cx, cy, setCx, setCy\n    });\n\n    useFFTFramePicker({\n        enabled: frameMode === AnalysisTypes.PICK_FRAME && doAutoStart,\n        scanWidth, scanHeight,\n        analysisIndex: 0,\n        compoundAnalysisId,\n        cx, cy, setCx, setCy, real_rad, real_centerx, real_centery\n    });\n\n    useRoiPicker({\n        enabled: frameMode === AnalysisTypes.SUM_FRAMES && doAutoStart,\n        analysisIndex: 1,\n        compoundAnalysisId,\n        scanWidth, scanHeight,\n        roiParameters: { roi: {} },\n        analysisType: AnalysisTypes.SUM_FRAMES,\n    })\n    useFFTSumFrames({\n        enabled: frameMode === AnalysisTypes.SUM_FRAMES && doAutoStart,\n        analysisIndex: 0,\n        compoundAnalysisId,\n        real_rad,\n        real_centerx,\n        real_centery\n    })\n\n    const frameViewTitle = (\n        frameMode !== AnalysisTypes.PICK_FRAME ? null : <>Pick: x={pickCoords.cx}, y={pickCoords.cy} &emsp;</>\n    )\n\n    const nullHandles: HandleRenderFunction = () => null\n\n    return {\n        frameViewTitle,\n        handles: frameMode !== AnalysisTypes.PICK_FRAME ? nullHandles : pickHandles,\n\n        frameModeSelector,\n    }\n}\n\nexport default useFFTFrameView;\n","import * as React from \"react\";\nimport { Grid, Header, Icon, Segment } from \"semantic-ui-react\";\n\ninterface AnalysisLayoutThreeColProps {\n    title: string,\n    subtitle: React.ReactNode,\n    left: React.ReactNode,\n    mid: React.ReactNode,\n    right: React.ReactNode,\n    toolbar?: React.ReactNode,\n    title1: string,\n    title2: React.ReactNode,\n    title3: string,\n}\n\ntype MergedProps = AnalysisLayoutThreeColProps;\n\nconst AnalysisLayoutThreeCol: React.FC<MergedProps> = ({\n    title, subtitle,\n    left, mid, right,\n    toolbar, title1, title2, title3\n}) => (\n    <>\n        <Header as='h3' attached=\"top\">\n            <Icon name=\"cog\" />\n            <Header.Content>{title}</Header.Content>\n        </Header>\n        <Segment attached>\n            <Grid columns={3}>\n                <Grid.Row>\n                    <Grid.Column width={5}>\n                        <p>{title1}</p>\n                    </Grid.Column>\n\n                    <Grid.Column width={5}>\n                        <p>{title2}</p>\n                    </Grid.Column>\n\n                    <Grid.Column width={6}>\n                        <p>{title3}</p>\n                    </Grid.Column>\n                </Grid.Row>\n\n                <Grid.Row>\n                    <Grid.Column width={5}>\n                        {left}\n                    </Grid.Column>\n\n                    <Grid.Column width={5}>\n                        {mid}\n                    </Grid.Column>\n\n                    <Grid.Column width={6}>\n                        {right}\n                    </Grid.Column>\n\n                </Grid.Row>\n\n                <Grid.Row>\n                    <Grid.Column width={10}>\n                        <p>{subtitle}</p>\n                    </Grid.Column>\n\n                    <Grid.Column width={6} />\n                </Grid.Row>\n            </Grid>\n        </Segment>\n        {toolbar}\n    </>\n);\n\nexport default AnalysisLayoutThreeCol","import * as React from \"react\";\nimport { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { defaultDebounce } from \"../../helpers\";\nimport ResultList from \"../../job/components/ResultList\";\nimport { AnalysisTypes } from \"../../messages\";\nimport { cbToRadius, inRectConstraint, keepOnCY, riConstraint, roConstraints } from \"../../widgets/constraints\";\nimport Disk from \"../../widgets/Disk\";\nimport DraggableHandle from \"../../widgets/DraggableHandle\";\nimport Ring from \"../../widgets/Ring\";\nimport { HandleRenderFunction } from \"../../widgets/types\";\nimport * as compoundAnalysisActions from \"../actions\";\nimport { CompoundAnalysisProps } from \"../types\";\nimport useFFTFrameView from \"./FFTFrameView\";\nimport AnalysisLayoutThreeCol from \"./layouts/AnalysisLayoutThreeCol\";\nimport Toolbar from \"./Toolbar\";\n\n\nconst FFTAnalysis: React.FC<CompoundAnalysisProps> = ({ compoundAnalysis, dataset }) => {\n    const { shape } = dataset.params;\n    const [scanHeight, scanWidth, imageHeight, imageWidth] = shape;\n    const minLength = Math.min(imageWidth, imageHeight);\n\n    const cx = imageWidth / 2;\n    const cy = imageHeight / 2;\n    const [radIn, setRi] = useState(minLength / 4);\n    const [radOut, setRo] = useState(minLength / 2);\n\n    const dispatch = useDispatch();\n    const riHandle = {\n        x: cx - radIn,\n        y: cy,\n    }\n    const roHandle = {\n        x: cx - radOut,\n        y: cy,\n    }\n\n\n    const handleRIChange = defaultDebounce(setRi);\n    const handleROChange = defaultDebounce(setRo);\n\n    const frameViewHandlesfft: HandleRenderFunction = (handleDragStart, handleDrop) => (<>\n\n        <DraggableHandle x={roHandle.x} y={roHandle.y}\n            imageWidth={imageWidth}\n            onDragMove={cbToRadius(cx, cy, handleROChange)}\n            parentOnDrop={handleDrop}\n            parentOnDragStart={handleDragStart}\n            constraint={roConstraints(riHandle.x, cy)} />\n        <DraggableHandle x={riHandle.x} y={riHandle.y}\n            imageWidth={imageWidth}\n            parentOnDrop={handleDrop}\n            parentOnDragStart={handleDragStart}\n            onDragMove={cbToRadius(cx, cy, handleRIChange)}\n            constraint={riConstraint(roHandle.x, cy)} />\n    </>);\n\n    const frameViewWidgetsfft = (\n        <Ring cx={cx} cy={cy} ri={radIn} ro={radOut}\n            imageWidth={imageWidth} />\n    )\n\n    const [check, setCheck] = React.useState(true);\n\n    const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        dispatch(compoundAnalysisActions.Actions.enableAutoStart(compoundAnalysis.compoundAnalysis));\n        setCheck(event.target.checked);\n    }\n\n    const [realCenterX, setCx] = useState(imageWidth / 2);\n    const [realCenterY, setCy] = useState(imageHeight / 2);\n    const [realRad, setR] = useState(minLength / 4);\n\n    const handleCenterChange = defaultDebounce((newCx: number, newCy: number) => {\n        dispatch(compoundAnalysisActions.Actions.enableAutoStart(compoundAnalysis.compoundAnalysis));\n        setCx(newCx);\n        setCy(newCy);\n    });\n    const handleRChange = defaultDebounce(setR);\n\n    const rHandle = {\n        x: realCenterX - realRad,\n        y: realCenterY,\n    }\n\n    const frameViewHandlesreal: HandleRenderFunction = (handleDragStart, handleDrop) => (<>\n        <DraggableHandle x={realCenterX} y={realCenterY}\n            imageWidth={imageWidth}\n            onDragMove={handleCenterChange}\n            parentOnDragStart={handleDragStart}\n            parentOnDrop={handleDrop}\n            constraint={inRectConstraint(imageWidth, imageHeight)} />\n        <DraggableHandle x={rHandle.x} y={rHandle.y}\n            imageWidth={imageWidth}\n            onDragMove={cbToRadius(realCenterX, realCenterY, handleRChange)}\n            parentOnDragStart={handleDragStart}\n            parentOnDrop={handleDrop}\n            constraint={keepOnCY(realCenterY)} />\n    </>);\n\n    const frameViewWidgetsreal = (\n        <Disk cx={realCenterX} cy={realCenterY} r={realRad}\n            imageWidth={imageWidth} imageHeight={imageHeight}\n        />\n    );\n\n    const runAnalysis = () => {\n        dispatch(compoundAnalysisActions.Actions.run(compoundAnalysis.compoundAnalysis, 2, {\n            analysisType: AnalysisTypes.APPLY_FFT_MASK,\n            parameters: {\n                rad_in: radIn,\n                rad_out: radOut,\n                real_rad: check ? realRad : null,\n                real_centerx: check ? realCenterX : null,\n                real_centery: check ? realCenterY : null\n            }\n        }));\n    };\n\n    const { frameViewTitle, frameModeSelector, handles: resultHandles } = useFFTFrameView({\n        scanWidth,\n        scanHeight,\n        compoundAnalysisId: compoundAnalysis.compoundAnalysis,\n        real_rad: check ? realRad : null,\n        real_centerx: check ? realCenterX : null,\n        real_centery: check ? realCenterY : null,\n        doAutoStart: compoundAnalysis.doAutoStart,\n    });\n\n    const toolbar = <Toolbar compoundAnalysis={compoundAnalysis} onApply={runAnalysis} busyIdxs={[2]} />\n\n    let subtitle;\n    let mid: React.ReactNode;\n    if (check) {\n        mid = (<>\n            <ResultList\n                extraHandles={frameViewHandlesreal} extraWidgets={frameViewWidgetsreal}\n                analysisIndex={1} compoundAnalysis={compoundAnalysis.compoundAnalysis}\n                width={imageWidth} height={imageHeight}\n                selectors={frameModeSelector}\n            />\n        </>)\n        subtitle = (\n            <>{frameViewTitle} real_rad={radIn.toFixed(2)}, real_center=(x={realCenterX.toFixed(2)}, y={realCenterY.toFixed(2)}), fourier_rad_in={radIn.toFixed(2)}, fourier_rad_out={radOut.toFixed(2)}</>\n        )\n    }\n    else {\n        mid = (<>\n            <ResultList\n                analysisIndex={1} compoundAnalysis={compoundAnalysis.compoundAnalysis}\n                width={imageWidth} height={imageHeight}\n                selectors={frameModeSelector}\n            />\n        </>)\n        subtitle = (\n            <>{frameViewTitle} fourier_rad_in={radIn.toFixed(2)}, fourier_rad_out={radOut.toFixed(2)}</>\n        )\n    }\n\n\n    return (\n        <AnalysisLayoutThreeCol\n            title=\"FFT analysis\" subtitle={subtitle}\n            left={<>\n                <ResultList\n                    extraHandles={frameViewHandlesfft} extraWidgets={frameViewWidgetsfft}\n                    analysisIndex={0} compoundAnalysis={compoundAnalysis.compoundAnalysis}\n                    width={imageWidth} height={imageHeight}\n                />\n            </>}\n            mid={mid}\n\n            right={<>\n                <ResultList\n                    analysisIndex={2} compoundAnalysis={compoundAnalysis.compoundAnalysis}\n                    width={scanWidth} height={scanHeight}\n                    extraHandles={resultHandles}\n                />\n            </>}\n            toolbar={toolbar}\n\n            title2={<><label> Masking out of zero order diffraction peak <input type=\"checkbox\" name=\"check\" onChange={handleChange} checked={check} /> </label>\n            </>}\n            title1=\"Masking of integration region in Fourier space\"\n            title3=\"Result of analysis\"\n\n        />\n    );\n}\n\n\nexport default FFTAnalysis;\n","import * as React from \"react\";\nimport { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { defaultDebounce } from \"../../helpers\";\nimport ResultList from \"../../job/components/ResultList\";\nimport { AnalysisTypes } from \"../../messages\";\nimport { inRectConstraint } from \"../../widgets/constraints\";\nimport DraggableHandle from \"../../widgets/DraggableHandle\";\nimport { HandleRenderFunction } from \"../../widgets/types\";\nimport * as analysisActions from \"../actions\";\nimport { CompoundAnalysisProps } from \"../types\";\nimport useDefaultFrameView from \"./DefaultFrameView\";\nimport AnalysisLayoutTwoCol from \"./layouts/AnalysisLayoutTwoCol\";\nimport Toolbar from \"./Toolbar\";\n\n\nconst PointSelectionAnalysis: React.FC<CompoundAnalysisProps> = ({ compoundAnalysis, dataset, }) => {\n    const { shape } = dataset.params;\n    const [scanHeight, scanWidth, imageHeight, imageWidth] = shape;\n\n    const [cx, setCx] = useState(imageWidth / 2);\n    const [cy, setCy] = useState(imageHeight / 2);\n    const handleCenterChange = defaultDebounce((newCx: number, newCy: number) => {\n        const newX = Math.round(newCx);\n        const newY = Math.round(newCy);\n        if (cx === newX && cy === newY) {\n            return;\n        }\n        setCx(newX);\n        setCy(newY);\n    });\n\n    const frameViewHandles: HandleRenderFunction = (handleDragStart, handleDrop) => (<>\n        <DraggableHandle x={cx} y={cy} withCross\n            onDragMove={handleCenterChange}\n            imageWidth={imageWidth}\n            parentOnDragStart={handleDragStart}\n            parentOnDrop={handleDrop}\n            constraint={inRectConstraint(imageWidth, imageHeight)} />\n    </>);\n\n    const {\n        frameViewTitle, frameModeSelector,\n        handles: resultHandles,\n        widgets: resultWidgets,\n    } = useDefaultFrameView({\n        scanWidth,\n        scanHeight,\n        compoundAnalysisId: compoundAnalysis.compoundAnalysis,\n        doAutoStart: compoundAnalysis.doAutoStart,\n    })\n\n    const subtitle = (\n        <>{frameViewTitle} Point: center=(x={cx.toFixed(2)}, y={cy.toFixed(2)})</>\n    )\n\n    const dispatch = useDispatch();\n\n    const runAnalysis = () => {\n        dispatch(analysisActions.Actions.run(compoundAnalysis.compoundAnalysis, 1, {\n            analysisType: AnalysisTypes.APPLY_POINT_SELECTOR,\n            parameters: {\n                shape: \"point\",\n                cx,\n                cy,\n            }\n        }));\n    };\n\n    const toolbar = <Toolbar compoundAnalysis={compoundAnalysis} onApply={runAnalysis} busyIdxs={[1]} />\n\n    return (\n        <AnalysisLayoutTwoCol\n            title=\"Point analysis\" subtitle={subtitle}\n            left={<>\n                <ResultList\n                    extraHandles={frameViewHandles}\n                    analysisIndex={0} compoundAnalysis={compoundAnalysis.compoundAnalysis}\n                    width={imageWidth} height={imageHeight}\n                    selectors={frameModeSelector}\n                />\n            </>}\n            right={<>\n                <ResultList\n                    analysisIndex={1} compoundAnalysis={compoundAnalysis.compoundAnalysis}\n                    width={scanWidth} height={scanHeight}\n                    extraHandles={resultHandles}\n                    extraWidgets={resultWidgets}\n                />\n            </>}\n            toolbar={toolbar}\n        />\n    );\n}\n\nexport default PointSelectionAnalysis;","import * as React from \"react\";\nimport { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { defaultDebounce } from \"../../helpers\";\nimport ResultList from \"../../job/components/ResultList\";\nimport { AnalysisTypes } from \"../../messages\";\nimport { cbToRadius, inRectConstraint, riConstraint, roConstraints } from \"../../widgets/constraints\";\nimport DraggableHandle from \"../../widgets/DraggableHandle\";\nimport Ring from \"../../widgets/Ring\";\nimport { HandleRenderFunction } from \"../../widgets/types\";\nimport * as analysisActions from \"../actions\";\nimport { CompoundAnalysisProps } from \"../types\";\nimport useDefaultFrameView from \"./DefaultFrameView\";\nimport AnalysisLayoutTwoCol from \"./layouts/AnalysisLayoutTwoCol\";\nimport Toolbar from \"./Toolbar\";\n\nconst RadialFourierAnalysis: React.FC<CompoundAnalysisProps> = ({ compoundAnalysis, dataset }) => {\n    const { shape } = dataset.params;\n    const [scanHeight, scanWidth, imageHeight, imageWidth] = shape;\n\n    const minLength = Math.min(imageWidth, imageHeight);\n    const [cx, setCx] = useState(imageWidth / 2);\n    const [cy, setCy] = useState(imageHeight / 2);\n    const [ri, setRi] = useState(minLength / 4);\n    const [ro, setRo] = useState(minLength / 2);\n    const [nBins] = useState(1);\n    const [maxOrder] = useState(8);\n\n    const riHandle = {\n        x: cx - ri,\n        y: cy,\n    }\n    const roHandle = {\n        x: cx - ro,\n        y: cy,\n    }\n\n    const handleCenterChange = defaultDebounce((newCx: number, newCy: number) => {\n        setCx(newCx);\n        setCy(newCy);\n    });\n    const handleRIChange = defaultDebounce(setRi);\n    const handleROChange = defaultDebounce(setRo);\n\n    const frameViewHandles: HandleRenderFunction = (handleDragStart, handleDrop) => (<>\n        <DraggableHandle x={cx} y={cy}\n            imageWidth={imageWidth}\n            onDragMove={handleCenterChange}\n            parentOnDrop={handleDrop}\n            parentOnDragStart={handleDragStart}\n            constraint={inRectConstraint(imageWidth, imageHeight)} />\n        <DraggableHandle x={roHandle.x} y={roHandle.y}\n            imageWidth={imageWidth}\n            onDragMove={cbToRadius(cx, cy, handleROChange)}\n            parentOnDrop={handleDrop}\n            parentOnDragStart={handleDragStart}\n            constraint={roConstraints(riHandle.x, cy)} />\n        <DraggableHandle x={riHandle.x} y={riHandle.y}\n            imageWidth={imageWidth}\n            parentOnDrop={handleDrop}\n            parentOnDragStart={handleDragStart}\n            onDragMove={cbToRadius(cx, cy, handleRIChange)}\n            constraint={riConstraint(roHandle.x, cy)} />\n    </>);\n\n    const frameViewWidgets = (\n        <Ring cx={cx} cy={cy} ri={ri} ro={ro}\n            imageWidth={imageWidth} />\n    )\n\n    const {\n        frameViewTitle, frameModeSelector,\n        handles: resultHandles,\n        widgets: resultWidgets,\n    } = useDefaultFrameView({\n        scanWidth,\n        scanHeight,\n        compoundAnalysisId: compoundAnalysis.compoundAnalysis,\n        doAutoStart: compoundAnalysis.doAutoStart,\n    })\n\n    const subtitle = (\n        <>{frameViewTitle} Ring: center=(x={cx.toFixed(2)}, y={cy.toFixed(2)}), ri={ri.toFixed(2)}, ro={ro.toFixed(2)}</>\n    )\n\n    const dispatch = useDispatch();\n\n    const runAnalysis = () => {\n        dispatch(analysisActions.Actions.run(compoundAnalysis.compoundAnalysis, 1, {\n            analysisType: AnalysisTypes.RADIAL_FOURIER,\n            parameters: {\n                shape: \"radial_fourier\",\n                cx, cy, ri, ro,\n                n_bins: nBins,\n                max_order: maxOrder,\n            }\n        }));\n    };\n\n    const toolbar = <Toolbar compoundAnalysis={compoundAnalysis} onApply={runAnalysis} busyIdxs={[1]} />\n\n    return (\n        <AnalysisLayoutTwoCol\n            title=\"Radial Fourier analysis\" subtitle={subtitle}\n            left={<>\n                <ResultList\n                    extraHandles={frameViewHandles} extraWidgets={frameViewWidgets}\n                    analysisIndex={0} compoundAnalysis={compoundAnalysis.compoundAnalysis}\n                    width={imageWidth} height={imageHeight}\n                    selectors={frameModeSelector}\n                />\n            </>}\n            right={<>\n                <ResultList\n                    analysisIndex={1} compoundAnalysis={compoundAnalysis.compoundAnalysis}\n                    width={scanWidth} height={scanHeight}\n                    extraHandles={resultHandles}\n                    extraWidgets={resultWidgets}\n                />\n            </>}\n            toolbar={toolbar}\n        />\n    );\n}\n\nexport default RadialFourierAnalysis;","import * as React from \"react\";\nimport { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { defaultDebounce } from \"../../helpers\";\nimport ResultList from \"../../job/components/ResultList\";\nimport { AnalysisTypes } from \"../../messages\";\nimport { cbToRadius, inRectConstraint, riConstraint, roConstraints } from \"../../widgets/constraints\";\nimport DraggableHandle from \"../../widgets/DraggableHandle\";\nimport Ring from \"../../widgets/Ring\";\nimport { HandleRenderFunction } from \"../../widgets/types\";\nimport * as analysisActions from \"../actions\";\nimport { CompoundAnalysisProps } from \"../types\";\nimport useDefaultFrameView from \"./DefaultFrameView\";\nimport AnalysisLayoutTwoCol from \"./layouts/AnalysisLayoutTwoCol\";\nimport Toolbar from \"./Toolbar\";\n\nconst RingMaskAnalysis: React.FC<CompoundAnalysisProps> = ({ compoundAnalysis, dataset }) => {\n    const { shape } = dataset.params;\n    const [scanHeight, scanWidth, imageHeight, imageWidth] = shape;\n    const minLength = Math.min(imageWidth, imageHeight);\n\n    const [cx, setCx] = useState(imageWidth / 2);\n    const [cy, setCy] = useState(imageHeight / 2);\n    const [ri, setRi] = useState(minLength / 4);\n    const [ro, setRo] = useState(minLength / 2);\n\n    const riHandle = {\n        x: cx - ri,\n        y: cy,\n    }\n    const roHandle = {\n        x: cx - ro,\n        y: cy,\n    }\n\n    const handleCenterChange = defaultDebounce((newCx: number, newCy: number) => {\n        setCx(newCx);\n        setCy(newCy);\n    });\n    const handleRIChange = defaultDebounce(setRi);\n    const handleROChange = defaultDebounce(setRo);\n\n    const frameViewHandles: HandleRenderFunction = (handleDragStart, handleDrop) => (<>\n        <DraggableHandle x={cx} y={cy}\n            imageWidth={imageWidth}\n            onDragMove={handleCenterChange}\n            parentOnDrop={handleDrop}\n            parentOnDragStart={handleDragStart}\n            constraint={inRectConstraint(imageWidth, imageHeight)} />\n        <DraggableHandle x={roHandle.x} y={roHandle.y}\n            imageWidth={imageWidth}\n            onDragMove={cbToRadius(cx, cy, handleROChange)}\n            parentOnDrop={handleDrop}\n            parentOnDragStart={handleDragStart}\n            constraint={roConstraints(riHandle.x, cy)} />\n        <DraggableHandle x={riHandle.x} y={riHandle.y}\n            imageWidth={imageWidth}\n            parentOnDrop={handleDrop}\n            parentOnDragStart={handleDragStart}\n            onDragMove={cbToRadius(cx, cy, handleRIChange)}\n            constraint={riConstraint(roHandle.x, cy)} />\n    </>);\n\n    const frameViewWidgets = (\n        <Ring cx={cx} cy={cy} ri={ri} ro={ro}\n            imageWidth={imageWidth} />\n    )\n\n    const dispatch = useDispatch();\n\n    const runAnalysis = () => {\n        dispatch(analysisActions.Actions.run(compoundAnalysis.compoundAnalysis, 1, {\n            analysisType: AnalysisTypes.APPLY_RING_MASK,\n            parameters: {\n                shape: \"ring\",\n                cx, cy, ri, ro,\n            }\n        }));\n    };\n\n    const {\n        frameViewTitle, frameModeSelector,\n        handles: resultHandles,\n        widgets: resultWidgets,\n    } = useDefaultFrameView({\n        scanWidth,\n        scanHeight,\n        compoundAnalysisId: compoundAnalysis.compoundAnalysis,\n        doAutoStart: compoundAnalysis.doAutoStart,\n    })\n\n    const subtitle = (\n        <>{frameViewTitle} Ring: center=(x={cx.toFixed(2)}, y={cy.toFixed(2)}), ri={ri.toFixed(2)}, ro={ro.toFixed(2)}</>\n    )\n\n    const toolbar = <Toolbar compoundAnalysis={compoundAnalysis} onApply={runAnalysis} busyIdxs={[1]} />\n\n    return (\n        <AnalysisLayoutTwoCol\n            title=\"Ring analysis\" subtitle={subtitle}\n            left={<>\n                <ResultList\n                    extraHandles={frameViewHandles} extraWidgets={frameViewWidgets}\n                    analysisIndex={0} compoundAnalysis={compoundAnalysis.compoundAnalysis}\n                    width={imageWidth} height={imageHeight}\n                    selectors={frameModeSelector}\n                />\n            </>}\n            right={<>\n                <ResultList\n                    analysisIndex={1} compoundAnalysis={compoundAnalysis.compoundAnalysis}\n                    width={scanWidth} height={scanHeight}\n                    extraHandles={resultHandles}\n                    extraWidgets={resultWidgets}\n                />\n            </>}\n            toolbar={toolbar}\n        />\n    );\n}\n\nexport default RingMaskAnalysis;","import { AnalysisTypes, DatasetOpen, PickFrameDetails, SumFramesDetails } from \"../messages\";\nimport CenterOfMassAnalysis from \"./components/CenterOfMassAnalysis\";\nimport ClustAnalysis from \"./components/Clustering\";\nimport DiskMaskAnalysis from \"./components/DiskMaskAnalysis\";\nimport FEM from \"./components/FEM\";\nimport FFTAnalysis from \"./components/FFTAnalysis\";\nimport PointSelectionAnalysis from \"./components/PointSelectionAnalysis\";\nimport RadialFourierAnalysis from \"./components/RadialFourierAnalysis\";\nimport RingMaskAnalysis from \"./components/RingMaskAnalysis\";\n\n\nexport type CompoundAnalysisStatus = \"busy\" | \"idle\";\n\nexport type JobHistory = string[][];\n\nexport type FrameAnalysisDetails = PickFrameDetails | SumFramesDetails;\n\nexport interface CompoundAnalysis {\n    compoundAnalysis: string,\n    dataset: string,\n    details: {\n        mainType: AnalysisTypes,\n        analyses: string[],\n    }\n}\n\n\n/**\n * CompoundAnalysisProps is the interface you should implement with your\n * CompoundAnalysis, as a functional component. For example:\n * \n * const MyAnalysis: React.FunctionalComponent<CompoundAnalysisProps> = ({ analysis, dataset }) = { ... }\n * \n */\n\nexport type CompoundAnalysisState = CompoundAnalysis & {\n    doAutoStart: boolean,\n};\n\nexport interface CompoundAnalysisProps {\n    compoundAnalysis: CompoundAnalysisState,\n    dataset: DatasetOpen,\n}\n\nexport interface CompoundAnalysisMetadataItem {\n    desc: string,\n    title: string,\n    component?: React.FunctionComponent<CompoundAnalysisProps>,\n}\n\n\n/**\n * list of all analyses; those having a component will be available for selection in the UI\n * \n * please fill in a title and description, and reference your component.\n */\nexport const CompoundAnalysisMetadata: { [s: string]: CompoundAnalysisMetadataItem } = {\n    [AnalysisTypes.APPLY_RING_MASK]: {\n        desc: \"Application of a ring mask\",\n        title: \"Ring\",\n        component: RingMaskAnalysis,\n    },\n    [AnalysisTypes.APPLY_DISK_MASK]: {\n        desc: \"Application of a disk mask\",\n        title: \"Disk\",\n        component: DiskMaskAnalysis,\n    },\n    [AnalysisTypes.FEM]: {\n        desc: \"Application of a ring mask\",\n        title: \"FEM (SD over Ring)\",\n        component: FEM,\n    },\n    [AnalysisTypes.CENTER_OF_MASS]: {\n        desc: \"The center of mass of all diffraction images\",\n        title: \"Center of mass\",\n        component: CenterOfMassAnalysis,\n    },\n    [AnalysisTypes.APPLY_POINT_SELECTOR]: {\n        desc: \"Image from a single pixel selected in the detector\",\n        title: \"Point selection\",\n        component: PointSelectionAnalysis,\n    },\n    [AnalysisTypes.SUM_FRAMES]: {\n        desc: \"A sum of all (or selected) detector frames\",\n        title: \"Sum all frames\",\n    },\n    [AnalysisTypes.SD_FRAMES]: {\n        desc: \"A SD of all (or selected) detector frames\",\n        title: \"SD all frames\",\n    },\n    [AnalysisTypes.PICK_FRAME]: {\n        desc: \"A single picked frame\",\n        title: \"Pick frame\",\n    },\n    [AnalysisTypes.PICK_FFT_FRAME]: {\n        desc: \"Fourier transform of a picked frame\",\n        title: \"Pick frame\",\n    },\n    [AnalysisTypes.APPLY_FFT_MASK]: {\n        desc: \"Application of a ring mask in Fourier space\",\n        title: \"FFT analysis\",\n        component: FFTAnalysis\n    },\n    [AnalysisTypes.FFTSUM_FRAMES]: {\n        desc: \"Fourier transform of sum of all detector frames\",\n        title: \"FFT of Sum all frames\",\n    },\n    [AnalysisTypes.RADIAL_FOURIER]: {\n        desc: \"Radial Fourier analysis over the selected ring\",\n        title: \"Radial Fourier\",\n        component: RadialFourierAnalysis,\n    },\n    [AnalysisTypes.CLUST]: {\n        desc: \"Region clustering based on non-zero order diffraction peaks positions\",\n        title: \"Clustering\",\n        component: ClustAnalysis,\n    },\n    [AnalysisTypes.SUM_SIG]: {\n        desc: \"Frame integration\",\n        title: \"Sum\",\n    },\n}","import * as React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { DatasetStatus } from \"../../../messages\";\nimport { RootReducer } from \"../../../store\";\nimport { CompoundAnalysisMetadata, CompoundAnalysisState } from \"../../types\";\n\ninterface AnalysisDispatcherProps {\n    analysis: CompoundAnalysisState,\n}\n\nconst AnalysisDispatcherComponent: React.FC<AnalysisDispatcherProps> = ({ analysis }) => {\n    const dataset = useSelector((state: RootReducer) => state.datasets.byId[analysis.dataset])\n\n    if (dataset.status !== DatasetStatus.OPEN) {\n        return null;\n    }\n\n    const AnalysisComponent = CompoundAnalysisMetadata[analysis.details.mainType].component;\n    if (!AnalysisComponent) {\n        throw new Error(\"unknown analysis type\");\n    }\n\n    return <AnalysisComponent dataset={dataset} compoundAnalysis={analysis} />;\n}\n\nexport default AnalysisDispatcherComponent;","import * as React from \"react\";\nimport { CompoundAnalysisReducerState } from \"../../reducers\";\nimport Analysis from \"./Analysis\";\n\ninterface AnalysisProps {\n    analyses: CompoundAnalysisReducerState,\n}\n\nconst AnalysisList: React.FC<AnalysisProps> = ({ analyses }) => (<>{\n    analyses.ids.map(analysisId => <Analysis key={analysisId} analysis={analyses.byId[analysisId]} />)\n}</>);\n\nexport default AnalysisList;","// eslint-disable-next-line @typescript-eslint/ban-types\ntype ImmutablePrimitive = undefined | null | boolean | string | number | Function;\n\nexport type Immutable<T> =\n    T extends ImmutablePrimitive ? T :\n    T extends Array<infer U> ? ImmutableArray<U> :\n    T extends Map<infer K, infer V> ? ImmutableMap<K, V> :\n    T extends Set<infer M> ? ImmutableSet<M> : ImmutableObject<T>;\n\nexport type ImmutableArray<T> = ReadonlyArray<Immutable<T>>;\nexport type ImmutableMap<K, V> = ReadonlyMap<Immutable<K>, Immutable<V>>;\nexport type ImmutableSet<T> = ReadonlySet<Immutable<T>>;\nexport type ImmutableObject<T> = { readonly [K in keyof T]: Immutable<T[K]> };\n\n\ntype DeepReadonly<T> =\n    T extends Array<infer R> ? DeepReadonlyArray<R> :\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    T extends Function ? T :\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    T extends object ? DeepReadonlyObject<T> :\n    T;\n\ntype DeepReadonlyArray<T> = ReadonlyArray<DeepReadonly<T>>\n\ntype DeepReadonlyObject<T> = {\n    readonly [P in keyof T]: DeepReadonly<T[P]>;\n};\n\ninterface IdMap<R> {\n    [s: string]: R\n}\n\nexport interface ById<R> {\n    ids: string[],\n    byId: IdMap<R>,\n}\n\nexport type ByIdReadOnly<R> = DeepReadonly<ById<R>>;\n\nexport const updateById = <R>(state: ById<R>, id: string, partialRecord: Partial<R>): ById<R> => {\n    const newObj = Object.assign({}, state.byId[id], partialRecord);\n    const newById = Object.assign({}, state.byId, { [id]: newObj });\n    return Object.assign({}, state, { byId: newById });\n}\n\nexport const insertById = <R>(state: ById<R>, id: string, record: R): ById<R> => {\n    const newById = Object.assign({}, state.byId, { [id]: record });\n    const newIds = [...state.ids, id];\n    return { byId: newById, ids: newIds };\n}\n\nexport const constructById = <R>(items: R[], key: (k: R) => string): IdMap<R> => {\n    const byId = items.reduce((acc, item) => Object.assign(acc, {\n        [key(item)]: item,\n    }), {} as IdMap<R>);\n    return byId;\n}\n\nexport type MapFn<R> = (item: R) => R;\n\nexport const updateWithMap = <R>(state: ById<R>, fn: MapFn<R>): ById<R> => {\n    const byId: IdMap<R> = state.ids.reduce((acc, id) => Object.assign(acc, {\n        [id]: fn(state.byId[id]),\n    }), {});\n    return {\n        byId,\n        ids: state.ids,\n    };\n}\n\nexport type Predicate<R> = (item: R) => boolean;\n\nexport const filterWithPred = <R>(state: ById<R>, pred: Predicate<R>): ById<R> => {\n    const ids: string[] = state.ids.filter(id => pred(state.byId[id]));\n    const byId: IdMap<R> = ids.reduce((acc, id) => Object.assign(acc, {\n        [id]: state.byId[id],\n    }), {});\n    return {\n        byId,\n        ids,\n    };\n}\n\nexport const filterWithPredReadOnly = <R>(state: ByIdReadOnly<R>, pred: Predicate<DeepReadonly<R>>): ByIdReadOnly<R> => {\n    const ids: DeepReadonly<string[]> = state.ids.filter(id => pred(state.byId[id]));\n    const byId: DeepReadonly<IdMap<R>> = ids.reduce((acc, id) => Object.assign(acc, {\n        [id]: state.byId[id],\n    }), {});\n    return {\n        byId,\n        ids,\n    };\n}\n\nexport const toggleItemInList = <T>(list: T[], item: T): T[] => {\n    if (list.includes(item)) {\n        return list.filter(i => i !== item)\n    } else {\n        return [item, ...list];\n    }\n}","import * as React from \"react\";\nimport { Dropdown, DropdownItemProps } from \"semantic-ui-react\";\nimport { getEnumValues } from \"../../../helpers\";\nimport { AnalysisTypes } from \"../../../messages\";\nimport { getMetadata } from \"../../getMetadata\";\n\nconst analysisTypeKeys = getEnumValues(AnalysisTypes);\nconst analysisTypeOptions = analysisTypeKeys.filter(t => getMetadata(t).component !== undefined).map(t => ({\n    text: getMetadata(t).title,\n    value: AnalysisTypes[t],\n}));\n\ninterface AnalysisSelectProps {\n    onClick: (analysisType: AnalysisTypes) => void,\n    label: string,\n}\n\nconst selectData = (fn: (v: AnalysisTypes) => void) => (e: React.MouseEvent, data: DropdownItemProps) => fn(data.value as AnalysisTypes)\n\nconst AnalysisSelect: React.FC<AnalysisSelectProps> = ({ onClick, label }) => (\n    <Dropdown text={label} icon='add' floating labeled button className='icon'>\n        <Dropdown.Menu>\n            <Dropdown.Header content='implemented analyses' />\n            {analysisTypeOptions.map(option => <Dropdown.Item key={option.value} onClick={selectData(onClick)} {...option} />)}\n        </Dropdown.Menu>\n    </Dropdown>\n);\n\nexport default AnalysisSelect;","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport * as compoundAnalysisActions from \"../../compoundAnalysis/actions\";\nimport AnalysisSelect from \"../../compoundAnalysis/components/base/AnalysisSelect\";\nimport { AnalysisTypes, DatasetState } from \"../../messages\";\n\ninterface DatasetProps {\n    dataset: DatasetState\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch, ownProps: DatasetProps) => ({\n    handleAddAnalysis: (type: AnalysisTypes) => {\n        dispatch(compoundAnalysisActions.Actions.create(ownProps.dataset.id, type));\n    },\n});\ntype MergedProps = DatasetProps & ReturnType<typeof mapDispatchToProps>;\n\nconst AddAnalysis: React.FC<MergedProps> = ({ handleAddAnalysis }) => \n    <AnalysisSelect onClick={handleAddAnalysis} label='Add analysis' />;\n\n\nexport default connect(null, mapDispatchToProps)(AddAnalysis);","import * as React from \"react\";\nimport { Table } from \"semantic-ui-react\";\nimport { DatasetFormParams, DatasetState } from \"../../messages\";\n\ninterface DatasetProps {\n    dataset: DatasetState\n}\n\nconst renderParamValue = (value: any[] | string) => {\n    if (value instanceof Array) {\n        return `(${value.join(\",\")})`;\n    } else {\n        return value.toString();\n    }\n}\n\nconst renderRow = (param: any[] | string, key: string, idx: number) => (\n    <Table.Row key={idx}>\n        <Table.Cell>{key}</Table.Cell>\n        <Table.Cell>{renderParamValue(param)}</Table.Cell>\n    </Table.Row>\n);\n\nconst renderParams = (params: DatasetFormParams) => \n    Object.entries(params).map(([key, param], idx) => {\n        if (param && typeof param === 'object' && !(param instanceof Array)) {\n            return Object.keys(param).map((objKey: string, keyIdx: number) => renderRow(param, objKey, keyIdx));\n        } else if (param && (typeof param === \"string\" || param instanceof Array)) {\n            return renderRow(param, key, idx);\n        }\n    });\n\n\nconst DatasetParams: React.FC<DatasetProps> = ({ dataset }) => (\n    <Table>\n        <Table.Header>\n            <Table.Row>\n                <Table.HeaderCell>Parameter</Table.HeaderCell>\n                <Table.HeaderCell>Value</Table.HeaderCell>\n            </Table.Row>\n        </Table.Header>\n        <Table.Body>\n            {renderParams(dataset.params)}\n        </Table.Body>\n    </Table>\n);\n\n\nexport default DatasetParams;\n","import * as React from \"react\";\nimport { Table } from \"semantic-ui-react\";\nimport { DatasetOpen, DiagElemMsg } from \"../../messages\";\nimport DatasetParams from \"./DatasetParams\";\n\ninterface DatasetInfoProps {\n    dataset: DatasetOpen,\n}\n\nconst renderValue = (elem: DiagElemMsg) => {\n    if (elem.value instanceof Array) {\n        return <DiagElems diagnostics={elem.value} />\n    } else {\n        return elem.value;\n    }\n}\n\nconst DiagElem: React.FC<{ elem: DiagElemMsg }> = ({ elem }) => (\n    <Table.Row>\n        <Table.Cell>{elem.name}</Table.Cell>\n        <Table.Cell>{renderValue(elem)}</Table.Cell>\n    </Table.Row>\n);\n\nconst DiagElems: React.FC<{ diagnostics: DiagElemMsg[] }> = ({ diagnostics }) => {\n    if (diagnostics.length === 0) {\n        return null;\n    }\n    return (\n        <Table>\n            <Table.Header>\n                <Table.Row>\n                    <Table.HeaderCell>Name</Table.HeaderCell>\n                    <Table.HeaderCell>Value</Table.HeaderCell>\n                </Table.Row>\n            </Table.Header>\n            <Table.Body>\n                {diagnostics.map((elem, idx) => (\n                    <DiagElem elem={elem} key={idx} />\n                ))}\n            </Table.Body>\n        </Table>\n    );\n}\n\nconst DatasetInfo: React.FC<DatasetInfoProps> = ({ dataset }) => (\n    <>\n        <DatasetParams dataset={dataset} />\n        <DiagElems diagnostics={dataset.diagnostics} />\n    </>\n);\n\nexport default DatasetInfo;","import { ActionsUnion, createAction } from \"../helpers/actionHelpers\";\nimport { JobResultType } from \"../job/types\";\nimport { AnalysisDetails, MsgPartAnalysis, MsgPartCompoundAnalysis, MsgPartInitialDataset, MsgPartJob } from \"../messages\";\n\nexport type PartialResultType = JobResultType;\n\nexport enum ActionTypes {\n    INITIAL_STATE = \"CHANNEL_INITIAL_STATE\",\n    JOB_STARTED = \"CHANNEL_JOB_STARTED\",\n    FINISH_JOB = \"CHANNEL_FINISH_JOB\",\n    TASK_RESULT = \"CHANNEL_TASK_RESULT\",\n    JOB_ERROR = \"CHANNEL_JOB_ERROR\",\n    OPEN = \"CHANNEL_OPEN\",\n    CLOSE = \"CHANNEL_CLOSE\",\n    ERROR = \"CHANNEL_ERROR\",\n    CANCELLED = \"CANCELLED\",\n    CANCEL_JOB_FAILED = \"CANCEL_JOB_FAILED\",\n    SHUTDOWN = \"CHANNEL_SHUTDOWN\",\n    CLOSE_LOOP = \"CHANNEL_LOOP_CLOSE\",\n    ANALYSIS_CREATED = \"ANALYSIS_CREATED\",\n    ANALYSIS_UPDATED = \"ANALYSIS_UPDATED\",\n    ANALYSIS_REMOVED = \"ANALYSIS_REMOVED\",\n}\n\nexport const Actions = {\n    initialState: (\n        jobs: MsgPartJob[],\n        datasets: MsgPartInitialDataset[],\n        compoundAnalyses: MsgPartCompoundAnalysis[],\n        analyses: MsgPartAnalysis[],\n        timestamp: number\n    ) => createAction(ActionTypes.INITIAL_STATE, { jobs, datasets, timestamp, compoundAnalyses, analyses }),\n    jobStarted: (job: string, timestamp: number) => createAction(ActionTypes.JOB_STARTED, { job, timestamp }),\n    finishJob: (job: string, results: JobResultType[], timestamp: number) => createAction(ActionTypes.FINISH_JOB, { job, results, timestamp }),\n    taskResult: (job: string, results: PartialResultType[], timestamp: number) => createAction(ActionTypes.TASK_RESULT, { job, results, timestamp }),\n    jobError: (job: string, msg: string, id: string, timestamp: number) => createAction(ActionTypes.JOB_ERROR, { job, msg, id, timestamp }),\n    open: (timestamp: number) => createAction(ActionTypes.OPEN, { timestamp }),\n    close: (timestamp: number) => createAction(ActionTypes.CLOSE, { timestamp }),\n    error: (msg: string, timestamp: number, id: string) => createAction(ActionTypes.ERROR, { msg, timestamp, id }),\n    shutdown: (timestamp: number) => createAction(ActionTypes.SHUTDOWN, { timestamp }),\n    closeloop: (timestamp: number) => createAction(ActionTypes.CLOSE_LOOP, { timestamp }),\n    cancelled: (job: string) => createAction(ActionTypes.CANCELLED, { job }),\n    cancelFailed: (job: string) => createAction(ActionTypes.CANCEL_JOB_FAILED, { job }),\n    analysisCreated: (analysis: string, dataset: string, details: AnalysisDetails) =>\n        createAction(ActionTypes.ANALYSIS_CREATED, { dataset, analysis, details }),\n    analysisUpdated: (analysis: string, dataset: string, details: AnalysisDetails) =>\n        createAction(ActionTypes.ANALYSIS_UPDATED, { dataset, analysis, details }),\n    analysisRemoved: (analysis: string) => createAction(ActionTypes.ANALYSIS_REMOVED, { analysis }),\n};\n\nexport type Actions = ActionsUnion<typeof Actions>;\n","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { Button } from \"semantic-ui-react\";\nimport { DatasetState } from \"../../messages\";\nimport * as datasetActions from \"../actions\";\n\ninterface DatasetProps {\n    dataset: DatasetState,\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch, ownProps: DatasetProps) => ({\n    handleRemoveDataset: () => {\n        dispatch(datasetActions.Actions.delete(ownProps.dataset.id));\n    }\n})\n\ntype MergedProps = DatasetProps & ReturnType<typeof mapDispatchToProps>;\n\nconst DatasetToolbar: React.FC<MergedProps> = ({ handleRemoveDataset }) => (\n    <>\n        <Button icon=\"remove\" labelPosition=\"left\" onClick={handleRemoveDataset} content='Close Dataset' />\n    </>\n);\n\n\nexport default connect(null, mapDispatchToProps)(DatasetToolbar);","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Header, Icon, Message, Modal, Popup, Segment } from 'semantic-ui-react';\nimport AnalysisList from \"../../compoundAnalysis/components/base/AnalysisList\";\nimport { CompoundAnalysisState } from \"../../compoundAnalysis/types\";\nimport { filterWithPred, Immutable, Predicate } from \"../../helpers/reducerHelpers\";\nimport { DatasetState, DatasetStatus } from \"../../messages\";\nimport { RootReducer } from \"../../store\";\nimport AddAnalysis from \"./AddAnalysis\";\nimport DatasetInfo from \"./DatasetInfo\";\nimport DatasetToolbar from \"./DatasetToolbar\";\n\ninterface DatasetProps {\n    dataset: DatasetState\n}\n\nconst mapStateToProps = (state: RootReducer, ownProps: DatasetProps) => {\n    const p: Predicate<Immutable<CompoundAnalysisState>> = (analysis: Immutable<CompoundAnalysisState>) => analysis.dataset === ownProps.dataset.id;\n    return {\n        analyses: filterWithPred(state.compoundAnalyses, p),\n    }\n}\n\ntype MergedProps = DatasetProps & ReturnType<typeof mapStateToProps>;\n\nconst DatasetComponent: React.FC<MergedProps> = ({ dataset, analyses }) => {\n    const msg = {\n        [DatasetStatus.OPENING]: `Opening dataset ${dataset.params.name}`,\n        [DatasetStatus.DELETING]: `Closing dataset ${dataset.params.name}`,\n    }\n    if (dataset.status === DatasetStatus.OPENING || dataset.status === DatasetStatus.DELETING) {\n        return (\n            <>\n                <Header as=\"h2\" dividing>{dataset.params.name}</Header>\n                <Message icon>\n                    <Icon name='cog' loading />\n                    <Message.Content>\n                        <Message.Header>{msg[dataset.status]}</Message.Header>\n                    </Message.Content>\n                </Message>\n            </>\n        );\n    }\n\n    return (\n        <Segment.Group style={{ marginTop: \"3em\", marginBottom: \"3em\" }}>\n            <Segment.Group horizontal>\n                <Segment>\n                    <Header as=\"h2\">\n                        <Icon name=\"database\" />\n                        <Modal trigger={\n                            <Header.Content>\n                                {dataset.params.name}\n                                {' '}\n                                <Icon name=\"info circle\" size=\"small\" link />\n                            </Header.Content>\n                        }>\n                            <Popup.Header>{dataset.params.type} Dataset {dataset.params.name}</Popup.Header>\n                            <Popup.Content>\n                                <DatasetInfo dataset={dataset} />\n                            </Popup.Content>\n                        </Modal>\n                    </Header>\n                </Segment>\n                <Segment style={{ flexShrink: 1, flexGrow: 0 }}>\n                    <DatasetToolbar dataset={dataset} />\n                </Segment>\n            </Segment.Group>\n            {\n                analyses.ids.length > 0 ? (\n                    <>\n                        <Segment>\n                            <AnalysisList analyses={analyses} />\n                        </Segment>\n                    </>\n                ) : null\n            }\n            <Segment textAlign=\"center\">\n                <AddAnalysis dataset={dataset} />\n            </Segment>\n        </Segment.Group>\n    );\n}\n\nconst DatasetContainer = connect(mapStateToProps)(DatasetComponent);\n\nexport default DatasetContainer;","import { genericDelete, genericPut, getApiBasePath } from \"../helpers/apiHelpers\";\nimport { DataSetOpenSchemaResponse, DeleteDatasetResponse, DetectDatasetResponse, OpenDatasetRequest, OpenDatasetResponse } from \"../messages\";\n\nexport const openDataset = async (id: string, dataset: OpenDatasetRequest): Promise<OpenDatasetResponse> => await genericPut<OpenDatasetResponse, OpenDatasetRequest>(`datasets/${id}/`, dataset)\n\nexport const deleteDataset = async (id: string): Promise<DeleteDatasetResponse> => await genericDelete<DeleteDatasetResponse>(`datasets/${id}/`)\n\n\nexport const detectDataset = async (path: string): Promise<DetectDatasetResponse> => {\n    const basePath = getApiBasePath();\n    const r = await fetch(`${basePath}datasets/detect/?path=${encodeURIComponent(path)}`, {\n        credentials: \"same-origin\",\n        method: \"GET\",\n    });\n    return await (r.json() as Promise<DetectDatasetResponse>);\n}\n\ninterface SchemaCache {\n    [type: string]: DataSetOpenSchemaResponse,\n}\n\nconst schemaCache: SchemaCache = {};\n\nexport const getSchema = async (type: string): Promise<DataSetOpenSchemaResponse> => {\n    const basePath = getApiBasePath();\n    const cached = schemaCache[type];\n    if (cached) {\n        return new Promise((resolve) => resolve(cached));\n    } else {\n        const r = await fetch(`${basePath}datasets/schema/?type=${encodeURIComponent(type)}`, {\n            credentials: \"same-origin\",\n            method: \"GET\",\n        });\n        const schemaResponse = await (r.json() as Promise<DataSetOpenSchemaResponse>);\n        schemaCache[type] = schemaResponse;\n        return schemaResponse;\n    }\n}","import Ajv, { ErrorObject } from 'ajv';\nimport { FormikErrors, FormikValues } from 'formik';\nimport { DataSetOpenSchemaResponse } from '../messages';\nimport { getSchema } from './api';\n\nexport const convertErrors = (errors: ErrorObject[]): FormikErrors<FormikValues> => {\n    const res: FormikErrors<FormikValues> = {};\n    errors.forEach(err => {\n        // flatten field names, convert from array to object\n        // FIXME: doesn't support multiple errors per field yet (formik limitation?)\n        const expr = /^\\.([^[]+)(\\[[^]+\\])?$/\n        const fieldName = err.instancePath.replace(expr, (match, plainName) => plainName as string);\n        res[fieldName] = err.message;\n    });\n    return res;\n}\n\nexport const throwErrors = (validateErrors : ErrorObject[] | null = [], customValidateErrors: FormikErrors<FormikValues> = {}): never => {\n    if (validateErrors || customValidateErrors) {\n        const converted = validateErrors ? { ...convertErrors(validateErrors), customValidateErrors } : customValidateErrors;\n        throw converted;\n    } else {\n        throw new Error(\"unspecified error while validating fields\");\n    }\n}\n\nexport const validateOpen = async<T> (type: string, data: T, customValidateErrors?: FormikErrors<FormikValues>): Promise<void> => (\n    getSchema(type).then((schemaResponse: DataSetOpenSchemaResponse) => {\n        if (schemaResponse.status === \"error\") {\n            throw new Error(schemaResponse.msg);\n        }\n        // FIXME: cache compiled schema\n        const schema = schemaResponse.schema;\n        const ajv = new Ajv();\n        const validate = ajv.compile(schema);\n        const valid = validate(data);\n        if (!valid || customValidateErrors) {\n            throwErrors(validate.errors, customValidateErrors);\n        }\n    })\n);\n","import * as pathfind from 'path';\nimport { FormikErrors, FormikValues, withFormik } from 'formik';\nimport { DatasetTypes } from \"../messages\";\nimport { OpenFormProps } from \"./types\";\nimport { validateOpen } from \"./validate\";\n\nexport const parseNumList = (nums: string): number[] => nums.split(\",\").filter(part => part.trim() !== \"\").map(part => +part)\n\nexport const parseNumListWithPadding = (nums: string, minLength: number, maxLength: number): string[] => {\n    let initialList = new Array<string>(minLength).fill(\"\");\n    if (nums) {\n        let value = nums.split(\",\");\n        if (minLength > value.length) {\n            initialList = [...value, ...Array<string>(minLength - value.length).fill(\"\")];\n        } else {\n            value = value.slice(0, maxLength);\n            initialList = [...value];\n        }\n    }\n    return initialList;\n}\n\nexport const parseNumListProduct = (nums: string): number => parseNumList(nums).reduce((a,b) => a * b, 1)\n\nexport const frameCalcForOffset = (syncOffset: number, navShapeProduct: number, imageCount: number) => ({\n    framesSkippedStart: Math.max(0, syncOffset),\n    framesIgnoredEnd: Math.max(0, imageCount - navShapeProduct - syncOffset),\n    framesInsertedStart: Math.abs(Math.min(0, syncOffset)),\n    framesInsertedEnd: Math.max(0, navShapeProduct - imageCount + syncOffset),\n})\n\nexport const isSigShapeValid = (sigShape: string, nativeSigShape: string): boolean => parseNumListProduct(sigShape) === parseNumListProduct(nativeSigShape)\n\nexport const isSyncOffsetValid = (syncOffset: number, imageCount: number): boolean => -imageCount < syncOffset && syncOffset < imageCount\n\nexport const validateSyncOffsetAndSigShape = (\n    nativeSigShape: number[] | undefined,\n    sigShape: string,\n    syncOffset: number,\n    imageCount: number | undefined\n): FormikErrors<FormikValues> => {\n    const res: FormikErrors<FormikValues> = {};\n    if (nativeSigShape && !isSigShapeValid(sigShape, nativeSigShape.toString())) {\n        res.sig_shape = `must be of size: ${parseNumListProduct(nativeSigShape.toString())}`;\n    }\n    if(imageCount && !isSyncOffsetValid(syncOffset, imageCount)) {\n        res.sync_offset = `must be in (-${imageCount}, ${imageCount})`;\n    }\n    return res;\n}\n\nexport const getInitial = <T, K extends keyof T, V>(key: K, otherwise: V, values?: T): V | T[K] => {\n    if (!values) {\n        return otherwise;\n    }\n    const res = values[key] !== undefined ? values[key] : otherwise;\n    return res;\n}\n\nexport const getInitialName = <T, K extends keyof T>(key: K, otherwise: string, values?: T): string | T[K] => {\n    if (!values) {\n        return pathfind.basename(otherwise);\n    }\n    const res = values[key] !== undefined ? values[key] : pathfind.basename(otherwise);\n    return res;\n}\n\nexport const isKnownDatasetType = (detectedType: string): boolean => (Object.keys(DatasetTypes).some((v) => v === detectedType) ? true : false)\n\ntype FormToJsonFn<SubmitParams, FormParams> = (inParams: FormParams, path: string) => SubmitParams;\ntype PropsToValuesFn<SubmitParams, FormParams, FormInfo> = (props: OpenFormProps<SubmitParams, FormInfo>) => FormParams;\ntype CustomValidationFn<SubmitParams, FormParams, FormInfo> = (inParams: FormParams, props: OpenFormProps<SubmitParams, FormInfo>) => FormikErrors<FormikValues>;\n\ninterface WithValidationOpts<SubmitParams, FormParams, FormInfo> {\n    formToJson: FormToJsonFn<SubmitParams, FormParams>,\n    mapPropsToValues: PropsToValuesFn<SubmitParams, FormParams, FormInfo>,\n    type: DatasetTypes,\n    customValidation?: CustomValidationFn<SubmitParams, FormParams, FormInfo>\n    // WrappedComponent: React.FunctionComponent<FormikProps<FormParams> & OpenFormProps<SubmitParams>>\n}\n\nexport const withValidation = <SubmitParams, FormParams, FormInfo>(\n    opts: WithValidationOpts<SubmitParams, FormParams, FormInfo>\n) => withFormik<OpenFormProps<SubmitParams, FormInfo>, FormParams, FormInfo>({\n    mapPropsToValues: opts.mapPropsToValues,\n    handleSubmit: (values, formikBag) => {\n        const { onSubmit, path } = formikBag.props;\n        const submitData = opts.formToJson(values, path);\n        onSubmit(submitData);\n        formikBag.setSubmitting(false);\n    },\n    validate: (values, props) => validateOpen(opts.type, opts.formToJson(values, props.path), opts.customValidation?.(values, props)),\n    enableReinitialize: true,\n    validateOnChange: true,\n    validateOnBlur: true,\n})\n","import * as React from \"react\";\n\ninterface TupleInputPartProps {\n    name: string,\n    id: string,\n    tupleKey: number,\n    value: number,\n    tupleInputChangeHandle: (idx: number, value: string) => void,\n    commaPressHandle: (idx: number) => void,\n    tupleRef: (ref:HTMLInputElement) => void,\n}\n\nconst TupleInputPart: React.FC<TupleInputPartProps> = ({ name, id, tupleKey, tupleInputChangeHandle, value, commaPressHandle, tupleRef }) => {\n\n   const onPartChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n      tupleInputChangeHandle(tupleKey, e.target.value);\n   }\n\n   const onCommaPress = (e: React.KeyboardEvent<HTMLInputElement>) => {\n     if(e.keyCode === 188) {\n       commaPressHandle(tupleKey);\n     }\n   }\n\n   return <input type=\"number\" name={name} id={id} key={tupleKey} onChange={onPartChange} value={value} onKeyDown={onCommaPress} ref={tupleRef} />;\n}\n\nexport default TupleInputPart;\n","import * as React from \"react\";\nimport { Button, Form } from \"semantic-ui-react\";\nimport { parseNumListWithPadding } from \"../helpers\";\nimport TupleInputPart from \"./TupleInputPart\";\n\ninterface TupleInputProps {\n  value: string,\n  minLen: number,\n  maxLen: number,\n  fieldName: string,\n  setFieldValue: (field: string, value: any, shouldValidate?: boolean) => void,\n}\n\nconst TupleInput: React.FC<TupleInputProps> = ({ value, minLen, maxLen, fieldName, setFieldValue }) => {\n  const tupleInputValue = parseNumListWithPadding(value, minLen, maxLen);\n\n  const tupleInputRefsArray = React.useRef<HTMLInputElement[]>([]);\n\n  const tupleInputChangeHandle = (idx: number, val: string) => {\n    const newTupleInputValue = [...tupleInputValue];\n    newTupleInputValue[idx] = val;\n    setFieldValue(fieldName, newTupleInputValue.toString());\n  };\n\n  const commaPressHandle = (idx: number) => {\n    if (idx === (tupleInputValue.length - 1)) {\n      newTupleDim();\n    } else {\n      tupleInputRefsArray.current[idx + 1].focus();\n    }\n  }\n\n  const newTupleDim = () => {\n    if (tupleInputValue.length < maxLen) {\n      const newTupleInputValue = [...tupleInputValue];\n      newTupleInputValue.push(\"\");\n      setFieldValue(fieldName, newTupleInputValue.toString());\n    }\n  }\n  /* Fix this auto focus bug when GUI supports n-D visualizations */\n  /* React.useEffect(() => {\n    if(tupleInputValue.length === tupleInputRefsArray.current.length + 1) {\n      tupleInputRefsArray.current[tupleInputValue.length+1].focus();\n    }\n  }, [tupleInputValue, tupleInputRefsArray]); */\n\n  const delTupleDim = () => {\n    if (tupleInputValue.length > minLen) {\n      const newTupleInputValue = [...tupleInputValue];\n      newTupleInputValue.pop();\n      setFieldValue(fieldName, newTupleInputValue.toString());\n      tupleInputRefsArray.current[tupleInputValue.length - 2].focus()\n    }\n  }\n\n  return (\n    <>\n      <Form.Group>\n        {tupleInputValue.map((val, idx) => {\n          const tupleRef = (ref: HTMLInputElement) => { tupleInputRefsArray.current[idx] = ref; }\n          return (\n            <Form.Field width={2} key={idx}>\n              <TupleInputPart\n                tupleKey={idx}  \n                name={`${fieldName}_${idx}`}\n                id={`id_${fieldName}_${idx}`}\n                value={+val}\n                tupleRef={tupleRef}\n                tupleInputChangeHandle={tupleInputChangeHandle}\n                commaPressHandle={commaPressHandle} />\n            </Form.Field>\n          );\n        })}\n        <Form.Field hidden={minLen === maxLen}>\n          <Button onClick={newTupleDim} disabled={tupleInputValue.length === maxLen} type=\"button\" icon=\"add\" title=\"Add dimension\" basic={false} />\n          <Button onClick={delTupleDim} disabled={tupleInputValue.length === minLen} type=\"button\" icon=\"minus\" title=\"Remove dimension\" basic={false} />\n        </Form.Field>\n      </Form.Group>\n    </>\n  );\n}\n\nexport default TupleInput;\n","import { ErrorMessage } from \"formik\";\nimport * as React from \"react\";\nimport { Form, Input } from \"semantic-ui-react\";\nimport { frameCalcForOffset, parseNumListProduct } from \"../helpers\";\nimport TupleInput from \"./TupleInput\";\n\ninterface ReshapeProps {\n    navShape: string,\n    sigShape: string,\n    syncOffset: number,\n    imageCount?: number,\n    hideInfo?: boolean,\n    setFieldValue: (field: string, value: any, shouldValidate?: boolean) => void,\n}\n\nconst Reshape: React.FC<ReshapeProps> = ({ navShape, sigShape, syncOffset, imageCount=0, hideInfo=false, setFieldValue }) => {\n\n    const reshapedNavShape = navShape !== undefined ? navShape : \"0\";\n    const reshapedSigShape = sigShape !== undefined ? sigShape : \"0\";\n\n    const navShapeProduct = parseNumListProduct(navShape);\n    const [offsetValue, setOffset] = React.useState(syncOffset.toString());\n    const offsetVal = parseInt(offsetValue, 10);\n\n    React.useEffect(() => {\n        setOffset(syncOffset.toString());\n      }, [syncOffset]);\n\n    const { framesSkippedStart, framesIgnoredEnd, framesInsertedStart, framesInsertedEnd } = frameCalcForOffset(offsetVal, navShapeProduct, imageCount);\n    \n    const handleOffsetChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        const { value } = e.target;\n        setOffset(value);\n        setFieldValue(\"sync_offset\", parseInt(value, 10));\n    };\n\n    return (\n        <div style={{paddingBottom: 5}}>\n            <Form.Field>\n                <label htmlFor=\"id_nav_shape_0\">Navigation shape (H, W):</label>\n                <div style={{ color: 'red'}}><ErrorMessage name=\"nav_shape\" /></div>\n                <TupleInput value={reshapedNavShape} minLen={2} maxLen={2} fieldName=\"nav_shape\" setFieldValue={setFieldValue} />\n                <label htmlFor=\"id_sig_shape_0\">Signal shape (H, W):</label>\n                <div style={{ color: 'red'}}><ErrorMessage name=\"sig_shape\" /></div>\n                <TupleInput value={reshapedSigShape} minLen={2} maxLen={2} fieldName=\"sig_shape\" setFieldValue={setFieldValue} />\n            </Form.Field>\n            <Form.Field width={4}>\n                <label htmlFor=\"id_sync_offset\">Sync Offset (frames):</label>\n                <div style={{ color: 'red'}}><ErrorMessage name=\"sync_offset\" /></div>\n                <Input type=\"number\" required name=\"sync_offset\" id=\"id_sync_offset\" value={offsetValue} onChange={handleOffsetChange} />\n            </Form.Field>\n            <Form.Field hidden={hideInfo}>\n                <label>Number of frames skipped at the beginning: {framesSkippedStart}</label>\n                <label>Number of blank frames inserted at the beginning: {framesInsertedStart}</label>\n                <label>Number of frames ignored at the end: {framesIgnoredEnd}</label>\n                <label>Number of blank frames inserted at the end: {framesInsertedEnd}</label>\n            </Form.Field>\n        </div>\n    );\n\n}\n\nexport default Reshape;","import { ErrorMessage, Field, FormikProps } from \"formik\";\nimport * as React from \"react\";\nimport { Button, Form } from \"semantic-ui-react\";\nimport { Omit } from \"../../helpers/types\";\nimport { DatasetInfoBLO, DatasetParamsBLO, DatasetTypes } from \"../../messages\";\nimport { getInitial, getInitialName, parseNumList, validateSyncOffsetAndSigShape, withValidation } from \"../helpers\";\nimport { OpenFormProps } from \"../types\";\nimport Reshape from \"./Reshape\";\n\n// some fields have different types in the form vs. in messages\ntype DatasetParamsBLOForForm = Omit<DatasetParamsBLO,\n    \"type\"\n    | \"path\"\n    | \"nav_shape\"\n    | \"sig_shape\"> & {\n        nav_shape: string,\n        sig_shape: string,\n};\n\ntype MergedProps = FormikProps<DatasetParamsBLOForForm> & OpenFormProps<DatasetParamsBLO, DatasetInfoBLO>;\n\nconst BLOFileParamsForm: React.FC<MergedProps> = ({\n    values,\n    info,\n    isSubmitting,\n    handleSubmit,\n    handleReset,\n    isValidating,\n    onCancel,\n    setFieldValue,\n}) => (\n    <Form onSubmit={handleSubmit}>\n        <Form.Field>\n            <label htmlFor=\"id_name\">Name:</label>\n            <ErrorMessage name=\"name\" />\n            <Field name=\"name\" id=\"id_name\" />\n        </Form.Field>\n        <Reshape navShape={values.nav_shape} sigShape={values.sig_shape} syncOffset={values.sync_offset} imageCount={info?.image_count} setFieldValue={setFieldValue} />\n        <Button primary type=\"submit\" disabled={isSubmitting || isValidating}>Load Dataset</Button>\n        <Button type=\"button\" onClick={onCancel}>Cancel</Button>\n        <Button type=\"button\" onClick={handleReset}>Reset</Button>\n    </Form>\n)\n\nexport default withValidation<DatasetParamsBLO, DatasetParamsBLOForForm, DatasetInfoBLO>({\n    mapPropsToValues: ({ path, initial }) => ({\n        name: getInitialName(\"name\", path, initial),\n        nav_shape: getInitial(\"nav_shape\", \"\", initial).toString(),\n        sig_shape: getInitial(\"sig_shape\", \"\", initial).toString(),\n        sync_offset: getInitial(\"sync_offset\", 0, initial),\n    }),\n    formToJson: (values, path) => ({\n        path,\n        type: DatasetTypes.BLO,\n        name: values.name,\n        nav_shape: parseNumList(values.nav_shape),\n        sig_shape: parseNumList(values.sig_shape),\n        sync_offset: values.sync_offset,\n    }),\n    customValidation: (values, { info }) =>\n        validateSyncOffsetAndSigShape(\n            info?.native_sig_shape,\n            values.sig_shape,\n            values.sync_offset,\n            info?.image_count\n        ),\n    type: DatasetTypes.BLO,\n})(BLOFileParamsForm);\n","import * as React from \"react\";\nimport { Dropdown, DropdownProps } from \"semantic-ui-react\";\nimport { getEnumValues } from \"../../helpers\";\nimport { DatasetTypes } from \"../../messages\";\n\n\nconst datasetTypeKeys = getEnumValues(DatasetTypes);\nconst datasetTypeOptions = datasetTypeKeys.map(t => ({\n    // text: DatasetTypeMetadata[DatasetTypes[t as any]].short,\n    text: DatasetTypes[t],\n    value: DatasetTypes[t],\n}));\n\ninterface DatasetTypeSelectProps {\n    onClick: (e: React.SyntheticEvent, data: DropdownProps) => void,\n    currentType: DatasetTypes,\n}\n\nconst DatasetTypeSelect: React.FC<DatasetTypeSelectProps> = ({ currentType, onClick }) => (\n    <>\n        <Dropdown\n            inline\n            options={datasetTypeOptions}\n            value={currentType}\n            onChange={onClick}\n        />\n    </>\n);\n\nexport default DatasetTypeSelect;","import { ErrorMessage, Field, FormikProps } from \"formik\";\nimport * as React from \"react\";\nimport { Button, Form } from \"semantic-ui-react\";\nimport { Omit } from \"../../helpers/types\";\nimport { DatasetInfoEMPAD, DatasetParamsEMPAD, DatasetTypes } from \"../../messages\";\nimport { getInitial, getInitialName, parseNumList, validateSyncOffsetAndSigShape, withValidation } from \"../helpers\";\nimport { OpenFormProps } from \"../types\";\nimport Reshape from \"./Reshape\";\n\n// some fields have different types in the form vs. in messages\ntype DatasetParamsEMPADForForm = Omit<DatasetParamsEMPAD,\n    \"type\"\n    | \"path\"\n    | \"nav_shape\"\n    | \"sig_shape\"> & {\n        nav_shape: string,\n        sig_shape: string,\n};\n\ntype MergedProps = FormikProps<DatasetParamsEMPADForForm> & OpenFormProps<DatasetParamsEMPAD, DatasetInfoEMPAD>;\n\nconst EMPADParamsForm: React.FC<MergedProps> = ({\n    values,\n    info,\n    isSubmitting,\n    handleSubmit,\n    handleReset,\n    onCancel,\n    setFieldValue,\n}) => (\n    <Form onSubmit={handleSubmit}>\n        <Form.Field>\n            <label htmlFor=\"id_name\">Name:</label>\n            <ErrorMessage name=\"name\" />\n            <Field name=\"name\" id=\"id_name\" />\n        </Form.Field>\n        <Reshape navShape={values.nav_shape} sigShape={values.sig_shape} syncOffset={values.sync_offset} imageCount={info?.image_count} setFieldValue={setFieldValue} />\n        <Button primary type=\"submit\" disabled={isSubmitting}>Load Dataset</Button>\n        <Button type=\"button\" onClick={onCancel}>Cancel</Button>\n        <Button type=\"button\" onClick={handleReset}>Reset</Button>\n    </Form>\n)\n\nexport default withValidation<DatasetParamsEMPAD, DatasetParamsEMPADForForm, DatasetInfoEMPAD>({\n    mapPropsToValues: ({ path, initial }) => ({\n        name: getInitialName(\"name\", path, initial),\n        nav_shape: getInitial(\"nav_shape\", \"\", initial).toString(),\n        sig_shape: getInitial(\"sig_shape\", \"\", initial).toString(),\n        sync_offset: getInitial(\"sync_offset\", 0, initial),\n    }),\n    formToJson: (values, path) => ({\n        path,\n        type: DatasetTypes.EMPAD,\n        name: values.name,\n        nav_shape: parseNumList(values.nav_shape),\n        sig_shape: parseNumList(values.sig_shape),\n        sync_offset: values.sync_offset,\n    }),\n    customValidation: (values, { info }) => validateSyncOffsetAndSigShape(\n        info?.native_sig_shape,\n        values.sig_shape,\n        values.sync_offset,\n        info?.image_count\n    ),\n    type: DatasetTypes.EMPAD,\n})(EMPADParamsForm);\n","import { ErrorMessage, Field, FormikProps } from \"formik\";\nimport * as React from \"react\";\nimport { Button, Form } from \"semantic-ui-react\";\nimport { Omit } from \"../../helpers/types\";\nimport { DatasetInfoFRMS6, DatasetParamsFRMS6, DatasetTypes } from \"../../messages\";\nimport { getInitial, getInitialName, parseNumList, validateSyncOffsetAndSigShape, withValidation } from \"../helpers\";\nimport { OpenFormProps } from \"../types\";\nimport Reshape from \"./Reshape\";\n\n// some fields have different types in the form vs. in messages\ntype DatasetParamsFRMS6ForForm = Omit<DatasetParamsFRMS6,\n    \"type\"\n    | \"path\"\n    | \"nav_shape\"\n    | \"sig_shape\"> & {\n        nav_shape: string,\n        sig_shape: string,\n};\n\ntype MergedProps = FormikProps<DatasetParamsFRMS6ForForm> & OpenFormProps<DatasetParamsFRMS6, DatasetInfoFRMS6>;\n\nconst FRMS6ParamsForm: React.FC<MergedProps> = ({\n    values,\n    info,\n    isSubmitting,\n    handleSubmit,\n    handleReset,\n    onCancel,\n    setFieldValue,\n}) => (\n    <Form onSubmit={handleSubmit}>\n        <Form.Field>\n            <label htmlFor=\"id_name\">Name:</label>\n            <ErrorMessage name=\"name\" />\n            <Field name=\"name\" id=\"id_name\" />\n        </Form.Field>\n        <Reshape navShape={values.nav_shape} sigShape={values.sig_shape} syncOffset={values.sync_offset} imageCount={info?.image_count} setFieldValue={setFieldValue} />\n        <Button primary type=\"submit\" disabled={isSubmitting}>Load Dataset</Button>\n        <Button type=\"button\" onClick={onCancel}>Cancel</Button>\n        <Button type=\"button\" onClick={handleReset}>Reset</Button>\n    </Form>\n)\n\nexport default withValidation<DatasetParamsFRMS6, DatasetParamsFRMS6ForForm, DatasetInfoFRMS6>({\n    mapPropsToValues: ({ path, initial }) => ({\n        name: getInitialName(\"name\", path, initial),\n        nav_shape: getInitial(\"nav_shape\", \"\", initial).toString(),\n        sig_shape: getInitial(\"sig_shape\", \"\", initial).toString(),\n        sync_offset: getInitial(\"sync_offset\", 0, initial),\n    }),\n    formToJson: (values, path) => ({\n        path,\n        type: DatasetTypes.FRMS6,\n        name: values.name,\n        nav_shape: parseNumList(values.nav_shape),\n        sig_shape: parseNumList(values.sig_shape),\n        sync_offset: values.sync_offset,\n    }),\n    customValidation: (values, { info }) => validateSyncOffsetAndSigShape(\n        info?.native_sig_shape,\n        values.sig_shape,\n        values.sync_offset,\n        info?.image_count\n    ),\n    type: DatasetTypes.FRMS6,\n})(FRMS6ParamsForm);\n","import { ErrorMessage, Field, FormikProps } from \"formik\";\nimport * as React from \"react\";\nimport { Button, Dropdown, DropdownProps, Form } from \"semantic-ui-react\";\nimport { Omit } from \"../../helpers/types\";\nimport { DatasetInfoHDF5, DatasetInfoHDF5Item, DatasetParamsHDF5, DatasetTypes } from \"../../messages\";\nimport { getInitial, getInitialName, parseNumList, withValidation } from \"../helpers\";\nimport { OpenFormProps } from \"../types\";\n\ntype DatasetParamsHDF5ForForm = Omit<DatasetParamsHDF5,\n    \"type\"\n    | \"path\"\n    | \"nav_shape\"\n    | \"sig_shape\"> & {\n        nav_shape: string,\n        sig_shape: string,\n};\n\ntype MergedProps = FormikProps<DatasetParamsHDF5ForForm> & OpenFormProps<DatasetParamsHDF5, DatasetInfoHDF5>;\n\nconst HDF5ParamsForm: React.FC<MergedProps> = ({\n    values,\n    info,\n    isSubmitting,\n    handleSubmit,\n    handleReset,\n    onCancel,\n    setFieldValue,\n}) => {\n    const dsItemsByPath: {\n        [k: string]: DatasetInfoHDF5Item\n    } = {};\n    info?.datasets?.forEach(dsItem => dsItemsByPath[dsItem.path] = dsItem);\n\n    const dsPathOptions = info?.datasets?.map(dsItem => {\n        const shape = dsItem.shape.join(\",\")\n        const opts: string[] = [];\n\n        if(dsItem.chunks !== null) {\n            opts.push('chunked');\n        }\n\n        if(dsItem.compression !== null) {\n            opts.push(`compression: ${dsItem.compression}`);\n        }\n\n        const text = `${dsItem.path} (shape: (${shape}), ${opts.join(\", \")})`;\n        return {\n            text,\n            key: dsItem.path,\n            value: dsItem.path,\n        };\n    });\n\n    // semantic-ui requires value to be set manually on option selection\n    const onDSPathChange = (e: React.SyntheticEvent, result: DropdownProps) => {\n      const { value } = result;\n      if (value) {\n        setFieldValue(\"ds_path\", value.toString());\n      }\n    };\n\n    let dsPathInput;\n    const pathsLength = info?.datasets?.length\n    const isTimeOut = pathsLength === 0 || pathsLength === undefined;\n\n    if (isTimeOut) {\n      dsPathInput = <Field name=\"ds_path\" id=\"id_ds_path\" />;\n    } else {\n        dsPathInput = <Dropdown name=\"ds_path\" id=\"id_ds_path\" placeholder=\"Select dataset\" fluid search selection defaultValue={values.ds_path} onChange={onDSPathChange} options={dsPathOptions} />;\n    }\n\n    let warning = null;\n    const selectedItem = dsItemsByPath[values.ds_path];\n    if (selectedItem && selectedItem.compression) {\n        warning = (\n            <p><strong style={{ color: \"red\" }}>Loading compressed HDF5, performance can be worse than with other formats</strong></p>\n        );\n    }\n\n    return (\n        <Form onSubmit={handleSubmit}>\n            <Form.Field>\n                <label htmlFor=\"id_name\">Name:</label>\n                <ErrorMessage name=\"name\" />\n                <Field name=\"name\" id=\"id_name\" />\n            </Form.Field>\n            <Form.Field>\n                <label htmlFor=\"id_ds_path\">HDF5 Dataset Path:</label>\n                <ErrorMessage name=\"ds_path\" />\n                {dsPathInput}\n            </Form.Field>\n            {warning}\n            <Button primary type=\"submit\" disabled={isSubmitting}>Load Dataset</Button>\n            <Button onClick={onCancel} >Cancel</Button>\n            <Button type=\"button\" onClick={handleReset}>Reset</Button>\n        </Form>\n    )\n}\n\nexport default withValidation<DatasetParamsHDF5, DatasetParamsHDF5ForForm, DatasetInfoHDF5>({\n    mapPropsToValues: ({ path, initial }) => ({\n        name: getInitialName(\"name\", path, initial),\n        ds_path: getInitial(\"ds_path\", \"\", initial),\n        nav_shape: getInitial(\"nav_shape\", \"\", initial).toString(),\n        sig_shape: getInitial(\"sig_shape\", \"\", initial).toString(),\n        sync_offset: getInitial(\"sync_offset\", 0, initial),\n    }),\n    formToJson: (values, path) => ({\n        path,\n        type: DatasetTypes.HDF5,\n        name: values.name,\n        ds_path: values.ds_path,\n        nav_shape: parseNumList(values.nav_shape),\n        sig_shape: parseNumList(values.sig_shape),\n        sync_offset: values.sync_offset,\n    }),\n    type: DatasetTypes.HDF5,\n})(HDF5ParamsForm);\n","import { ErrorMessage, Field, FormikProps } from \"formik\";\nimport * as React from \"react\";\nimport { Button, Form } from \"semantic-ui-react\";\nimport { Omit } from \"../../helpers/types\";\nimport { DatasetInfoK2IS, DatasetParamsK2IS, DatasetTypes } from \"../../messages\";\nimport { getInitial, getInitialName, parseNumList, validateSyncOffsetAndSigShape, withValidation } from \"../helpers\";\nimport { OpenFormProps } from \"../types\";\nimport Reshape from \"./Reshape\";\n\n// some fields have different types in the form vs. in messages\ntype DatasetParamsK2ISForForm = Omit<DatasetParamsK2IS,\n    \"type\"\n    | \"path\"\n    | \"nav_shape\"\n    | \"sig_shape\"> & {\n        nav_shape: string,\n        sig_shape: string,\n    };\n\ntype MergedProps = FormikProps<DatasetParamsK2ISForForm> & OpenFormProps<DatasetParamsK2IS, DatasetInfoK2IS>;\n\nconst K2ISFileParamsForm: React.FC<MergedProps> = ({\n    values,\n    info,\n    isSubmitting,\n    handleSubmit,\n    handleReset,\n    onCancel,\n    setFieldValue,\n}) => (\n    <Form onSubmit={handleSubmit}>\n        <Form.Field>\n            <label htmlFor=\"id_name\">Name:</label>\n            <ErrorMessage name=\"name\" />\n            <Field name=\"name\" id=\"id_name\" />\n        </Form.Field>\n        <Reshape navShape={values.nav_shape} sigShape={values.sig_shape} syncOffset={values.sync_offset} imageCount={info?.image_count} setFieldValue={setFieldValue} />\n        <Button primary type=\"submit\" disabled={isSubmitting}>Load Dataset</Button>\n        <Button type=\"button\" onClick={onCancel}>Cancel</Button>\n        <Button type=\"button\" onClick={handleReset}>Reset</Button>\n    </Form>\n)\n\nexport default withValidation<DatasetParamsK2IS, DatasetParamsK2ISForForm, DatasetInfoK2IS>({\n    mapPropsToValues: ({ path, initial }) => ({\n        name: getInitialName(\"name\", path, initial),\n        nav_shape: getInitial(\"nav_shape\", \"\", initial).toString(),\n        sig_shape: getInitial(\"sig_shape\", \"\", initial).toString(),\n        sync_offset: getInitial(\"sync_offset\", 0, initial),\n    }),\n    formToJson: (values, path) => ({\n        path,\n        type: DatasetTypes.K2IS,\n        name: values.name,\n        nav_shape: parseNumList(values.nav_shape),\n        sig_shape: parseNumList(values.sig_shape),\n        sync_offset: values.sync_offset,\n    }),\n    customValidation: (values, { info }) => validateSyncOffsetAndSigShape(\n        info?.native_sig_shape,\n        values.sig_shape,\n        values.sync_offset,\n        info?.image_count\n    ),\n    type: DatasetTypes.K2IS,\n})(K2ISFileParamsForm);\n","import { ErrorMessage, Field, FormikProps } from \"formik\";\nimport * as React from \"react\";\nimport { Button, Form } from \"semantic-ui-react\";\nimport { Omit } from \"../../helpers/types\";\nimport { DatasetInfoMIB, DatasetParamsMIB, DatasetTypes } from \"../../messages\";\nimport { getInitial, getInitialName, parseNumList, validateSyncOffsetAndSigShape, withValidation } from \"../helpers\";\nimport { OpenFormProps } from \"../types\";\nimport Reshape from \"./Reshape\";\n\n// some fields have different types in the form vs. in messages\ntype DatasetParamsMIBForForm = Omit<DatasetParamsMIB,\n    \"type\"\n    | \"path\"\n    | \"nav_shape\"\n    | \"sig_shape\"> & {\n        nav_shape: string,\n        sig_shape: string,\n};\n\ntype FormValues = DatasetParamsMIBForForm\n\ntype MergedProps = FormikProps<FormValues> & OpenFormProps<DatasetParamsMIB, DatasetInfoMIB>;\n\nconst MIBFileParamsForm: React.FC<MergedProps> = ({\n    values,\n    info,\n    isSubmitting,\n    handleSubmit,\n    handleReset,\n    isValidating,\n    onCancel,\n    setFieldValue,\n}) => (\n    <Form onSubmit={handleSubmit}>\n        <Form.Field>\n            <label htmlFor=\"id_name\">Name:</label>\n            <ErrorMessage name=\"name\" />\n            <Field name=\"name\" id=\"id_name\" />\n        </Form.Field>\n        <Reshape navShape={values.nav_shape} sigShape={values.sig_shape} syncOffset={values.sync_offset} imageCount={info?.image_count} setFieldValue={setFieldValue} />\n        <Button primary type=\"submit\" disabled={isSubmitting || isValidating}>Load Dataset</Button>\n        <Button type=\"button\" onClick={onCancel}>Cancel</Button>\n        <Button type=\"button\" onClick={handleReset}>Reset</Button>\n    </Form>\n)\n\nexport default withValidation<DatasetParamsMIB, DatasetParamsMIBForForm, DatasetInfoMIB>({\n    formToJson: (values, path) => ({\n        path,\n        type: DatasetTypes.MIB,\n        name: values.name,\n        nav_shape: parseNumList(values.nav_shape),\n        sig_shape: parseNumList(values.sig_shape),\n        sync_offset: values.sync_offset,\n    }),\n    mapPropsToValues: ({ path, initial }) => ({\n        name: getInitialName(\"name\",path,initial),\n        nav_shape: getInitial(\"nav_shape\", \"\", initial).toString(),\n        sig_shape: getInitial(\"sig_shape\", \"\", initial).toString(),\n        sync_offset: getInitial(\"sync_offset\", 0, initial),\n    }),\n    customValidation: (values, { info }) => validateSyncOffsetAndSigShape(\n        info?.native_sig_shape,\n        values.sig_shape,\n        values.sync_offset,\n        info?.image_count\n    ),\n    type: DatasetTypes.MIB,\n})(MIBFileParamsForm);\n","import { ErrorMessage, Field, FormikProps } from \"formik\";\nimport * as React from \"react\";\nimport { Button, Form } from \"semantic-ui-react\";\nimport { Omit } from \"../../helpers/types\";\nimport { DatasetInfoMRC, DatasetParamsMRC, DatasetTypes } from \"../../messages\";\nimport { getInitial, getInitialName, parseNumList, validateSyncOffsetAndSigShape, withValidation } from \"../helpers\";\nimport { OpenFormProps } from \"../types\";\nimport Reshape from \"./Reshape\";\n\n// some fields have different types in the form vs. in messages\ntype DatasetParamsMRCForForm = Omit<DatasetParamsMRC,\n    \"type\"\n    | \"path\"\n    | \"nav_shape\"\n    | \"sig_shape\"> & {\n        nav_shape: string,\n        sig_shape: string,\n};\n\ntype FormValues = DatasetParamsMRCForForm\n\ntype MergedProps = FormikProps<FormValues> & OpenFormProps<DatasetParamsMRC, DatasetInfoMRC>;\n\nconst MRCFileParamsForm: React.FC<MergedProps> = ({\n    values,\n    info,\n    isSubmitting,\n    handleSubmit,\n    handleReset,\n    isValidating,\n    onCancel,\n    setFieldValue,\n}) => (\n\n    <Form onSubmit={handleSubmit}>\n        <Form.Field>\n            <label htmlFor=\"id_name\">Name:</label>\n            <ErrorMessage name=\"name\" />\n            <Field name=\"name\" id=\"id_name\" />\n        </Form.Field>\n        <Reshape navShape={values.nav_shape} sigShape={values.sig_shape} syncOffset={values.sync_offset} imageCount={info?.image_count} setFieldValue={setFieldValue} />\n        <Button primary type=\"submit\" disabled={isSubmitting || isValidating}>Load Dataset</Button>\n        <Button type=\"button\" onClick={onCancel}>Cancel</Button>\n        <Button type=\"button\" onClick={handleReset}>Reset</Button>\n    </Form>\n)\n\nexport default withValidation<DatasetParamsMRC, DatasetParamsMRCForForm, DatasetInfoMRC>({\n    formToJson: (values, path) => ({\n        path,\n        type: DatasetTypes.MRC,\n        name: values.name,\n        nav_shape: parseNumList(values.nav_shape),\n        sig_shape: parseNumList(values.sig_shape),\n        sync_offset: values.sync_offset,\n    }),\n    mapPropsToValues: ({ path, initial }) => ({\n        name: getInitialName(\"name\", path, initial),\n        nav_shape: getInitial(\"nav_shape\", \"\", initial).toString(),\n        sig_shape: getInitial(\"sig_shape\", \"\", initial).toString(),\n        sync_offset: getInitial(\"sync_offset\", 0, initial),\n    }),\n    customValidation: (values, { info }) => validateSyncOffsetAndSigShape(\n        info?.native_sig_shape,\n        values.sig_shape,\n        values.sync_offset,\n        info?.image_count\n    ),\n    type: DatasetTypes.MRC,\n})(MRCFileParamsForm);","import { ErrorMessage, Field, FormikProps } from \"formik\";\nimport * as React from \"react\";\nimport { Button, Form } from \"semantic-ui-react\";\nimport { Omit } from \"../../helpers/types\";\nimport { DatasetInfoRAW, DatasetParamsRaw, DatasetTypes } from \"../../messages\";\nimport { getInitial, getInitialName, parseNumList, withValidation } from \"../helpers\";\nimport { OpenFormProps } from \"../types\";\nimport Reshape from \"./Reshape\";\n\n// some fields have different types in the form vs. in messages\ntype DatasetParamsRawForForm = Omit<DatasetParamsRaw,\n    \"type\"\n    | \"path\"\n    | \"nav_shape\"\n    | \"sig_shape\"> & {\n        nav_shape: string,\n        sig_shape: string,\n    };\n\ntype MergedProps = FormikProps<DatasetParamsRawForForm> & OpenFormProps<DatasetParamsRaw, DatasetInfoRAW>;\n\nconst RawFileParamsForm: React.FC<MergedProps> = ({\n    values,\n    isSubmitting,\n    handleSubmit,\n    handleReset,\n    onCancel,\n    setFieldValue,\n}) => (\n    <Form onSubmit={handleSubmit}>\n        <Form.Field>\n            <label htmlFor=\"id_name\">Name:</label>\n            <ErrorMessage name=\"name\" />\n            <Field name=\"name\" id=\"id_name\" />\n        </Form.Field>\n        <Form.Field>\n            <label htmlFor=\"id_dtype\">Datatype (uint16, uint32, float32, float64, &gt;u2, ..., can be anything that is <a href=\"https://numpy.org/doc/stable/reference/arrays.dtypes.html\">understood by numpy as a dtype</a>):</label>\n            <ErrorMessage name=\"dtype\" />\n            <Field name=\"dtype\" id=\"id_dtype\" />\n        </Form.Field>\n        <Form.Field>\n            <label htmlFor=\"id_enable_direct\">Enable Direct I/O (for usage with fast SSDs and files much larger than RAM):</label>\n            <ErrorMessage name=\"enable_direct\" />\n            <Field type=\"checkbox\" name=\"enable_direct\" checked={values.enable_direct} id=\"id_enable_direct\" />\n        </Form.Field>\n        <Reshape navShape={values.nav_shape} sigShape={values.sig_shape} syncOffset={values.sync_offset} hideInfo setFieldValue={setFieldValue} />\n        <Button primary type=\"submit\" disabled={isSubmitting}>Load Dataset</Button>\n        <Button type=\"button\" onClick={onCancel}>Cancel</Button>\n        <Button type=\"button\" onClick={handleReset}>Reset</Button>\n    </Form>\n)\n\nexport default withValidation<DatasetParamsRaw, DatasetParamsRawForForm, DatasetInfoRAW>({\n    mapPropsToValues: ({ path, initial }) => ({\n        name: getInitialName(\"name\", path, initial),\n        enable_direct: getInitial(\"enable_direct\", false, initial),\n        dtype: getInitial(\"dtype\", \"float32\", initial),\n        nav_shape: getInitial(\"nav_shape\", \"\", initial).toString(),\n        sig_shape: getInitial(\"sig_shape\", \"\", initial).toString(),\n        sync_offset: getInitial(\"sync_offset\", 0, initial),\n    }),\n    formToJson: (values, path) => ({\n        path,\n        type: DatasetTypes.RAW,\n        name: values.name,\n        dtype: values.dtype,\n        enable_direct: values.enable_direct,\n        nav_shape: parseNumList(values.nav_shape),\n        sig_shape: parseNumList(values.sig_shape),\n        sync_offset: values.sync_offset,\n    }),\n    type: DatasetTypes.RAW,\n})(RawFileParamsForm);\n","import { ErrorMessage, Field, FormikProps } from \"formik\";\nimport * as React from \"react\";\nimport { Button, Form } from \"semantic-ui-react\";\nimport { Omit } from \"../../helpers/types\";\nimport { DatasetInfoSEQ, DatasetParamsSEQ, DatasetTypes } from \"../../messages\";\nimport { getInitial, getInitialName, parseNumList, validateSyncOffsetAndSigShape, withValidation } from \"../helpers\";\nimport { OpenFormProps } from \"../types\";\nimport Reshape from \"./Reshape\";\n\n// some fields have different types in the form vs. in messages\ntype DatasetParamsSEQForForm = Omit<DatasetParamsSEQ,\n    \"type\"\n    | \"path\"\n    | \"nav_shape\"\n    | \"sig_shape\"> & {\n        nav_shape: string,\n        sig_shape: string,\n};\n\ntype FormValues = DatasetParamsSEQForForm\n\ntype MergedProps = FormikProps<FormValues> & OpenFormProps<DatasetParamsSEQ, DatasetInfoSEQ>;\n\nconst SEQFileParamsForm: React.FC<MergedProps> = ({\n    values,\n    info,\n    isSubmitting,\n    handleSubmit,\n    handleReset,\n    isValidating,\n    onCancel,\n    setFieldValue,\n}) => (\n    <Form onSubmit={handleSubmit}>\n        <Form.Field>\n            <label htmlFor=\"id_name\">Name:</label>\n            <ErrorMessage name=\"name\" />\n            <Field name=\"name\" id=\"id_name\" />\n        </Form.Field>\n        <Reshape navShape={values.nav_shape} sigShape={values.sig_shape} syncOffset={values.sync_offset} imageCount={info?.image_count} setFieldValue={setFieldValue} />\n        <Button primary type=\"submit\" disabled={isSubmitting || isValidating}>Load Dataset</Button>\n        <Button type=\"button\" onClick={onCancel}>Cancel</Button>\n        <Button type=\"button\" onClick={handleReset}>Reset</Button>\n    </Form>\n)\n\nexport default withValidation<DatasetParamsSEQ, DatasetParamsSEQForForm, DatasetInfoSEQ>({\n    formToJson: (values, path) => ({\n        path,\n        type: DatasetTypes.SEQ,\n        name: values.name,\n        nav_shape: parseNumList(values.nav_shape),\n        sig_shape: parseNumList(values.sig_shape),\n        sync_offset: values.sync_offset,\n    }),\n    mapPropsToValues: ({ path, initial }) => ({\n        name: getInitialName(\"name\", path, initial),\n        nav_shape: getInitial(\"nav_shape\", \"\", initial).toString(),\n        sig_shape: getInitial(\"sig_shape\", \"\", initial).toString(),\n        sync_offset: getInitial(\"sync_offset\", 0, initial),\n    }),\n    customValidation: (values, { info }) => validateSyncOffsetAndSigShape(\n        info?.native_sig_shape,\n        values.sig_shape,\n        values.sync_offset,\n        info?.image_count\n    ),\n    type: DatasetTypes.SEQ,\n})(SEQFileParamsForm);","import { ErrorMessage, Field, FormikProps } from \"formik\";\nimport * as React from \"react\";\nimport { Button, Form } from \"semantic-ui-react\";\nimport { Omit } from \"../../helpers/types\";\nimport { DatasetInfoSER, DatasetParamsSER, DatasetTypes } from \"../../messages\";\nimport { getInitial, getInitialName, parseNumList, validateSyncOffsetAndSigShape, withValidation } from \"../helpers\";\nimport { OpenFormProps } from \"../types\";\nimport Reshape from \"./Reshape\";\n\n// some fields have different types in the form vs. in messages\ntype DatasetParamsSERForForm = Omit<DatasetParamsSER,\n    \"type\"\n    | \"path\"\n    | \"nav_shape\"\n    | \"sig_shape\"> & {\n        nav_shape: string,\n        sig_shape: string,\n    };\n\ntype MergedProps = FormikProps<DatasetParamsSERForForm> & OpenFormProps<DatasetParamsSER, DatasetInfoSER>;\n\nconst SERParamsForm: React.FC<MergedProps> = ({\n    values,\n    info,\n    isSubmitting,\n    handleSubmit,\n    handleReset,\n    onCancel,\n    setFieldValue,\n}) => (\n    <Form onSubmit={handleSubmit}>\n        <Form.Field>\n            <label htmlFor=\"id_name\">Name:</label>\n            <ErrorMessage name=\"name\" />\n            <Field name=\"name\" id=\"id_name\" />\n        </Form.Field>\n        <Reshape navShape={values.nav_shape} sigShape={values.sig_shape} syncOffset={values.sync_offset} imageCount={info?.image_count} setFieldValue={setFieldValue} />\n        <Button primary type=\"submit\" disabled={isSubmitting}>Load Dataset</Button>\n        <Button type=\"button\" onClick={onCancel}>Cancel</Button>\n        <Button type=\"button\" onClick={handleReset}>Reset</Button>\n    </Form>\n)\n\nexport default withValidation<DatasetParamsSER, DatasetParamsSERForForm, DatasetInfoSER>({\n    mapPropsToValues: ({ path, initial }) => ({\n        name: getInitialName(\"name\", path, initial),\n        nav_shape: getInitial(\"nav_shape\", \"\", initial).toString(),\n        sig_shape: getInitial(\"sig_shape\", \"\", initial).toString(),\n        sync_offset: getInitial(\"sync_offset\", 0, initial),\n    }),\n    formToJson: (values, path) => ({\n        path,\n        type: DatasetTypes.SER,\n        name: values.name,\n        nav_shape: parseNumList(values.nav_shape),\n        sig_shape: parseNumList(values.sig_shape),\n        sync_offset: values.sync_offset,\n    }),\n    customValidation: (values, { info }) => validateSyncOffsetAndSigShape(\n        info?.native_sig_shape,\n        values.sig_shape,\n        values.sync_offset,\n        info?.image_count\n    ),\n    type: DatasetTypes.SER,\n})(SERParamsForm);\n","import * as React from \"react\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport { DropdownProps, Header, Segment } from \"semantic-ui-react\";\nimport { v4 as uuid } from 'uuid';\nimport { assertNotReached } from \"../../helpers\";\nimport { DatasetFormParams, DatasetTypes } from '../../messages';\nimport { RootReducer } from \"../../store\";\nimport * as datasetActions from \"../actions\";\nimport { OpenDatasetState } from \"../types\";\nimport BLOParamsForm from \"./BLOParamsForm\";\nimport DatasetTypeSelect from \"./DatasetTypeSelect\";\nimport EMPADParamsForm from \"./EMPADParamsForm\";\nimport FRMS6ParamsForm from \"./FRMS6ParamsForm\";\nimport HDF5ParamsForm from \"./HDF5ParamsForm\";\nimport K2ISParamsForm from \"./K2ISParamsForm\";\nimport MIBParamsForm from \"./MIBParamsForm\";\nimport MRCParamsForm from \"./MRCParamsForm\";\nimport RawFileParamsForm from \"./RawFileParamsForm\";\nimport SEQParamsForm from \"./SEQParamsForm\";\nimport SERParamsForm from \"./SERParamsForm\";\n\n\n/**\n * Get the initial selection for the dataset type dropdown. If we have a previous\n * user selection, we use it, but only if the reset button was not pressed. If it was,\n * we use the detected dataset type, falling back to RAW.\n *\n * @param didReset flag: was the reset button pressed?\n * @param openState complete OpenDatasetState instance\n */\nconst getDefaultDSType = (didReset: boolean, openState: OpenDatasetState) => {\n    const { formCachedParams, formDetectedParams } = openState;\n    if (didReset) {\n        return formDetectedParams ? formDetectedParams.type : DatasetTypes.RAW;\n    }\n    if (formCachedParams) {\n        return formCachedParams.type;\n    }\n    if (formDetectedParams) {\n        return formDetectedParams.type;\n    }\n    return DatasetTypes.RAW;\n}\n\n\n/**\n * Get the initial form field values. If we have previously entered values, we\n * use these, otherwise we use the detected parameters. If the reset button was\n * clicked, we use the detected params, but keep the original name field,\n *\n * @param didReset flag: was the reset button pressed?\n * @param openState complete OpenDatasetState instance\n */\n\nconst getFormInitial = (didReset: boolean, openState: OpenDatasetState) => {\n    const { formCachedParams, formDetectedParams } = openState;\n    if (didReset) {\n        if (formDetectedParams) {\n            return {\n                ...formDetectedParams,\n                name: formCachedParams ? formCachedParams.name : \"\",\n            };\n        }\n        return undefined;\n    }\n    if (formCachedParams) {\n        // To handle deprecation of scan_size and detector_size, fix this after complete removal\n        let newFormCachedParams = formCachedParams;\n        if (formCachedParams.scan_size) {\n            newFormCachedParams = {\n                ...newFormCachedParams,\n                nav_shape: formCachedParams.scan_size,\n                scan_size: [],\n            };\n        }\n        if (formCachedParams.detector_size) {\n            newFormCachedParams = {\n                ...newFormCachedParams,\n                sig_shape: formCachedParams.detector_size,\n                detector_size: [],\n            };\n        }\n        if (!formCachedParams.nav_shape) {\n            newFormCachedParams = {\n                ...newFormCachedParams,\n                nav_shape: formDetectedParams ? formDetectedParams.nav_shape : [],\n            };\n        }\n        if (!formCachedParams.sig_shape) {\n            newFormCachedParams = {\n                ...newFormCachedParams,\n                sig_shape: formDetectedParams ? formDetectedParams.sig_shape : [],\n            };\n        }\n        return newFormCachedParams;\n    } else {\n        return formDetectedParams;\n    }\n}\n\nconst getFormInfo = (openState: OpenDatasetState) => {\n    const { formDetectedInfo } = openState;\n    if (formDetectedInfo) {\n        return formDetectedInfo;\n    }\n    return undefined;\n}\n\n/**\n * Dispatch to specific dataset opening forms, including a selection of dataset type\n * via a dropdown.\n */\nconst DatasetOpen = () => {\n    const dispatch = useDispatch();\n    const openState = useSelector((state: RootReducer) => state.openDataset);\n\n    const [didReset, setReset] = React.useState(false);\n    const formInitial = getFormInitial(didReset, openState);\n    const formInfo = getFormInfo(openState);\n    const defaultType = getDefaultDSType(didReset, openState);\n    const [datasetType, setDatasetType] = React.useState(defaultType);\n\n    const doSetType = (e: React.SyntheticEvent, data: DropdownProps) => setDatasetType(data.value as DatasetTypes);\n    // FIXME: find out how to make ts correctly correlate the types of FormComponent\n    // and initial and replace the huge switch below with something like:\n    // const initial = formInitial && datasetType === formInitial.type ? formInitial : undefined;\n    // const formComponentMap = {\n    //     [DatasetTypes.HDF5]: HDF5ParamsForm,\n    //     [DatasetTypes.RAW]: RawFileParamsForm,\n    //     [DatasetTypes.MIB]: MIBParamsForm,\n    //     [DatasetTypes.BLO]: BLOParamsForm,\n    //     [DatasetTypes.K2IS]: K2ISParamsForm,\n    //     [DatasetTypes.SER]: SERParamsForm,\n    //     [DatasetTypes.FRMS6]: FRMS6ParamsForm,\n    //     [DatasetTypes.EMPAD]: EMPADParamsForm,\n    // }\n    // const FormComponent = formComponentMap[datasetType];\n\n    const renderForm = (form: React.ReactNode) => (\n        <Segment>\n            Type: <DatasetTypeSelect onClick={doSetType} currentType={datasetType} />\n            <Header as=\"h2\">Open: {openState.formPath}</Header>\n            {form}\n        </Segment>\n    );\n\n    const commonParams = {\n        path: openState.formPath,\n        onSubmit: (params: DatasetFormParams) => {\n            dispatch(datasetActions.Actions.create({\n                id: uuid(),\n                params,\n            }))\n        },\n        onCancel: () => dispatch(datasetActions.Actions.cancelOpen()),\n        onReset: () => {\n            setReset(true);\n            setDatasetType(getDefaultDSType(true, openState));\n        },\n    }\n\n    switch (datasetType) {\n        case DatasetTypes.HDF5: {\n            const initial = formInitial && datasetType === formInitial.type ? formInitial : undefined;\n            const info = formInfo && datasetType === formInfo.type ? formInfo : undefined;\n            return renderForm(<HDF5ParamsForm {...commonParams} initial={initial} info={info} />);\n        }\n        case DatasetTypes.RAW: {\n            const initial = formInitial && datasetType === formInitial.type ? formInitial : undefined;\n            const info = formInfo && datasetType === formInfo.type ? formInfo : undefined;\n            return renderForm(<RawFileParamsForm {...commonParams} initial={initial} info={info} />);\n        }\n        case DatasetTypes.MIB: {\n            const initial = formInitial && datasetType === formInitial.type ? formInitial : undefined;\n            const info = formInfo && datasetType === formInfo.type ? formInfo : undefined;\n            return renderForm(<MIBParamsForm {...commonParams} initial={initial} info={info} />);\n        }\n        case DatasetTypes.BLO: {\n            const initial = formInitial && datasetType === formInitial.type ? formInitial : undefined;\n            const info = formInfo && datasetType === formInfo.type ? formInfo : undefined;\n            return renderForm(<BLOParamsForm {...commonParams} initial={initial} info={info} />);\n        }\n        case DatasetTypes.K2IS: {\n            const initial = formInitial && datasetType === formInitial.type ? formInitial : undefined;\n            const info = formInfo && datasetType === formInfo.type ? formInfo : undefined;\n            return renderForm(<K2ISParamsForm {...commonParams} initial={initial} info={info} />);\n        }\n        case DatasetTypes.SER: {\n            const initial = formInitial && datasetType === formInitial.type ? formInitial : undefined;\n            const info = formInfo && datasetType === formInfo.type ? formInfo : undefined;\n            return renderForm(<SERParamsForm {...commonParams} initial={initial} info={info} />);\n        }\n        case DatasetTypes.FRMS6: {\n            const initial = formInitial && datasetType === formInitial.type ? formInitial : undefined;\n            const info = formInfo && datasetType === formInfo.type ? formInfo : undefined;\n            return renderForm(<FRMS6ParamsForm {...commonParams} initial={initial} info={info} />);\n        }\n        case DatasetTypes.EMPAD: {\n            const initial = formInitial && datasetType === formInitial.type ? formInitial : undefined;\n            const info = formInfo && datasetType === formInfo.type ? formInfo : undefined;\n            return renderForm(<EMPADParamsForm {...commonParams} initial={initial} info={info} />)\n        }\n        case DatasetTypes.SEQ: {\n            const initial = formInitial && datasetType === formInitial.type ? formInitial : undefined;\n            const info = formInfo && datasetType === formInfo.type ? formInfo : undefined;\n            return renderForm(<SEQParamsForm {...commonParams} initial={initial} info={info} />);\n        }\n        case DatasetTypes.MRC: {\n            const initial = formInitial && datasetType === formInitial.type ? formInitial : undefined;\n            const info = formInfo && datasetType === formInfo.type ? formInfo : undefined;\n            return renderForm(<MRCParamsForm {...commonParams} initial={initial} info={info} />);\n        }\n    }\n    return assertNotReached(\"unknown dataset type\");\n}\n\nexport default DatasetOpen;\n","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Header, Icon, Message } from \"semantic-ui-react\";\nimport { RootReducer } from \"../../store\";\n\nconst mapStateToProps = (state: RootReducer) => ({\n    busy: state.openDataset.busy,\n    path: state.openDataset.busyPath,\n})\n\ntype MergedProps = ReturnType<typeof mapStateToProps>;\n\nconst DatasetOpenSpinner: React.FC<MergedProps> = ({ busy, path }) => {\n    if (!busy) {\n        return null;\n    }\n    return (\n        <>\n            <Header as=\"h2\" dividing>Loading...</Header>\n            <Message icon>\n                <Icon name='cog' loading />\n                <Message.Content>\n                    <Message.Header>Detecting parameters for {path}</Message.Header>\n                </Message.Content>\n            </Message>\n        </>\n    );\n}\n\nexport default connect(mapStateToProps)(DatasetOpenSpinner);","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport BrowserWrapper from \"../../browser/components/BrowserWrapper\";\nimport { RootReducer } from \"../../store\";\nimport { DatasetsState } from \"../types\";\nimport Dataset from \"./Dataset\";\nimport DatasetOpen from \"./DatasetOpen\";\nimport DatasetOpenSpinner from \"./DatasetOpenSpinner\";\n\ninterface DatasetListProps {\n    datasets: DatasetsState\n}\n\nconst mapStateToProps = (state: RootReducer) => ({\n    datasets: state.datasets,\n    formVisible: state.openDataset.formVisible,\n    formPath: state.openDataset.formPath,\n});\n\ntype MergedProps = DatasetListProps & ReturnType<typeof mapStateToProps>;\n\nclass DatasetList extends React.Component<MergedProps> {\n    public render() {\n        const { formVisible, datasets } = this.props;\n\n        return (\n            <>\n                {datasets.ids.map((dsId: string) => <Dataset dataset={datasets.byId[dsId]} key={dsId} />)}\n                <DatasetOpenSpinner />\n                {formVisible && <DatasetOpen />}\n                <BrowserWrapper />\n            </>\n        );\n    }\n}\n\nexport default connect(mapStateToProps)(DatasetList);","import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { Dispatch } from 'redux';\nimport { Message } from 'semantic-ui-react';\nimport * as errorActions from '../actions';\nimport { ErrorMessage } from '../reducers';\n\nconst mapDispatchToProps = (dispatch: Dispatch, ownProps: ErrorProps) => ({\n    dismiss: () => dispatch(errorActions.Actions.dismiss(ownProps.error.id)),\n});\n\ninterface ErrorProps {\n    error: ErrorMessage,\n}\n\ntype MergedProps = ErrorProps & ReturnType<typeof mapDispatchToProps>;\n\nconst ErrorComponent: React.FC<MergedProps> = ({ dismiss, error }) => (\n    <Message negative onDismiss={dismiss}>{error.msg}</Message>\n);\n\nexport default connect(null, mapDispatchToProps)(ErrorComponent);","import * as React from \"react\";\nimport { connect, useDispatch } from \"react-redux\";\nimport { Modal } from \"semantic-ui-react\";\nimport { useDismissEscape } from \"../../helpers/hooks\";\nimport { RootReducer } from \"../../store\";\nimport { Actions } from \"../actions\";\nimport Error from \"./Error\";\n\nconst mapStateToProps = (state: RootReducer) => ({\n    errors: state.errors,\n    channelConnected: (state.channelStatus.status === \"connected\" ||\n        state.channelStatus.status === \"ready\"),\n});\n\ntype MergedProps = ReturnType<typeof mapStateToProps>;\n\nconst ErrorList: React.FC<MergedProps> = ({ errors, channelConnected }) => {\n    const numShown = 3;\n    const latestErrors = errors.ids.slice(Math.max(0, errors.ids.length - numShown));\n    const showModal = errors.ids.length > 0 && channelConnected;\n\n    const dispatch = useDispatch();\n\n    const doDismiss = () => {\n        dispatch(Actions.dismissAll());\n    }\n\n    useDismissEscape(doDismiss);\n\n    return (\n        <Modal open={showModal}>\n            {latestErrors.map(error => <Error error={errors.byId[error]} key={error} />)}\n        </Modal>\n    );\n}\n\nexport default connect(mapStateToProps)(ErrorList);","import React from \"react\";\n\nexport const useDismissEscape = (dismiss: () => void): void => {\n    React.useEffect(() => {\n        const handleEsc = (ev: KeyboardEvent) => {\n            if(ev.code === \"Escape\" || ev.keyCode === 27) {\n                dismiss();\n            }\n        }\n        document.addEventListener(\"keyup\", handleEsc);\n\n        return () => {\n            document.removeEventListener(\"keyup\", handleEsc);\n        };\n    });\n}","export default __webpack_public_path__ + \"static/media/LiberTEM logo-medium.2765b438.png\";","import { connect } from \"react-redux\";\nimport { Header, List } from \"semantic-ui-react\";\nimport { RootReducer } from \"./store\";\n\nconst mapStateToProps = (state: RootReducer) => ({\n    version: state.config.version,\n    revision: state.config.revision,\n});\n\ntype MergedProps = ReturnType<typeof mapStateToProps>;\n\nconst About: React.FC<MergedProps> = ({ version, revision }) => (\n    <>\n        <Header as=\"h3\">This is LiberTEM version {version} (revision {revision.slice(0, 8)})</Header>\n        <List>\n            <List.Item>\n                <List.Icon name=\"github\" />\n                <List.Content>\n                    Find us on <a href=\"https://github.com/LiberTEM/LiberTEM\">GitHub</a>\n                </List.Content>\n            </List.Item>\n            <List.Item>\n                <List.Icon name=\"bug\" />\n                <List.Content>\n                    Found a bug? Got a feature request? Please <a href=\"https://github.com/LiberTEM/LiberTEM/issues/new\">open an issue!</a>\n                </List.Content>\n            </List.Item>\n            <List.Item>\n                <List.Icon name=\"legal\" />\n                <List.Content>\n                    LiberTEM is licensed under the <a href=\"https://github.com/LiberTEM/LiberTEM/blob/master/LICENSE\">GNU General Public License v3.0</a>\n                </List.Content>\n            </List.Item>\n            <List.Item>\n                <List.Icon name=\"book\" />\n                <List.Content>\n                    Read <a href=\"https://libertem.github.io/LiberTEM/\">the documentation</a>\n                </List.Content>\n            </List.Item>\n            <List.Item>\n                <List.Icon name=\"user\" />\n                <List.Content>\n                    Read <a href=\"https://libertem.github.io/LiberTEM/acknowledgments.html\">the acknowledgments</a>\n                </List.Content>\n            </List.Item>\n            <List.Item>\n                <List.Icon name=\"gitter\" />\n                <List.Content>\n                    Join our <a href=\"https://gitter.im/LiberTEM/Lobby\">chat on gitter!</a>\n                </List.Content>\n            </List.Item>\n            <List.Item>\n                <List.Icon name=\"linkify\" />\n                <List.Content>\n                <a href=\"https://doi.org/10.5281/zenodo.1477847\"><img src=\"https://zenodo.org/badge/DOI/10.5281/zenodo.1477847.svg\" alt=\"doi.org/10.5281/zenodo.1477847\"/></a>\n                </List.Content>\n            </List.Item>\n        </List>\n    </>\n);\n\nexport default connect(mapStateToProps)(About);\n","import { getApiBasePath } from \"../helpers/apiHelpers\";\nimport { ClusterDetailsResponse } from \"../messages\";\n\nexport const getClusterDetail = async (): Promise<ClusterDetailsResponse> => {\n    const basePath = getApiBasePath();\n    const url = `${basePath}config/cluster/`;\n    const r = await fetch(url, {\n        method: 'GET',\n        credentials: \"same-origin\",\n    });\n    return await (r.json() as Promise<ClusterDetailsResponse>);\n}","import * as React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { List, Modal } from \"semantic-ui-react\";\nimport { v4 as uuid } from 'uuid';\nimport { HostDetails } from \"../../messages\";\nimport { getClusterDetail } from \"../api\"\nimport * as errorActions from \"../../errors/actions\";\n\ninterface LocalStatusProps {\n    localCore: number;\n    cudas: number[];\n}\n\nconst LocalStatus: React.FC<LocalStatusProps> = ({ localCore, cudas }) => {\n    let cudaText: string;\n\n    const intialDetails: HostDetails[] = [\n        {\n            host: \"\",\n            cpu: 0,\n            cuda: 0,\n            service: 0,\n        },\n    ];\n\n    const [clustDetails, setDetails] = useState<HostDetails[]>(intialDetails)\n\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        getClusterDetail().then(newDetails => {\n            setDetails(newDetails.details);\n        }).catch(() => {\n            const id = uuid();\n            const timestamp = Date.now();\n            dispatch(errorActions.Actions.generic(id, \"Could not copy to clipboard\", timestamp));\n        })\n    }, []);\n\n    if (cudas.length === 0) {\n        cudaText = \"None selected\";\n    } else {\n        const ids = cudas\n            .map(id => ` ${id}`)\n            .join(\",\");\n        cudaText = `GPU ${ids}`;\n    }\n\n    return (\n        <Modal.Content>\n            <List>\n                <List.Item>\n                    <List.Content as=\"h4\">Connected to local cluster</List.Content>\n                </List.Item>\n                <List.Item>\n                    <List.Content>Number of local core : {localCore}</List.Content>\n                </List.Item>\n                <List.Item>\n                    <List.Content>Number of CPU workers : {clustDetails[0].cpu} </List.Content>\n                </List.Item>\n                <List.Item>\n                    <List.Content>Number of CUDA workers : {clustDetails[0].cuda}</List.Content>\n                </List.Item>\n                <List.Item>\n                    <List.Content>Selected CUDA devices : {cudaText}</List.Content>\n                </List.Item>\n            </List>\n        </Modal.Content>\n    );\n};\n\nexport default LocalStatus;\n","import * as React from \"react\";\nimport { List, Modal } from \"semantic-ui-react\";\n\nconst NotConnected: React.FC = () => (\n    <Modal.Content>\n        <List>\n            <List.Item>\n                <List.Content>\n                    Not Connected\n                </List.Content>\n            </List.Item>\n        </List>\n    </Modal.Content>\n);\n\nexport default NotConnected;","import * as React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { Accordion, Button, Header, Icon, List, Modal, Segment } from \"semantic-ui-react\";\nimport { v4 as uuid } from 'uuid';\nimport { HostDetails } from \"../../messages\";\nimport { getClusterDetail } from \"../api\";\nimport * as errorActions from \"../../errors/actions\";\nimport { writeClipboard } from \"../../helpers\";\n\n\nconst ClusterDetails = (details: HostDetails[]) => {\n    const [clustOverview, setOverview] = useState({\n        host: 0,\n        cpu: 0,\n        cuda: 0,\n    });\n\n    const [idx, setIdx] = useState(false);\n    const [expandMsg, setMsg] = useState(\"More Info\");\n\n    const handleClick = () => {\n        setIdx(!idx);\n        if (expandMsg === \"More Info\") {\n            setMsg(\"Less Info\");\n        } else {\n            setMsg(\"More Info\");\n        }\n    };\n\n    useEffect(() => {\n        const overview = {\n            host: 0,\n            cpu: 0,\n            cuda: 0,\n        };\n        details.forEach(node => {\n            overview.host += 1;\n            overview.cpu += node.cpu;\n            overview.cuda += node.cuda;\n        });\n        setOverview(overview);\n    }, [details]);\n\n    const clusterExpanded = details.map((node: HostDetails) => (\n        <Segment key={node.host}>\n            <List.Item >\n                <List.Content>Host : {node.host}</List.Content>\n                <List.Content>Number of CPU workers : {node.cpu}</List.Content>\n                <List.Content>Number of CUDA workers : {node.cuda}</List.Content>\n            </List.Item>\n        </Segment>\n    ));\n\n    return (\n        <>\n            <Segment>\n                <List.Item>\n                    <List.Content>Number of hosts : {clustOverview.host}</List.Content>\n                    <List.Content>Number of CPU workers : {clustOverview.cpu}</List.Content>\n                    <List.Content>Number of CUDA workers : {clustOverview.cuda}</List.Content>\n                </List.Item>\n            </Segment>\n            <Accordion>\n                <Accordion.Title active={idx} onClick={handleClick}>\n                    <Icon name=\"dropdown\" />\n                    {expandMsg}\n                </Accordion.Title>\n                <Accordion.Content active={idx}>\n                    <Segment.Group>{clusterExpanded}</Segment.Group>\n                </Accordion.Content>\n            </Accordion>\n        </>\n    );\n};\n\ninterface TCPStatusProps {\n    address: string;\n}\n\nconst TCPStatus: React.FC<TCPStatusProps> = ({ address }) => {\n    const template = [\n        `import libertem.api as lt`,\n        `import distributed as dd`,\n        `from libertem.executor.dask import DaskJobExecutor\\n`,\n        `client = dd.Client(\"URI\")`,\n        `executor = DaskJobExecutor(client)\\n`,\n        `ctx = lt.Context(executor=executor)`,\n    ];\n\n    const dispatch = useDispatch();\n\n    const connectionCode = template.join(\"\\n\");\n    const code = connectionCode.replace(\"URI\", address);\n    const copyToClipboard = () => writeClipboard(code, dispatch);\n\n    const [clustDetails, setDetails] = useState<HostDetails[]>([])\n\n    useEffect(() => {\n        getClusterDetail().then(newDetails => {\n            setDetails(newDetails.details)\n        }).catch((e) => {\n            const id = uuid();\n            const timestamp = Date.now();\n            dispatch(errorActions.Actions.generic(id, `Could not fetch cluster details: ${(e as Error).toString()}`, timestamp));\n        })\n    }, [])\n\n    return (\n        <Modal.Content>\n            <List>\n                <Header as=\"h4\" attached=\"top\">\n                    Connected to {address}\n                </Header>\n                <Segment.Group>{ClusterDetails(clustDetails)}</Segment.Group>\n                <List.Item>\n                    <List.Content>\n                        <Segment.Group>\n                            <Segment as=\"h5\">Connection code</Segment>\n                            <Segment>\n                                <Button floated={\"right\"} icon={\"copy\"} onClick={copyToClipboard} />\n                                <pre>\n                                    <code>\n                                        {code}\n                                    </code>\n                                </pre>\n                            </Segment>\n                        </Segment.Group>\n                    </List.Content>\n                </List.Item>\n            </List>\n        </Modal.Content>\n    );\n};\n\nexport default TCPStatus;\n","import * as React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Button, Modal, Popup } from \"semantic-ui-react\";\nimport { RootReducer } from \"../../store\";\nimport LocalStatus from \"./LocalStatus\";\nimport NotConnected from \"./NotConnected\";\nimport TCPStatus from \"./TCPStatus\";\n\nconst mapStateToProps = (state: RootReducer) => ({\n    clusterConnection: state.clusterConnection,\n    channelStatus: state.channelStatus.status,\n    type: state.config.lastConnection.type,\n    localcore: state.config.localCores,\n    cudas: state.config.lastConnection.cudas,\n    address: state.config.lastConnection.address,\n})\n\ntype MergedProps = ReturnType<typeof mapStateToProps>;\n\nconst ClusterStatus: React.FC<MergedProps> = ({ clusterConnection, channelStatus, type, localcore, cudas, address }) => {\n    enum ColorType  {\n        blue= \"blue\",\n        grey= \"grey\"\n    }\n\n    const [color , setColor] = useState<ColorType>(ColorType.grey)\n    const [status, setStatus] =  useState(clusterConnection.status)\n    const [disable, setDisable] = useState(true)\n\n    useEffect(()=>{\n        if (channelStatus === \"connected\"|| channelStatus === \"ready\"){\n            setStatus(clusterConnection.status)\n            setDisable(false)\n            if (clusterConnection.status === \"connected\"){\n                setColor(ColorType.blue)\n            }else{\n                setColor(ColorType.grey)\n            }\n        }else{\n            setDisable(true)\n            setStatus(\"unknown\")\n            setColor(ColorType.grey)\n        }\n\n    }, [clusterConnection, channelStatus, ColorType])\n\n\n    const clusterDetails = () => {\n        if (clusterConnection.status === \"connected\") {\n            if (type === \"LOCAL\") {\n                return <LocalStatus cudas={cudas} localCore={localcore} />;\n            } else {\n                return <TCPStatus address={address} />;\n            }\n        } else {\n            return <NotConnected />;\n        }\n    };\n\n    return (\n        <Modal\n            trigger={\n                <Button\n                    color= {color}\n                    content=\"Cluster info\"\n                    icon=\"plug\"\n                    labelPosition=\"left\"\n                    disabled={disable}\n                    label={{ as: \"a\", basic: true, content: status }} /> }\n            size=\"small\" >\n            <Popup.Header>Connection Info</Popup.Header>\n            <Popup.Content>{clusterDetails()}</Popup.Content>\n        </Modal>\n    );\n};\n\nexport default connect(mapStateToProps)(ClusterStatus);\n","import { genericDelete } from \"../helpers/apiHelpers\";\nimport { ShutdownResponse } from '../messages'\n\nexport const doShutdown = async (): Promise<ShutdownResponse> => (\n    await genericDelete<ShutdownResponse>(`shutdown/`)\n);","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Button, Header, Icon, Modal } from \"semantic-ui-react\";\nimport * as channelActions from \"../../channel/actions\";\nimport { DispatchProps } from \"../../helpers/props\";\nimport { RootReducer } from \"../../store\";\nimport { doShutdown } from \"../api\";\n\nconst mapDispatchToProps = {\n    closeLoopAction: channelActions.Actions.closeloop,\n    shutdownAction: channelActions.Actions.shutdown,\n};\n\nconst mapStateToProps = (state: RootReducer) => ({\n    channel: state.channelStatus.status,\n})\n\ntype MergedProps = DispatchProps<typeof mapDispatchToProps> & ReturnType<typeof mapStateToProps>;\n\nclass ShutdownButton extends React.Component<MergedProps> {\n    public state = {\n        modal: false,\n        shutdown: false,\n    };\n\n    public modalOpen = () => {\n        this.setState({ modal: true });\n    };\n\n    public modalClose = () => {\n        this.setState({ modal: false });\n    };\n\n    public handleShutdown = () => {\n        this.setState({ shutdown: true });\n        void doShutdown().then(() => {\n            const timestamp = Date.now();\n            this.props.closeLoopAction(timestamp);\n        });\n    };\n\n    public componentDidUpdate() {\n        if (this.props.channel === \"waiting\" && this.state.shutdown) {\n            const timestamp = Date.now();\n            this.modalClose();\n            this.props.shutdownAction(timestamp);\n        }\n    }\n\n    public render() {\n        return (\n            <Modal\n                trigger={\n                    <Button\n                        content=\"Shutdown\"\n                        icon=\"shutdown\"\n                        onClick={this.modalOpen}\n                        disabled={this.state.shutdown}\n                        labelPosition=\"left\"\n                        floated=\"right\"\n                    />\n                }\n                open={this.state.modal}\n                closeOnDimmerClick={false}\n                onClose={this.modalClose}\n                size=\"mini\"\n            >\n                <Header icon=\"shutdown\" content=\"Confirm shutdown\" />\n                <Modal.Content>\n                    <p>Do you want to shutdown ?</p>\n                </Modal.Content>\n                <Modal.Actions>\n                    <Button onClick={this.modalClose} disabled={this.state.shutdown}>\n                        <Icon name=\"remove\" /> Cancel\n                    </Button>\n                    <Button primary loading={this.state.shutdown} disabled={this.state.shutdown} onClick={this.handleShutdown}>\n                        <Icon name=\"checkmark\" /> Shutdown\n                    </Button>\n                </Modal.Actions>\n            </Modal>\n        );\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ShutdownButton);\n","import React from \"react\";\nimport { Button, Menu, Modal, Popup } from \"semantic-ui-react\";\nimport About from \"./About\";\nimport ClusterStatus from \"./clusterStatus/components/Cluster\"\nimport QuitButton from \"./shutdown/components/ShutdownButton\";\n\nconst HeaderMenu: React.FC = () => (\n\n    <Menu fixed=\"top\">\n        <Menu.Item>\n            <Modal trigger={<Button content=\"About\" />}>\n                <Popup.Header>About LiberTEM</Popup.Header>\n                <Popup.Content>\n                    <About />\n                </Popup.Content>\n            </Modal>\n        </Menu.Item>\n        <Menu.Menu position=\"right\">\n            <Menu.Item>\n                <ClusterStatus />\n            </Menu.Item>\n            <Menu.Item>\n                <QuitButton />\n            </Menu.Item>\n        </Menu.Menu>\n    </Menu>\n);\n\nexport default HeaderMenu;\n","import \"semantic-ui-css/semantic.min.css\";\nimport { Container } from \"semantic-ui-react\";\nimport ChannelStatus from \"./channel/components/ChannelStatus\";\nimport DatasetList from \"./dataset/components/DatasetList\";\nimport ErrorList from \"./errors/components/ErrorList\";\nimport logo from \"./images/LiberTEM logo-medium.png\";\nimport HeaderMenu from \"./Menu\";\n\nconst App : React.FC = () => (\n    <>\n        <HeaderMenu />\n        <Container style={{ margin: \"5em 1em 5em 1em\" }}>\n            <div style={{ display: \"flex\" }}>\n                <img src={logo} width=\"200\" height=\"46\" alt=\"LiberTEM\" style={{ marginBottom: \"20px\" }} />\n            </div>\n            <ErrorList />\n            <ChannelStatus>\n                <DatasetList />\n            </ChannelStatus>\n        </Container>\n    </>\n);\n\nexport default App;\n","/* eslint-disable */\n// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the 'N+1' visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL!,\n      window.location.toString()\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker) {\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the old content will have been purged and\n                // the fresh content will have been added to the cache.\n                // It's the perfect time to display a 'New content is\n                // available; please refresh.' message in your web app.\n                console.log('New content is available; please refresh.');\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // 'Content is cached for offline use.' message.\n                console.log('Content is cached for offline use.');\n              }\n            }\n          };\n        }\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type')!.indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import _ from 'lodash';\nimport { ClusterTypes, MsgPartConfig } from \"../messages\";\nimport { ConfigParams, ConfigState, LocalConfig } from \"./reducers\";\n\nconst CONFIG_KEY = \"LiberTEM.config\";\n\nexport const joinPaths = (config: ConfigState, ...parts: string[]): string => {\n    const removeSep = (part: string) => part.replace(new RegExp(`${_.escapeRegExp(config.separator)}$`), \"\")\n    parts = [removeSep(parts[0]), ...parts.slice(1)];\n    return parts.map(part => part.trim()).join(config.separator);\n}\n\nexport const mergeLocalStorage = (serverConfig: MsgPartConfig): ConfigParams => {\n    const localSettings = window.localStorage.getItem(CONFIG_KEY);\n    if (localSettings === null) {\n        return Object.assign({}, getDefaultLocalConfig(), serverConfig);\n    }\n    const localSettingsParsed = JSON.parse(localSettings) as LocalConfig;\n    const defaultConfig = getDefaultLocalConfig();\n    const mergedConfig = Object.assign({}, defaultConfig, serverConfig, localSettingsParsed);\n    return mergedConfig;\n}\n\nexport const setLocalStorage = (config: ConfigState): void => {\n    const localSettings: LocalConfig = {\n        cwd: config.cwd,\n        lastOpened: config.lastOpened,\n        fileHistory: config.fileHistory,\n        lastConnection: config.lastConnection,\n        starred: config.starred,\n    }\n\n    window.localStorage.setItem(CONFIG_KEY, JSON.stringify(localSettings));\n}\n\nexport const clearLocalStorage = (): void => {\n    window.localStorage.removeItem(CONFIG_KEY);\n}\n\nexport const getDefaultLocalConfig = (): LocalConfig => ({\n    lastOpened: {},\n    fileHistory: [],\n    cwd: \"/\",\n    lastConnection: {\n        type: ClusterTypes.LOCAL,\n        address: \"tcp://localhost:8786\",\n        cudas: [],\n    },\n    starred: [],\n});\n\nexport const makeUnique = <T>(inp: T[]): T[] => inp.reduce((acc: T[], curr: T) => {\n    if (acc.indexOf(curr) === -1) {\n        return [...acc, curr];\n    } else {\n        return acc;\n    }\n}, [] as T[])","import { getApiBasePath } from \"../helpers/apiHelpers\";\nimport { DirectoryListingResponse } from \"../messages\";\n\nexport const getDirectoryListing = async (path: string): Promise<DirectoryListingResponse> => {\n    const basePath = getApiBasePath();\n    const url = `${basePath}browse/localfs/?path=${encodeURIComponent(path)}`;\n    const r = await fetch(url, {\n        method: 'GET',\n        credentials: \"same-origin\",\n    });\n    return await (r.json() as Promise<DirectoryListingResponse>);\n}","import { call, fork, put, select, take } from \"redux-saga/effects\";\nimport { v4 as uuid } from 'uuid';\nimport { joinPaths } from \"../config/helpers\";\nimport { ConfigState } from \"../config/reducers\";\nimport { DirectoryListingResponse } from \"../messages\";\nimport { RootReducer } from \"../store\";\nimport * as browserActions from './actions';\nimport { getDirectoryListing } from \"./api\";\nimport { DirectoryBrowserState } from \"./types\";\n\nexport function* directoryListingSaga() {\n    yield fork(fetchOnRequest);\n    yield fork(fetchDirectoryListOnOpen);\n}\n\nfunction* fetchOnRequest() {\n    while (true) {\n        const action = (yield take(browserActions.ActionTypes.LIST_DIRECTORY)) as ReturnType<typeof browserActions.Actions.list>;\n\n        const { name, path } = action.payload;\n        const config = (yield select((state: RootReducer) => state.config)) as ConfigState;\n        const newPath = name !== undefined ? joinPaths(config, path, name) : path;\n        yield fork(fetchDirectoryListing, newPath);\n    }\n}\n\nfunction* fetchDirectoryListing(path: string) {\n    try {\n        const result = (yield call(getDirectoryListing, path)) as DirectoryListingResponse;\n        if (result.status === \"ok\") {\n            yield put(browserActions.Actions.dirListing(result.path, result.dirs, result.files, result.drives, result.places));\n        } else if (result.status === \"error\") {\n            const browserState = (yield select((state: RootReducer) => state.browser)) as DirectoryBrowserState;\n            const timestamp = Date.now();\n            const id = uuid();\n            const alternative = result.alternative ? result.alternative : browserState.places.home.path;\n            // Don't show an error, if it's due to last recent directory not being available\n            const config = (yield select((state: RootReducer) => state.config)) as ConfigState;\n            if (config.cwd !== path) {\n              yield put(browserActions.Actions.error(`Error browsing directory: ${result.msg}`, timestamp, id));\n            }\n            yield put(browserActions.Actions.list(alternative));\n        }\n    } catch (e) {\n        const browserState = (yield select((state: RootReducer) => state.browser)) as DirectoryBrowserState;\n        const timestamp = Date.now();\n        const id = uuid();\n        yield put(browserActions.Actions.error(`Error browsing directory: ${(e as Error).toString()}`, timestamp, id));\n        yield put(browserActions.Actions.list(browserState.places.home.path));\n    }\n}\n\nfunction* fetchDirectoryListOnOpen() {\n    while (true) {\n        yield take(browserActions.ActionTypes.OPEN);\n        const config = (yield select((state: RootReducer) => state.config)) as ConfigState;\n        yield put(browserActions.Actions.list(config.cwd));\n    }\n}\n","import { ActionCreatorsMapObject } from \"redux\";\nimport { AnalysisDetails, CompoundAnalysisDetails, CreateDatasetMessage, FollowupPart, MsgPartAnalysis, MsgPartCompoundAnalysis, MsgPartInitialDataset, MsgPartJob } from \"../messages\";\n\nexport interface Message<T extends string> {\n    messageType: T\n}\n\nexport const createMessage = <T extends string, O>(messageType: T, attribs: O) => Object.assign({ messageType }, attribs);\n\nexport enum MessageTypes {\n    INITIAL_STATE = \"INITIAL_STATE\",\n    JOB_STARTED = \"JOB_STARTED\",\n    FINISH_JOB = \"FINISH_JOB\",\n    TASK_RESULT = \"TASK_RESULT\",\n    JOB_ERROR = \"JOB_ERROR\",\n    BINARY = \"BINARY\",\n    OPEN = \"OPEN\",\n    CLOSE = \"CLOSE\",\n    ERROR = \"ERROR\",\n    DELETE_DATASET = \"DELETE_DATASET\",\n    CREATE_DATASET = \"CREATE_DATASET\",\n    CANCEL_JOB_DONE = \"CANCEL_JOB_DONE\",\n    CANCEL_JOB_FAILED = \"CANCEL_JOB_FAILED\",\n    ANALYSIS_CREATED = \"ANALYSIS_CREATED\",\n    ANALYSIS_UPDATED = \"ANALYSIS_UPDATED\",\n    ANALYSIS_REMOVED = \"ANALYSIS_REMOVED\",\n    COMPOUND_ANALYSIS_CREATED = \"COMPOUND_ANALYSIS_CREATED\",\n    COMPOUND_ANALYSIS_UPDATED = \"COMPOUND_ANALYSIS_UPDATED\",\n    COMPOUND_ANALYSIS_REMOVED = \"COMPOUND_ANALYSIS_REMOVED\",\n}\n\nexport const Messages = {\n    initialState: (\n        jobs: MsgPartJob[],\n        datasets: MsgPartInitialDataset[],\n        analyses: MsgPartAnalysis[],\n        compoundAnalyses: MsgPartCompoundAnalysis[]\n    ) => createMessage(MessageTypes.INITIAL_STATE, {\n        jobs, datasets, compoundAnalyses, analyses,\n    }),\n\n    startJob: (job: string) => createMessage(MessageTypes.JOB_STARTED, { job }),\n    finishJob: (job: string, followup: FollowupPart) => createMessage(MessageTypes.FINISH_JOB, { job, followup }),\n    taskResult: (job: string, followup: FollowupPart) => createMessage(MessageTypes.TASK_RESULT, { job, followup }),\n    jobError: (job: string, msg: string) => createMessage(MessageTypes.JOB_ERROR, { job, msg }),\n    binary: (objectURL: string) => createMessage(MessageTypes.BINARY, { objectURL }),\n    open: () => createMessage(MessageTypes.OPEN, {}),\n    close: () => createMessage(MessageTypes.CLOSE, {}),\n    error: (msg: string) => createMessage(MessageTypes.ERROR, { msg }),\n    deleteDataset: (dataset: string) => createMessage(MessageTypes.DELETE_DATASET, { dataset }),\n    createDataset: (dataset: string, details: CreateDatasetMessage) => createMessage(MessageTypes.CREATE_DATASET, { dataset, details }),\n    cancelled: (job: string) => createMessage(MessageTypes.CANCEL_JOB_DONE, { job }),\n    cancelFailed: (job: string) => createMessage(MessageTypes.CANCEL_JOB_FAILED, { job }),\n    analysisCreated: (analysis: string, dataset: string, details: AnalysisDetails) => createMessage(MessageTypes.ANALYSIS_CREATED, { dataset, analysis, details }),\n    analysisUpdated: (analysis: string, dataset: string, details: AnalysisDetails) => createMessage(MessageTypes.ANALYSIS_UPDATED, { dataset, analysis, details }),\n    analysisRemoved: (analysis: string) => createMessage(MessageTypes.ANALYSIS_REMOVED, { analysis }),\n\n    compoundAnalysisCreated: (compoundAnalysis: string, dataset: string, details: CompoundAnalysisDetails) => createMessage(MessageTypes.COMPOUND_ANALYSIS_CREATED, { dataset, compoundAnalysis, details }),\n    compoundAnalysisUpdated: (compoundAnalysis: string, dataset: string, details: CompoundAnalysisDetails) => createMessage(MessageTypes.COMPOUND_ANALYSIS_UPDATED, { dataset, compoundAnalysis, details }),\n    compoundAnalysisRemoved: (compoundAnalysis: string) => createMessage(MessageTypes.ANALYSIS_REMOVED, { compoundAnalysis }),\n}\n\nexport type MessagesUnion<A extends ActionCreatorsMapObject> = ReturnType<A[keyof A]>\nexport type Messages = MessagesUnion<typeof Messages>;\n\n// types of messages sent by the server:\n/*\nexport type InitialStateMessage = ReturnType<typeof Messages.initialState>;\nexport type StartJobMessage = ReturnType<typeof Messages.startJob>;\nexport type FinishJobMessage = ReturnType<typeof Messages.finishJob>;\nexport type TaskResultMessage = ReturnType<typeof Messages.taskResult>;\n*/\n\nexport type BinaryMessage = ReturnType<typeof Messages.binary>;","import { END, eventChannel, EventChannel } from \"redux-saga\";\nimport { call, delay, fork, put, take } from \"redux-saga/effects\";\nimport { v4 as uuid } from 'uuid';\nimport * as datasetActions from \"../dataset/actions\";\nimport { getApiWSURL } from \"../helpers/apiHelpers\";\nimport * as channelActions from \"./actions\";\nimport * as channelMessages from \"./messages\";\n\ntype SocketChannel = EventChannel<channelMessages.Messages>;\n\n/**\n * create typesafe messages from the websocket messages\n *\n * also creates some synthetic events like open, close, error\n */\nconst createWebSocketChannel = (/* addr */): SocketChannel => eventChannel((emit) => {\n    const onMessage = (msg: MessageEvent) => {\n        if (msg.data instanceof Blob) {\n            // TODO: cleanup createObjectURL results somewhere\n            emit(channelMessages.Messages.binary(URL.createObjectURL(msg.data)));\n        } else {\n            const parsed = JSON.parse(msg.data) as channelMessages.Messages;\n            emit(parsed);\n        }\n    }\n\n    const onOpen = () => {\n        emit(channelMessages.Messages.open());\n    }\n\n    const onClose = () => {\n        emit(channelMessages.Messages.close());\n        emit(END);\n    }\n\n    const onError = () => {\n        emit(channelMessages.Messages.error(\"Error in weboscket connection\"));\n    }\n\n    const ws = new WebSocket(getApiWSURL());\n    ws.addEventListener(\"message\", onMessage);\n    ws.addEventListener(\"open\", onOpen);\n    ws.addEventListener(\"close\", onClose);\n    ws.addEventListener(\"error\", onError);\n\n    // return cleanup function:\n    return () => {\n        ws.removeEventListener(\"message\", onMessage);\n        ws.removeEventListener(\"open\", onOpen);\n        ws.removeEventListener(\"close\", onClose);\n        ws.removeEventListener(\"error\", onError);\n        // TODO: close connection if still open\n        // (or is it guaranteed that if an error was thrown, the connection is closed?)\n    };\n})\n\n/**\n * handles the connection lifecycle for our websocket\n */\nexport function* webSocketSaga() {\n    while (true) {\n        const socketChannel = (yield call(createWebSocketChannel)) as SocketChannel;\n        yield fork(actionsFromChannel, socketChannel);\n        const action = (yield take([channelActions.ActionTypes.OPEN, channelActions.ActionTypes.CLOSE])) as channelActions.Actions;\n        if (action.type === channelActions.ActionTypes.OPEN) {\n            const isShutdown = (yield take([\n                channelActions.ActionTypes.CLOSE,\n                channelActions.ActionTypes.ERROR,\n                channelActions.ActionTypes.CLOSE_LOOP,\n            ])) as channelActions.Actions;\n            if (isShutdown.type === channelActions.ActionTypes.CLOSE_LOOP) {\n                break;\n            }\n        }\n        yield delay(1000);\n    }\n}\n\n/**\n * translates the messages from the channel to redux actions, handles aggregation etc.\n */\nexport function* actionsFromChannel(socketChannel: SocketChannel) {\n    try {\n        while (true) {\n            const msg = (yield take(socketChannel)) as channelMessages.Messages;\n            const timestamp = Date.now();\n            switch (msg.messageType) {\n                case channelMessages.MessageTypes.OPEN: {\n                    yield put(channelActions.Actions.open(timestamp));\n                    break;\n                }\n                case channelMessages.MessageTypes.CLOSE: {\n                    yield put(channelActions.Actions.close(timestamp));\n                    break;\n                }\n                case channelMessages.MessageTypes.ERROR: {\n                    const id = uuid();\n                    yield put(channelActions.Actions.error(msg.msg, timestamp, id));\n                    break;\n                }\n                case channelMessages.MessageTypes.INITIAL_STATE: {\n                    yield put(channelActions.Actions.initialState(msg.jobs, msg.datasets, msg.compoundAnalyses, msg.analyses, timestamp));\n                    break;\n                }\n                case channelMessages.MessageTypes.JOB_STARTED: {\n                    yield put(channelActions.Actions.jobStarted(msg.job, timestamp));\n                    break;\n                }\n                case channelMessages.MessageTypes.FINISH_JOB: {\n                    yield call(handleFinishJob, msg, socketChannel, timestamp);\n                    break;\n                }\n                case channelMessages.MessageTypes.TASK_RESULT: {\n                    yield call(handleTaskResult, msg, socketChannel, timestamp);\n                    break;\n                }\n                case channelMessages.MessageTypes.CREATE_DATASET: {\n                    yield put(datasetActions.Actions.created(msg.details));\n                    break;\n                }\n                case channelMessages.MessageTypes.DELETE_DATASET: {\n                    yield put(datasetActions.Actions.deleted(msg.dataset));\n                    break;\n                }\n                case channelMessages.MessageTypes.JOB_ERROR: {\n                    const id = uuid();\n                    yield put(channelActions.Actions.jobError(msg.job, msg.msg, id, timestamp));\n                    break;\n                }\n                case channelMessages.MessageTypes.CANCEL_JOB_DONE: {\n                    yield put(channelActions.Actions.cancelled(msg.job));\n                    break;\n                }\n                case channelMessages.MessageTypes.CANCEL_JOB_FAILED: {\n                    yield put(channelActions.Actions.cancelFailed(msg.job));\n                }\n                /*\n                // FIXME: server needs to know about compount analyses\n                case channelMessages.MessageTypes.ANALYSIS_CREATED: {\n                    yield put(channelActions.Actions.analysisCreated(\n                        msg.analysis,\n                        msg.dataset,\n                        msg.details,\n                    ));\n                    break;\n                }\n                case channelMessages.MessageTypes.ANALYSIS_UPDATED: {\n                    yield put(channelActions.Actions.analysisUpdated(\n                        msg.analysis,\n                        msg.dataset,\n                        msg.details,\n                    ));\n                    break;\n                }\n                case channelMessages.MessageTypes.ANALYSIS_REMOVED: {\n                    yield put(channelActions.Actions.analysisRemoved(\n                        msg.analysis,\n                    ));\n                    break;\n                }\n                */\n            }\n        }\n    } finally {\n        // disconnected\n    }\n}\n\nexport function* handleBinaryParts(numParts: number, socketChannel: SocketChannel) {\n    const parts: channelMessages.BinaryMessage[] = [];\n    while (parts.length < numParts) {\n        const binMsg = (yield take(socketChannel)) as channelMessages.BinaryMessage;\n        parts.push(binMsg);\n    }\n    return parts;\n}\n\nexport function* handleTaskResult(msg: ReturnType<typeof channelMessages.Messages.taskResult>, socketChannel: SocketChannel, timestamp: number) {\n    const parts = (yield call(handleBinaryParts, msg.followup.numMessages, socketChannel)) as channelMessages.BinaryMessage[];\n    const images = parts.map((part, idx) => ({ imageURL: part.objectURL, description: msg.followup.descriptions[idx] }));\n    yield put(channelActions.Actions.taskResult(msg.job, images, timestamp));\n}\n\nexport function* handleFinishJob(msg: ReturnType<typeof channelMessages.Messages.finishJob>, socketChannel: SocketChannel, timestamp: number) {\n    const parts = (yield call(handleBinaryParts, msg.followup.numMessages, socketChannel)) as channelMessages.BinaryMessage[];\n    const images = parts.map((part, idx) => ({ imageURL: part.objectURL, description: msg.followup.descriptions[idx] }));\n    yield put(channelActions.Actions.finishJob(msg.job, images, timestamp));\n}\n","import { genericPut, getApiBasePath } from \"../helpers/apiHelpers\";\nimport { ConnectRequest, ConnectRequestParams, ConnectResponse } from \"../messages\";\n\nexport const connectToCluster = async (params: ConnectRequestParams): Promise<ConnectResponse> => {\n    const payload: ConnectRequest = {\n        connection: params\n    }\n    return await genericPut(\"config/connection/\", payload);\n}\n\nexport const checkClusterConnection = async (): Promise<ConnectResponse> => {\n    const basePath = getApiBasePath();\n    const r = await fetch(`${basePath}config/connection/`, {\n        method: 'GET',\n    });\n    return await (r.json() as Promise<ConnectResponse>);\n}\n","import { all, call, put, take, takeEvery } from \"redux-saga/effects\";\nimport { v4 as uuid } from 'uuid';\nimport * as channelActions from '../channel/actions';\nimport { ConnectResponse } from \"../messages\";\nimport * as clusterActions from './actions';\nimport { checkClusterConnection, connectToCluster } from \"./api\";\n\nfunction* connectSaga(action: ReturnType<typeof clusterActions.Actions.connect>) {\n    yield put(clusterActions.Actions.connecting())\n    const conn = (yield call(connectToCluster, action.payload.params)) as ConnectResponse;\n    yield call(putClusterStatus, conn);\n}\n\nfunction* putClusterStatus(conn: ConnectResponse) {\n    if (conn.status === \"ok\") {\n        yield put(clusterActions.Actions.connected(conn.connection.connection));\n    } else if (conn.status === \"error\") {\n        yield put(clusterActions.Actions.notConnected());\n        const timestamp = Date.now();\n        const id = uuid();\n        yield put(clusterActions.Actions.error(`error connecting to cluster: ${conn.msg}`,timestamp, id));\n    } else {\n        yield put(clusterActions.Actions.notConnected());\n    }\n}\n\n/**\n * when the channel is connected, check if cluster is connected and update status accordingly\n */\nfunction* trackClusterConnection() {\n    while (true) {\n        yield take(channelActions.ActionTypes.OPEN)\n        const conn = (yield call(checkClusterConnection)) as ConnectResponse;\n        yield call(putClusterStatus, conn);\n    }\n}\n\nexport function* clusterConnectionSaga() {\n    yield takeEvery(clusterActions.ActionTypes.CONNECT, connectSaga);\n    yield all([\n        trackClusterConnection(),\n    ])\n}","import { ActionsUnion, createAction } from \"../helpers/actionHelpers\";\nimport { AnalysisDetails, AnalysisTypes } from \"../messages\";\nimport { AnalysisState } from \"./types\";\n\n\nexport enum ActionTypes {\n    CREATE = 'ANALYSIS_CREATE',\n    CREATED = 'ANALYSIS_CREATED',\n    UPDATED = 'ANALYSIS_UPDATED',\n    REMOVE = 'ANALYSIS_REMOVE',\n    REMOVED = 'ANALYSIS_REMOVED',\n    ERROR = 'ANALYSIS_ERROR',\n}\n\nexport const Actions = {\n    create: (\n        dataset: string, analysisType: AnalysisTypes\n    ) => createAction(ActionTypes.CREATE, { dataset, analysisType }),\n\n    created: (\n        analysis: AnalysisState, compoundAnalysis: string, analysisIndex: number\n    ) => createAction(ActionTypes.CREATED, {\n        analysis, compoundAnalysis, analysisIndex\n    }),\n\n    updated: (\n        id: string, details: AnalysisDetails\n    ) => createAction(ActionTypes.UPDATED, { id, details }),\n\n    remove: (id: string) => createAction(ActionTypes.REMOVE, { id }),\n    removed: (id: string) => createAction(ActionTypes.REMOVED, { id }),\n    error: (\n        msg: string, timestamp: number, id: string\n    ) => createAction(ActionTypes.ERROR, { msg, timestamp, id }),\n}\n\nexport type Actions = ActionsUnion<typeof Actions>;\n\nexport type ActionParts = {\n    [K in keyof typeof Actions]: ReturnType<typeof Actions[K]>\n}\n","import { ActionsUnion, createAction } from \"../helpers/actionHelpers\";\n\nexport enum ActionTypes {\n    CREATE = 'JOB_CREATE',\n}\n\nexport const Actions = {\n    create: (id: string, analysis: string, timestamp: number) => createAction(ActionTypes.CREATE, { id, analysis, timestamp }),\n}\n\nexport type Actions = ActionsUnion<typeof Actions>;\n\nexport type ActionParts = {\n    [K in keyof typeof Actions]: ReturnType<typeof Actions[K]>\n}","import { genericDelete, genericPut } from \"../helpers/apiHelpers\";\nimport { CancelJobResponse, StartJobRequest, StartJobResponse } from \"../messages\";\n\nexport const startJob = async (jobId: string, analysis: string): Promise<StartJobResponse> => {\n    const payload: StartJobRequest = {\n        job: {\n            analysis,\n        }\n    }\n    return await genericPut<StartJobResponse, StartJobRequest>(`jobs/${jobId}/`, payload);\n}\n\nexport const cancelJob = async (jobId: string): Promise<CancelJobResponse> => (\n    await genericDelete<CancelJobResponse>(`jobs/${jobId}/`)\n)\n","import { buffers, TakeableChannel, Task } from 'redux-saga';\nimport { actionChannel, call, cancel, fork, put, select, take, takeEvery } from 'redux-saga/effects';\nimport { v4 as uuid } from 'uuid';\nimport * as analysisActions from '../analysis/actions';\nimport { AnalysisState } from '../analysis/types';\nimport * as channelActions from '../channel/actions';\nimport * as jobActions from '../job/actions';\nimport { cancelJob, startJob } from '../job/api';\nimport { JobState } from '../job/types';\nimport { AnalysisDetails, DatasetState, DatasetStatus } from '../messages';\nimport { RootReducer } from '../store';\nimport * as compoundAnalysisActions from './actions';\nimport { createOrUpdateAnalysis, createOrUpdateCompoundAnalysis, removeAnalysis, removeCompoundAnalysis } from \"./api\";\nimport { CompoundAnalysis, CompoundAnalysisState } from './types';\n\nconst selectDataset = (state: RootReducer, dataset: string) => state.datasets.byId[dataset]\nconst selectCompoundAnalysis = (state: RootReducer, id: string) => state.compoundAnalyses.byId[id]\nconst selectAnalysis = (state: RootReducer, id: string) => state.analyses.byId[id]\nconst selectJob = (state: RootReducer, id: string) => state.jobs.byId[id]\n\nexport function* cleanupOnRemove(compoundAnalysis: CompoundAnalysis, sidecarTask: Task) {\n    while (true) {\n        const removeAction = (yield take(compoundAnalysisActions.ActionTypes.REMOVE)) as ReturnType<typeof compoundAnalysisActions.Actions.remove>;\n        if (removeAction.payload.id === compoundAnalysis.compoundAnalysis) {\n            yield cancel(sidecarTask);\n        }\n    }\n}\n\nexport function* createCompoundAnalysisSaga(action: ReturnType<typeof compoundAnalysisActions.Actions.create>) {\n    try {\n        const datasetState = (yield select(selectDataset, action.payload.dataset)) as DatasetState;\n        if (datasetState.status !== DatasetStatus.OPEN) {\n            throw new Error(\"invalid dataset status\");\n        }\n        const compoundAnalysis: CompoundAnalysis = {\n            compoundAnalysis: uuid(),\n            dataset: action.payload.dataset,\n            details: {\n                mainType: action.payload.analysisType,\n                analyses: [],\n            }\n        }\n\n        yield call(\n            createOrUpdateCompoundAnalysis,\n            compoundAnalysis.compoundAnalysis,\n            compoundAnalysis.dataset,\n            compoundAnalysis.details,\n        );\n\n        const sidecarTask = (yield fork(analysisSidecar, compoundAnalysis.compoundAnalysis /* , { doAutoStart: true } */)) as Task;\n\n        yield put(compoundAnalysisActions.Actions.created(compoundAnalysis, true));\n        yield fork(cleanupOnRemove, compoundAnalysis, sidecarTask);\n    } catch (e) {\n        const timestamp = Date.now();\n        const id = uuid();\n        yield put(compoundAnalysisActions.Actions.error(`Error creating analysis: ${(e as Error).toString()}`, timestamp, id));\n    }\n}\n\nexport function* createFromServerState(action: ReturnType<typeof channelActions.Actions.initialState>) {\n    for (const msgPart of action.payload.compoundAnalyses) {\n        const compoundAnalysis = (yield select(selectCompoundAnalysis, msgPart.compoundAnalysis)) as CompoundAnalysisState;\n        const sidecarTask = (yield fork(analysisSidecar, compoundAnalysis.compoundAnalysis /* , { doAutoStart: false } */)) as Task;\n        yield fork(cleanupOnRemove, compoundAnalysis, sidecarTask);\n    }\n}\n\nexport function* cancelOldJob(analysis: AnalysisState, jobIndex: number) {\n    const jobId = analysis.jobs[jobIndex];\n    if (jobId === undefined) {\n        return;\n    } else {\n        const job = (yield select(selectJob, jobId)) as JobState;\n        if (job.running !== \"DONE\") {\n            yield call(cancelJob, jobId);\n        }\n    }\n}\n\nexport function* createOrUpdate(\n    compoundAnalysis: CompoundAnalysisState, analysisId: string | undefined,\n    analysisIndex: number, details: AnalysisDetails\n): Generator<unknown, string, any> {\n    if (analysisId) {\n        // update the analysis on the server:\n        yield call(createOrUpdateAnalysis,\n            compoundAnalysis.compoundAnalysis, analysisId,\n            compoundAnalysis.dataset, details\n        );\n        yield put(analysisActions.Actions.updated(analysisId, details));\n\n        const analysis = (yield select(selectAnalysis, analysisId)) as AnalysisState;\n        const jobs = analysis.jobs ? analysis.jobs : [];\n\n        for (const oldJobId of jobs) {\n            const job = (yield select(selectJob, oldJobId)) as JobState;\n            if (job && job.running !== \"DONE\") {\n                // wait until the job is cancelled:\n                yield call(cancelJob, oldJobId);\n            }\n        }\n        return analysisId;\n    } else {\n        // create the analysis on the server:\n        const newAnalysisId = uuid();\n        yield call(createOrUpdateAnalysis,\n            compoundAnalysis.compoundAnalysis, newAnalysisId,\n            compoundAnalysis.dataset, details\n        );\n        yield put(analysisActions.Actions.created({\n            id: newAnalysisId,\n            dataset: compoundAnalysis.dataset,\n            details,\n            jobs: [],\n        }, compoundAnalysis.compoundAnalysis, analysisIndex));\n\n        const updatedCompoundAnalysis = (yield select(selectCompoundAnalysis, compoundAnalysis.compoundAnalysis)) as CompoundAnalysisState;\n\n        yield call(\n            createOrUpdateCompoundAnalysis,\n            updatedCompoundAnalysis.compoundAnalysis,\n            updatedCompoundAnalysis.dataset,\n            updatedCompoundAnalysis.details,\n        );\n        return newAnalysisId;\n    }\n}\n\nexport function* analysisSidecar(compoundAnalysisId: string /* , options: { doAutoStart: boolean } */) {\n    // channel for incoming actions:\n    // all actions that arrive while we block in `call` will be buffered here.\n    // because the buffer is sliding of size 2, we only keep the latest two actions!\n    const runOrParamsChannel = (yield actionChannel(compoundAnalysisActions.ActionTypes.RUN, buffers.sliding(2))) as TakeableChannel<unknown>;\n\n    while (true) {\n        try {\n            const action = (yield take(runOrParamsChannel)) as compoundAnalysisActions.ActionParts[\"run\"];\n\n            // ignore actions meant for other analyses\n            if (action.payload.id !== compoundAnalysisId) {\n                continue;\n            }\n\n            // get the current state incl. configuration\n            const compoundAnalysis = (yield select(selectCompoundAnalysis, compoundAnalysisId)) as CompoundAnalysisState;\n            const { analysisIndex, details } = action.payload;\n\n            const existingAnalysisId = compoundAnalysis.details.analyses[analysisIndex];\n            const analysisId = (yield call(createOrUpdate, compoundAnalysis, existingAnalysisId, analysisIndex, details)) as string;\n\n            // prepare running the job:\n            const jobId = uuid();\n            yield put(jobActions.Actions.create(jobId, analysisId, Date.now()));\n\n            // FIXME: we have a race here, as the websocket msg FINISH_JOB may\n            // arrive before call(startJob, ...) returns. this causes the apply button\n            // to feel unresponsive (the action gets done, but only after we finish here...)\n            // best reproduced in \"Slow 3G\" network simulation mode in devtools\n\n            // wait until the job is started\n            yield call(startJob, jobId, analysisId);\n            yield put(compoundAnalysisActions.Actions.running(compoundAnalysis.compoundAnalysis, jobId, analysisIndex));\n            // tslint:disable-next-line:no-empty\n        } catch (e) {\n            const timestamp = Date.now();\n            const id = uuid();\n            yield put(compoundAnalysisActions.Actions.error(`Error running analysis: ${(e as Error).toString()}`, timestamp, id));\n        }\n    }\n}\n\nfunction* removeJobsForAnalysis(analysis: AnalysisState) {\n    for (const oldJobId of analysis.jobs) {\n        const job = (yield select(selectJob, oldJobId)) as JobState;\n        if (job && job.running !== \"DONE\") {\n            // wait until the job is cancelled:\n            yield call(cancelJob, oldJobId);\n        }\n    }\n}\n\nexport function* doRemoveAnalysisSaga(action: ReturnType<typeof compoundAnalysisActions.Actions.remove>) {\n    const compoundAnalysis = (yield select(selectCompoundAnalysis, action.payload.id)) as CompoundAnalysisState;\n    try {\n        for (const analysisId of compoundAnalysis.details.analyses) {\n            const analysis = (yield select(selectAnalysis, analysisId)) as AnalysisState;\n            yield call(removeJobsForAnalysis, analysis);\n            yield call(removeAnalysis, compoundAnalysis.compoundAnalysis, analysisId);\n            yield put(analysisActions.Actions.removed(analysisId));\n        }\n        yield call(removeCompoundAnalysis, action.payload.id);\n    } finally {\n        yield put(compoundAnalysisActions.Actions.removed(action.payload.id));\n    }\n}\n\nexport function* analysisRootSaga() {\n    yield takeEvery(compoundAnalysisActions.ActionTypes.CREATE, createCompoundAnalysisSaga);\n    yield takeEvery(compoundAnalysisActions.ActionTypes.REMOVE, doRemoveAnalysisSaga);\n    yield takeEvery(channelActions.ActionTypes.INITIAL_STATE, createFromServerState);\n}","import { getApiBasePath } from \"../helpers/apiHelpers\";\nimport { GetConfigResponse } from \"../messages\";\n\nexport const getConfig = async (): Promise<GetConfigResponse> => {\n    const basePath = getApiBasePath();\n    const r = await fetch(`${basePath}config/`, {\n        method: \"GET\",\n        credentials: \"same-origin\",\n    });\n    return await (r.json() as Promise<GetConfigResponse>);\n}","import { call, fork, put, select, take, takeEvery } from 'redux-saga/effects';\nimport { v4 as uuid } from 'uuid';\nimport * as browserActions from '../browser/actions';\nimport * as channelActions from '../channel/actions';\nimport * as clusterActions from '../cluster/actions';\nimport * as datasetActions from '../dataset/actions';\nimport { GetConfigResponse } from '../messages';\nimport { RootReducer } from '../store';\nimport * as configActions from './actions';\nimport { getConfig } from './api';\nimport { clearLocalStorage, getDefaultLocalConfig, mergeLocalStorage, setLocalStorage } from './helpers';\nimport { ConfigState } from './reducers';\n\nfunction* getConfigOnReconnect() {\n    yield takeEvery(channelActions.ActionTypes.OPEN, getConfigSaga);\n}\n\n/**\n * get config from server and try to merge in the localStorage config\n */\nfunction* getConfigSaga() {\n    yield put(configActions.Actions.fetch());\n    const configResponse = (yield call(getConfig)) as GetConfigResponse;\n    try {\n        const mergedConfig = mergeLocalStorage(configResponse.config);\n        yield put(configActions.Actions.fetched(mergedConfig));\n    } catch (e) {\n        try {\n            clearLocalStorage();\n            // eslint-disable-next-line @typescript-eslint/no-shadow\n        } catch (e) {\n            // ignore any errors clearing local storage...\n        }\n        const defaultConfig = Object.assign({}, configResponse.config, getDefaultLocalConfig());\n        yield put(configActions.Actions.fetched(defaultConfig));\n    }\n}\n\n/**\n * update localStorage config on opening files or using the file browser\n */\nfunction* updateLocalStorageConfig() {\n    while (true) {\n        yield take([\n            datasetActions.ActionTypes.CREATE,\n            browserActions.ActionTypes.DIRECTORY_LISTING,\n            clusterActions.ActionTypes.CONNECTED,\n            configActions.ActionTypes.TOGGLE_STAR,\n        ]);\n        const config = (yield select((state: RootReducer) => state.config)) as ConfigState;\n        setLocalStorage(config);\n    }\n}\n\nexport function* firstConfigFetch() {\n    try {\n        yield call(getConfigSaga);\n    } catch (e) {\n        const timestamp = Date.now();\n        const id = uuid();\n        yield put(configActions.Actions.fetchFailed(`failed to fetch config: ${(e as Error).toString()}`, timestamp, id));\n    }\n}\n\nexport function* configRootSaga() {\n    yield fork(firstConfigFetch);\n    yield fork(getConfigOnReconnect);\n    yield fork(updateLocalStorageConfig);\n}","import { call, put, select, takeEvery } from 'redux-saga/effects';\nimport { v4 as uuid } from 'uuid';\nimport * as browserActions from '../browser/actions';\nimport { joinPaths } from '../config/helpers';\nimport { ConfigState } from '../config/reducers';\nimport { DatasetFormInfo, DatasetFormParams, DetectDatasetResponse, OpenDatasetResponse } from '../messages';\nimport { RootReducer } from '../store';\nimport * as datasetActions from \"./actions\";\nimport { deleteDataset, detectDataset, openDataset } from './api';\nimport { isKnownDatasetType } from './helpers';\n\n\nexport function* createDatasetSaga(action: ReturnType<typeof datasetActions.Actions.create>) {\n    try {\n        const resp = (yield call(openDataset, action.payload.dataset.id, { dataset: action.payload.dataset })) as OpenDatasetResponse;\n        if (resp.status === \"ok\") {\n            yield put(datasetActions.Actions.created(resp.details));\n        } else if (resp.status === \"error\") {\n            const timestamp = Date.now();\n            const id = uuid();\n            yield put(datasetActions.Actions.error(resp.dataset, resp.msg, timestamp, id));\n        }\n    } catch (e) {\n        const timestamp = Date.now();\n        const id = uuid();\n        yield put(datasetActions.Actions.error(action.payload.dataset.id, `Error loading dataset: ${(e as Error).toString()}`, timestamp, id));\n    }\n}\n\nexport function* deleteDatasetSaga(action: ReturnType<typeof datasetActions.Actions.delete>) {\n    try {\n        yield call(deleteDataset, action.payload.dataset);\n    } catch (e) {\n        const timestamp = Date.now();\n        const id = uuid();\n        yield put(datasetActions.Actions.error(action.payload.dataset, `Error closing dataset: ${(e as Error).toString()}`, timestamp, id));\n    }\n}\n\ninterface DetectResults {\n    detectedParams?: DatasetFormParams,\n    shouldOpen: boolean,\n    detectedInfo?: DatasetFormInfo,\n}\n\nexport function* doDetectDataset(fullPath: string): Generator<unknown, DetectResults, unknown> {\n    yield put(datasetActions.Actions.detect(fullPath));\n    const detectResult = (yield call(detectDataset, fullPath)) as DetectDatasetResponse;\n    let detectedParams;\n    let detectedInfo;\n    let shouldOpen = true;\n    if (detectResult.status === \"ok\") {\n        if (isKnownDatasetType(detectResult.datasetParams.type)) {\n          detectedParams = detectResult.datasetParams;\n          detectedInfo = detectResult.datasetInfo;\n          yield put(datasetActions.Actions.detected(fullPath, detectedParams, detectedInfo));\n        }\n        else {\n          const timestamp = Date.now();\n          const id = uuid();\n          yield put(datasetActions.Actions.detectFailed(fullPath));\n          shouldOpen = false;\n          yield put(datasetActions.Actions.error(id, detectResult.datasetParams.type + ` dataset type is currently not supported in the GUI`, timestamp, id));\n        }\n    } else {\n        yield put(datasetActions.Actions.detectFailed(fullPath));\n    }\n    return {detectedParams, shouldOpen, detectedInfo};\n}\n\nexport function* doOpenDataset(fullPath: string) {\n    const config = (yield select((state: RootReducer) => state.config)) as ConfigState;\n    const cachedParams = config.lastOpened[fullPath];\n    try {\n        const { detectedParams, shouldOpen, detectedInfo } = (yield call(doDetectDataset, fullPath)) as DetectResults;\n        if (shouldOpen) {\n            yield put(datasetActions.Actions.open(fullPath, cachedParams, detectedParams, detectedInfo));\n        }\n    } catch (e) {\n        yield put(datasetActions.Actions.detectFailed(fullPath));\n    }\n}\n\nexport function* openDatasetSagaFullPath(action: ReturnType<typeof browserActions.Actions.selectFullPath>) {\n    const fullPath = action.payload.path;\n    yield call(doOpenDataset, fullPath);\n}\n\nexport function* openDatasetSaga(action: ReturnType<typeof browserActions.Actions.select>) {\n    const config = (yield select((state: RootReducer) => state.config)) as ConfigState;\n    const fullPath = joinPaths(config, action.payload.path, action.payload.name);\n    yield call(doOpenDataset, fullPath);\n}\n\nexport function* datasetRootSaga() {\n    yield takeEvery(datasetActions.ActionTypes.CREATE, createDatasetSaga);\n    yield takeEvery(datasetActions.ActionTypes.DELETE, deleteDatasetSaga);\n    yield takeEvery(browserActions.ActionTypes.SELECT, openDatasetSaga);\n    yield takeEvery(browserActions.ActionTypes.SELECT_FULL_PATH, openDatasetSagaFullPath);\n}\n","import { all } from 'redux-saga/effects';\nimport { directoryListingSaga } from './browser/sagas';\nimport { webSocketSaga } from './channel/sagas';\nimport { clusterConnectionSaga } from './cluster/sagas';\nimport { analysisRootSaga } from './compoundAnalysis/sagas';\nimport { configRootSaga } from './config/sagas';\nimport { datasetRootSaga } from './dataset/sagas';\n\nexport function* rootSaga() {\n    yield all([\n        configRootSaga(),\n        webSocketSaga(),\n        analysisRootSaga(),\n        datasetRootSaga(),\n        clusterConnectionSaga(),\n        directoryListingSaga(),\n    ]);\n}","import { AllActions } from \"../actions\";\nimport * as channelActions from '../channel/actions';\nimport { ById, constructById, filterWithPred, insertById, updateById, updateWithMap } from \"../helpers/reducerHelpers\";\nimport * as jobActions from '../job/actions';\nimport * as analysisActions from \"./actions\";\nimport { AnalysisState } from \"./types\";\n\n\nexport type AnalysisReducerState = ById<AnalysisState>;\n\nconst initialAnalysisState: AnalysisReducerState = {\n    byId: {},\n    ids: [],\n}\n\nexport const analysisReducer = (state = initialAnalysisState, action: AllActions): AnalysisReducerState => {\n    switch (action.type) {\n        case analysisActions.ActionTypes.CREATED: {\n            return insertById(state, action.payload.analysis.id, action.payload.analysis);\n        }\n        case analysisActions.ActionTypes.REMOVED: {\n            return filterWithPred(state, (r: AnalysisState) => r.id !== action.payload.id);\n        }\n        case analysisActions.ActionTypes.UPDATED: {\n            return updateById(state, action.payload.id, {\n                details: action.payload.details,\n            });\n        }\n        case jobActions.ActionTypes.CREATE: {\n            const analysis = state.byId[action.payload.analysis];\n            const oldJobs = analysis.jobs ? analysis.jobs : [];\n            return updateById(state, action.payload.analysis, {\n                jobs: [action.payload.id, ...oldJobs],\n            })\n        }\n        case channelActions.ActionTypes.CANCEL_JOB_FAILED:\n        case channelActions.ActionTypes.CANCELLED: {\n            // remove job from the matching analysis\n            return updateWithMap(state, (analysis) => ({\n                ...analysis,\n                jobs: analysis.jobs.filter((job) => job !== action.payload.job),\n            }));\n        }\n        case channelActions.ActionTypes.INITIAL_STATE: {\n            const analysisState: AnalysisState[] = action.payload.analyses.map(item => ({\n                doAutoStart: false,\n                id: item.analysis,\n                dataset: item.dataset,\n                details: item.details,\n                // FIXME: add jobs!\n                jobs: item.jobs,\n            }));\n            return {\n                byId: constructById(analysisState, analysis => analysis.id),\n                ids: action.payload.analyses.map(analysis => analysis.analysis),\n            }\n        }\n        case channelActions.ActionTypes.FINISH_JOB:\n        case channelActions.ActionTypes.TASK_RESULT: {\n            const analysisIdForJob = state.ids.find(id => {\n                const analysis = state.byId[id];\n                const jobs = analysis.jobs ? analysis.jobs : [];\n                return jobs.some(job => job === action.payload.job)\n            });\n            if (!analysisIdForJob) {\n                return state;\n            }\n            return updateById(state, analysisIdForJob, {\n                displayedJob: action.payload.job,\n            });\n        }\n    }\n    return state;\n}\n","import { AllActions } from \"../actions\";\nimport * as channelActions from './actions';\n\nexport interface ChannelStatusReducer {\n    status: ChannelStatusCodes,\n}\n\nexport enum ChannelStatusCodes {\n    CONNECTING = \"connecting\",\n    CONNECTED = \"connected\",\n    READY = \"ready\",\n    WAITING = \"waiting\",\n    DISCONNECTED = \"disconnected\"\n}\n\nconst initialChannelState: ChannelStatusReducer = {\n    status: ChannelStatusCodes.WAITING,\n}\n\nexport const channelStatusReducer = (state = initialChannelState, action: AllActions): ChannelStatusReducer => {\n    switch (action.type) {\n        case channelActions.ActionTypes.OPEN: {\n            return { status: ChannelStatusCodes.CONNECTED };\n        }\n        case channelActions.ActionTypes.INITIAL_STATE: {\n            return { status: ChannelStatusCodes.READY };\n        }\n        case channelActions.ActionTypes.CLOSE: {\n            return { status: ChannelStatusCodes.WAITING };\n        }\n        case channelActions.ActionTypes.SHUTDOWN: {\n            return { status: ChannelStatusCodes.DISCONNECTED }\n        }\n    }\n    return state;\n}","import { AllActions } from \"../actions\";\nimport * as configActions from '../config/actions';\nimport { DirectoryListingDetails, FSPlace } from \"../messages\";\nimport * as browserActions from './actions';\nimport { DirectoryBrowserState } from \"./types\";\n\nconst initialBrowserState: DirectoryBrowserState = {\n    isOpen: false,\n    isLoading: true,\n    path: \"/\",\n    drives: [],\n    places: {},\n    files: [] as DirectoryListingDetails[],\n    dirs: [] as DirectoryListingDetails[],\n}\n\nexport const directoryBrowserReducer = (state: DirectoryBrowserState = initialBrowserState, action: AllActions): DirectoryBrowserState => {\n    switch (action.type) {\n        case configActions.ActionTypes.FETCHED: {\n            return Object.assign({}, state, {\n                path: action.payload.config.cwd,\n            })\n        }\n        case browserActions.ActionTypes.OPEN: {\n            return Object.assign({}, state, {\n                isOpen: true,\n            })\n        }\n        case browserActions.ActionTypes.CANCEL: {\n            return Object.assign({}, state, {\n                isOpen: false,\n            })\n        }\n        case browserActions.ActionTypes.LIST_DIRECTORY: {\n            return Object.assign({}, state, {\n                isLoading: true,\n            })\n        }\n        case browserActions.ActionTypes.DIRECTORY_LISTING: {\n            const places = action.payload.places.reduce((acc, place: FSPlace) => Object.assign({}, acc, {\n                [place.key]: place,\n            }), {});\n            return Object.assign({}, state, {\n                isLoading: false,\n                path: action.payload.path,\n                files: action.payload.files,\n                dirs: action.payload.dirs,\n                drives: action.payload.drives,\n                places,\n            })\n        }\n        case browserActions.ActionTypes.SELECT_FULL_PATH:\n        case browserActions.ActionTypes.SELECT: {\n            return Object.assign({}, state, {\n                isLoading: false,\n                isOpen: false,\n            });\n        }\n    }\n    return state;\n}","import { AllActions } from \"../actions\";\nimport { ConnectRequestParams } from \"../messages\";\nimport * as clusterActions from './actions';\n\nexport type ClusterConnectionState = {\n    status: \"connected\",\n    params: ConnectRequestParams\n} | {\n    status: \"disconnected\",\n} | {\n    status: \"unknown\"\n} | {\n    status: \"connecting\"\n}\n\nconst initialClusterConnectionState: ClusterConnectionState = {\n    status: \"unknown\"\n}\n\nexport const clusterConnectionReducer = (state: ClusterConnectionState = initialClusterConnectionState, action: AllActions): ClusterConnectionState => {\n    switch (action.type) {\n        case clusterActions.ActionTypes.NOT_CONNECTED: {\n            return {\n                status: \"disconnected\"\n            };\n        }\n        case clusterActions.ActionTypes.CONNECTED: {\n            return {\n                status: \"connected\",\n                params: action.payload.params,\n            }\n        }\n        case clusterActions.ActionTypes.CONNECTING: {\n            return {\n                status: \"connecting\"\n            }\n        }\n    }\n    return state;\n}","import { AllActions } from \"../actions\";\nimport * as analysisActions from \"../analysis/actions\";\nimport * as channelActions from '../channel/actions';\nimport * as datasetActions from \"../dataset/actions\";\nimport { ById, constructById, filterWithPred, insertById, updateById } from \"../helpers/reducerHelpers\";\nimport * as compoundAnalysisActions from \"./actions\";\nimport { CompoundAnalysisState } from \"./types\";\n\nexport type CompoundAnalysisReducerState = ById<CompoundAnalysisState>;\n\nconst initialCompoundAnalysisState: CompoundAnalysisReducerState = {\n    byId: {},\n    ids: [],\n}\n\nexport const compoundAnalysisReducer = (state = initialCompoundAnalysisState, action: AllActions): CompoundAnalysisReducerState => {\n    switch (action.type) {\n        case compoundAnalysisActions.ActionTypes.CREATED: {\n            const newCompoundAnalysis = {\n                doAutoStart: action.payload.autoStart,\n                ...action.payload.compoundAnalysis,\n            }\n            return insertById(state, action.payload.compoundAnalysis.compoundAnalysis, newCompoundAnalysis);\n        }\n        case compoundAnalysisActions.ActionTypes.REMOVED: {\n            return filterWithPred(state, (r: CompoundAnalysisState) => r.compoundAnalysis !== action.payload.id);\n        }\n        case compoundAnalysisActions.ActionTypes.ENABLE_AUTOSTART: {\n            return updateById(state, action.payload.compoundAnalysisId, {\n                doAutoStart: true,\n            })\n        }\n        case datasetActions.ActionTypes.DELETE: {\n            return filterWithPred(state, (r: CompoundAnalysisState) => r.dataset !== action.payload.dataset);\n        }\n        case analysisActions.ActionTypes.CREATED: {\n            const compoundAnalysis = state.byId[action.payload.compoundAnalysis];\n            const newAnalyses = [...compoundAnalysis.details.analyses];\n            newAnalyses[action.payload.analysisIndex] = action.payload.analysis.id;\n            return updateById(state, action.payload.compoundAnalysis, {\n                details: {\n                    analyses: newAnalyses,\n                    mainType: compoundAnalysis.details.mainType,\n                }\n            });\n        }\n        case channelActions.ActionTypes.INITIAL_STATE: {\n            const compoundAnalyses = action.payload.compoundAnalyses.map(ca => ({ doAutoStart: false, ...ca }));\n            return {\n                byId: constructById(compoundAnalyses, ca => ca.compoundAnalysis),\n                ids: compoundAnalyses.map(ca => ca.compoundAnalysis),\n            };\n        }\n    }\n    return state;\n}","import { AllActions } from \"../actions\";\nimport * as browserActions from '../browser/actions';\nimport * as clusterActions from '../cluster/actions';\nimport * as datasetActions from '../dataset/actions';\nimport { toggleItemInList } from \"../helpers/reducerHelpers\";\nimport { ClusterTypes, DatasetFormParams, MsgPartConfig } from \"../messages\";\nimport * as configActions from './actions';\nimport { makeUnique } from \"./helpers\";\n\nexport interface LocalConfig {\n    cwd: string,\n    fileHistory: string[],\n    lastOpened: {\n        [path: string]: DatasetFormParams\n    },\n    lastConnection: {\n        type: ClusterTypes,\n        address: string,\n        cudas: number[],\n    },\n    starred: string[],\n}\n\nexport type ConfigParams = MsgPartConfig & LocalConfig ;\nexport type ConfigState = ConfigParams & {\n    haveConfig: boolean,\n};\n\nexport const initialConfigState: ConfigState = {\n    version: \"\",\n    revision: \"\",\n    localCores: 0,\n    devices: {\n        cpus: [] as number[],\n        cudas: [] as number[],\n        has_cupy: false,\n    },\n    cwd: \"/\",\n    separator: \"/\",\n    lastOpened: {},\n    resultFileFormats: {},\n    fileHistory: [],\n    haveConfig: false,\n    lastConnection: {\n        type: ClusterTypes.LOCAL,\n        address: \"tcp://localhost:8786\",\n        cudas: [] as number[],\n    },\n    starred: [],\n}\n\nexport const configReducer = (state = initialConfigState, action: AllActions): ConfigState => {\n    switch (action.type) {\n        case configActions.ActionTypes.FETCHED: {\n            return Object.assign({}, action.payload.config, { haveConfig: true });\n        }\n        case browserActions.ActionTypes.DIRECTORY_LISTING: {\n            return Object.assign({}, state, {\n                cwd: action.payload.path,\n            });\n        }\n        case datasetActions.ActionTypes.CREATE: {\n            const newLastOpened = Object.assign({}, state.lastOpened, { [action.payload.dataset.params.path]: action.payload.dataset.params });\n            const newFileHistory = makeUnique([\n                action.payload.dataset.params.path, ...state.fileHistory\n            ]).slice(0, 11);\n            return Object.assign({}, state, {\n                lastOpened: newLastOpened,\n                fileHistory: newFileHistory,\n            });\n        }\n        case clusterActions.ActionTypes.CONNECT: {\n            if (action.payload.params.type === ClusterTypes.LOCAL) {\n                const newLastConnection = Object.assign({}, state.lastConnection, { type: ClusterTypes.LOCAL, cudas: action.payload.params.cudas })\n                return Object.assign({}, state, {\n                    lastConnection: newLastConnection\n                })\n            }\n            else {\n                const newLastConnection = Object.assign({}, state.lastConnection, { type: ClusterTypes.TCP, address: action.payload.params.address })\n                return Object.assign({}, state, {\n                    lastConnection: newLastConnection\n                })\n            }\n        }\n        case configActions.ActionTypes.TOGGLE_STAR: {\n            const path = action.payload.path;\n            return {\n                ...state,\n                starred: toggleItemInList(state.starred, path),\n            };\n        }\n    }\n    return state;\n}","import { AllActions } from \"../actions\";\nimport * as channelActions from '../channel/actions';\nimport { constructById, filterWithPred, insertById, updateById } from \"../helpers/reducerHelpers\";\nimport { Dataset, DatasetState, DatasetStatus } from \"../messages\";\nimport * as datasetActions from './actions';\nimport { DatasetsState, OpenDatasetState } from \"./types\";\n\nconst initialDatasetState: DatasetsState = {\n    byId: {},\n    ids: [],\n};\n\nexport const datasetReducer = (state = initialDatasetState, action: AllActions): DatasetsState => {\n    switch (action.type) {\n        case channelActions.ActionTypes.INITIAL_STATE: {\n            const datasets = action.payload.datasets.map(ds => Object.assign({}, ds, { status: DatasetStatus.OPEN }));\n            return {\n                byId: constructById(datasets, ds => ds.id),\n                ids: datasets.map(ds => ds.id),\n            }\n        }\n        case datasetActions.ActionTypes.CREATE: {\n            const ds: Dataset = {\n                ...action.payload.dataset,\n                status: DatasetStatus.OPENING\n            };\n            return insertById(state, action.payload.dataset.id, ds);\n        }\n        case datasetActions.ActionTypes.CREATED: {\n            const ds = Object.assign({}, action.payload.dataset, { status: DatasetStatus.OPEN });\n            if (state.byId[action.payload.dataset.id]) {\n                return updateById(state, action.payload.dataset.id, ds);\n            } else {\n                return insertById(state, action.payload.dataset.id, ds);\n            }\n        }\n        case datasetActions.ActionTypes.ERROR: {\n            return filterWithPred(state, (r: DatasetState) => r.id !== action.payload.dataset);\n        }\n        case datasetActions.ActionTypes.DELETE: {\n            return updateById(state, action.payload.dataset, { status: DatasetStatus.DELETING });\n        }\n        case datasetActions.ActionTypes.DELETED: {\n            return filterWithPred(state, (r: DatasetState) => r.id !== action.payload.dataset);\n        }\n    }\n    return state;\n}\n\nconst initialOpenDatasetState: OpenDatasetState = {\n    busy: false,\n    busyPath: \"\",\n    formVisible: false,\n    formPath: \"/\",\n    formCachedParams: undefined,\n    formDetectedParams: undefined,\n    formDetectedInfo: undefined,\n}\n\nexport const openDatasetReducer = (state = initialOpenDatasetState, action: AllActions): OpenDatasetState => {\n    switch (action.type) {\n        case datasetActions.ActionTypes.OPEN: {\n            return {\n                ...state,\n                formVisible: true,\n                formPath: action.payload.path,\n                formCachedParams: action.payload.cachedParams,\n                formDetectedParams: action.payload.detectedParams,\n                formDetectedInfo: action.payload.detectedInfo\n            };\n        }\n        case datasetActions.ActionTypes.CANCEL_OPEN: {\n            return {\n                ...state,\n                formVisible: false,\n            }\n        }\n        case datasetActions.ActionTypes.CREATE: {\n            return {\n                ...state,\n                formVisible: false,\n            }\n        }\n        case datasetActions.ActionTypes.DETECT: {\n            return {\n                ...state,\n                busyPath: action.payload.path,\n                busy: true,\n            }\n        }\n        case datasetActions.ActionTypes.DETECTED:\n        case datasetActions.ActionTypes.DETECT_FAILED: {\n            return {\n                ...state,\n                busyPath: \"\",\n                busy: false,\n            }\n        }\n    }\n    return state;\n}","import { AllActions } from \"../actions\";\nimport * as browserActions from '../browser/actions';\nimport * as channelActions from '../channel/actions';\nimport * as clusterActions from '../cluster/actions';\nimport * as analysisActions from '../compoundAnalysis/actions';\nimport * as datasetActions from '../dataset/actions';\nimport { ById, filterWithPred, insertById } from \"../helpers/reducerHelpers\";\nimport * as errorActions from './actions';\n\nexport interface ErrorMessage {\n    id: string,\n    msg: string,\n    timestamp: number,\n}\n\nexport type ErrorState = ById<ErrorMessage>;\n\nconst initialErrorState: ErrorState = {\n    byId: {},\n    ids: [],\n};\n\nexport const errorReducer = (state = initialErrorState, action: AllActions): ErrorState => {\n    switch (action.type) {\n        case browserActions.ActionTypes.ERROR:\n        case datasetActions.ActionTypes.ERROR:\n        case channelActions.ActionTypes.ERROR:\n        case clusterActions.ActionTypes.ERROR:\n        case analysisActions.ActionTypes.ERROR:\n        case errorActions.ActionTypes.GENERIC:\n        case channelActions.ActionTypes.JOB_ERROR: {\n            return insertById(state, action.payload.id, {\n                id: action.payload.id,\n                msg: action.payload.msg,\n                timestamp: action.payload.timestamp,\n            });\n        }\n        case channelActions.ActionTypes.OPEN: {\n            return initialErrorState;\n        }\n        case errorActions.ActionTypes.DISMISS: {\n            return filterWithPred(state, (r: ErrorMessage) => r.id !== action.payload.id);\n        }\n        case errorActions.ActionTypes.DISMISS_ALL: {\n            return initialErrorState;\n        }\n    }\n    return state;\n}","import { AllActions } from \"../actions\";\nimport * as channelActions from '../channel/actions';\nimport { ById, constructById, insertById, updateById } from \"../helpers/reducerHelpers\";\nimport * as jobActions from './actions';\nimport { JobRunning, JobState, JobStatus } from \"./types\";\n\nexport type JobReducerState = ById<JobState>;\n\nconst initialJobState: JobReducerState = {\n    byId: {},\n    ids: [],\n};\n\nexport const jobReducer = (state = initialJobState, action: AllActions): JobReducerState => {\n    switch (action.type) {\n        case jobActions.ActionTypes.CREATE: {\n            const createResult = insertById(\n                state,\n                action.payload.id,\n                {\n                    id: action.payload.id,\n                    analysis: action.payload.analysis,\n                    running: JobRunning.CREATING,\n                    status: JobStatus.CREATING,\n                    results: [],\n                    startTimestamp: action.payload.timestamp,\n                }\n            )\n            return createResult;\n        }\n        case channelActions.ActionTypes.JOB_STARTED: {\n            return updateById(\n                state,\n                action.payload.job,\n                {\n                    running: JobRunning.RUNNING,\n                    status: JobStatus.IN_PROGRESS,\n                    startTimestamp: action.payload.timestamp,\n                }\n            )\n        }\n        case channelActions.ActionTypes.TASK_RESULT: {\n            return updateById(\n                state,\n                action.payload.job,\n                {\n                    results: action.payload.results,\n                }\n            );\n        }\n        case channelActions.ActionTypes.FINISH_JOB: {\n            const { job, timestamp, results } = action.payload;\n            return updateById(\n                state,\n                job,\n                {\n                    running: JobRunning.DONE,\n                    status: JobStatus.SUCCESS,\n                    results,\n                    endTimestamp: timestamp,\n                }\n            );\n        }\n        case channelActions.ActionTypes.JOB_ERROR: {\n            const { job, timestamp } = action.payload;\n            return updateById(\n                state,\n                job,\n                {\n                    running: JobRunning.DONE,\n                    status: JobStatus.ERROR,\n                    endTimestamp: timestamp,\n                }\n            )\n        }\n        case channelActions.ActionTypes.INITIAL_STATE: {\n            const jobs = action.payload.jobs;\n            const jobState: JobState[] = jobs.map(job => ({\n                    id: job.id,\n                    analysis: job.analysis,\n                    // FIXME: right job status!\n                    status: JobStatus.SUCCESS,\n                    startTimestamp: 0,\n                    // FIXME: result blobs?\n                    results: [],\n                    // FIXME: right job running status!\n                    running: JobRunning.DONE,\n                    endTimestamp: 0,\n            }));\n\n            return {\n                byId: constructById(jobState, job => job.id),\n                ids: jobState.map(job => job.id),\n            };\n        }\n    }\n    return state;\n}","import { combineReducers } from \"redux\";\nimport { analysisReducer } from \"./analysis/reducers\";\nimport { directoryBrowserReducer } from './browser/reducers';\nimport { channelStatusReducer } from \"./channel/reducers\";\nimport { clusterConnectionReducer } from \"./cluster/reducers\";\nimport { compoundAnalysisReducer } from \"./compoundAnalysis/reducers\";\nimport { configReducer } from \"./config/reducers\";\nimport { datasetReducer, openDatasetReducer } from \"./dataset/reducers\";\nimport { errorReducer } from \"./errors/reducers\";\nimport { jobReducer } from \"./job/reducers\";\n\nexport const rootReducer = combineReducers({\n    compoundAnalyses: compoundAnalysisReducer,\n    analyses: analysisReducer,\n    channelStatus: channelStatusReducer,\n    clusterConnection: clusterConnectionReducer,\n    datasets: datasetReducer,\n    openDataset: openDatasetReducer,\n    jobs: jobReducer,\n    errors: errorReducer,\n    config: configReducer,\n    browser: directoryBrowserReducer,\n})\n\nexport type RootReducer = ReturnType<typeof rootReducer>;","/* eslint-disable no-underscore-dangle */\n// tslint:disable:ordered-imports\nimport \"core-js/fn/symbol/iterator.js\";\nimport \"core-js/es6/symbol.js\";\nimport 'react-app-polyfill/ie11';\n// tslint:enable:ordered-imports\n\nimport * as ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { applyMiddleware, compose, createStore } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\nimport { rootSaga } from './sagas';\nimport { rootReducer } from './store';\n\nconst sagaMiddleware = createSagaMiddleware();\n\ndeclare global {\n    interface Window { __REDUX_DEVTOOLS_EXTENSION_COMPOSE__: typeof compose }\n}\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(rootReducer, composeEnhancers(\n    applyMiddleware(\n        sagaMiddleware,\n    )\n));\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root') as HTMLElement\n);\nregisterServiceWorker();\n\nsagaMiddleware.run(rootSaga);"],"sourceRoot":""}