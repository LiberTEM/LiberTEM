{"version":3,"sources":["job/components/ResultImage.module.css","images/LiberTEM logo-medium.png","cluster/actions.ts","About.tsx","helpers/actionHelpers.ts","helpers/index.ts","messages.ts","browser/actions.ts","cluster/components/LocalConnectionForm.tsx","cluster/components/TCPConnectionForm.tsx","cluster/components/ClusterConnectionForm.tsx","channel/components/ChannelConnecting.tsx","channel/components/ChannelStatus.tsx","browser/components/FileBrowserEntry.tsx","browser/components/FileBrowserHeader.tsx","browser/components/FileEntry.tsx","browser/components/FolderEntry.tsx","browser/components/PathDropDownItem.tsx","browser/components/PathInput.tsx","browser/components/RecentFiles.tsx","browser/components/PathBar.tsx","browser/components/FileBrowser.tsx","job/types.ts","browser/components/BrowserWrapper.tsx","widgets/BusySpinner.tsx","widgets/BusyWrapper.tsx","widgets/HandleParent.tsx","job/components/ResultImage.tsx","job/components/Result.tsx","job/components/Selectors.tsx","job/components/ResultList.tsx","widgets/constraints.ts","widgets/styles.ts","widgets/Disk.tsx","widgets/DraggableHandle.tsx","compoundAnalysis/actions.ts","widgets/kbdHandler.ts","compoundAnalysis/components/DefaultFrameView.tsx","compoundAnalysis/components/FramePicker.tsx","compoundAnalysis/components/ModeSelector.tsx","widgets/Rect.tsx","compoundAnalysis/components/roi/RectROI.tsx","compoundAnalysis/components/roi/RoiPicker.tsx","compoundAnalysis/components/roi/DiskROI.tsx","compoundAnalysis/components/layouts/AnalysisLayoutTwoCol.tsx","helpers/apiHelpers.ts","compoundAnalysis/getMetadata.tsx","compoundAnalysis/components/Download.tsx","compoundAnalysis/components/Toolbar.tsx","compoundAnalysis/helpers.ts","compoundAnalysis/components/CenterOfMassAnalysis.tsx","helpers/svg.ts","widgets/Ring.tsx","compoundAnalysis/components/layouts/AnalysisLayoutTwoRes.tsx","compoundAnalysis/components/Clustering.tsx","compoundAnalysis/components/DiskMaskAnalysis.tsx","compoundAnalysis/components/FEM.tsx","compoundAnalysis/components/FFTFramePicker.tsx","compoundAnalysis/components/FFTSumFrames.tsx","compoundAnalysis/components/FFTFrameView.tsx","compoundAnalysis/components/layouts/AnalysisLayoutThreeCol.tsx","compoundAnalysis/components/FFTAnalysis.tsx","compoundAnalysis/components/PointSelectionAnalysis.tsx","compoundAnalysis/components/RadialFourierAnalysis.tsx","compoundAnalysis/components/RingMaskAnalysis.tsx","compoundAnalysis/types.ts","compoundAnalysis/components/base/Analysis.tsx","compoundAnalysis/components/base/AnalysisList.tsx","helpers/reducerHelpers.ts","compoundAnalysis/components/base/AnalysisSelect.tsx","dataset/components/AddAnalysis.tsx","dataset/api.ts","dataset/validate.ts","dataset/helpers.ts","dataset/components/DatasetParams.tsx","dataset/actions.ts","dataset/components/DatasetInfo.tsx","errors/actions.ts","dataset/components/DatasetToolbar.tsx","dataset/components/Dataset.tsx","dataset/components/BLOParamsForm.tsx","dataset/components/DatasetTypeSelect.tsx","dataset/components/EMPADParamsForm.tsx","dataset/components/FRMS6ParamsForm.tsx","dataset/components/HDF5ParamsForm.tsx","dataset/components/K2ISParamsForm.tsx","dataset/components/MIBParamsForm.tsx","dataset/components/RawFileParamsForm.tsx","dataset/components/SERParamsForm.tsx","dataset/components/DatasetOpen.tsx","dataset/components/DatasetOpenSpinner.tsx","dataset/components/DatasetList.tsx","errors/components/Error.tsx","errors/components/ErrorList.tsx","helpers/hooks.ts","App.tsx","registerServiceWorker.ts","config/helpers.ts","browser/api.ts","channel/actions.ts","browser/sagas.ts","channel/messages.ts","channel/sagas.ts","cluster/api.ts","analysis/actions.ts","cluster/sagas.ts","job/actions.ts","job/api.ts","compoundAnalysis/api.ts","config/actions.ts","compoundAnalysis/sagas.ts","config/api.ts","config/sagas.ts","dataset/sagas.ts","sagas.ts","analysis/reducers.ts","browser/reducers.ts","channel/reducers.ts","cluster/reducers.ts","compoundAnalysis/reducers.ts","config/reducers.ts","dataset/reducers.ts","errors/reducers.ts","job/reducers.ts","store.ts","index.tsx"],"names":["module","exports","ActionTypes","connect","state","version","config","revision","Header","as","slice","List","Item","Icon","name","Content","href","src","alt","createAction","type","payload","meta","undefined","Actions","notConnected","NOT_CONNECTED","params","CONNECT","connecting","CONNECTING","connected","CONNECTED","error","msg","timestamp","id","ERROR","assertNotReached","message","Error","defaultDebounce","fn","delay","_","maxWait","getEnumValues","e","Object","keys","ClusterTypes","DatasetTypes","AdditionalInfo","DatasetStatus","AnalysisTypes","ClusterTypeMetadata","LOCAL","label","TCP","helpText","withFormik","mapPropsToValues","ownProps","numWorkers","localCores","handleSubmit","values","formikBag","onSubmit","props","touched","errors","isSubmitting","dirty","handleChange","handleBlur","handleReset","Form","Field","htmlFor","value","onChange","onBlur","Button","primary","disabled","address","lastConnection","mapDispatchToProps","connectToCluster","clusterActions","clusterTypeOptions","map","t","text","ClusterConnectionForm","clusterType","lastConnectionType","setType","setState","data","this","Dropdown","inline","options","Segment","renderForm","React","ChannelConnecting","Message","icon","loading","messages","waiting","clusterMessages","ConnectedNotReady","haveConfig","useSelector","clusterConnection","status","ChannelStatus","children","channelStatus","list","path","LIST_DIRECTORY","dirListing","dirs","files","drives","places","DIRECTORY_LISTING","open","OPEN","cancel","CANCEL","select","SELECT","selectFullPath","SELECT_FULL_PATH","detectParams","DETECT_PARAMS","paramsDetected","PARAMS_DETECTED","TimeStamp","ts","date","Date","fmtDate","toLocaleDateString","fmtTime","toLocaleTimeString","title","style","display","whiteSpace","width","marginRight","FileSize","fmtSize","bytes","si","thresh","Math","abs","size","unit","units","u","length","toFixed","humanFileSize","textAlign","Cell","overflow","textOverflow","FileBrowserEntry","onClick","details","myStyle","cursor","tsStyles","paddingRight","flexGrow","owner","ctime","mtime","FileBrowserHeader","alignRight","paddingBottom","FileEntry","dispatch","browserActions","window","setTimeout","toString","newProps","initialPath","enableReinitialize","Input","autoComplete","lastOpened","fileHistory","separator","recentFiles","filter","item","floating","Menu","content","option","idx","key","refresh","currentPath","handleInputChange","goUp","driveOptions","placeOptions","listRef","scrollToTop","current","scrollToItem","sortByKey","array","getKey","sort","a","b","x","y","JobRunning","JobStatus","browser","isLoading","getSortKey","toLowerCase","dirEntries","dir","fileEntries","f","entries","concat","overflowY","ref","height","itemCount","itemSize","index","Group","isOpen","labelPosition","BusySpinner","margin","padding","position","bottom","right","color","opacity","BusyWrapper","busy","HandleParent","currentHandle","handleDragStart","h","handleDrop","handleMouseMove","externalMouseMove","handleMouseLeave","externalLeave","handleMouseUp","externalMouseUp","onMouseMove","onMouseLeave","onMouseUp","onKeyDown","onKeyboardEvent","outline","tabIndex","fill","renderHandles","handles","i","elem","ResultImage","job","channel","result","results","className","styles","fallback","viewBox","default","xlinkHref","imageURL","ResultWrapper","styled","svg","Result","extraHandles","extraWidgets","running","DONE","Selectors","div","ResultListPlaceholder","border","ResultList","selectedChannel","selectChannel","analysis","jobsById","displayedJob","dt","endTimestamp","startTimestamp","currentResult","subtitle","selectors","getMsg","selectedImg","getJob","genericRender","ResultImageSelector","availableImages","description","compoundAnalysis","compoundAnalyses","byId","analyses","analysisIndex","jobs","inRectConstraint","p","max","min","cbToRadius","cx","cy","cb","dx","dy","sqrt","dist","keepOnCY","riConstraint","outerPos","otherX","roConstraints","innerPos","defaultMaskStyles","imageWidth","fillOpacity","strokeOpacity","stroke","strokeWidth","Disk","imageHeight","r","StyledCircle","circle","Cross","FocusGroup","g","Handle","scale","withCross","focusRef","args","transform","crossSpec","cross","d","relativeCoords","parent","ownerSVGElement","inWidthAttr","getAttribute","inWidth","getBoundingClientRect","getScalingFactor","parentPos","pageX","left","pageXOffset","pageY","top","pageYOffset","DraggableHandle","posRef","dragging","drag","move","stopDrag","applyConstraint","constraint","startDrag","preventDefault","parentOnDragStart","focus","onDragMove","constrained","parentOnDrop","handleKeyDown","update","delta","shiftKey","handleKeyEvent","newCoords","visibility","onMouseDown","renderCommon","renderDragging","DefaultModes","DefaultRois","dataset","analysisType","CREATE","autoStart","CREATED","compoundAnalysisId","ENABLE_AUTOSTART","RUN","RUNNING","jobIndex","REMOVE","REMOVED","useFramePicker","enabled","scanWidth","scanHeight","setCx","setCy","useDispatch","useEffect","compoundAnalysisActions","PICK_FRAME","parameters","onPickChange","pickX","pickY","newX","round","newY","coords","onDragStart","onDrop","ModeSelector","modes","currentMode","onModeChange","Rect","ymin","xmin","useRectROI","minLength","useState","setx","sety","setwidth","setheight","handleCornerChange","newx","newy","handleShapeChange","smthHandle","rectRoiParameters","roi","shape","rectRoiHandles","rectRoiWidgets","useRoiPicker","roiParameters","handle","analysisActions","clearTimeout","JSON","stringify","useDefaultFrameView","doAutoStart","availableModes","SUM","SD","PICK","availableRois","ALL","DISK","RECT","frameMode","setMode","setRoi","frameModeSelector","newMode","roiSelector","newRoi","widgets","pickCoords","pickHandles","setR","handleCenterChange","newCx","newCy","handleRChange","newR","rHandle","diskRoiParameters","diskRoiHandles","diskRoiWidgets","useDiskROI","SD_FRAMES","SUM_FRAMES","frameViewTitle","AnalysisLayoutTwoCol","toolbar","attached","Grid","columns","Row","Column","getApiBasePath","loc","location","pathname","endsWith","genericDelete","basePath","fetch","credentials","method","json","genericPut","body","getMetadata","typeName","CompoundAnalysisMetadata","DownloadItems","currentFormat","analysesById","some","jobId","SUCCESS","analysisId","desc","getAnalysisDescription","includeInDownload","getDownloadChannels","join","Download","formats","resultFileFormats","formatOptions","identifier","setFormat","Modal","trigger","Popup","Toolbar","busyIdxs","onApply","applyIconProps","analysisIdxsToInclude","filteredAnalyses","indexOf","reduce","prevValue","every","getAnalysisStatus","CenterOfMassAnalysis","frameViewWidgets","resultHandles","resultWidgets","CENTER_OF_MASS","getPathArc","center","start","end","radius","degree","points","push","getLocationFromAngle","clockWise","getCirclePath","radian","PI","cos","sin","Ring","ri","pathSpec","ro","fillRule","AnalysisLayoutTwoRes","mid","clustparams","title1","title2","title3","ClustAnalysis","setRi","setRo","riHandle","roHandle","minDist","setMinDist","nPeaks","setNPeaks","nClust","setNClust","handleRIChange","handleROChange","SUM_SIG","CLUST","n_clust","n_peaks","min_dist","paramsVisible","setParamsVisible","Accordion","Title","active","event","step","target","valueAsNumber","DiskMaskAnalysis","APPLY_DISK_MASK","FEMAnalysis","FEM","useFFTFramePicker","real_rad","real_centerx","real_centery","PICK_FFT_FRAME","useFFTSumFrames","FFTSUM_FRAMES","useFFTFrameView","AnalysisLayoutThreeCol","FFTAnalysis","radIn","radOut","frameViewWidgetsfft","check","setCheck","realCenterX","realCenterY","realRad","frameViewWidgetsreal","APPLY_FFT_MASK","rad_in","rad_out","checked","PointSelectionAnalysis","APPLY_POINT_SELECTOR","RadialFourierAnalysis","nBins","maxOrder","RADIAL_FOURIER","n_bins","max_order","RingMaskAnalysis","APPLY_RING_MASK","component","AnalysisDispatcherComponent","datasets","AnalysisComponent","mainType","AnalysisList","ids","Analysis","updateById","partialRecord","newObj","assign","newById","insertById","record","constructById","items","acc","filterWithPred","pred","analysisTypeOptions","AnalysisSelect","labeled","button","handleAddAnalysis","openDataset","deleteDataset","detectDataset","encodeURIComponent","schemaCache","getSchema","cached","Promise","resolve","schemaResponse","convertErrors","res","forEach","err","fieldName","dataPath","replace","match","plainName","then","schema","validate","Ajv","compile","parseNumList","nums","split","part","trim","getInitial","otherwise","getInitialName","pathfind","isKnownDatasetType","detectedType","v","isAdditionalInfo","param","withValidation","opts","formToJson","setSubmitting","validateOpen","validateOnChange","validateOnBlur","renderParams","Table","Array","DatasetParams","HeaderCell","Body","DiagElem","diagnostics","renderValue","DiagElems","DatasetInfo","cachedParams","detectedParams","CANCEL_OPEN","DELETE","DELETED","DETECT","DETECTED","DETECT_FAILED","handleRemoveDataset","datasetActions","DatasetContainer","OPENING","DELETING","dividing","marginTop","marginBottom","horizontal","link","flexShrink","initial","tileshape","BLO","isValidating","onCancel","datasetTypeOptions","DatasetTypeSelect","currentType","scan_size","EMPAD","FRMS6","dataset_paths","ds_path","HDF5","dsPathInput","setFieldValue","dsPathOptions","dsPath","placeholder","fluid","search","selection","defaultValue","K2IS","MIB","enable_direct","detector_size","dtype","RAW","SER","getDefaultDSType","didReset","openState","formCachedParams","formDetectedParams","getFormInitial","additionalInfo","allInfo","info","getAdditionalInfo","DatasetOpen","setReset","formInitial","defaultType","datasetType","setDatasetType","doSetType","form","formPath","commonParams","uuid","onReset","MIBParamsForm","BLOParamsForm","K2ISParamsForm","busyPath","DatasetList","formVisible","dsId","Dataset","DISMISS","DISMISS_ALL","dismiss","errorActions","negative","onDismiss","channelConnected","latestErrors","showModal","handleEsc","ev","code","keyCode","document","addEventListener","removeEventListener","App","Container","logo","alignSelf","isLocalhost","Boolean","hostname","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","joinPaths","parts","removeSep","RegExp","escapeRegExp","mergeLocalStorage","serverConfig","localSettings","localStorage","getItem","getDefaultLocalConfig","localSettingsParsed","parse","defaultConfig","setLocalStorage","cwd","setItem","makeUnique","inp","curr","getDirectoryListing","url","directoryListingSaga","fetchOnRequest","fetchDirectoryListing","fetchDirectoryListOnOpen","fork","take","action","newPath","call","put","browserState","now","alternative","home","MessageTypes","INITIAL_STATE","JOB_STARTED","FINISH_JOB","TASK_RESULT","JOB_ERROR","CLOSE","CANCELLED","createMessage","messageType","attribs","Messages","objectURL","BINARY","webSocketSaga","actionsFromChannel","handleBinaryParts","handleTaskResult","handleFinishJob","createWebSocketChannel","eventChannel","emit","onMessage","Blob","channelMessages","URL","createObjectURL","parsed","onOpen","onClose","END","onError","ws","WebSocket","port","getApiWSURL","socketChannel","channelActions","CREATE_DATASET","DELETE_DATASET","CANCEL_JOB_DONE","numParts","binMsg","followup","numMessages","images","descriptions","connection","checkClusterConnection","connectSaga","putClusterStatus","trackClusterConnection","clusterConnectionSaga","conn","takeEvery","all","UPDATED","startJob","cancelJob","createOrUpdateAnalysis","removeAnalysis","createOrUpdateCompoundAnalysis","removeCompoundAnalysis","cleanupOnRemove","createCompoundAnalysisSaga","createFromServerState","createOrUpdate","analysisSidecar","removeJobsForAnalysis","doRemoveAnalysisSaga","analysisRootSaga","selectDataset","selectCompoundAnalysis","selectAnalysis","selectJob","sidecarTask","msgPart","oldJobId","newAnalysisId","updatedCompoundAnalysis","actionChannel","buffers","sliding","runOrParamsChannel","existingAnalysisId","jobActions","FETCH","FETCHED","FETCH_FAILED","getConfig","getConfigOnReconnect","getConfigSaga","updateLocalStorageConfig","firstConfigFetch","configRootSaga","configActions","configResponse","mergedConfig","removeItem","createDatasetSaga","deleteDatasetSaga","doDetectDataset","doOpenDataset","openDatasetSagaFullPath","openDatasetSaga","datasetRootSaga","resp","fullPath","detectResult","shouldOpen","datasetParams","doDetectDatasetRes","rootSaga","initialAnalysisState","ChannelStatusCodes","initialBrowserState","initialChannelState","WAITING","initialClusterConnectionState","initialCompoundAnalysisState","initialConfigState","initialDatasetState","initialOpenDatasetState","initialErrorState","initialJobState","rootReducer","combineReducers","newCompoundAnalysis","newAnalyses","ca","oldJobs","analysisState","analysisIdForJob","find","READY","ds","createResult","CREATING","IN_PROGRESS","jobState","newLastOpened","newFileHistory","newLastConnection","place","sagaMiddleware","createSagaMiddleware","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","ReactDOM","getElementById","process","origin","response","headers","get","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker","run"],"mappings":"6GACAA,EAAOC,QAAU,CAAC,QAAU,6BAA6B,SAAW,gC,oBCDpED,EAAOC,QAAU,IAA0B,kD,uGCG/BC,E,sJC+DGC,eA7DS,SAACC,GACrB,MAAO,CACHC,QAASD,EAAME,OAAOD,QACtBE,SAAUH,EAAME,OAAOC,YA0DhBJ,EApDuB,SAAC,GAA2B,IAAzBE,EAAwB,EAAxBA,QAASE,EAAe,EAAfA,SAC9C,OACI,gCACI,gBAACC,EAAA,EAAD,CAAQC,GAAG,MAAX,4BAA0CJ,EAA1C,cAA8DE,EAASG,MAAM,EAAG,GAAhF,KACA,gBAACC,EAAA,EAAD,KACI,gBAACA,EAAA,EAAKC,KAAN,KACI,gBAACD,EAAA,EAAKE,KAAN,CAAWC,KAAK,WAChB,gBAACH,EAAA,EAAKI,QAAN,mBACe,qBAAGC,KAAK,wCAAR,YAGnB,gBAACL,EAAA,EAAKC,KAAN,KACI,gBAACD,EAAA,EAAKE,KAAN,CAAWC,KAAK,QAChB,gBAACH,EAAA,EAAKI,QAAN,mDAC+C,qBAAGC,KAAK,mDAAR,oBAGnD,gBAACL,EAAA,EAAKC,KAAN,KACI,gBAACD,EAAA,EAAKE,KAAN,CAAWC,KAAK,UAChB,gBAACH,EAAA,EAAKI,QAAN,uCACmC,qBAAGC,KAAK,4DAAR,qCAGvC,gBAACL,EAAA,EAAKC,KAAN,KACI,gBAACD,EAAA,EAAKE,KAAN,CAAWC,KAAK,SAChB,gBAACH,EAAA,EAAKI,QAAN,aACS,qBAAGC,KAAK,wCAAR,uBAGb,gBAACL,EAAA,EAAKC,KAAN,KACI,gBAACD,EAAA,EAAKE,KAAN,CAAWC,KAAK,SAChB,gBAACH,EAAA,EAAKI,QAAN,aACS,qBAAGC,KAAK,4DAAR,yBAGb,gBAACL,EAAA,EAAKC,KAAN,KACI,gBAACD,EAAA,EAAKE,KAAN,CAAWC,KAAK,WAChB,gBAACH,EAAA,EAAKI,QAAN,iBACa,qBAAGC,KAAK,oCAAR,qBAGjB,gBAACL,EAAA,EAAKC,KAAN,KACI,gBAACD,EAAA,EAAKE,KAAN,CAAWC,KAAK,YAChB,gBAACH,EAAA,EAAKI,QAAN,KACA,qBAAGC,KAAK,0CAAyC,uBAAKC,IAAI,0DAA0DC,IAAI,2C,kBCzCrI,SAASC,EAAqCC,EAASC,EAAaC,GACvE,YAAaC,IAATD,QAAkCC,IAAZF,EACf,CAAED,aACOG,IAATD,EACA,CAAEF,OAAMC,WAER,CAAED,OAAMC,UAASC,S,SFpBpBpB,K,sCAAAA,E,0BAAAA,E,gCAAAA,E,8BAAAA,E,uBAAAA,M,KASL,IAAMsB,EAAU,CACnBC,aAAc,kBAAMN,EAAajB,EAAYwB,gBAC7CvB,QAAS,SAACwB,GAAD,OAAkCR,EAAajB,EAAY0B,QAAS,CAAED,YAC/EE,WAAY,kBAAMV,EAAajB,EAAY4B,aAC3CC,UAAW,SAACJ,GAAD,OAAkCR,EAAajB,EAAY8B,UAAW,CAAEL,YACnFM,MAAO,SAACC,EAAaC,EAAmBC,GAAjC,OAAgDjB,EAAajB,EAAYmC,MAAO,CAAEH,MAAKC,YAAWC,S,kBGftG,SAASE,EAAiBC,GAC7B,MAAM,IAAIC,MAAMD,GAGb,SAASE,EAAmDC,GAA4B,IAArBC,EAAoB,uDAAJ,GACtF,OAAOC,WAAWF,EAAIC,EAAO,CAAEE,QAASF,IAGrC,SAASG,EAAiBC,GAC7B,OAAOC,OAAOC,KAAKF,G,MCuBXG,E,kBAAAA,K,cAAAA,E,WAAAA,M,KAKL,IA0CKC,EAeAC,EA8DAC,EAqMAC,EA5TCC,GAA6D,mBACrEL,EAAaM,MAAQ,CAClBC,MAAO,yBAF2D,cAIrEP,EAAaQ,IAAM,CAChBD,MAAO,qBACPE,SAAU,sDANwD,I,SA0C9DR,K,YAAAA,E,UAAAA,E,UAAAA,E,UAAAA,E,YAAAA,E,UAAAA,E,cAAAA,E,eAAAA,M,cAeAC,K,+BAAAA,M,cA8DAC,K,YAAAA,E,kBAAAA,E,qBAAAA,M,cAqMAC,K,kCAAAA,E,kCAAAA,E,4CAAAA,E,gCAAAA,E,wBAAAA,E,sBAAAA,E,wBAAAA,E,gCAAAA,E,gCAAAA,E,8BAAAA,E,gCAAAA,E,UAAAA,E,cAAAA,E,mBAAAA,M,SChWApD,E,kCCsCG0D,cAAkC,CAC7CC,iBAAkB,SAACC,GAAD,MAA0B,CACxCC,WAAYD,EAASxD,OAAO0D,aAEhCC,aAAc,SAACC,EAAQC,IAEnBC,EADqBD,EAAUE,MAAvBD,UACC,aACLhD,KAAM8B,EAAaM,OAChBU,MARAN,EAzBqC,SAAC,GAU9C,IATHM,EASE,EATFA,OACAI,EAQE,EARFA,QACAC,EAOE,EAPFA,OAEAC,GAKE,EANFC,MAME,EALFD,cACAE,EAIE,EAJFA,aACAC,EAGE,EAHFA,WACAV,EAEE,EAFFA,aAEE,EADFW,YAEA,OACI,gBAACC,EAAA,EAAD,CAAMT,SAAUH,GACZ,gBAACY,EAAA,EAAKC,MAAN,KACI,yBAAOC,QAAQ,cAAf,sBACA,yBAAO3D,KAAK,SAASN,KAAK,aAAakE,MAAOd,EAAOH,WACjDkB,SAAUP,EACVQ,OAAQP,IACXJ,EAAOR,YAAcO,EAAQP,YAAcQ,EAAOR,YAEvD,gBAACoB,EAAA,EAAD,CAAQC,SAAS,EAAMhE,KAAK,SAASiE,SAAUb,GAA/C,eCMGZ,cAAkC,CAC7CC,iBAAkB,SAACC,GAAD,MAA0B,CACxCwB,QAASxB,EAASxD,OAAOiF,eAAeD,UAE5CrB,aAAc,SAACC,EAAQC,IAEnBC,EADqBD,EAAUE,MAAvBD,UACC,aACLhD,KAAM8B,EAAaQ,KAChBQ,MARAN,EAzBmC,SAAC,GAU5C,IATHM,EASE,EATFA,OACAI,EAQE,EARFA,QACAC,EAOE,EAPFA,OAEAC,GAKE,EANFC,MAME,EALFD,cACAE,EAIE,EAJFA,aACAC,EAGE,EAHFA,WACAV,EAEE,EAFFA,aAEE,EADFW,YAEA,OACI,gBAACC,EAAA,EAAD,CAAMT,SAAUH,GACZ,gBAACY,EAAA,EAAKC,MAAN,KACI,yBAAOC,QAAQ,WAAf,iBACA,yBAAO3D,KAAK,OAAON,KAAK,UAAUkE,MAAOd,EAAOoB,QAC5CL,SAAUP,EACVQ,OAAQP,IACXJ,EAAOe,SAAWhB,EAAQgB,SAAWf,EAAOe,SAEjD,gBAACH,EAAA,EAAD,CAAQC,SAAS,EAAMhE,KAAK,SAASiE,SAAUb,GAA/C,eCzBNgB,EAAqB,CACvBC,iBAAkBC,EAAuBvF,SAavCwF,EADkB7C,EAAcI,GACK0C,KAAI,SAAAC,GAAC,MAAK,CACjDC,KAAMvC,EAAoBL,EAAa2C,IAAIpC,MAC3CuB,MAAO9B,EAAa2C,OAOlBE,E,2MACK3F,MAAQ,CACX4F,YAAa,EAAK3B,MAAM4B,oB,EAGrBC,QAAU,SAAC9E,GACd,EAAK+E,SAAS,CACVH,YAAa5E,K,EAIdsD,aAAe,SAAC3B,EAAyBqD,GAC5C,IAAMpB,EAAQoB,EAAKpB,MACnB,EAAKkB,QAAQlB,I,EAGVf,aAAe,SAACtC,GACnB,EAAK0C,MAAMoB,iBAAiB9D,I,4EAGX,IACTqE,EAAgBK,KAAKjG,MAArB4F,YACA1F,EAAW+F,KAAKhC,MAAhB/D,OAER,OAAQ0F,GACJ,KAAK9C,EAAaM,MACd,OAAO,gBAAC,EAAD,CAAqBlD,OAAQA,EAAQ8D,SAAUiC,KAAKpC,eAE/D,KAAKf,EAAaQ,IACd,OAAO,gBAAC,EAAD,CAAmBpD,OAAQA,EAAQ8D,SAAUiC,KAAKpC,kB,+BAMjE,OACI,gCACI,2BACI,gBAACqC,EAAA,EAAD,CACIC,QAAQ,EACRC,QAASb,EACTX,MAAOqB,KAAKjG,MAAM4F,YAClBf,SAAUoB,KAAK3B,gBAGvB,gBAAC+B,EAAA,EAAD,KACKJ,KAAKK,mB,GA9CUC,aAqDrBxG,eAxES,SAACC,GACrB,MAAO,CACHE,OAAQF,EAAME,OACd2F,mBAAoB7F,EAAME,OAAOiF,eAAenE,QAqEhBoE,EAAzBrF,CAA6C4F,G,SCvE7Ca,EAV8C,SAAC,GAAD,IAAG1E,EAAH,EAAGA,IAAH,OACzD,gBAAC2E,EAAA,EAAD,CAASC,MAAM,GACX,gBAACjG,EAAA,EAAD,CAAMC,KAAK,MAAMiG,SAAS,IAC1B,gBAACF,EAAA,EAAQ9F,QAAT,KACI,gBAAC8F,EAAA,EAAQrG,OAAT,+BACC0B,KCLP8E,EAAW,CACbC,QAAS,aACTpF,WAAY,iBAGVqF,EACS,0CADTA,GAEO,wCAFPA,GAGW,wBAGXC,GAA+B,WACjC,IAAMC,EAAaC,aAAY,SAACjH,GAAD,OAAwBA,EAAME,OAAO8G,cAC9DE,EAAoBD,aAAY,SAACjH,GAAD,OAAwBA,EAAMkH,qBAEpE,OAAKF,EAG4B,iBAA7BE,EAAkBC,OACX,gBAAC,EAAD,MAC6B,cAA7BD,EAAkBC,OAClB,gBAAC,EAAD,CAAmBrF,IAAKgF,IACK,YAA7BI,EAAkBC,OAClB,gBAAC,EAAD,CAAmBrF,IAAKgF,KACK,eAA7BI,EAAkBC,OAClB,gBAAC,EAAD,CAAmBrF,IAAKgF,UAEnC5E,EAAiB,qBAXN,gBAAC,EAAD,CAAmBJ,IAAI,kCAgCvBsF,GAlBkB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAC1BC,EAAgBL,aAAY,SAACjH,GAAD,OAAwBA,EAAMsH,iBAEhE,OAAQA,EAAcH,QAClB,IAAK,UACL,IAAK,aACD,OAAO,gBAAC,EAAD,CAAmBrF,IAAK8E,EAASU,EAAcH,UAE1D,IAAK,YACD,OAAO,gBAAC,GAAD,MAEX,IAAK,QACD,OAAO,gCAAGE,GACd,QACInF,EAAiB,wB,SLhDjBpC,K,wCAAAA,E,6CAAAA,E,8CAAAA,E,sCAAAA,E,0CAAAA,E,sBAAAA,E,oBAAAA,E,wBAAAA,E,wBAAAA,E,6CAAAA,M,KAaL,IAAMsB,GAAU,CACnBmG,KAAM,SAACC,EAAc9G,GAAf,OAAiCK,EAAajB,EAAY2H,eAAgB,CAAED,OAAM9G,UACxFgH,WAAY,SAACF,EAAcG,EAAiCC,EAAkCC,EAAkBC,GAApG,OAA0H/G,EAAajB,EAAYiI,kBAAmB,CAAEP,OAAMG,OAAMC,QAAOC,SAAQC,YAC/ME,KAAM,kBAAMjH,EAAajB,EAAYmI,OACrCC,OAAQ,kBAAMnH,EAAajB,EAAYqI,SACvCC,OAAQ,SAACZ,EAAc9G,GAAf,OAAgCK,EAAajB,EAAYuI,OAAQ,CAAEb,OAAM9G,UACjF4H,eAAgB,SAACd,GAAD,OAAkBzG,EAAajB,EAAYyI,iBAAkB,CAAEf,UAC/E3F,MAAO,SAACC,EAAaC,EAAmBC,GAAjC,OAAgDjB,EAAajB,EAAYmC,MAAO,CAAEH,MAAKC,YAAWC,QACzGwG,aAAc,SAAChB,GAAD,OAAkBzG,EAAajB,EAAY2I,cAAe,CAAEjB,UAC1EkB,eAAgB,SAAClB,EAAcjG,GAAf,OAA6CR,EAAajB,EAAY6I,gBAAiB,CAAEnB,OAAMjG,a,UMTtGqH,GAAuC,SAAC,GAAY,IAAVC,EAAS,EAATA,GAC7CC,EAAO,IAAIC,KAAU,IAALF,GAChBG,EAAUF,EAAKG,qBACfC,EAAUJ,EAAKK,qBACfC,EAAK,UAAMJ,EAAN,YAAiBE,GAC5B,OACI,uBAAKG,MAAO,CAAEC,QAAS,OAAQC,WAAY,UAAYH,MAAOA,GAC1D,uBAAKC,MAAO,CAAEG,MAAO,MAAOC,YAAa,SAAWT,GACpD,uBAAKK,MAAO,CAAEG,MAAO,QAAUN,KAkCpC,IAAMQ,GAAqC,SAAC,GAAkB,IAC3DC,EA7BV,SAAuBC,GAAqC,IAAtBC,EAAqB,wDACjDC,EAASD,EAAK,IAAO,KAC3B,GAAIE,KAAKC,IAAIJ,GAASE,EAClB,MAAO,CACHG,KAAML,EACNM,KAAM,KAGd,IAAMC,EAAQN,EACR,CAAC,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MAC3C,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OACpDO,GAAK,EACT,GACIR,GAASE,IACPM,QACGL,KAAKC,IAAIJ,IAAUE,GAAUM,EAAID,EAAME,OAAS,GAEzD,MAAO,CACHJ,KAAML,EAAMU,QAAQ,GACpBJ,KAAMC,EAAMC,IAUAG,CADgD,EAAfN,KAAe,EAATJ,IAEvD,OACI,uBAAKR,MAAO,CAAEmB,UAAW,UACpBb,EAAQM,KADb,IACoBN,EAAQO,OAKvBO,GAAsC,SAAC,GAAyB,IAAvBpD,EAAsB,EAAtBA,SAAU+B,EAAY,EAAZA,MAO5D,OACI,uBAAKC,MAP2B,CAChCE,WAAY,SACZmB,SAAU,SACVC,aAAc,WACdlB,YAAa,QAGOL,MAAOA,GAAQ/B,IA+C5BuD,G,2MAzCJC,QAAU,SAAClI,GAAyB,IAC/BkI,EAAY,EAAK5G,MAAjB4G,QACJA,GACAA,K,wEAIS,IAAD,EACqB5E,KAAKhC,MAA9B6G,EADI,EACJA,QAASzB,EADL,EACKA,MAAO3C,EADZ,EACYA,KAClBqE,EAA4B,aAC9BC,OAAQ,WACL3B,GAGD4B,EAAgC,CAClCT,UAAW,SAGf,OACI,uBAAKK,QAAS5E,KAAK4E,QAASxB,MAAO0B,GAC/B,uBAAK1B,MAAO,CAAEC,QAAS,OAAQ4B,aAAc,SACzC,uBAAK7B,MAAO,CAAEG,MAAO,MAAO2B,SAAU,IAClC,gBAAC,GAAD,CAAM/B,MAAO0B,EAAQpK,MAChBgG,GAAQ,gBAACjG,EAAA,EAAD,CAAMC,KAAMgG,IACpBoE,EAAQpK,OAGjB,uBAAK2I,MAAO,CAAEG,MAAO,QAAS,gBAAC,GAAD,KAAM,gBAAC,GAAD,CAAUS,KAAMa,EAAQb,KAAMJ,IAAI,MACtE,uBAAKR,MAAO,CAAEG,MAAO,QAAS,gBAAC,GAAD,KAAOsB,EAAQM,QAC7C,uBAAK/B,MAAK,aAAIG,MAAO,OAAUyB,IAC3B,gBAAC,GAAD,KAAM,gBAAC,GAAD,CAAWpC,GAAIiC,EAAQO,UAEjC,uBAAKhC,MAAK,aAAIG,MAAO,OAAUyB,IAC3B,gBAAC,GAAD,KAAM,gBAAC,GAAD,CAAWpC,GAAIiC,EAAQQ,gB,GAlCtB/E,aChDhBgF,GA7BsB,WACjC,IAAMC,EAAkC,CACpChB,UAAW,SAIf,OACI,uBAAKnB,MAAO,CAAE6B,aAAc,OAAQO,cAAe,SAC/C,uBAAKpC,MAAO,CAAEC,QAAS,SACnB,uBAAKD,MAAO,CAAEG,MAAO,MAAO2B,SAAU,IAClC,gBAAC,GAAD,cAEJ,uBAAK9B,MAAK,aAAIG,MAAO,OAAUgC,IAC3B,gBAAC,GAAD,cAEJ,uBAAKnC,MAAO,CAAEG,MAAO,QACjB,gBAAC,GAAD,eAEJ,uBAAKH,MAAK,aAAIG,MAAO,OAAUgC,IAC3B,gBAAC,GAAD,iBAEJ,uBAAKnC,MAAK,aAAIG,MAAO,OAAUgC,IAC3B,gBAAC,GAAD,qBCJdE,G,iLACe,IAAD,EACuBzF,KAAKhC,MAAhC6G,EADI,EACJA,QAASzB,EADL,EACKA,MAAOjB,EADZ,EACYA,OAExB,OACI,gBAAC,GAAD,CAAkByC,QAASzC,EAAQiB,MAAOA,EAAOyB,QAASA,EACtDpE,KAAK,qB,GANGH,aAWTxG,eAAQ,MAnBI,SAAC4L,EAAoBjI,GAC5C,MAAO,CACH0E,OAAQ,kBAAMuD,EAASC,GAAuBxD,OAAO1E,EAAS8D,KAAM9D,EAASoH,QAAQpK,WAiB9EX,CAAkC2L,ICDlC3L,eAAQ,MAxBI,SAAC4L,EAAoBjI,GAC5C,MAAO,CACH6D,KAAM,WACFoE,EAASC,GAAuBrE,KAAK7D,EAAS8D,KAAM9D,EAASoH,QAAQpK,OACrEmL,OAAOC,YAAW,kBAAMpI,EAASmB,aAAY,OAoB1C9E,EAN6B,SAAC,GAAwC,IAAtCwH,EAAqC,EAArCA,KAAMuD,EAA+B,EAA/BA,QAASzB,EAAsB,EAAtBA,MAAsB,EAAfxE,SACjE,OACI,gBAAC,GAAD,CAAkBgG,QAAStD,EAAM8B,MAAOA,EAAOyB,QAASA,EAASpE,KAAK,c,oBCE/D3G,eAAQ,MAvBI,SAAC4L,EAAoBjI,GAC5C,MAAO,CACH6D,KAAM,gBACqBpG,IAAnBuC,EAASkB,QACT+G,EAASC,GAAuBrE,KAAK7D,EAASkB,MAAMmH,aACpDF,OAAOC,YAAW,kBAAMpI,EAASmB,aAAY,QAkB9C9E,EARkC,SAAC,GAAwB,IAAtBwH,EAAqB,EAArBA,KAAStD,EAAY,yBAC/D+H,EAAQ,aACVnB,QAAStD,GACNtD,GAEP,OAAO,gBAACiC,EAAA,EAAS1F,KAASwL,M,UCSfxI,eAAuC,CAClDC,iBAAkB,kBAAsB,CACpC+D,KADc,EAAGyE,cAGrBpI,aAAc,SAACC,EAAQC,IAEnBc,EADqBd,EAAUE,MAAvBY,UACCf,EAAO0D,OAEpB0E,oBAAoB,GART1I,EApB2B,SAAC,GAUpC,IATHM,EASE,EATFA,OAKAQ,GAIE,EARFJ,QAQE,EAPFC,OAOE,EANFE,MAME,EALFD,aAKE,EAJFE,cACAC,EAGE,EAHFA,WACAV,EAEE,EAFFA,aAEE,EADFW,YAEA,OACI,gBAACC,EAAA,EAAD,CAAMT,SAAUH,EAAcwF,MAAO,CAAE8B,SAAU,IAC7C,gBAAC1G,EAAA,EAAKC,MAAN,KACI,gBAACyH,GAAA,EAAD,CAAOC,aAAa,MAAMtH,OAAQP,EAAYM,SAAUP,EAAcM,MAAOd,EAAO0D,KAAM9G,KAAK,cCgChGX,gBA5CS,SAACC,GACrB,MAAO,CACHqM,WAAYrM,EAAME,OAAOmM,WACzBC,YAAatM,EAAME,OAAOoM,YAC1BC,UAAWvM,EAAME,OAAOqM,cAIL,SAACZ,GACxB,MAAO,CACHvD,OAAQ,SAACZ,GAAD,OAAkBmE,EAASC,GAAuBtD,eAAed,QAkClEzH,EA5B6B,SAAC,GAAyC,IAAvCsM,EAAsC,EAAtCA,WAAYC,EAA0B,EAA1BA,YAAalE,EAAa,EAAbA,OAE9DoE,EAA+BF,EAAYG,QAAO,SAACjF,GAAD,OAAkB6E,EAAW7E,MAAOhC,KAAI,SAACgC,GAC7F,IAAMkF,EAAOL,EAAW7E,GACxB,MAAO,CACH9B,KAAMgH,EAAKlF,KACX5C,MAAO,CACH5D,KAAM0L,EAAK1L,KACXwG,KAAMkF,EAAKlF,UAKjBqD,EAAU,SAAClI,EAAqCqD,GAAtC,OAAkEA,EAAKpB,OAASwD,EAAOpC,EAAKpB,MAAMmH,aAElH,OACI,gBAAC7F,EAAA,EAAD,CAAUwG,MAAM,EAAMhH,KAAK,SAASiH,UAAU,GAC1C,gBAACzG,EAAA,EAAS0G,KAAV,KACI,gBAAC1G,EAAA,EAAS9F,OAAV,CAAiByM,QAAQ,oBACxBL,EAAYhH,KAAI,SAACsH,EAAQC,GAAT,OACb,gBAAC7G,EAAA,EAAS1F,KAAV,CAAewM,IAAKD,EAAKnI,MAAOkI,EAAOlI,MAAM4C,KAAMqF,QAASC,EAAOpH,KAAMmF,QAASA,YCWvF9K,eAAQ,MAtDI,SAAC4L,EAAoBjI,GAC5C,MAAO,CACHuJ,QAAS,WACLtB,EAASC,GAAuBrE,KAAK7D,EAASwJ,cAC9CrB,OAAOC,YAAW,kBAAMpI,EAASmB,aAAY,IAEjDsI,kBAAmB,SAAC3F,GAChBmE,EAASC,GAAuBrE,KAAKC,IACrCqE,OAAOC,YAAW,kBAAMpI,EAASmB,aAAY,IAEjDuI,KAAM,WACFzB,EAASC,GAAuBrE,KAAK7D,EAASwJ,YAAa,OAC3DrB,OAAOC,YAAW,kBAAMpI,EAASmB,aAAY,OA0C1C9E,EA5ByB,SAAC,GAAiF,IAA/EmN,EAA8E,EAA9EA,YAAarF,EAAiE,EAAjEA,OAAQC,EAAyD,EAAzDA,OAAQjD,EAAiD,EAAjDA,SAAUoI,EAAuC,EAAvCA,QAASG,EAA8B,EAA9BA,KAAMD,EAAwB,EAAxBA,kBACvFE,EAAexF,EAAOrC,KAAI,SAACgC,GAAD,MAAW,CAAEwF,IAAKxF,EAAM9B,KAAM8B,MACxD8F,EAAe1K,OAAOC,KAAKiF,GAAQtC,KAAI,SAACwH,GAAD,MAAU,CAAEA,IAAKlF,EAAOkF,GAAKxF,KAAM9B,KAAMoC,EAAOkF,GAAK5D,UAClG,OACI,gBAACwD,GAAA,EAAD,KACI,gBAAC,GAAD,MACA,gBAAC1G,EAAA,EAAD,CAAUR,KAAK,WAAWiH,UAAU,EAAMD,MAAM,GAC5C,gBAACxG,EAAA,EAAS0G,KAAV,KACI,gBAAC1G,EAAA,EAAS9F,OAAV,CAAiByM,QAAQ,WACxBQ,EAAa7H,KAAI,SAACsH,GACf,OAAO,gBAAC,GAAD,CAAkBE,IAAKF,EAAOE,IAAKpI,MAAOkI,EAAOE,IAAKH,QAASC,EAAOpH,KAAMb,SAAUA,OAEjG,gBAACqB,EAAA,EAAS9F,OAAV,CAAiByM,QAAQ,WACxBS,EAAa9H,KAAI,SAACsH,GACf,OAAO,gBAAC,GAAD,CAAkBE,IAAKF,EAAOE,IAAKpI,MAAOkI,EAAOE,IAAKH,QAASC,EAAOpH,KAAMb,SAAUA,SAIzG,gBAAC+H,GAAA,EAAKpM,KAAN,CAAWkG,KAAK,WAAWmE,QAASuC,IACpC,gBAACR,GAAA,EAAKpM,KAAN,CAAW6I,MAAO,CAAE8B,SAAU,IAC1B,gBAAC,GAAD,CAAWtG,SAAUsI,EAAmBlB,YAAaiB,KAEzD,gBAACN,GAAA,EAAKpM,KAAN,CAAWkG,KAAK,UAAUmE,QAASoC,QCnBzCM,GAAUhH,cAEViH,GAAc,WACQ,OAApBD,GAAQE,SAGZF,GAAQE,QAAQC,aAAa,IAGjC,SAASC,GAA4BC,EAAYC,GAC7C,OAAOD,EAAME,MAAK,SAACC,EAAGC,GAClB,IAAMC,EAAIJ,EAAOE,GACXG,EAAIL,EAAOG,GACjB,OAASC,EAAIC,GAAM,EAAMD,EAAIC,EAAK,EAAI,KAI9C,IClDYC,GAMAC,GDsFGrO,gBArFS,SAACC,GAAwB,IACrCqO,EAAYrO,EAAZqO,QACR,MAAO,CACHzG,MAAOyG,EAAQzG,MACfD,KAAM0G,EAAQ1G,KACdH,KAAM6G,EAAQ7G,KACdK,OAAQwG,EAAQxG,OAChBC,OAAQuG,EAAQvG,OAChBwG,UAAWD,EAAQC,cAIA,SAAC3C,GACxB,MAAO,CACHzD,OAAQ,kBAAMyD,EAASC,GAAuB1D,cAuEvCnI,EA1C6B,SAAC,GAA8D,IAA5D6H,EAA2D,EAA3DA,MAAOD,EAAoD,EAApDA,KAAMH,EAA8C,EAA9CA,KAAMK,EAAwC,EAAxCA,OAAQC,EAAgC,EAAhCA,OAAQI,EAAwB,EAAxBA,OAAQoG,EAAgB,EAAhBA,UAChFC,EAAa,SAAC7B,GAAD,OAAmCA,EAAKhM,KAAK8N,eAC1DC,EAAad,GAAUhG,EAAM4G,GAAY/I,KAAI,SAACkJ,GAAD,OAAS,SAACrF,GAAD,OAAmB,gBAAC,GAAD,CAAaA,MAAOA,EAAOxE,SAAU2I,GAAahG,KAAMA,EAAMsD,QAAS4D,QAChJC,EAAchB,GAAU/F,EAAO2G,GAAY/I,KAAI,SAACoJ,GAAD,OAAQ,SAACvF,GAAD,OAAmB,gBAAC,GAAD,CAAWA,MAAOA,EAAO7B,KAAMA,EAAMsD,QAAS8D,QACxHC,EAAUJ,EAAWK,OAAOH,GAM9BpH,EACA,gBAAC,KAAD,CAAM8B,MAAO,CAAE0F,UAAW,UAAYC,IAAKzB,GAAS0B,OAAQ,IAAKzF,MAAM,OAAO0F,UAAWL,EAAQxE,OAAQ8E,SAAU,KAL/F,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,MAAO/F,EAAY,EAAZA,MAC9B,OAAOwF,EAAQO,GAAO/F,MAgB1B,OAPIiF,IAEA/G,EACI,gBAAClB,EAAA,EAAD,CAASM,SAAS,EAAM0C,MAAO,CAAE4F,OAAQ,YAK7C,gBAAC5I,EAAA,EAAQgJ,MAAT,KACI,gBAAChJ,EAAA,EAAD,KACI,gBAACjG,EAAA,EAAD,CAAQC,GAAG,MAAX,iBAEJ,gBAACgG,EAAA,EAAD,KACI,gBAAC,GAAD,CAAS6G,YAAa1F,EAAMK,OAAQA,EAAQC,OAAQA,EAAQjD,SAAU2I,MAE1E,gBAACnH,EAAA,EAAD,KACI,gBAAC,GAAD,MACCkB,GAEL,gBAAClB,EAAA,EAAD,KACI,gBAACtB,EAAA,EAAD,CAAQ8F,QAAS3C,GAAjB,eE/EH9C,GAAqB,CAC9B4C,KAAM4D,GAAuB5D,MAmBlBjI,gBA1BgB,SAACC,GAC5B,MAAO,CACHsP,OAAQtP,EAAMqO,QAAQiB,UAwBUlK,GAAzBrF,EAdgC,SAAC,GAAsB,IAApBuP,EAAmB,EAAnBA,OAAQtH,EAAW,EAAXA,KACtD,OAAKsH,EASD,gBAAC,GAAD,MAPI,gBAACvK,EAAA,EAAD,CAAQ2B,MAAM,EAAM6I,cAAc,OAAO1E,QAAS7C,GAC9C,gBAACvH,EAAA,EAAD,CAAMC,KAAK,QADf,a,mBDhBAyN,K,oBAAAA,E,kBAAAA,E,aAAAA,Q,cAMAC,K,oBAAAA,E,0BAAAA,E,sBAAAA,E,kBAAAA,E,eAAAA,Q,oCEOGoB,GAhBgB,WAW3B,OACI,gBAAC/O,EAAA,EAAD,CAAMC,KAAK,MAAMiG,SAAS,EAAM0C,MAXA,CAChCoG,OAAQ,EACRC,QAAS,EACTC,SAAU,WACVC,OAAQ,OACRC,MAAO,OACPC,MAAO,QACPC,QAAS,GACTtD,OAAQ,gCCODuD,GAZkC,SAAC,GAAwB,IAAtB3I,EAAqB,EAArBA,SAAU4I,EAAW,EAAXA,KAI1D,OACI,uBAAK5G,MAJ2B,CAChCsG,SAAU,aAILtI,EACA4I,GAAQ,gBAAC,GAAD,QCgENC,GAnEf,2MACWC,mBADX,IAGWC,gBAAkB,SAACC,GACtB,EAAKF,cAAgBE,GAJ7B,EAOWC,WAAa,WAChB,EAAKH,mBAAgBhP,GAR7B,EAWWoP,gBAAkB,SAAC5N,GACtB,GAAI,EAAKwN,cACL,OAAO,EAAKA,cAAcK,kBAAkB7N,IAbxD,EAiBW8N,iBAAmB,SAAC9N,GACnB,EAAKwN,eACL,EAAKA,cAAcO,cAAc/N,IAnB7C,EAuBWgO,cAAgB,SAAChO,GAChB,EAAKwN,eACL,EAAKA,cAAcS,gBAAgBjO,IAzB/C,wEA6BqB,IAAD,EACcsD,KAAKhC,MAAvBuF,EADI,EACJA,MAAOyF,EADH,EACGA,OAIf,OACI,qBACI4B,YAAa5K,KAAKsK,gBAClBO,aAAc7K,KAAKwK,iBACnBM,UAAW9K,KAAK0K,cAChBK,UAAW/K,KAAKhC,MAAMgN,gBACtB5H,MATO,CACX6H,QAAS,oBASLC,SAAU,GAEV,wBAAM9H,MAAO,CAAE+H,KAAM,eACjBnD,EAAG,EAAGC,EAAG,EAAG1E,MAAOA,EAAOyF,OAAQA,IAErChJ,KAAKoL,mBA9CtB,sCAmD4B,IAAD,SACkBpL,KAAKhC,MAAlCqN,EADW,EACXA,QAASL,EADE,EACFA,gBAKjB,OAAOK,EAAQ9L,KAAI,SAAC6K,EAAGkB,GACnB,IAAMC,EAAOnB,EAAE,EAAKD,gBAAiB,EAAKE,WAAYW,GACtD,OAAI1K,iBAAqBiL,GACdjL,eAAmBiL,EAAM,CAAExE,IAAKuE,IAEpC,YA9DnB,GAAkChL,a,qBCYnBkL,GAZkC,SAAC,GAAqC,IAAnCC,EAAkC,EAAlCA,IAAKC,EAA6B,EAA7BA,QAASnI,EAAoB,EAApBA,MAAOyF,EAAa,EAAbA,OAC/D2C,EAASF,EAAIG,QAAQF,GAC3B,YAAexQ,IAAXyQ,EAEI,uBAAKE,UAAWC,KAAOC,SAAUxI,MAAOA,EAAOyF,OAAQA,EAAQgD,QAAO,cAASzI,EAAT,YAAkByF,GAAUjC,KAAM,IAI5G,yBAAO8E,UAAWC,KAAOG,QAASC,UAAWP,EAAOQ,SAAU5I,MAAOA,EAAOyF,OAAQA,K,kKCD5F,IAAMoD,GAAgBC,KAAOC,IAAV,MASbC,G,wLACsB,IAAD,EACqBvM,KAAKhC,MAArCuF,EADW,EACXA,MAAOyF,EADI,EACJA,OAAQwD,EADJ,EACIA,aACnBnB,EAAkC,GAKtC,OAJImB,IACAnB,EAAO,uBAAOA,GAAP,CAAgBmB,KAIvB,gBAAC,GAAD,CAAcjJ,MAAOA,EAAOyF,OAAQA,EAAQqC,QAASA,M,+BAI5C,IAAD,EAC0CrL,KAAKhC,MAAnDyN,EADI,EACJA,IAAKC,EADD,EACCA,QAASnI,EADV,EACUA,MAAOyF,EADjB,EACiBA,OAAQyD,EADzB,EACyBA,aAC/BzC,EAAOyB,EAAIiB,UAAYxE,GAAWyE,KAExC,OACI,gBAAC,GAAD,CAAa3C,KAAMA,GACf,gBAACoC,GAAD,CAAe7I,MAAOA,EAAOyF,OAAQA,EAAQgD,QAAO,cAASzI,EAAT,YAAkByF,IAClE,gBAAC,GAAD,CAAayC,IAAKA,EAAKC,QAASA,EAASnI,MAAOA,EAAOyF,OAAQA,IAC9DyD,EACAzM,KAAKoL,sB,GAtBL9K,aA6BNxG,eAAQ,KAAM,KAAdA,CAAoByS,I,+ICrDnC,IASeK,GATGP,KAAOQ,IAAV,MCsCTC,GAAsE,SAAC,GAAuB,IAArBvJ,EAAoB,EAApBA,MAAOyF,EAAa,EAAbA,OAClF,OACI,uBACI5F,MAAO,CACHC,QAAS,QACT0J,OAAQ,kBACRxJ,MAAO,OACPyF,OAAQ,QAEZzF,MAAOA,EAAOyF,OAAQA,EACtBgD,QAAO,cAASzI,EAAT,YAAkByF,GAAUjC,KAAM,KAK/CiG,G,2MACKjT,MAAyB,CAAEkT,gBAAiB,G,EAE5CC,cAAgB,SAACxQ,EAAyBqD,GAC7C,IAAMpB,EAAQoB,EAAKpB,MACnB,EAAKmB,SAAS,CAAEmN,gBAAiBtO,K,wEAGpB,IAAD,EAGRqB,KAAKhC,MADLmP,EAFQ,EAERA,SAAUC,EAFF,EAEEA,SAEd,GAAKD,GAAaA,EAASE,cAAiBD,EAASD,EAASE,cAG9D,OAAOD,EAASD,EAASE,gB,6BAGf5B,GACV,IAAKA,EACD,OAAO,wCAEX,GAAIA,EAAIiB,UAAYxE,GAAWyE,KAAM,CACjC,IAAMW,GAAM7B,EAAI8B,aAAe9B,EAAI+B,gBAAkB,IACrD,OAAO,oDAAoBF,EAAGjJ,QAAQ,GAA/B,KAEP,OAAO,yD,oCAIMoJ,EAAmChC,GAAiB,IAAD,EAC1BzL,KAAKhC,MAAvC0P,EAD4D,EAC5DA,SAAUtM,EADkD,EAClDA,SAAUuM,EADwC,EACxCA,UACtB9R,EAAMmE,KAAK4N,OAAOnC,GACxB,OACI,2BACKgC,EACArM,EACD,gBAAC,GAAD,KACI,gBAAC,GAAD,CAAqBqK,IAAKA,EAAKpN,aAAc2B,KAAKkN,cAAeW,YAAa7N,KAAKjG,MAAMkT,kBACxFU,GAEL,yBAAID,EAAJ,IAAe7R,M,+BAMvB,IAAM4P,EAAMzL,KAAK8N,SADL,EAKR9N,KAAKhC,MAFLuF,EAHQ,EAGRA,MAAOyF,EAHC,EAGDA,OACPwD,EAJQ,EAIRA,aAAcC,EAJN,EAIMA,aAGlB,OAAKhB,EAIEzL,KAAK+N,cACR,gBAAC,GAAD,CAAQtC,IAAKA,EACTe,aAAcA,EACdC,aAAcA,EACdlJ,MAAOA,EAAOyF,OAAQA,EACtB0C,QAAS1L,KAAKjG,MAAMkT,kBAExBxB,GAVOzL,KAAK+N,cAAc,gBAAC,GAAD,CAAuBxK,MAAOA,EAAOyF,OAAQA,IAAYyC,O,GAtDtEnL,aA2EnB0N,GAAqD,SAAC,GAAwC,IAAtCvC,EAAqC,EAArCA,IAAKpN,EAAgC,EAAhCA,aAAcwP,EAAkB,EAAlBA,YAC7E,IAAKpC,EACD,OAAO,KAEX,IAAMwC,EAAkBxC,EAAIG,QAAQrM,KAAI,SAACoM,EAAQ7E,GAAT,MAAkB,CAAErH,KAAMkM,EAAOuC,YAAY/K,MAAOxE,MAAOmI,MACnG,OACI,gCACI,sCACa,IACT,gBAAC7G,EAAA,EAAD,CACIC,QAAQ,EACRC,QAAS8N,EACTtP,MAAOkP,EACPjP,SAAUP,OAQfvE,gBAjIS,SAACC,EAAoB0D,GACzC,IAAM0Q,EAAmBpU,EAAMqU,iBAAiBC,KAAK5Q,EAAS0Q,kBACxDhB,EAAWpT,EAAMuU,SAASD,KAAKF,EAAiBtJ,QAAQyJ,SAAS7Q,EAAS8Q,gBAEhF,MAAO,CACHnB,SAAUrT,EAAMyU,KAAKH,KACrBlB,WACAgB,mBACAI,cAAe9Q,EAAS8Q,iBAyHjBzU,CAAyBkT,ICxJ3ByB,GAAmB,SAAClL,EAAeyF,GAAhB,OAAmC,SAAC0F,GAChE,MAAO,CACH1G,EAAGlE,KAAK6K,IAAI,EAAG7K,KAAK8K,IAAIrL,EAAQ,EAAGmL,EAAE1G,IACrCC,EAAGnE,KAAK6K,IAAI,EAAG7K,KAAK8K,IAAI5F,EAAS,EAAG0F,EAAEzG,OAUjC4G,GAAa,SAACC,EAAYC,EAAYC,GAAzB,OAAmE,SAAChH,EAAWC,GAAZ,OAA0B+G,GAAMA,EANzG,SAACF,EAAYC,EAAY/G,EAAWC,GACpD,IAAMgH,EAAKH,EAAK9G,EACVkH,EAAKH,EAAK9G,EAChB,OAAOnE,KAAKqL,KAAKF,EAAKA,EAAKC,EAAKA,GAG4FE,CAAKN,EAAIC,EAAI/G,EAAGC,MAEnIoH,GAAW,SAACN,GAAD,OAAgB,SAACL,GACrC,MAAO,CACH1G,EAAG0G,EAAE1G,EACLC,EAAG8G,KAkBEO,GAAe,SAACC,EAAkBR,GAAnB,OAAkC,SAACL,GAC3D,OAf4Bc,EAeLD,EAfwB,SAACb,GAChD,MAAO,CACH1G,EAAGwH,EAASd,EAAE1G,EAAIwH,EAASd,EAAE1G,EAC7BC,EAAGyG,EAAEzG,KAaLoH,GAASN,EAATM,CAAaX,IAhBU,IAACc,IAoBnBC,GAAgB,SAACC,EAAkBX,GAAnB,OAAkC,SAACL,GAC5D,OAd6Bc,EAcLE,EAdwB,SAAChB,GACjD,MAAO,CACH1G,EAAGwH,EAASd,EAAE1G,EAAIwH,EAASd,EAAE1G,EAC7BC,EAAGyG,EAAEzG,KAYLoH,GAASN,EAATM,CAAaX,IAfW,IAACc,IC3BpBG,GAAoB,SAACC,GAAD,MAAwC,CACrEC,YAAa,GACb1E,KAAM,MACN2E,cAAe,GACfC,OAAQ,MACRC,YAAaJ,EAAa,IAAM,ICUrBK,GANoB,SAAC,GAA4C,IAA1CL,EAAyC,EAAzCA,WAAyBd,GAAgB,EAA7BoB,YAA6B,EAAhBpB,IAAIC,EAAY,EAAZA,GAAIoB,EAAQ,EAARA,EACnE,OACI,0BAAQrB,GAAIA,EAAK,GAAIC,GAAIA,EAAK,GAAIoB,EAAGA,EAAG/M,MAAK,eAAOuM,GAAkBC,O,sfCD9E,IAAMQ,GAAe/D,KAAOgE,OAAV,MASZC,GAAQjE,KAAO9K,KAAV,MASLgP,GAAalE,KAAOmE,EAAV,MAIVC,GAAiC,SAAC,GAAmD,IAAjDC,EAAgD,EAAhDA,MAAO1I,EAAyC,EAAzCA,EAAGC,EAAsC,EAAtCA,EAAG0I,EAAmC,EAAnCA,UAAWC,EAAwB,EAAxBA,SAAaC,EAAW,yDAIhFzN,EAA6B,CAAE0N,UADpB,iBAAaJ,EAAb,mBAA6BA,EAA7B,aAAuC1I,EAAI0I,EAAQ1I,EAAnD,aAAyDC,EAAIyI,EAAQzI,EAArE,MAEX8I,EAAS,qBACR/I,EAAI,EAAImI,IADA,YACSlI,EADT,cACgBD,EAAImI,IADpB,YAC6BlI,EAD7B,aACmCD,EAAImI,IADvC,YACgDlI,EADhD,cACuDD,EAAI,EAAImI,IAD/D,YACwElI,EADxE,sBAERD,EAFQ,YAEHC,EAAI,EAAIkI,IAFL,cAEgBnI,EAFhB,YAEqBC,EAAIkI,IAFzB,aAEmCnI,EAFnC,YAEwCC,EAAIkI,IAF5C,cAEuDnI,EAFvD,YAE4DC,EAAI,EAAIkI,IAFpE,UAITa,EAAQL,EAAY,gBAACL,GAAD,CAAOW,EAAGF,EAAW3N,MAAOA,IAAY,KAClE,OACI,gBAACmN,GAAD,iBAAgBM,EAAhB,CAAsB9H,IAAK6H,IACvB,gBAACR,GAAD,CAActB,GAAI9G,EAAG+G,GAAI9G,EAAGkI,EAX1B,EAWgC/M,MAAOA,IACxC4N,IA+Bb,SAASE,GAAexU,EAAqByU,GACzC,IAAMxI,EAfH,SAA0B4C,GAC7B,IAAMe,EAAMf,EAAK6F,gBACjB,GAAY,OAAR9E,EACA,MAAM,IAAInQ,MAAM,yBAEpB,IAAMkV,EAAc/E,EAAIgF,aAAa,SACrC,GAAoB,OAAhBD,EACA,MAAM,IAAIlV,MAAM,4BAEpB,IAAMoV,GAAWF,EAEjB,OADwB/E,EAAIkF,wBACLjO,MAAQgO,EAIrBE,CAAiBN,GACrBO,EAAYP,EAAOK,wBAKzB,MAJY,CACRxJ,GAAItL,EAAEiV,OAASD,EAAUE,KAAOhM,OAAOiM,cAAgBlJ,EACvDV,GAAIvL,EAAEoV,OAASJ,EAAUK,IAAMnM,OAAOoM,cAAgBrJ,GAQvD,ICtFK9O,GDsFCoY,GAAb,YASI,WAAYjU,GAA8B,IAAD,8BACrC,4CAAMA,KATHkU,YAQkC,IAPlCtB,cAOkC,IALlC7W,MAAQ,CACXoY,UAAU,EACVC,KAAM,CAAEpK,EAAG,EAAGC,EAAG,IAGoB,EAOlCsC,kBAAoB,SAAC7N,GACxB,EAAK2V,KAAK3V,IAR2B,EAYlC+N,cAAgB,SAAC/N,GACpB,EAAK4V,SAAS5V,IAbuB,EAiBlCiO,gBAAkB,SAACjO,GACtB,EAAK4V,SAAS5V,IAlBuB,EAqBlC6V,gBAAkB,SAAC7D,GAAgB,IAC9B8D,EAAe,EAAKxU,MAApBwU,WACR,OAAIA,EACOA,EAAW9D,GAEXA,GA1B0B,EA8BlC+D,UAAY,SAAC/V,GAChBA,EAAEgW,iBADwD,IAElDC,EAAsB,EAAK3U,MAA3B2U,kBACR,IAAI,EAAKT,OAAO1K,QAYZ,MAAM,IAAIrL,MAAM,4BAXhB,EAAK2D,SAAS,CACVqS,UAAU,EACVC,KAAM,EAAKG,gBAAgBrB,GAAexU,EAAG,EAAKwV,OAAO1K,YAEzDmL,GACAA,EAAkB,iBAElB,EAAK/B,SAASpJ,SAAW,EAAKoJ,SAASpJ,QAAQoL,OAC/C,EAAKhC,SAASpJ,QAAQoL,SA1CO,EAiDlCP,KAAO,SAAC3V,GAA2C,IAC9CmW,EAAe,EAAK7U,MAApB6U,WACR,GAAK,EAAK9Y,MAAMoY,SAAhB,CAGA,IAAI,EAAKD,OAAO1K,QAUZ,MAAM,IAAIrL,MAAM,uBAThB,EAAK2D,SAAS,CACVsS,KAAM,EAAKG,gBAAgBrB,GAAexU,EAAG,EAAKwV,OAAO1K,YAC1D,WACC,GAAIqL,EAAY,CACZ,IAAMC,EAAc,EAAKP,gBAAgB,EAAKxY,MAAMqY,MACpDS,EAAWC,EAAY9K,EAAG8K,EAAY7K,SA5Db,EAoElCqK,SAAW,SAAC5V,GAA2C,IAClDqW,EAAiB,EAAK/U,MAAtB+U,aADiD,EAE9B,EAAKhZ,MAAxBoY,EAFiD,EAEjDA,SAAUC,EAFuC,EAEvCA,KACbD,IAGL,EAAKrS,SAAS,CACVqS,UAAU,IAEVY,GACAA,EAAaX,EAAKpK,EAAGoK,EAAKnK,KA9EO,EAkFlC+K,cAAgB,SAACtW,IE5KE,SAACA,EAAoCuW,GAC/D,IAAIC,EAAQ,EAIZ,OAHIxW,EAAEyW,WACFD,EAAQ,IAEJxW,EAAEqK,KACN,IAAK,UACDkM,GAAO,SAACjL,EAAWC,GAAZ,MAA2B,CAAED,IAAGC,EAAGA,EAAIiL,MAC9C,MACJ,IAAK,YACDD,GAAO,SAACjL,EAAWC,GAAZ,MAA2B,CAAED,IAAGC,EAAGA,EAAIiL,MAC9C,MACJ,IAAK,YACDD,GAAO,SAACjL,EAAWC,GAAZ,MAA2B,CAAED,EAAGA,EAAIkL,EAAOjL,QAClD,MACJ,IAAK,aACDgL,GAAO,SAACjL,EAAWC,GAAZ,MAA2B,CAAED,EAAGA,EAAIkL,EAAOjL,QAClD,MACJ,QACI,OAERvL,EAAEgW,iBFgKEU,CAAe1W,GARA,SAACL,GAAsB,IAAD,EACJ,EAAK2B,MAA1BgK,EADyB,EACzBA,EAAGC,EADsB,EACtBA,EAAG4K,EADmB,EACnBA,WACRQ,EAAYhX,EAAG2L,EAAGC,GAClB6K,EAAc,EAAKP,gBAAgBc,GACrCR,GACAA,EAAWC,EAAY9K,EAAG8K,EAAY7K,OAtF9C,EAAKiK,OAAS5R,cACd,EAAKsQ,SAAWtQ,cAHqB,EAT7C,0EAuGwB0H,EAAWC,GAAY,IAC/B2H,EAAe5P,KAAKhC,MAApB4R,WACFc,OAAuBxV,IAAf0U,EAA2B,EAAIA,EAAa,IAE1D,OACI,yBACI,wBACIxM,MAAO,CAAEkQ,WAAY,UACrBvK,IAAK/I,KAAKkS,OACVlK,EAAG,EAAGC,EAAG,EAAG1E,MAAO,EAAGyF,OAAQ,IAElC,gBAAC,GAAD,CAAQ0H,MAAOA,EAAO1I,EAAGA,EAAI,GAAIC,EAAGA,EAAI,GAAI0I,UAAW3Q,KAAKhC,MAAM2S,UAC9DC,SAAU5Q,KAAK4Q,SACf9F,UAAW9K,KAAKsS,SAChB1H,YAAa5K,KAAKqS,KAClBkB,YAAavT,KAAKyS,UAClB1H,UAAW/K,KAAKgT,cAChB9H,SAAU,OAxH9B,uCA8H6B,IAAD,EACHlL,KAAKjG,MAAMqY,KAApBpK,EADY,EACZA,EAAGC,EADS,EACTA,EACX,OAAOjI,KAAKwT,aAAaxL,EAAGC,KAhIpC,+BAmIqB,IAAD,EACKjI,KAAKhC,MAAdgK,EADI,EACJA,EAAGC,EADC,EACDA,EAEX,OAAIjI,KAAKjG,MAAMoY,SACJnS,KAAKyT,iBAELzT,KAAKwT,aAAaxL,EAAGC,OAzIxC,GAAqC3H,aA8ItB2R,O,SCpOHpY,K,kCAAAA,E,oCAAAA,E,oCAAAA,E,4BAAAA,E,oCAAAA,E,kCAAAA,E,oCAAAA,E,gCAAAA,E,uDAAAA,Q,KAYL,IEJK6Z,GAMAC,GFFCxY,GACD,SAACyY,EAAiBC,GAAlB,OAAkD/Y,EAAajB,GAAYia,OAAQ,CAAEF,UAASC,kBAD7F1Y,GAEA,SACLgT,EAAoC4F,GAD/B,OAEJjZ,EAAajB,GAAYma,QAAS,CAAE7F,mBAAkB4F,eAJlD5Y,GAKQ,SACb8Y,GADa,OAEZnZ,EAAajB,GAAYqa,iBAAkB,CAAED,wBAPzC9Y,GASJ,SAACY,EAAYwS,EAAuB1J,GAApC,OAAiE/J,EAAajB,GAAYsa,IAAK,CAAEpY,KAAIwS,gBAAe1J,aAThH1J,GAUA,SAACY,EAAY0P,EAAa8C,GAA1B,OAAoDzT,EAAajB,GAAYua,QAAS,CAAErY,KAAI0P,MAAK4I,SAAU9F,KAV3GpT,GAWD,SAACY,GAAD,OAAgBjB,EAAajB,GAAYya,OAAQ,CAAEvY,QAXlDZ,GAYA,SAACY,GAAD,OAAgBjB,EAAajB,GAAY0a,QAAS,CAAExY,QAZpDZ,GAaF,SAACU,EAAaC,EAAmBC,GAAjC,OAAgDjB,EAAajB,GAAYmC,MAAO,CAAEH,MAAKC,YAAWC,QGwB9FyY,GA9CQ,SAAC,GAMjB,IALHC,EAKE,EALFA,QAASC,EAKP,EALOA,UAAWC,EAKlB,EALkBA,WAAYpG,EAK9B,EAL8BA,cAAe0F,EAK7C,EAL6CA,mBAAoBnF,EAKjE,EALiEA,GAAIC,EAKrE,EALqEA,GAAI6F,EAKzE,EALyEA,MAAOC,EAKhF,EALgFA,MAO5EnP,EAAWoP,cAEjBxU,IAAMyU,WAAU,WACZ,GAAIN,EAAS,CACT,IAAMnZ,EAA6B,CAC/B0M,EAAG8G,EACH7G,EAAG8G,GAGPrJ,EAASsP,GAAoCf,EAAoB1F,EAAe,CAC5EsF,aAAc5W,EAAcgY,WAC5BC,WAAY5Z,QAGrB,CAAC2Y,EAAoBnF,EAAIC,EAAI0F,EAASlG,EAAe7I,IAExD,IAAMyP,EAAe,SAACC,EAAeC,GACjC,IAAMC,EAAOxR,KAAKyR,MAAMH,GAClBI,EAAO1R,KAAKyR,MAAMF,GACpBvG,IAAOwG,GAAQvG,IAAOyG,IAG1BZ,EAAMU,GACNT,EAAMW,KAYV,MAAO,CAAEC,OAAQ,CAAE3G,KAAIC,MAAM1D,QATkB,SAACqK,EAAaC,GAAd,OAC3C,kBAAC,GAAD,CAAiB3N,EAAG8G,EAAI7G,EAAG8G,EAAI4B,WAAW,EACtCf,WAAY8E,EACZ7B,WAAYsC,EACZxC,kBAAmB+C,EACnB3C,aAAc4C,EACdnD,WAAY/D,GAAiBiG,EAAWC,QCTrCiB,GAvBkD,SAAC,GAE3D,IADHC,EACE,EADFA,MAAOC,EACL,EADKA,YAAaC,EAClB,EADkBA,aAAc3Y,EAChC,EADgCA,MAOlC,OACI,gCACI,2BACKA,EADL,IACa,IACT,gBAAC6C,EAAA,EAAD,CACIC,QAAQ,EACRC,QAAS0V,EACTlX,MAAOmX,EACPlX,SAZC,SAAClC,EAAyBqD,GACvCgW,EAAahW,EAAKpB,aCQXqX,GAjBoB,SAAC,GAAsD,IAClFC,EACAC,EAF8BtG,EAAmD,EAAnDA,WAAyB5H,GAA0B,EAAvCkI,YAAuC,EAA1BlI,GAAGC,EAAuB,EAAvBA,EAAG1E,EAAoB,EAApBA,MAAOyF,EAAa,EAAbA,OAYxE,OATIA,EAAOzF,EAAQ,GACnB0S,EAAOnS,KAAK8K,IAAI3G,EAAGA,EAAEe,GACrBkN,EAAOpS,KAAK8K,IAAI5G,EAAGA,EAAEzE,IACZyF,EAAS,GAAKzF,EAAQ,GAC9B0S,EAAOhO,EACRiO,EAAOlO,EAAEzE,IAER0S,EAAOhO,EAAEe,EACVkN,EAAOlO,GAEH,wBAAMA,EAAGkO,EAAO,GAAIjO,EAAGgO,EAAO,GAAI1S,MAAOO,KAAKC,IAAIR,GAAQyF,OAAQlF,KAAKC,IAAIiF,GAAS5F,MAAK,eAAOuM,GAAkBC,OChBpHuG,GAAa,SAAC,GAGb,IAHezB,EAGhB,EAHgBA,UAAWC,EAG3B,EAH2BA,WAIvByB,EAAYtS,KAAK8K,IAAI8F,EAAWC,GADpC,EAEgB0B,mBAAS3B,EAAY,GAFrC,oBAEK1M,EAFL,KAEQsO,EAFR,OAGgBD,mBAAS1B,EAAa,GAHtC,oBAGK1M,EAHL,KAGQsO,EAHR,OAIwBF,mBAASD,EAAY,GAJ7C,oBAIK7S,EAJL,KAIYiT,EAJZ,OAK0BH,mBAASD,EAAY,GAL/C,oBAKKpN,EALL,KAKayN,EALb,KAmBIC,EAAqB,SAACC,EAAcC,GACtCN,EAAKK,GACLJ,EAAKK,IAGHC,EAAoB,SAACF,EAAcC,GACrCJ,EAASG,EAAO3O,GAChByO,EAAUG,EAAO3O,IAGf6O,EAAa,CACf9O,EAAGA,EAAIzE,EACP0E,EAAGA,EAAIe,GAsBX,MAAO,CACH+N,kBA9CmC,CACnCC,IAAK,CACDC,MAAO,OACPjP,IACAC,IACA1E,QACAyF,WAyCJkO,eArByC,SAAC/M,EAAiBE,GAAlB,OAAkC,gCAC3E,gBAAC,GAAD,CAAiBrC,EAAGA,EAAGC,EAAGA,EACtB2H,WAAY8E,EACZ7B,WAAY6D,EACZ/D,kBAAmBxI,EACnB4I,aAAc1I,IAClB,gBAAC,GAAD,CAAiBrC,EAAG8O,EAAW9O,EAAGC,EAAG6O,EAAW7O,EAC5C2H,WAAY8E,EACZ7B,WAAYgE,EACZlE,kBAAmBxI,EACnB4I,aAAc1I,MAYlB8M,eARA,gBAAC,GAAD,CAAMnP,EAAGA,EAAGC,EAAGA,EAAG1E,MAAOA,EAAOyF,OAAQA,EACpC4G,WAAY8E,EAAWxE,YAAayE,MCvD1CyC,GAAe,SAAC,GAQf,IARiBnD,EAQlB,EARkBA,mBAAoBQ,EAQtC,EARsCA,QAASlG,EAQ/C,EAR+CA,cAAe8I,EAQ9D,EAR8DA,cAAexD,EAQ7E,EAR6EA,aASzEnO,EAAWoP,cAkBjB,OAhBAxU,aAAgB,WACZ,IAAMgX,EAASzR,YAAW,WAClB4O,GAKA/O,EAAS6R,GAA4BtD,EAAoB1F,EAJjC,CACpBsF,eACAqB,WAAYmC,OAIrB,KAEH,OAAO,kBAAMG,aAAaF,MAG3B,CAACzD,EAAcI,EAAoBQ,EAASlG,EAAekJ,KAAKC,UAAUL,GAAgB3R,IAEtF,K,SLpBCgO,K,UAAAA,E,QAAAA,E,aAAAA,Q,cAMAC,K,UAAAA,E,YAAAA,E,aAAAA,Q,KAMZ,IAiIegE,GAjIa,SAAC,GAKtB,IAJHjD,EAIE,EAJFA,UAAWC,EAIT,EAJSA,WAAYV,EAIrB,EAJqBA,mBAAoB2D,EAIzC,EAJyCA,YAKrCC,EAAiB,CACnB,CACIpY,KAAM,UACNd,MAAO+U,GAAaoE,KAExB,CACIrY,KAAM,qBACNd,MAAO+U,GAAaqE,IAExB,CACItY,KAAM,OACNd,MAAO+U,GAAasE,OAItBC,EAAgB,CAClB,CACIxY,KAAM,MACNd,MAAOgV,GAAYuE,KAEvB,CACIzY,KAAM,OACNd,MAAOgV,GAAYwE,MAEvB,CACI1Y,KAAM,OACNd,MAAOgV,GAAYyE,OA3BzB,EA+B2B/B,mBAAS3C,GAAaoE,KA/BjD,oBA+BKO,EA/BL,KA+BgBC,EA/BhB,OAgCoBjC,mBAAS1C,GAAYuE,KAhCzC,oBAgCKlB,EAhCL,KAgCUuB,EAhCV,KAkCI7S,EAAWoP,cAYX0D,EAAoB,gBAAC,GAAD,CAAc3C,MAAOgC,EAAgB/B,YAAauC,EAAWtC,aAV/D,SAAC0C,GACrB/S,EAASsP,GAAgDf,IACzDqE,EAAQG,IAQ0Grb,MAAM,SAExHsb,EAAc,gBAAC,GAAD,CAAc7C,MAAOoC,EAAenC,YAAakB,EAAKjB,aAPtD,SAAC4C,GACfjT,EAASsP,GAAgDf,IACzDsE,EAAOI,IAKsFvb,MAAM,QAEnGib,IAAc3E,GAAasE,OAC3BU,EAAc,kCAnDhB,IAuEEE,EAvEF,EAsDkBtY,WAAewD,KAAKyR,MAAMb,EAAY,IAtDxD,oBAsDK5F,EAtDL,KAsDS8F,EAtDT,OAuDkBtU,WAAewD,KAAKyR,MAAMZ,EAAa,IAvDzD,oBAuDK5F,EAvDL,KAuDS8F,EAvDT,OAyDmDL,GAAe,CAChEC,QAAS4D,IAAc3E,GAAasE,KACpCtD,YAAWC,aACXpG,cAAe,EACf0F,qBACAnF,KAAIC,KAAI6F,QAAOC,UALHgE,EAzDd,EAyDMpD,OAA6BqD,EAzDnC,EAyD0BzN,QAzD1B,EAiE4D8K,GAAW,CAAExB,aAAYD,cAA/EwC,EAjEN,EAiEMA,eAAgBC,EAjEtB,EAiEsBA,eAAgBJ,EAjEtC,EAiEsCA,kBAjEtC,EMrBa,SAAC,GAGb,IAHerC,EAGhB,EAHgBA,UAAWC,EAG3B,EAH2BA,WAIvByB,EAAYtS,KAAK8K,IAAI8F,EAAWC,GADpC,EAEkB0B,mBAAS3B,EAAY,GAFvC,oBAEK5F,EAFL,KAES8F,EAFT,OAGkByB,mBAAS1B,EAAa,GAHxC,oBAGK5F,EAHL,KAGS8F,EAHT,OAIgBwB,mBAASD,EAAY,GAJrC,oBAIKjG,EAJL,KAIQ4I,EAJR,KAiBIC,EAAqB,SAACC,EAAeC,GACvCtE,EAAMqE,GACNpE,EAAMqE,IAGJC,EAAgB,SAACC,GACnBL,EAAKK,IAGHC,EAAU,CACZrR,EAAG8G,EAAKqB,EACRlI,EAAG8G,GAwBP,MAAO,CACHuK,kBA9CmC,CACnCtC,IAAK,CACDC,MAAO,OACPnI,KACAC,KACAoB,MA0CJoJ,eAvByC,SAACpP,EAAiBE,GAAlB,OAAkC,gCAC3E,gBAAC,GAAD,CAAiBrC,EAAG8G,EAAI7G,EAAG8G,EACvBa,WAAY8E,EACZ7B,WAAYmG,EACZrG,kBAAmBxI,EACnB4I,aAAc1I,EACdmI,WAAY/D,GAAiBiG,EAAWC,KAC5C,gBAAC,GAAD,CAAiB3M,EAAGqR,EAAQrR,EAAGC,EAAGoR,EAAQpR,EACtC2H,WAAY8E,EACZ7B,WAAYhE,GAAWC,EAAIC,EAAIoK,GAC/BxG,kBAAmBxI,EACnB4I,aAAc1I,EACdmI,WAAYnD,GAASN,OAYzByK,eARA,gBAAC,GAAD,CAAM1K,GAAIA,EAAIC,GAAIA,EAAIoB,EAAGA,EACrBP,WAAY8E,EAAWxE,YAAayE,KNoCkB8E,CAAW,CAAE9E,aAAYD,cAA/E6E,EAlEN,EAkEMA,eAAgBC,EAlEtB,EAkEsBA,eAAgBF,EAlEtC,EAkEsCA,kBAGpCjO,EADsC,SAACqK,EAAaC,GAAd,OAAyB,MAI/Dra,EAAS,CAAE0b,IAAK,IACpB,OAAQA,GACJ,KAAKrD,GAAYwE,KACb9M,EAAUkO,EACVX,EAAUY,EACVle,EAASge,EACT,MACJ,KAAK3F,GAAYyE,KACb/M,EAAU6L,EACV0B,EAAUzB,EACV7b,EAASyb,EAIjB,OAAQsB,GACJ,KAAK3E,GAAasE,KACd3M,EAAUyN,EACVF,OAAU1d,EA0BlB,OAtBAkc,GAAa,CACT3C,QAAS4D,IAAc3E,GAAaqE,IAAMH,EAC1ClD,YAAWC,aACXpG,cAAe,EACf0F,qBACAoD,cAAe/b,EACfuY,aAAc5W,EAAcyc,YAGhCtC,GAAa,CACT3C,QAAS4D,IAAc3E,GAAaoE,KAAOF,EAC3ClD,YAAWC,aACXpG,cAAe,EACf0F,qBACAoD,cAAe/b,EACfuY,aAAc5W,EAAc0c,aAOzB,CACHC,eAJAvB,IAAc3E,GAAasE,KAAO,KAAO,2CAAWa,EAAW/J,GAAtB,OAA8B+J,EAAW9J,GAAzC,WAKzCyJ,kBAAoB,gCAAGA,EAAH,IAAuBE,GAC3CA,cACArN,UACAuN,Y,UO5GOiB,GA7BsC,SAAC,GAI/C,IAHH1W,EAGE,EAHFA,MAAOuK,EAGL,EAHKA,SACPkE,EAEE,EAFFA,KAAMhI,EAEJ,EAFIA,MACNkQ,EACE,EADFA,QAEA,OACI,gCACI,gBAAC3f,EAAA,EAAD,CAAQC,GAAG,KAAK2f,SAAS,OACrB,gBAACvf,EAAA,EAAD,CAAMC,KAAK,QACX,gBAACN,EAAA,EAAOO,QAAR,KAAiByI,IAErB,gBAAC/C,EAAA,EAAD,CAAS2Z,UAAU,GACf,gBAACC,GAAA,EAAD,CAAMC,QAAS,GACX,gBAACD,GAAA,EAAKE,IAAN,KACI,gBAACF,GAAA,EAAKG,OAAN,KACKvI,EACD,yBAAIlE,IAER,gBAACsM,GAAA,EAAKG,OAAN,KACKvQ,MAKhBkQ,I,4BCrCN,SAASM,KACZ,IAAMC,EAAMzU,OAAO0U,SAASC,SAE5B,OAAGF,EAAIG,SAAS,KACN,GAAN,OAAUH,EAAV,QAEM,GAAN,OAAUA,EAAV,SASD,SAAeI,GAAtB,mC,gDAAO,WAA6BlZ,GAA7B,kBAAAuG,EAAA,6DACG4S,EAAWN,KADd,SAEaO,MAAM,GAAD,OAAID,GAAJ,OAAenZ,GAAQ,CACxCqZ,YAAa,cACbC,OAAQ,WAJT,cAEG1K,EAFH,gBAMUA,EAAE2K,OANZ,oF,sBASA,SAAeC,GAAtB,qC,gDAAO,WAA0BxZ,EAAcvG,GAAxC,kBAAA8M,EAAA,6DACG4S,EAAWN,KADd,SAEaO,MAAM,GAAD,OAAID,GAAJ,OAAenZ,GAAQ,CACxCyZ,KAAMvD,KAAKC,UAAU1c,GACrB4f,YAAa,cACbC,OAAQ,QALT,cAEG1K,EAFH,gBAOUA,EAAE2K,OAPZ,oF,sBCrBA,IAAMG,GAAc,SAACC,GACxB,IAAMngB,EAAsBkC,EAAcie,GAC1C,OAAOC,GAAyBpgB,ICW9BqgB,GAA+C,SAAC,GAE/C,IADHjN,EACE,EADFA,iBAAkBkN,EAChB,EADgBA,cAGZX,EAAWN,KAKXkB,EAAeta,aAAY,SAACjH,GAC9B,OAAOA,EAAMuU,SAASD,QAGpBjB,EAAWpM,aAAY,SAACjH,GAC1B,OAAOA,EAAMyU,KAAKH,QAGhBC,EAAWH,EAAiBtJ,QAAQyJ,SAAS/O,KAAI,SAAA4N,GACnD,OAAOmO,EAAanO,MACrB3G,QAAO,SAAA2G,GACN,OAAOA,EAASqB,KAAK+M,MAAK,SAAAC,GAAK,OAAIpO,EAASoO,GAAOta,SAAWiH,GAAUsT,cAkB5E,OACI,0BACKnN,EAAS/O,KAAI,SAAC4N,GACX,OACI,sBAAIpG,IAAKoG,EAASpR,IACd,qBAAGpB,MAtCF+gB,EAsCoBvO,EAASpR,GAtC9B,UACb2e,EADa,4BACevM,EAAiBA,iBADhC,qBAC6DuN,EAD7D,qBACoFL,EADpF,OAkBW,SAAClO,GAC5B,OAAO8N,GAAY9N,EAAStI,QAAQgP,cAAc8H,KAoB7BC,CAAuBzO,GAD5B,eAhBQ,SAACA,GACzB,OAAIA,EAASE,aAGND,EAASD,EAASE,cAAczB,QAAQpF,QAC3C,SAAAmF,GAAM,OAAIA,EAAOuC,YAAY2N,qBAC/Btc,KACE,SAAAoM,GAAM,OAAIA,EAAOuC,YAAY/K,SALtB,GAewD2Y,CAAoB3O,GAAU4O,KAAK,MADtF,MAtCA,IAACL,OAkGVM,GAzC4B,SAAC,GAA0B,IAAD,EAAvB7N,EAAuB,EAAvBA,iBACpC8N,EAAUjb,aAAY,SAACjH,GAAD,OAAwBA,EAAME,OAAOiiB,qBAC3DC,EAA+Bxf,OAAOC,KAAKqf,GAAS1c,KAAI,SAAA6c,GAC1D,MAAO,CACHzd,MAAOyd,EACP3c,KAAMwc,EAAQG,GAAYlO,gBAL+B,EAS9BmI,mBAAQ,UAAC8F,EAAc,UAAf,aAAC,EAAkBxd,OATG,oBAS1D0c,EAT0D,KAS3CgB,EAT2C,KAajE/b,aAAgB,WACgB,IAAzB6b,EAAc/X,QAAiBiX,GAC9BgB,EAAUF,EAAc,GAAGxd,SAEhC,CAACwd,EAAed,IAMnB,OACI,gBAACiB,EAAA,EAAD,CAAOC,QACH,gBAACzd,EAAA,EAAD,CAAQ2B,MAAM,GACV,gBAACjG,EAAA,EAAD,CAAMC,KAAK,aADf,aAKA,gBAAC+hB,EAAA,EAAMriB,OAAP,kCAC8B,gBAAC8F,EAAA,EAAD,CAAUC,QAAQ,EAAMC,QAASgc,EAAevd,SAZ/D,SAAClC,EAAyBqD,GAC7Csc,EAAUtc,EAAKpB,QAW6FA,MAAO0c,KAE/G,gBAACmB,EAAA,EAAM9hB,QAAP,KACI,gBAACP,EAAA,EAAD,CAAQC,GAAG,MAAX,sBACA,gBAAC,GAAD,CAAe+T,iBAAkBA,EAAkBkN,cAAeA,OClEnEoB,GA7ByB,SAAC,GAA6C,IAA3CC,EAA0C,EAA1CA,SAAUC,EAAgC,EAAhCA,QAASxO,EAAuB,EAAvBA,iBACpDzI,EAAWoP,cAEXxG,EAAWtN,aAAY,SAACjH,GAAD,OAAwBA,EAAMuU,YACrDE,EAAOxN,aAAY,SAACjH,GAAD,OAAwBA,EAAMyU,QAMjDoO,EADqB,SCtBE,SAACzO,EAAyCG,EAAgCE,GAAkF,IAA3DqO,EAA0D,uDAAxB,GAC5JC,EAAmB3O,EAAiBtJ,QAAQyJ,SAQhD,OANIuO,EAAsBzY,OAAS,IAC/B0Y,EAAmBA,EAAiBtW,QAAO,SAACkV,EAAoB5U,GAC5D,OAA+C,IAAxC+V,EAAsBE,QAAQjW,OAItCgW,EAAiBE,QAAO,SAACC,EAA4BvB,GACxD,IAAMvO,EAAWmB,EAASD,KAAKqN,GAC/B,OAAIvO,EAGYA,EAASqB,KAAK0O,OAC1B,SAAA1B,GAAK,OAAIhN,EAAKH,KAAKmN,GAAO9O,UAAYxE,GAAWyE,QAEpCsQ,EAAY,OALlBA,IAMZ,QDAYE,CACXhP,EAAkBG,EAAUE,EAC5BkO,GAGwC,CAAEjiB,KAAM,MAAOiG,SAAS,GAAS,CAAEjG,KAAM,SAErF,OACI,gBAAC2F,EAAA,EAAD,CAAS2Z,SAAS,UACd,gBAACjb,EAAA,EAAOsK,MAAR,KACI,gBAACtK,EAAA,EAAD,CAAQC,SAAS,EAAM6F,QAAS+X,EAASlc,MAAM,GAC3C,gBAACjG,EAAA,EAASoiB,GADd,SAIA,gBAAC,GAAD,CAAUzO,iBAAkBA,IAC5B,gBAACrP,EAAA,EAAD,CAAQ8F,QAlBC,kBAAMc,EAAS6R,GAA+BpJ,EAAiBA,oBAkBzC1N,MAAM,GACjC,gBAACjG,EAAA,EAAD,CAAMC,KAAK,WADf,aEqED2iB,GA3FgD,SAAC,GAAmC,IAAjCjP,EAAgC,EAAhCA,iBACtD8I,EADsF,EAAdrD,QACtDtY,OAAlB2b,MADsF,eAErCA,EAFqC,GAEvFtC,EAFuF,KAE3ED,EAF2E,KAEhExE,EAFgE,KAEnDN,EAFmD,KAGxFwG,EAAYtS,KAAK8K,IAAIgB,EAAYM,GAHuD,EAI1EmG,mBAASzG,EAAa,GAJoD,oBAIvFd,EAJuF,KAInF8F,EAJmF,OAK1EyB,mBAASnG,EAAc,GALmD,oBAKvFnB,EALuF,KAKnF8F,EALmF,OAM5EwB,mBAASD,EAAY,GANuD,oBAMvFjG,EANuF,KAMpF4I,EANoF,KAQxFrT,EAAWoP,cAEXuE,EAAU,CACZrR,EAAG8G,EAAKqB,EACRlI,EAAG8G,GAGDiK,EAAqB5c,GAAgB,SAAC6c,EAAeC,GACvDtE,EAAMqE,GACNpE,EAAMqE,MAEJC,EAAgB/c,EAAgB2c,GAiBhCsE,EACF,gBAAC,GAAD,CAAMvO,GAAIA,EAAIC,GAAIA,EAAIoB,EAAGA,EACrBP,WAAYA,EAAYM,YAAaA,IAtCiD,EA4C1FyH,GAAoB,CACpBjD,YACAC,aACAV,mBAAoB9F,EAAiBA,iBACrCyJ,YAAazJ,EAAiByJ,cAN9BgC,EA1C0F,EA0C1FA,eAAgBpB,EA1C0E,EA0C1EA,kBACP8E,EA3CiF,EA2C1FjS,QAAiCkS,EA3CyD,EA2ClE3E,QAQtBlL,EAAW,gCAAGkM,EAAH,oBAAoC9K,EAAGzK,QAAQ,GAA/C,OAAuD0K,EAAG1K,QAAQ,GAAlE,QAA2E8L,EAAE9L,QAAQ,IAchGyV,EAAU,gBAAC,GAAD,CAAS3L,iBAAkBA,EAAkBwO,QAZzC,WAChBjX,EAASsP,GAAoC7G,EAAiBA,iBAAkB,EAAG,CAC/E0F,aAAc5W,EAAcugB,eAC5BtI,WAAY,CACR+B,MAAO,MACPnI,KACAC,KACAoB,SAKuEuM,SAAU,CAAC,KAE9F,OACI,gBAAC,GAAD,CACIvZ,MAAM,eAAeuK,SAAUA,EAC/BkE,KAAM,gCACF,gBAAC,GAAD,CACIpF,aAnD+B,SAACrC,EAAiBE,GAAlB,OAAkC,gCAC7E,gBAAC,GAAD,CAAiBrC,EAAG8G,EAAI7G,EAAG8G,EACvBa,WAAYA,EACZiD,WAAYmG,EACZrG,kBAAmBxI,EACnB4I,aAAc1I,EACdmI,WAAY/D,GAAiBmB,EAAYM,KAC7C,gBAAC,GAAD,CAAiBlI,EAAGqR,EAAQrR,EAAGC,EAAGoR,EAAQpR,EACtC2H,WAAYA,EACZiD,WAAYhE,GAAWC,EAAIC,EAAIoK,GAC/BxG,kBAAmBxI,EACnB4I,aAAc1I,EACdmI,WAAYnD,GAASN,OAuCmBtC,aAAc4Q,EAC9C9O,cAAe,EAAGJ,iBAAkBA,EAAiBA,iBACrD5K,MAAOqM,EAAY5G,OAAQkH,EAC3BvC,UAAW6K,KAGnB5O,MAAO,gCACH,gBAAC,GAAD,CACI2E,cAAe,EAAGJ,iBAAkBA,EAAiBA,iBACrD5K,MAAOmR,EAAW1L,OAAQ2L,EAC1BnI,aAAc8Q,EACd7Q,aAAc8Q,KAGtBzD,QAASA,K,UCrGd,SAAS2D,GAAWC,EAAkCC,EAAeC,EAAaC,GACjFD,IAAQD,IAASC,GAAO,KAC5B,IAAIE,EAASF,EAAMD,EACnBG,EAASA,EAAS,EAAKA,EAAS,IAAOA,EACvC,IAAMC,EAAS,GAKf,OAJAA,EAAOC,KAAKC,GAAqBN,EAAOE,EAAQH,IAChDK,EAAOC,KAAKC,GAAqBN,EAAQG,EAAS,EAAGD,EAAQH,IAC7DK,EAAOC,KAAKC,GAAqBN,EAAiB,EAATG,EAAa,EAAGD,EAAQH,IACjEK,EAAOC,KAAKC,GAAqBL,EAAKC,EAAQH,IAIlD,SAAuBK,EAAyCF,EAAgBK,GAC5E,MAAO,CAAC,IAAKH,EAAO,GAAG/V,EAAG+V,EAAO,GAAG9V,EAChC,IAAK4V,EAAQA,EAAQ,EAAG,EAAGK,EAAWH,EAAO,GAAG/V,EAAG+V,EAAO,GAAG9V,EAC7D,IAAK4V,EAAQA,EAAQ,EAAG,EAAGK,EAAWH,EAAO,GAAG/V,EAAG+V,EAAO,GAAG9V,EAC7D,IAAK4V,EAAQA,EAAQ,EAAG,EAAGK,EAAWH,EAAO,GAAG/V,EAAG+V,EAAO,GAAG9V,GAC/D8T,KAAK,KARAoC,CAAcJ,EAAQF,EAASC,EAAS,IAAO,EAAI,GAW9D,SAASG,GAAqBH,EAAgBD,EAAgBH,GAC1D,IAAMU,EAAUN,EAASha,KAAKua,GAAM,IACpC,MAAO,CACHrW,EAAGlE,KAAKwa,IAAIF,GAAUP,EAASH,EAAO1V,EACtCC,EAAGnE,KAAKya,IAAIH,GAAUP,EAASH,EAAOzV,GCb9C,I,GAaeuW,GAboB,SAAC,GAAoC,IAAlC5O,EAAiC,EAAjCA,WAAYd,EAAqB,EAArBA,GAAIC,EAAiB,EAAjBA,GAAI0P,EAAa,EAAbA,GAMhDC,EAJY,CACdjB,GAAW,CAAEzV,EAAG8G,EAAK,GAAI7G,EAAG8G,EAAK,IAAM,GAAI,GAHoB,EAAT4P,IAItDlB,GAAW,CAAEzV,EAAG8G,EAAK,GAAI7G,EAAG8G,EAAK,IAAM,GAAI,GAAI0P,IAExB1C,KAAK,KAEhC,OACI,wBAAM9K,EAAGyN,EAAUE,SAAS,UAAUxb,MAAK,eAAOuM,GAAkBC,OC2D7DiP,GA7DsC,SAAC,GAI/C,IAHH1b,EAGE,EAHFA,MAAOuK,EAGL,EAHKA,SACPkE,EAEE,EAFFA,KAAMkN,EAEJ,EAFIA,IAAKlV,EAET,EAFSA,MACXkQ,EACE,EADFA,QAASiF,EACP,EADOA,YAAaC,EACpB,EADoBA,OAAQC,EAC5B,EAD4BA,OAAQC,EACpC,EADoCA,OAEtC,OACI,gCACI,gBAAC/kB,EAAA,EAAD,CAAQC,GAAG,KAAK2f,SAAS,OACrB,gBAACvf,EAAA,EAAD,CAAMC,KAAK,QACX,gBAACN,EAAA,EAAOO,QAAR,KAAiByI,IAErB,gBAAC/C,EAAA,EAAD,CAAS2Z,UAAU,GACf,gBAACC,GAAA,EAAD,CAAMC,QAAS,GACX,gBAACD,GAAA,EAAKE,IAAN,KACI,gBAACF,GAAA,EAAKG,OAAN,CAAa5W,MAAO,GAChB,yBAAIyb,IAGR,gBAAChF,GAAA,EAAKG,OAAN,CAAa5W,MAAO,GAChB,yBAAI0b,IAIR,gBAACjF,GAAA,EAAKG,OAAN,CAAa5W,MAAO,GAChB,yBAAI2b,KAIZ,gBAAClF,GAAA,EAAKE,IAAN,KACI,gBAACF,GAAA,EAAKG,OAAN,CAAa5W,MAAO,GACfqO,GAGL,gBAACoI,GAAA,EAAKG,OAAN,CAAa5W,MAAO,GACfub,GAGL,gBAAC9E,GAAA,EAAKG,OAAN,CAAa5W,MAAO,GACfqG,IAKT,gBAACoQ,GAAA,EAAKE,IAAN,KACI,gBAACF,GAAA,EAAKG,OAAN,CAAa5W,MAAO,IAEhB,2BAAMwb,GACN,yBAAIrR,OASnBoM,IC4HEqF,GApLyC,SAAC,GAAmC,IAAjChR,EAAgC,EAAhCA,iBAC/C8I,EAD+E,EAAdrD,QAC/CtY,OAAlB2b,MAD+E,eAE9BA,EAF8B,GAEhFtC,EAFgF,KAEpED,EAFoE,KAEzDxE,EAFyD,KAE5CN,EAF4C,KAGjFwG,EAAYtS,KAAK8K,IAAIgB,EAAYM,GAHgD,EAKnEmG,mBAASzG,EAAa,GAL6C,oBAKhFd,EALgF,KAK5E8F,EAL4E,OAMnEyB,mBAASnG,EAAc,GAN4C,oBAMhFnB,EANgF,KAM5E8F,EAN4E,OAOnEwB,mBAASD,EAAY,GAP8C,oBAOhFqI,EAPgF,KAO5EW,EAP4E,OAQnE/I,mBAASD,EAAY,GAR8C,oBAQhFuI,EARgF,KAQ5EU,EAR4E,KAUjFC,EAAW,CACbtX,EAAG8G,EAAK2P,EACRxW,EAAG8G,GAEDwQ,EAAW,CACbvX,EAAG8G,EAAK6P,EACR1W,EAAG8G,GAhBgF,EAmBzDzO,WAAe,GAnB0C,oBAmBhFkf,EAnBgF,KAmBvEC,EAnBuE,OAyB3Dnf,WAAe,KAzB4C,oBAyBhFof,EAzBgF,KAyBxEC,EAzBwE,OA+B3Drf,WAAe,IA/B4C,oBA+BhFsf,EA/BgF,KA+BxEC,EA/BwE,KAqCjF7G,EAAqB5c,GAAgB,SAAC6c,EAAeC,GACvDtE,EAAMqE,GACNpE,EAAMqE,MAEJ4G,EAAiB1jB,EAAgBgjB,GACjCW,EAAiB3jB,EAAgBijB,GAuBjChC,EACF,gBAAC,GAAD,CAAMvO,GAAIA,EAAIC,GAAIA,EAAI0P,GAAIA,EAAIE,GAAIA,EAC9B/O,WAAYA,IAGdlK,EAAWoP,cAtEsE,EAuEzBqB,GAAW,CAAEzB,YAAWC,eAA9EoC,EAvE+E,EAuE/EA,kBAAmBG,EAvE4D,EAuE5DA,eAAgBC,EAvE4C,EAuE5CA,eAE3C7W,aAAgB,WACR6N,EAAiByJ,aACjBlS,EAASsP,GAAoC7G,EAAiBA,iBAAkB,EAAG,CAC/E0F,aAAc5W,EAAc+iB,QAC5B9K,WAAY,QAGrB,CAAC/G,EAAiBA,iBAAkBzI,EAAUyI,EAAiByJ,cAElE,IAlFuF,GAsGnFD,GAAoB,CACpBjD,YACAC,aACAV,mBAAoB9F,EAAiBA,iBACrCyJ,YAAazJ,EAAiByJ,cAP9BgC,GAnGmF,GAmGnFA,eAAgBpB,GAnGmE,GAmGnEA,kBACP8E,GApG0E,GAoGnFjS,QACSkS,GArG0E,GAqGnF3E,QAQElL,GACF,gCAAGkM,GAAH,oBAAoC9K,EAAGzK,QAAQ,GAA/C,OAAuD0K,EAAG1K,QAAQ,GAAlE,SAA4Eoa,EAAGpa,QAAQ,GAAvF,QAAgGsa,EAAGta,QAAQ,IAEzGyV,GAAU,gBAAC,GAAD,CAAS3L,iBAAkBA,EAAkBwO,QA9BzC,WAChBjX,EAASsP,GAAoC7G,EAAiBA,iBAAkB,EAAG,CAC/E0F,aAAc5W,EAAcgjB,MAC5B/K,WAAY,CACR8B,IAAKD,EAAkBC,IACvBlI,KACAC,KACA0P,KACAE,KACAuB,QAASN,EACTO,QAAST,EACTU,SAAUZ,OAmB6D9C,SAAU,CAAC,KAhHP,GAkH7Cpc,YAAe,GAlH8B,sBAkHhF+f,GAlHgF,MAkHjEC,GAlHiE,MAwHjFvB,GACF,gBAACwB,GAAA,EAAD,KACI,gBAACA,GAAA,EAAUC,MAAX,CAAiBC,OAAQJ,GAAelX,MAAO,EAAGvE,QANtC,SAAC8b,GACjBJ,IAAkBD,MAMV,gBAAC7lB,EAAA,EAAD,CAAMC,KAAK,aADf,cAIA,gBAAC8lB,GAAA,EAAU7lB,QAAX,CAAmB+lB,OAAQJ,IACvB,gBAAC7hB,EAAA,EAAD,KACI,gBAACA,EAAA,EAAKC,MAAN,KACI,qDAA4B,yBAAO1D,KAAK,SAAS4D,MAAOihB,EAAQe,KAAK,IAAI/R,IAAI,IAAID,IAAI,MAAM/P,SAhG3F,SAAC8hB,GACjBb,EAAUa,EAAME,OAAOC,kBA+FP,MAEJ,gBAACriB,EAAA,EAAKC,MAAN,KACI,wLACwD,yBAAO1D,KAAK,SAAS4D,MAAO+gB,EAAQiB,KAAK,IAAI/R,IAAI,IAAID,IAAI,MAAM/P,SA1GxH,SAAC8hB,GAChBf,EAAUe,EAAME,OAAOC,kBAwGP,MAGJ,gBAACriB,EAAA,EAAKC,MAAN,KACI,4EAAmD,yBAAO1D,KAAK,SAAS4D,MAAO6gB,EAASmB,KAAK,IAAI/R,IAAI,IAAID,IAAI,MAAM/P,SAnHjH,SAAC8hB,GACnBjB,EAAWiB,EAAME,OAAOC,kBAkHR,UAKpB,OACI,gBAAC,GAAD,CACI1d,MAAM,oBAAoBuK,SAAUA,GACpCkE,KAAM,gCACF,gBAAC,GAAD,CACIpF,aAtG+B,SAACrC,EAAiBE,GAAlB,OAAkC,gCAC7E,gBAAC,GAAD,CAAiBrC,EAAG8G,EAAI7G,EAAG8G,EACvBa,WAAYA,EACZiD,WAAYmG,EACZjG,aAAc1I,EACdsI,kBAAmBxI,EACnBqI,WAAY/D,GAAiBmB,EAAYM,KAC7C,gBAAC,GAAD,CAAiBlI,EAAGuX,EAASvX,EAAGC,EAAGsX,EAAStX,EACxC2H,WAAYA,EACZiD,WAAYhE,GAAWC,EAAIC,EAAIgR,GAC/BhN,aAAc1I,EACdsI,kBAAmBxI,EACnBqI,WAAY/C,GAAc6P,EAAStX,EAAG+G,KAC1C,gBAAC,GAAD,CAAiB/G,EAAGsX,EAAStX,EAAGC,EAAGqX,EAASrX,EACxC2H,WAAYA,EACZmD,aAAc1I,EACdsI,kBAAmBxI,EACnB0I,WAAYhE,GAAWC,EAAIC,EAAI+Q,GAC/BtN,WAAYlD,GAAaiQ,EAASvX,EAAG+G,OAoFGtC,aAAc4Q,EAC9C9O,cAAe,EAAGJ,iBAAkBA,EAAiBA,iBACrD5K,MAAOqM,EAAY5G,OAAQkH,EAC3BvC,UAAW6K,MAGnBsG,IAAK,gCACD,gBAAC,GAAD,CACIvQ,cAAe,EAAGJ,iBAAkBA,EAAiBA,iBACrD5K,MAAOmR,EAAW1L,OAAQ2L,EAC1BnI,aAAc0K,EACdzK,aAAc0K,KAItBvN,MAAO,gCACH,gBAAC,GAAD,CACI2E,cAAe,EAAGJ,iBAAkBA,EAAiBA,iBACrD5K,MAAOmR,EAAW1L,OAAQ2L,EAC1BnI,aAAc8Q,GACd7Q,aAAc8Q,MAGtBzD,QAASA,GACTiF,YAAaA,GAEbC,OAAO,2CACPC,OAAO,yBACPC,OAAO,uBCvFJ4B,GA3F4C,SAAC,GAAmC,IAAjC3S,EAAgC,EAAhCA,iBAClD8I,EADkF,EAAdrD,QAClDtY,OAAlB2b,MADkF,eAEjCA,EAFiC,GAEnFtC,EAFmF,KAEvED,EAFuE,KAE5DxE,EAF4D,KAE/CN,EAF+C,KAIpFwG,EAAYtS,KAAK8K,IAAIgB,EAAYM,GAJmD,EAKtEmG,mBAASzG,EAAa,GALgD,oBAKnFd,EALmF,KAK/E8F,EAL+E,OAMtEyB,mBAASnG,EAAc,GAN+C,oBAMnFnB,EANmF,KAM/E8F,EAN+E,OAOxEwB,mBAASD,EAAY,GAPmD,oBAOnFjG,EAPmF,KAOhF4I,EAPgF,KASpFC,EAAqB,SAACC,EAAeC,GACvCtE,EAAMqE,GACNpE,EAAMqE,IAEJC,EAAgBJ,EAEhBM,EAAU,CACZrR,EAAG8G,EAAKqB,EACRlI,EAAG8G,GAkBDsO,EACF,gBAAC,GAAD,CAAMvO,GAAIA,EAAIC,GAAIA,EAAIoB,EAAGA,EACrBP,WAAYA,EAAYM,YAAaA,IAIvCxK,EAAWoP,cAzCyE,EAwDtF6C,GAAoB,CACpBjD,YACAC,aACAV,mBAAoB9F,EAAiBA,iBACrCyJ,YAAazJ,EAAiByJ,cAN9BgC,EAtDsF,EAsDtFA,eAAgBpB,EAtDsE,EAsDtEA,kBACP8E,EAvD6E,EAuDtFjS,QAAiCkS,EAvDqD,EAuD9D3E,QAQtBlL,EAAW,gCAAGkM,EAAH,oBAAoC9K,EAAGzK,QAAQ,GAA/C,OAAuD0K,EAAG1K,QAAQ,GAAlE,QAA2E8L,EAAE9L,QAAQ,IAEhGyV,EAAU,gBAAC,GAAD,CAAS3L,iBAAkBA,EAAkBwO,QAtBzC,WAChBjX,EAASsP,GAAoC7G,EAAiBA,iBAAkB,EAAG,CAC/E0F,aAAc5W,EAAc8jB,gBAC5B7L,WAAY,CACR+B,MAAO,OACPnI,KAAIC,KAAIoB,SAiB+DuM,SAAU,CAAC,KAE9F,OACI,gBAAC,GAAD,CACIvZ,MAAM,gBAAgBuK,SAAUA,EAChCkE,KAAM,gCACF,gBAAC,GAAD,CACIpF,aApD+B,SAACrC,EAAiBE,GAAlB,OAAkC,gCAC7E,gBAAC,GAAD,CAAiBrC,EAAG8G,EAAI7G,EAAG8G,EACvBa,WAAYA,EACZiD,WAAYmG,EACZrG,kBAAmBxI,EACnB4I,aAAc1I,EACdmI,WAAY/D,GAAiBmB,EAAYM,KAC7C,gBAAC,GAAD,CAAiBlI,EAAGqR,EAAQrR,EAAGC,EAAGoR,EAAQpR,EACtC2H,WAAYA,EACZiD,WAAYhE,GAAWC,EAAIC,EAAIoK,GAC/BxG,kBAAmBxI,EACnB4I,aAAc1I,EACdmI,WAAYnD,GAASN,OAwCmBtC,aAAc4Q,EAC9C9O,cAAe,EAAGJ,iBAAkBA,EAAiBA,iBACrD5K,MAAOqM,EAAY5G,OAAQkH,EAC3BvC,UAAW6K,KAGnB5O,MAAO,gCACH,gBAAC,GAAD,CACI2E,cAAe,EAAGJ,iBAAkBA,EAAiBA,iBACrD5K,MAAOmR,EAAW1L,OAAQ2L,EAC1BnI,aAAc8Q,EACd7Q,aAAc8Q,KAGtBzD,QAASA,KCoBNkH,GAzGuC,SAAC,GAAmC,IAAjC7S,EAAgC,EAAhCA,iBAC7C8I,EAD6E,EAAdrD,QAC7CtY,OAAlB2b,MAD6E,eAE5BA,EAF4B,GAE9EtC,EAF8E,KAElED,EAFkE,KAEvDxE,EAFuD,KAE1CN,EAF0C,KAG/EwG,EAAYtS,KAAK8K,IAAIgB,EAAYM,GAH8C,EAKjEmG,mBAASzG,EAAa,GAL2C,oBAK9Ed,EAL8E,KAK1E8F,EAL0E,OAMjEyB,mBAASnG,EAAc,GAN0C,oBAM9EnB,EAN8E,KAM1E8F,EAN0E,OAOjEwB,mBAASD,EAAY,GAP4C,oBAO9EqI,EAP8E,KAO1EW,EAP0E,OAQjE/I,mBAASD,EAAY,GAR4C,oBAQ9EuI,EAR8E,KAQ1EU,EAR0E,KAU/EC,EAAW,CACbtX,EAAG8G,EAAK2P,EACRxW,EAAG8G,GAEDwQ,EAAW,CACbvX,EAAG8G,EAAK6P,EACR1W,EAAG8G,GAGDiK,EAAqB5c,GAAgB,SAAC6c,EAAeC,GACvDtE,EAAMqE,GACNpE,EAAMqE,MAEJ4G,EAAiB1jB,EAAgBgjB,GACjCW,EAAiB3jB,EAAgBijB,GAuBjChC,EACF,gBAAC,GAAD,CAAMvO,GAAIA,EAAIC,GAAIA,EAAI0P,GAAIA,EAAIE,GAAIA,EAC9B/O,WAAYA,IAGdlK,EAAWoP,cApDoE,EAoEjF6C,GAAoB,CACpBjD,YACAC,aACAV,mBAAoB9F,EAAiBA,iBACrCyJ,YAAazJ,EAAiByJ,cAP9BgC,EAjEiF,EAiEjFA,eAAgBpB,EAjEiE,EAiEjEA,kBACP8E,EAlEwE,EAkEjFjS,QACSkS,EAnEwE,EAmEjF3E,QAQElL,EACF,gCAAGkM,EAAH,oBAAoC9K,EAAGzK,QAAQ,GAA/C,OAAuD0K,EAAG1K,QAAQ,GAAlE,SAA4Eoa,EAAGpa,QAAQ,GAAvF,QAAgGsa,EAAGta,QAAQ,IAGzGyV,EAAU,gBAAC,GAAD,CAAS3L,iBAAkBA,EAAkBwO,QAzBzC,WAChBjX,EAASsP,GAAoC7G,EAAiBA,iBAAkB,EAAG,CAC/E0F,aAAc5W,EAAcgkB,IAC5B/L,WAAY,CACR+B,MAAO,OACPnI,KAAIC,KAAI0P,KAAIE,UAoB2DjC,SAAU,CAAC,KAE9F,OACI,gBAAC,GAAD,CACIvZ,MAAM,yCAAyCuK,SAAUA,EACzDkE,KAAM,gCACF,gBAAC,GAAD,CACIpF,aA5D+B,SAACrC,EAAiBE,GAAlB,OAAkC,gCAC7E,gBAAC,GAAD,CAAiBrC,EAAG8G,EAAI7G,EAAG8G,EACvBa,WAAYA,EACZiD,WAAYmG,EACZjG,aAAc1I,EACdsI,kBAAmBxI,EACnBqI,WAAY/D,GAAiBmB,EAAYM,KAC7C,gBAAC,GAAD,CAAiBlI,EAAGuX,EAASvX,EAAGC,EAAGsX,EAAStX,EACxC2H,WAAYA,EACZiD,WAAYhE,GAAWC,EAAIC,EAAIgR,GAC/BhN,aAAc1I,EACdsI,kBAAmBxI,EACnBqI,WAAY/C,GAAc6P,EAAStX,EAAG+G,KAC1C,gBAAC,GAAD,CAAiB/G,EAAGsX,EAAStX,EAAGC,EAAGqX,EAASrX,EACxC2H,WAAYA,EACZmD,aAAc1I,EACdsI,kBAAmBxI,EACnB0I,WAAYhE,GAAWC,EAAIC,EAAI+Q,GAC/BtN,WAAYlD,GAAaiQ,EAASvX,EAAG+G,OA0CGtC,aAAc4Q,EAC9C9O,cAAe,EAAGJ,iBAAkBA,EAAiBA,iBACrD5K,MAAOqM,EAAY5G,OAAQkH,EAC3BvC,UAAW6K,KAGnB5O,MAAO,gCACH,gBAAC,GAAD,CACI2E,cAAe,EAAGJ,iBAAkBA,EAAiBA,iBACrD5K,MAAOmR,EAAW1L,OAAQ2L,EAC1BnI,aAAc8Q,EACd7Q,aAAc8Q,KAGtBzD,QAASA,KCjENoH,GA3CW,SAAC,GAQpB,IAPHzM,EAOE,EAPFA,QAASC,EAOP,EAPOA,UAAWC,EAOlB,EAPkBA,WAAYpG,EAO9B,EAP8BA,cAAe0F,EAO7C,EAP6CA,mBAC/CnF,EAME,EANFA,GAAIC,EAMF,EANEA,GAAIoS,EAMN,EANMA,SAAUC,EAMhB,EANgBA,aAAcC,EAM9B,EAN8BA,aAAczM,EAM5C,EAN4CA,MAAOC,EAMnD,EANmDA,MAQ/CnP,EAAWoP,cAEjBxU,IAAMyU,WAAU,WACRN,GACA/O,EAASsP,GAAoCf,EAAoB1F,EAAe,CAC5EsF,aAAc5W,EAAcqkB,eAC5BpM,WAAY,CAAElN,EAAG8G,EAAI7G,EAAG8G,EAAIoS,WAAUC,eAAcC,qBAG7D,CAACpN,EAAoBnF,EAAIC,EAAI0F,EAASlG,EAAe4S,EAAUC,EAAcC,EAAc3b,IAE9F,IAAMyP,EAAe,SAACC,EAAeC,GACjC,IAAMC,EAAOxR,KAAKyR,MAAMH,GAClBI,EAAO1R,KAAKyR,MAAMF,GACpBvG,IAAOwG,GAAQvG,IAAOyG,IAG1BZ,EAAMU,GACNT,EAAMW,KAYV,MAAO,CAAEC,OAAQ,CAAE3G,KAAIC,MAAM1D,QATkB,SAACqK,EAAaC,GAAd,OAC3C,kBAAC,GAAD,CAAiB3N,EAAG8G,EAAI7G,EAAG8G,EAAI4B,WAAW,EACtCf,WAAY8E,EACZ7B,WAAYsC,EACZxC,kBAAmB+C,EACnB3C,aAAc4C,EACdnD,WAAY/D,GAAiBiG,EAAWC,QCvBrC4M,GAjBS,SAAC,GAIlB,IAHH9M,EAGE,EAHFA,QAAwBJ,EAGtB,EAHO9F,cAA6CmN,EAGpD,EAHgCzH,mBAAgCkN,EAGhE,EAHgEA,SAAUC,EAG1E,EAH0EA,aAAcC,EAGxF,EAHwFA,aAIpF3b,EAAWoP,cAEjBxU,IAAMyU,WAAU,WACRN,GACA/O,EAAS6R,GAA4BmE,EAAYrH,EAAU,CACvDR,aAAc5W,EAAcukB,cAC5BtM,WAAY,CAAEiM,WAAUC,eAAcC,qBAG/C,CAAC3F,EAAYjH,EAASJ,EAAU8M,EAAUC,EAAcC,EAAc3b,KCyE9D+b,GAhFS,SAAC,GAOlB,IANH/M,EAME,EANFA,UAAWC,EAMT,EANSA,WAAYV,EAMrB,EANqBA,mBAAoBkN,EAMzC,EANyCA,SAAUC,EAMnD,EANmDA,aACrDC,EAKE,EALFA,aAAczJ,EAKZ,EALYA,YAMRC,EAAiB,CACnB,CACIpY,KAAM,OACNd,MAAO1B,EAAcgY,YAEzB,CACIxV,KAAM,UACNd,MAAO1B,EAAc0c,aAR3B,EAY2BtD,mBAASpZ,EAAc0c,YAZlD,oBAYKtB,EAZL,KAYgBC,EAZhB,KAcI5S,EAAWoP,cAOX0D,EAAoB,gBAAC,GAAD,CAAc3C,MAAOgC,EAAgB/B,YAAauC,EAAWtC,aALpE,SAAC0C,GAChB/S,EAASsP,GAAgDf,IACzDqE,EAAQG,IAGqGrb,MAAM,SArBrH,EAuBkBkD,WAAewD,KAAKyR,MAAMb,EAAY,IAvBxD,oBAuBK5F,EAvBL,KAuBS8F,EAvBT,OAwBkBtU,WAAewD,KAAKyR,MAAMZ,EAAa,IAxBzD,oBAwBK5F,EAxBL,KAwBS8F,EAxBT,OA0BmDL,GAAe,CAChEC,QAAS4D,IAAcpb,EAAcgY,YAAc2C,EACnDlD,YAAWC,aACXpG,cAAe,EACf0F,qBACAnF,KAAIC,KAAI6F,QAAOC,UALHgE,EA1Bd,EA0BMpD,OAA6BqD,EA1BnC,EA0B0BzN,QAQ5B6V,GAAkB,CACdzM,QAAS4D,IAAcpb,EAAcgY,YAAc2C,EACnDlD,YAAWC,aACXpG,cAAe,EACf0F,qBACAnF,KAAIC,KAAI6F,QAAOC,QAAOsM,WAAUC,eAAcC,iBAGlDjK,GAAa,CACT3C,QAAS4D,IAAcpb,EAAc0c,YAAc/B,EACnDrJ,cAAe,EACf0F,qBACAS,YAAWC,aACX0C,cAAe,CAAEL,IAAK,IACtBnD,aAAc5W,EAAc0c,aAEhC4H,GAAgB,CACZ9M,QAAS4D,IAAcpb,EAAc0c,YAAc/B,EACnDrJ,cAAe,EACf0F,qBACAkN,WACAC,eACAC,iBASJ,MAAO,CACHzH,eANAvB,IAAcpb,EAAcgY,WAAa,KAAO,2CAAW4D,EAAW/J,GAAtB,OAA8B+J,EAAW9J,GAAzC,WAOhD1D,QAASgN,IAAcpb,EAAcgY,WAJC,SAACS,EAAaC,GAAd,OAAyB,MAICmD,EAEhEN,sBCfOkJ,GAxDwC,SAAC,GAIjD,IAHHve,EAGE,EAHFA,MAAOuK,EAGL,EAHKA,SACPkE,EAEE,EAFFA,KAAMkN,EAEJ,EAFIA,IAAKlV,EAET,EAFSA,MACXkQ,EACE,EADFA,QAASkF,EACP,EADOA,OAAQC,EACf,EADeA,OAAQC,EACvB,EADuBA,OAEzB,OACI,gCACI,gBAAC/kB,EAAA,EAAD,CAAQC,GAAG,KAAK2f,SAAS,OACrB,gBAACvf,EAAA,EAAD,CAAMC,KAAK,QACX,gBAACN,EAAA,EAAOO,QAAR,KAAiByI,IAErB,gBAAC/C,EAAA,EAAD,CAAS2Z,UAAU,GACf,gBAACC,GAAA,EAAD,CAAMC,QAAS,GACX,gBAACD,GAAA,EAAKE,IAAN,KACI,gBAACF,GAAA,EAAKG,OAAN,CAAa5W,MAAO,GAChB,yBAAIyb,IAGR,gBAAChF,GAAA,EAAKG,OAAN,CAAa5W,MAAO,GAChB,yBAAI0b,IAGR,gBAACjF,GAAA,EAAKG,OAAN,CAAa5W,MAAO,GAChB,yBAAI2b,KAIZ,gBAAClF,GAAA,EAAKE,IAAN,KACI,gBAACF,GAAA,EAAKG,OAAN,CAAa5W,MAAO,GACfqO,GAGL,gBAACoI,GAAA,EAAKG,OAAN,CAAa5W,MAAO,GACfub,GAGL,gBAAC9E,GAAA,EAAKG,OAAN,CAAa5W,MAAO,GACfqG,IAKT,gBAACoQ,GAAA,EAAKE,IAAN,KACI,gBAACF,GAAA,EAAKG,OAAN,CAAa5W,MAAO,IAChB,yBAAImK,IAGR,gBAACsM,GAAA,EAAKG,OAAN,CAAa5W,MAAO,OAI/BuW,IC4HE6H,GA9KuC,SAAC,GAAmC,IAkHlFjU,EACAoR,EAnHiD3Q,EAAgC,EAAhCA,iBAC7C8I,EAD6E,EAAdrD,QAC7CtY,OAAlB2b,MAD6E,eAE5BA,EAF4B,GAE9EtC,EAF8E,KAElED,EAFkE,KAEvDxE,EAFuD,KAE1CN,EAF0C,KAG/EwG,EAAYtS,KAAK8K,IAAIgB,EAAYM,GAEjCpB,EAAKc,EAAa,EAClBb,EAAKmB,EAAc,EAN4D,EAO9DmG,mBAASD,EAAY,GAPyC,oBAO9EwL,EAP8E,KAOvExC,EAPuE,OAQ7D/I,mBAASD,EAAY,GARwC,oBAQ9EyL,EAR8E,KAQtExC,EARsE,KAU/E3Z,EAAWoP,cACXwK,EAAW,CACbtX,EAAG8G,EAAK8S,EACR3Z,EAAG8G,GAEDwQ,EAAW,CACbvX,EAAG8G,EAAK+S,EACR5Z,EAAG8G,GAID+Q,EAAiB1jB,EAAgBgjB,GACjCW,EAAiB3jB,EAAgBijB,GAkBjCyC,EACF,gBAAC,GAAD,CAAMhT,GAAIA,EAAIC,GAAIA,EAAI0P,GAAImD,EAAOjD,GAAIkD,EACjCjS,WAAYA,IA1CiE,EA6C3DtP,YAAe,GA7C4C,oBA6C9EyhB,EA7C8E,KA6CvEC,EA7CuE,OAoDxD3L,mBAASzG,EAAa,GApDkC,oBAoD9EqS,EApD8E,KAoDjErN,EApDiE,OAqDxDyB,mBAASnG,EAAc,GArDiC,oBAqD9EgS,EArD8E,KAqDjErN,EArDiE,OAsD7DwB,mBAASD,EAAY,GAtDwC,oBAsD9E+L,EAtD8E,KAsDrEpJ,EAtDqE,KAwD/EC,EAAqB5c,GAAgB,SAAC6c,EAAeC,GACvDxT,EAASsP,GAAgD7G,EAAiBA,mBAC1EyG,EAAMqE,GACNpE,EAAMqE,MAEJC,EAAgB/c,EAAgB2c,GAEhCM,EAAU,CACZrR,EAAGia,EAAcE,EACjBla,EAAGia,GAkBDE,EACF,gBAAC,GAAD,CAAMtT,GAAImT,EAAalT,GAAImT,EAAa/R,EAAGgS,EACvCvS,WAAYA,EAAYM,YAAaA,IArFwC,EAsGfuR,GAAgB,CAClF/M,YACAC,aACAV,mBAAoB9F,EAAiBA,iBACrCgT,SAAUY,EAAQI,EAAU,KAC5Bf,aAAcW,EAAQE,EAAc,KACpCZ,aAAcU,EAAQG,EAAc,KACpCtK,YAAazJ,EAAiByJ,cAP1BgC,EAtG6E,EAsG7EA,eAAgBpB,EAtG6D,EAsG7DA,kBAA4B8E,GAtGiC,EAsG1CjS,QAUrCyO,GAAU,gBAAC,GAAD,CAAS3L,iBAAkBA,EAAkBwO,QAvBzC,WAChBjX,EAASsP,GAAoC7G,EAAiBA,iBAAkB,EAAG,CAC/E0F,aAAc5W,EAAcolB,eAC5BnN,WAAY,CACRoN,OAAQV,EACRW,QAASV,EACTV,SAAUY,EAAQI,EAAU,KAC5Bf,aAAcW,EAAQE,EAAc,KACpCZ,aAAcU,EAAQG,EAAc,UAemCxF,SAAU,CAAC,KA+B9F,OA3BIqF,GACAjD,EAAO,gCACH,gBAAC,GAAD,CACItS,aAnDuC,SAACrC,EAAiBE,GAAlB,OAAkC,gCACjF,gBAAC,GAAD,CAAiBrC,EAAGia,EAAaha,EAAGia,EAChCtS,WAAYA,EACZiD,WAAYmG,EACZrG,kBAAmBxI,EACnB4I,aAAc1I,EACdmI,WAAY/D,GAAiBmB,EAAYM,KAC7C,gBAAC,GAAD,CAAiBlI,EAAGqR,EAAQrR,EAAGC,EAAGoR,EAAQpR,EACtC2H,WAAYA,EACZiD,WAAYhE,GAAWoT,EAAaC,EAAa/I,GACjDxG,kBAAmBxI,EACnB4I,aAAc1I,EACdmI,WAAYnD,GAAS6S,OAuCmBzV,aAAc2V,EAClD7T,cAAe,EAAGJ,iBAAkBA,EAAiBA,iBACrD5K,MAAOqM,EAAY5G,OAAQkH,EAC3BvC,UAAW6K,KAGnB9K,EACI,gCAAGkM,EAAH,aAA6BgI,EAAMvd,QAAQ,GAA3C,oBAAgE4d,EAAY5d,QAAQ,GAApF,OAA4F6d,EAAY7d,QAAQ,GAAhH,qBAAsIud,EAAMvd,QAAQ,GAApJ,qBAA0Kwd,EAAOxd,QAAQ,MAI7Lya,EAAO,gCACH,gBAAC,GAAD,CACIvQ,cAAe,EAAGJ,iBAAkBA,EAAiBA,iBACrD5K,MAAOqM,EAAY5G,OAAQkH,EAC3BvC,UAAW6K,KAGnB9K,EACI,gCAAGkM,EAAH,mBAAmCgI,EAAMvd,QAAQ,GAAjD,qBAAuEwd,EAAOxd,QAAQ,KAM1F,gBAAC,GAAD,CACIlB,MAAM,eAAeuK,SAAUA,EAC/BkE,KAAM,gCACF,gBAAC,GAAD,CACIpF,aA5HkC,SAACrC,EAAiBE,GAAlB,OAAkC,gCAEhF,gBAAC,GAAD,CAAiBrC,EAAGuX,EAASvX,EAAGC,EAAGsX,EAAStX,EACxC2H,WAAYA,EACZiD,WAAYhE,GAAWC,EAAIC,EAAIgR,GAC/BhN,aAAc1I,EACdsI,kBAAmBxI,EACnBqI,WAAY/C,GAAc6P,EAAStX,EAAG+G,KAC1C,gBAAC,GAAD,CAAiB/G,EAAGsX,EAAStX,EAAGC,EAAGqX,EAASrX,EACxC2H,WAAYA,EACZmD,aAAc1I,EACdsI,kBAAmBxI,EACnB0I,WAAYhE,GAAWC,EAAIC,EAAI+Q,GAC/BtN,WAAYlD,GAAaiQ,EAASvX,EAAG+G,OA+GMtC,aAAcqV,EACjDvT,cAAe,EAAGJ,iBAAkBA,EAAiBA,iBACrD5K,MAAOqM,EAAY5G,OAAQkH,KAGnC4O,IAAKA,EAELlV,MAAO,gCACH,gBAAC,GAAD,CACI2E,cAAe,EAAGJ,iBAAkBA,EAAiBA,iBACrD5K,MAAOmR,EAAW1L,OAAQ2L,EAC1BnI,aAAc8Q,MAGtBxD,QAASA,GAETmF,OAAQ,gCAAE,4EAAmD,yBAAOlkB,KAAK,WAAWN,KAAK,QAAQmE,SArHpF,SAAC8hB,GAClBhb,EAASsP,GAAgD7G,EAAiBA,mBAC1E6T,EAAStB,EAAME,OAAO4B,UAmHuGA,QAAST,IAAxH,MAEV/C,OAAO,iDACPE,OAAO,wBC/FJuD,GA1EkD,SAAC,GAAoC,IAAlCtU,EAAiC,EAAjCA,iBACxD8I,EADyF,EAAfrD,QACxDtY,OAAlB2b,MADyF,eAExCA,EAFwC,GAE1FtC,EAF0F,KAE9ED,EAF8E,KAEnExE,EAFmE,KAEtDN,EAFsD,OAI7EyG,mBAASzG,EAAa,GAJuD,oBAI1Fd,EAJ0F,KAItF8F,EAJsF,OAK7EyB,mBAASnG,EAAc,GALsD,oBAK1FnB,EAL0F,KAKtF8F,EALsF,KAM3FmE,EAAqB5c,GAAgB,SAAC6c,EAAeC,GACvDtE,EAAMqE,GACNpE,EAAMqE,MARuF,EAwB7FvB,GAAoB,CACpBjD,YACAC,aACAV,mBAAoB9F,EAAiBA,iBACrCyJ,YAAazJ,EAAiByJ,cAP9BgC,EArB6F,EAqB7FA,eAAgBpB,EArB6E,EAqB7EA,kBACP8E,EAtBoF,EAsB7FjS,QACSkS,EAvBoF,EAuB7F3E,QAQElL,EACF,gCAAGkM,EAAH,qBAAqC9K,EAAGzK,QAAQ,GAAhD,OAAwD0K,EAAG1K,QAAQ,GAAnE,KAGEqB,EAAWoP,cAaXgF,EAAU,gBAAC,GAAD,CAAS3L,iBAAkBA,EAAkBwO,QAXzC,WAChBjX,EAAS6R,GAA4BpJ,EAAiBA,iBAAkB,EAAG,CACvE0F,aAAc5W,EAAcylB,qBAC5BxN,WAAY,CACR+B,MAAO,QACPnI,KACAC,UAKuE2N,SAAU,CAAC,KAE9F,OACI,gBAAC,GAAD,CACIvZ,MAAM,iBAAiBuK,SAAUA,EACjCkE,KAAM,gCACF,gBAAC,GAAD,CACIpF,aA5C+B,SAACrC,EAAiBE,GAAlB,OAAkC,gCAC7E,gBAAC,GAAD,CAAiBrC,EAAG8G,EAAI7G,EAAG8G,EAAI4B,WAAW,EACtCkC,WAAYmG,EACZpJ,WAAYA,EACZ+C,kBAAmBxI,EACnB4I,aAAc1I,EACdmI,WAAY/D,GAAiBmB,EAAYM,OAuCjC3B,cAAe,EAAGJ,iBAAkBA,EAAiBA,iBACrD5K,MAAOqM,EAAY5G,OAAQkH,EAC3BvC,UAAW6K,KAGnB5O,MAAO,gCACH,gBAAC,GAAD,CACI2E,cAAe,EAAGJ,iBAAkBA,EAAiBA,iBACrD5K,MAAOmR,EAAW1L,OAAQ2L,EAC1BnI,aAAc8Q,EACd7Q,aAAc8Q,KAGtBzD,QAASA,KCwCN6I,GA7GiD,SAAC,GAAmC,IAAjCxU,EAAgC,EAAhCA,iBACvD8I,EADuF,EAAdrD,QACvDtY,OAAlB2b,MADuF,eAEtCA,EAFsC,GAExFtC,EAFwF,KAE5ED,EAF4E,KAEjExE,EAFiE,KAEpDN,EAFoD,KAIzFwG,EAAYtS,KAAK8K,IAAIgB,EAAYM,GAJwD,EAK3EmG,mBAASzG,EAAa,GALqD,oBAKxFd,EALwF,KAKpF8F,EALoF,OAM3EyB,mBAASnG,EAAc,GANoD,oBAMxFnB,EANwF,KAMpF8F,EANoF,OAO3EwB,mBAASD,EAAY,GAPsD,oBAOxFqI,EAPwF,KAOpFW,EAPoF,OAQ3E/I,mBAASD,EAAY,GARsD,oBAQxFuI,EARwF,KAQpFU,EARoF,OAS/EhJ,mBAAS,GAAlBuM,EATwF,uBAU5EvM,mBAAS,GAArBwM,EAVwF,qBAYzFvD,EAAW,CACbtX,EAAG8G,EAAK2P,EACRxW,EAAG8G,GAEDwQ,EAAW,CACbvX,EAAG8G,EAAK6P,EACR1W,EAAG8G,GAGDiK,EAAqB5c,GAAgB,SAAC6c,EAAeC,GACvDtE,EAAMqE,GACNpE,EAAMqE,MAEJ4G,EAAiB1jB,EAAgBgjB,GACjCW,EAAiB3jB,EAAgBijB,GAuBjChC,EACF,gBAAC,GAAD,CAAMvO,GAAIA,EAAIC,GAAIA,EAAI0P,GAAIA,EAAIE,GAAIA,EAC9B/O,WAAYA,IAnD2E,EA0D3F+H,GAAoB,CACpBjD,YACAC,aACAV,mBAAoB9F,EAAiBA,iBACrCyJ,YAAazJ,EAAiByJ,cAP9BgC,EAvD2F,EAuD3FA,eAAgBpB,EAvD2E,EAuD3EA,kBACP8E,EAxDkF,EAwD3FjS,QACSkS,EAzDkF,EAyD3F3E,QAQElL,EACF,gCAAGkM,EAAH,oBAAoC9K,EAAGzK,QAAQ,GAA/C,OAAuD0K,EAAG1K,QAAQ,GAAlE,SAA4Eoa,EAAGpa,QAAQ,GAAvF,QAAgGsa,EAAGta,QAAQ,IAGzGqB,EAAWoP,cAcXgF,EAAU,gBAAC,GAAD,CAAS3L,iBAAkBA,EAAkBwO,QAZzC,WAChBjX,EAAS6R,GAA4BpJ,EAAiBA,iBAAkB,EAAG,CACvE0F,aAAc5W,EAAc6lB,eAC5B5N,WAAY,CACR+B,MAAO,iBACPnI,KAAIC,KAAI0P,KAAIE,KACZoE,OAAQH,EACRI,UAAWH,OAK4DnG,SAAU,CAAC,KAE9F,OACI,gBAAC,GAAD,CACIvZ,MAAM,0BAA0BuK,SAAUA,EAC1CkE,KAAM,gCACF,gBAAC,GAAD,CACIpF,aA9D+B,SAACrC,EAAiBE,GAAlB,OAAkC,gCAC7E,gBAAC,GAAD,CAAiBrC,EAAG8G,EAAI7G,EAAG8G,EACvBa,WAAYA,EACZiD,WAAYmG,EACZjG,aAAc1I,EACdsI,kBAAmBxI,EACnBqI,WAAY/D,GAAiBmB,EAAYM,KAC7C,gBAAC,GAAD,CAAiBlI,EAAGuX,EAASvX,EAAGC,EAAGsX,EAAStX,EACxC2H,WAAYA,EACZiD,WAAYhE,GAAWC,EAAIC,EAAIgR,GAC/BhN,aAAc1I,EACdsI,kBAAmBxI,EACnBqI,WAAY/C,GAAc6P,EAAStX,EAAG+G,KAC1C,gBAAC,GAAD,CAAiB/G,EAAGsX,EAAStX,EAAGC,EAAGqX,EAASrX,EACxC2H,WAAYA,EACZmD,aAAc1I,EACdsI,kBAAmBxI,EACnB0I,WAAYhE,GAAWC,EAAIC,EAAI+Q,GAC/BtN,WAAYlD,GAAaiQ,EAASvX,EAAG+G,OA4CGtC,aAAc4Q,EAC9C9O,cAAe,EAAGJ,iBAAkBA,EAAiBA,iBACrD5K,MAAOqM,EAAY5G,OAAQkH,EAC3BvC,UAAW6K,KAGnB5O,MAAO,gCACH,gBAAC,GAAD,CACI2E,cAAe,EAAGJ,iBAAkBA,EAAiBA,iBACrD5K,MAAOmR,EAAW1L,OAAQ2L,EAC1BnI,aAAc8Q,EACd7Q,aAAc8Q,KAGtBzD,QAASA,KCCNmJ,GAzG4C,SAAC,GAAmC,IAAjC9U,EAAgC,EAAhCA,iBAClD8I,EADkF,EAAdrD,QAClDtY,OAAlB2b,MADkF,eAEjCA,EAFiC,GAEnFtC,EAFmF,KAEvED,EAFuE,KAE5DxE,EAF4D,KAE/CN,EAF+C,KAGpFwG,EAAYtS,KAAK8K,IAAIgB,EAAYM,GAHmD,EAKtEmG,mBAASzG,EAAa,GALgD,oBAKnFd,EALmF,KAK/E8F,EAL+E,OAMtEyB,mBAASnG,EAAc,GAN+C,oBAMnFnB,EANmF,KAM/E8F,EAN+E,OAOtEwB,mBAASD,EAAY,GAPiD,oBAOnFqI,EAPmF,KAO/EW,EAP+E,OAQtE/I,mBAASD,EAAY,GARiD,oBAQnFuI,EARmF,KAQ/EU,EAR+E,KAUpFC,EAAW,CACbtX,EAAG8G,EAAK2P,EACRxW,EAAG8G,GAEDwQ,EAAW,CACbvX,EAAG8G,EAAK6P,EACR1W,EAAG8G,GAGDiK,EAAqB5c,GAAgB,SAAC6c,EAAeC,GACvDtE,EAAMqE,GACNpE,EAAMqE,MAEJ4G,EAAiB1jB,EAAgBgjB,GACjCW,EAAiB3jB,EAAgBijB,GAuBjChC,EACF,gBAAC,GAAD,CAAMvO,GAAIA,EAAIC,GAAIA,EAAI0P,GAAIA,EAAIE,GAAIA,EAC9B/O,WAAYA,IAGdlK,EAAWoP,cApDyE,EAoEtF6C,GAAoB,CACpBjD,YACAC,aACAV,mBAAoB9F,EAAiBA,iBACrCyJ,YAAazJ,EAAiByJ,cAP9BgC,EAjEsF,EAiEtFA,eAAgBpB,EAjEsE,EAiEtEA,kBACP8E,EAlE6E,EAkEtFjS,QACSkS,EAnE6E,EAmEtF3E,QAQElL,EACF,gCAAGkM,EAAH,oBAAoC9K,EAAGzK,QAAQ,GAA/C,OAAuD0K,EAAG1K,QAAQ,GAAlE,SAA4Eoa,EAAGpa,QAAQ,GAAvF,QAAgGsa,EAAGta,QAAQ,IAGzGyV,EAAU,gBAAC,GAAD,CAAS3L,iBAAkBA,EAAkBwO,QAzBzC,WAChBjX,EAAS6R,GAA4BpJ,EAAiBA,iBAAkB,EAAG,CACvE0F,aAAc5W,EAAcimB,gBAC5BhO,WAAY,CACR+B,MAAO,OACPnI,KAAIC,KAAI0P,KAAIE,UAoB2DjC,SAAU,CAAC,KAE9F,OACI,gBAAC,GAAD,CACIvZ,MAAM,gBAAgBuK,SAAUA,EAChCkE,KAAM,gCACF,gBAAC,GAAD,CACIpF,aA5D+B,SAACrC,EAAiBE,GAAlB,OAAkC,gCAC7E,gBAAC,GAAD,CAAiBrC,EAAG8G,EAAI7G,EAAG8G,EACvBa,WAAYA,EACZiD,WAAYmG,EACZjG,aAAc1I,EACdsI,kBAAmBxI,EACnBqI,WAAY/D,GAAiBmB,EAAYM,KAC7C,gBAAC,GAAD,CAAiBlI,EAAGuX,EAASvX,EAAGC,EAAGsX,EAAStX,EACxC2H,WAAYA,EACZiD,WAAYhE,GAAWC,EAAIC,EAAIgR,GAC/BhN,aAAc1I,EACdsI,kBAAmBxI,EACnBqI,WAAY/C,GAAc6P,EAAStX,EAAG+G,KAC1C,gBAAC,GAAD,CAAiB/G,EAAGsX,EAAStX,EAAGC,EAAGqX,EAASrX,EACxC2H,WAAYA,EACZmD,aAAc1I,EACdsI,kBAAmBxI,EACnB0I,WAAYhE,GAAWC,EAAIC,EAAI+Q,GAC/BtN,WAAYlD,GAAaiQ,EAASvX,EAAG+G,OA0CGtC,aAAc4Q,EAC9C9O,cAAe,EAAGJ,iBAAkBA,EAAiBA,iBACrD5K,MAAOqM,EAAY5G,OAAQkH,EAC3BvC,UAAW6K,KAGnB5O,MAAO,gCACH,gBAAC,GAAD,CACI2E,cAAe,EAAGJ,iBAAkBA,EAAiBA,iBACrD5K,MAAOmR,EAAW1L,OAAQ2L,EAC1BnI,aAAc8Q,EACd7Q,aAAc8Q,KAGtBzD,QAASA,KC5DRqB,IAAuE,qBAC/Ele,EAAcimB,gBAAkB,CAC7BvH,KAAM,6BACNxY,MAAO,OACPggB,UAAWF,KAJiE,eAM/EhmB,EAAc8jB,gBAAkB,CAC7BpF,KAAM,6BACNxY,MAAO,OACPggB,UAAWrC,KATiE,eAW/E7jB,EAAcgkB,IAAM,CACjBtF,KAAM,6BACNxY,MAAO,qBACPggB,UAAWlC,KAdiE,eAgB/EhkB,EAAcugB,eAAiB,CAC5B7B,KAAM,+CACNxY,MAAO,iBACPggB,UAAW/F,KAnBiE,eAqB/EngB,EAAcylB,qBAAuB,CAClC/G,KAAM,qDACNxY,MAAO,kBACPggB,UAAWV,KAxBiE,eA0B/ExlB,EAAc0c,WAAa,CACxBgC,KAAM,6CACNxY,MAAO,mBA5BqE,eA8B/ElG,EAAcyc,UAAY,CACvBiC,KAAM,4CACNxY,MAAO,kBAhCqE,eAkC/ElG,EAAcgY,WAAa,CACxB0G,KAAM,wBACNxY,MAAO,eApCqE,eAsC/ElG,EAAcqkB,eAAiB,CAC5B3F,KAAM,sCACNxY,MAAO,eAxCqE,eA0C/ElG,EAAcolB,eAAiB,CAC5B1G,KAAM,8CACNxY,MAAO,eACPggB,UAAWxB,KA7CiE,eA+C/E1kB,EAAcukB,cAAgB,CAC3B7F,KAAM,kDACNxY,MAAO,0BAjDqE,eAmD/ElG,EAAc6lB,eAAiB,CAC5BnH,KAAM,iDACNxY,MAAO,iBACPggB,UAAWR,KAtDiE,eAwD/E1lB,EAAcgjB,MAAQ,CACnBtE,KAAM,wEACNxY,MAAO,aACPggB,UAAWhE,KA3DiE,eA6D/EliB,EAAc+iB,QAAU,CACrBrE,KAAM,oBACNxY,MAAO,QA/DqE,IC/BrEigB,GAfyD,SAAC,GAAkB,IAAhBjW,EAAe,EAAfA,SACjEyG,EAAU5S,aAAY,SAACjH,GAAD,OAAwBA,EAAMspB,SAAShV,KAAKlB,EAASyG,YAEjF,GAAIA,EAAQ1S,SAAWlE,EAAcgF,KACjC,OAAO,KAGX,IAAMshB,EAAoBnI,GAAyBhO,EAAStI,QAAQ0e,UAAUJ,UAC9E,IAAKG,EACD,MAAM,IAAInnB,MAAM,yBAGpB,OAAO,gBAACmnB,EAAD,CAAmB1P,QAASA,EAASzF,iBAAkBhB,KCRnDqW,GANgC,SAAC,GAAkB,IAAhBlV,EAAe,EAAfA,SAC9C,OAAQ,gCACJA,EAASmV,IAAIlkB,KAAI,SAAAmc,GAAU,OAAI,gBAACgI,GAAD,CAAU3c,IAAK2U,EAAYvO,SAAUmB,EAASD,KAAKqN,UC6BnF,SAASiI,GAAc5pB,EAAgBgC,EAAY6nB,GACtD,IAAMC,EAASlnB,OAAOmnB,OAAO,GAAI/pB,EAAMsU,KAAKtS,GAAK6nB,GAC3CG,EAAUpnB,OAAOmnB,OAAO,GAAI/pB,EAAMsU,KAAxB1R,OAAA,IAAAA,CAAA,GAAiCZ,EAAK8nB,IACtD,OAAOlnB,OAAOmnB,OAAO,GAAI/pB,EAAO,CAAEsU,KAAM0V,IAGrC,SAASC,GAAcjqB,EAAgBgC,EAAYkoB,GAGtD,MAAO,CAAE5V,KAFO1R,OAAOmnB,OAAO,GAAI/pB,EAAMsU,KAAxB1R,OAAA,IAAAA,CAAA,GAAiCZ,EAAKkoB,IAE9BR,IADZ,uBAAO1pB,EAAM0pB,KAAb,CAAkB1nB,KAI3B,SAASmoB,GAAiBC,EAAYpd,GAIzC,OAHaod,EAAMnH,QAAO,SAACoH,EAAK3d,GAAN,OAAe9J,OAAOmnB,OAAOM,EAAdznB,OAAA,IAAAA,CAAA,GACpCoK,EAAIN,GAAQA,MACb,IAMD,SAAS4d,GAAkBtqB,EAAgBuqB,GAC9C,IAAMb,EAAgB1pB,EAAM0pB,IAAIjd,QAAO,SAAAzK,GAAE,OAAIuoB,EAAKvqB,EAAMsU,KAAKtS,OAI7D,MAAO,CACHsS,KAJmBoV,EAAIzG,QAAO,SAACoH,EAAKroB,GAAN,OAAaY,OAAOmnB,OAAOM,EAAdznB,OAAA,IAAAA,CAAA,GAC1CZ,EAAKhC,EAAMsU,KAAKtS,OACjB,IAGA0nB,OC7DR,IACMc,GADmB9nB,EAAcQ,GACMuJ,QAAO,SAAAhH,GAAC,YAAiCtE,IAA7B+f,GAAYzb,GAAG2jB,aAAyB5jB,KAAI,SAAAC,GAAC,MAAK,CACvGC,KAAMwb,GAAYzb,GAAG2D,MACrBxE,MAAO1B,EAAcuC,OAuBVglB,GAXwC,SAAC,GAAwB,IAAtB5f,EAAqB,EAArBA,QAASxH,EAAY,EAAZA,MAC/D,OACI,gBAAC6C,EAAA,EAAD,CAAUR,KAAMrC,EAAOqD,KAAK,MAAMiG,UAAU,EAAM+d,SAAS,EAAMC,QAAQ,EAAM7Y,UAAU,QACrF,gBAAC5L,EAAA,EAAS0G,KAAV,KACI,gBAAC1G,EAAA,EAAS9F,OAAV,CAAiByM,QAAQ,yBACxB2d,GAAoBhlB,KAAI,SAAAsH,GAAM,OAAI,gBAAC5G,EAAA,EAAS1F,KAAV,eAAewM,IAAKF,EAAOlI,MAAOiG,SATjEvI,EASqFuI,EATlD,SAAClI,EAAqBqD,GACzE,OAAO1D,EAAG0D,EAAKpB,UAQoGkI,IATpG,IAACxK,QCQLvC,eAAQ,MAdI,SAAC4L,EAAoBjI,GAC5C,MAAO,CACHknB,kBAAmB,SAAC5pB,GAChB2K,EAASsP,GAAuCvX,EAASmW,QAAQ7X,GAAIhB,QAWlEjB,EAL6B,SAAC,GAA2B,IAAzB6qB,EAAwB,EAAxBA,kBAC3C,OAAO,gBAAC,GAAD,CAAgB/f,QAAS+f,EAAmBvnB,MAAM,oB,yCClBtD,SAAewnB,GAAtB,qC,gDAAO,WAA2B7oB,EAAY6X,GAAvC,UAAA9L,EAAA,sEACUiT,GAAW,YAAD,OAAahf,EAAb,KAAoB6X,GADxC,oF,sBAIA,SAAeiR,GAAtB,mC,gDAAO,WAA6B9oB,GAA7B,UAAA+L,EAAA,sEACU2S,GAAc,YAAD,OAAa1e,EAAb,MADvB,oF,sBAKA,SAAe+oB,GAAtB,mC,gDAAO,WAA6BvjB,GAA7B,kBAAAuG,EAAA,6DACG4S,EAAWN,KADd,SAEaO,MAAM,GAAD,OAAID,EAAJ,iCAAqCqK,mBAAmBxjB,IAAS,CAClFqZ,YAAa,cACbC,OAAQ,QAJT,cAEG1K,EAFH,gBAMUA,EAAE2K,OANZ,oF,sBAaP,IAAMkK,GAA2B,GAE1B,SAAeC,GAAtB,mC,gDAAO,WAAyBlqB,GAAzB,sBAAA+M,EAAA,yDACG4S,EAAWN,OACX8K,EAASF,GAAYjqB,IAFxB,yCAIQ,IAAIoqB,SAAQ,SAACC,GAAD,OAAaA,EAAQF,OAJzC,uBAMiBvK,MAAM,GAAD,OAAID,EAAJ,iCAAqCqK,mBAAmBhqB,IAAS,CAClF6f,YAAa,cACbC,OAAQ,QARb,cAMO1K,EANP,iBAU8BA,EAAE2K,OAVhC,eAUOuK,EAVP,OAWCL,GAAYjqB,GAAQsqB,EAXrB,kBAYQA,GAZR,6C,sBCtBA,SAASC,GAAcpnB,GAC1B,IAAMqnB,EAAkC,GAUxC,OATArnB,EAAOsnB,SAAQ,SAAAC,GAGX,IACMC,EAAYD,EAAIE,SAASC,QADlB,0BACgC,SAACC,EAAOC,GACjD,OAAOA,KAEXP,EAAIG,GAAaD,EAAIvpB,WAElBqpB,E,gDAGJ,WAA4BxqB,EAAcgF,GAA1C,UAAA+H,EAAA,+EACImd,GAAUlqB,GAAMgrB,MAAK,SAACV,GACzB,GAA8B,UAA1BA,EAAenkB,OACf,MAAM,IAAI/E,MAAMkpB,EAAexpB,KAGnC,IAAMmqB,EAASX,EAAeW,OAExBC,GADM,IAAIC,MACKC,QAAQH,GAE7B,IADcC,EAASlmB,GACX,CACR,GAAIkmB,EAAS/nB,OAET,MADkBonB,GAAcW,EAAS/nB,QAGzC,MAAM,IAAI/B,MAAM,kDAfzB,4C,sBCbA,SAASiqB,GAAaC,GACzB,OAAOA,EAAKC,MAAM,KAAK9f,QAAO,SAAA+f,GAAI,MAAoB,KAAhBA,EAAKC,UAAejnB,KAAI,SAAAgnB,GAAI,OAAKA,KAGpE,SAASE,GAAmD1f,EAAQ2f,EAAc7oB,GACrF,OAAKA,QAGuB3C,IAAhB2C,EAAOkJ,GAAqBlJ,EAAOkJ,GAFpC2f,EAMR,SAASC,GAAoD5f,EAAQ2f,EAAmB7oB,GAC3F,OAAKA,QAGuB3C,IAAhB2C,EAAOkJ,GAAqBlJ,EAAOkJ,GAFpC6f,YAAkBF,GAM1B,SAASG,GAAmBC,GACjC,QAAQnqB,OAAOC,KAAKE,GAAcye,MAAK,SAACwL,GAAD,OAAOA,IAAMD,KAG/C,SAASE,GAAiBC,GAC/B,QAAQtqB,OAAOC,KAAKG,GAAgBwe,MAAK,SAACwL,GAAD,OAAOA,IAAME,KAiBjD,SAASC,GACZC,GAEA,OAAO5pB,YAAoD,CACvDC,iBAAkB2pB,EAAK3pB,iBACvBI,aAAc,SAACC,EAAQC,GAAe,IAAD,EACNA,EAAUE,MAA7BD,EADyB,EACzBA,SAAUwD,EADe,EACfA,KAElBxD,EADmBopB,EAAKC,WAAWvpB,EAAQ0D,IAE3CzD,EAAUupB,eAAc,IAE5BpB,SAAU,SAACpoB,EAAQG,GACf,ODzCL,SAAP,qCCyCmBspB,CAAaH,EAAKpsB,KAAMosB,EAAKC,WAAWvpB,EAAQG,EAAMuD,QAEjE0E,oBAAoB,EACpBshB,kBAAkB,EAClBC,gBAAgB,ICvDxB,ICNY3tB,GDcN4tB,GAAe,SAACnsB,GAClB,OAAOqB,OAAOC,KAAKtB,GAAQiE,KAAI,SAACwH,EAAaD,GAEzC,OAAIkgB,GAAiBjgB,GASZ,KAPD,gBAAC2gB,GAAA,EAAMxN,IAAP,CAAWnT,IAAKD,GACZ,gBAAC4gB,GAAA,EAAMljB,KAAP,KAAauC,GACb,gBAAC2gB,GAAA,EAAMljB,KAAP,MAfM7F,EAewBrD,EAAOyL,cAdhC4gB,MACX,IAAN,OAAWhpB,EAAMod,KAAK,KAAtB,KAEOpd,IAJU,IAACA,MA2CXipB,GAjBgC,SAAC,GAAiB,IAAfhU,EAAc,EAAdA,QAC9C,OACI,gBAAC8T,GAAA,EAAD,KACI,gBAACA,GAAA,EAAMvtB,OAAP,KACI,gBAACutB,GAAA,EAAMxN,IAAP,KACI,gBAACwN,GAAA,EAAMG,WAAP,kBACA,gBAACH,GAAA,EAAMG,WAAP,gBAGR,gBAACH,GAAA,EAAMI,KAAP,KACKL,GAAa7T,EAAQtY,WE5BhCysB,GAA6C,SAAC,GAAc,IAAZxc,EAAW,EAAXA,KAClD,OACI,gBAACmc,GAAA,EAAMxN,IAAP,KACI,gBAACwN,GAAA,EAAMljB,KAAP,KAAa+G,EAAK9Q,MAClB,gBAACitB,GAAA,EAAMljB,KAAP,KAZQ,SAAC+G,GACjB,OAAIA,EAAK5M,iBAAiBgpB,MACf,gBAAC,GAAD,CAAWK,YAAazc,EAAK5M,QAE7B4M,EAAK5M,MAQKspB,CAAY1c,MAK/B2c,GAAuD,SAAC,GAAqB,IAAnBF,EAAkB,EAAlBA,YAC5D,OAA2B,IAAvBA,EAAY5jB,OACL,KAGP,gBAACsjB,GAAA,EAAD,KACI,gBAACA,GAAA,EAAMvtB,OAAP,KACI,gBAACutB,GAAA,EAAMxN,IAAP,KACI,gBAACwN,GAAA,EAAMG,WAAP,aACA,gBAACH,GAAA,EAAMG,WAAP,gBAGR,gBAACH,GAAA,EAAMI,KAAP,KACKE,EAAYzoB,KAAI,SAACgM,EAAMzE,GAAP,OACb,gBAAC,GAAD,CAAUyE,KAAMA,EAAMxE,IAAKD,UAgBhCqhB,GATkC,SAAC,GAAiB,IAAfvU,EAAc,EAAdA,QAChD,OACI,gCACI,gBAAC,GAAD,CAAeA,QAASA,IACxB,gBAAC,GAAD,CAAWoU,YAAapU,EAAQoU,iB,SDhDhCnuB,K,oBAAAA,E,kCAAAA,E,wBAAAA,E,0BAAAA,E,sBAAAA,E,wBAAAA,E,0BAAAA,E,wBAAAA,E,4BAAAA,E,uCAAAA,Q,KAaL,IEdKA,GFcCsB,GACH,SAACoG,EAAc6mB,EAAkCC,GAAjD,OAAwFvtB,EAAajB,GAAYmI,KAAM,CAAET,OAAM6mB,eAAcC,oBAD1IltB,GAEG,kBAAML,EAAajB,GAAYyuB,cAFlCntB,GAGD,SAACyY,GAAD,OAAkC9Y,EAAajB,GAAYia,OAAQ,CAAEF,aAHpEzY,GAIA,SAACyY,GAAD,OAA2B9Y,EAAajB,GAAYma,QAAS,CAAEJ,aAJ/DzY,GAKF,SAACyY,EAAiB/X,EAAaC,EAAmBC,GAAlD,OAAiEjB,EAAajB,GAAYmC,MAAO,CAAE4X,UAAS/X,MAAKC,YAAWC,QAL1HZ,GAMD,SAACyY,GAAD,OAAqB9Y,EAAajB,GAAY0uB,OAAQ,CAAE3U,aANvDzY,GAOA,SAACyY,GAAD,OAAqB9Y,EAAajB,GAAY2uB,QAAS,CAAE5U,aAPzDzY,GAQD,SAACoG,GAAD,OAAkBzG,EAAajB,GAAY4uB,OAAQ,CAAElnB,UARpDpG,GASC,SAACoG,EAAcjG,GAAf,OAA6CR,EAAajB,GAAY6uB,SAAU,CAAEnnB,OAAMjG,YATzFH,GAUK,SAACoG,GAAD,OAAkBzG,EAAajB,GAAY8uB,cAAe,CAAEpnB,UGI/DzH,eAAQ,MAnBI,SAAC4L,EAAoBjI,GAC5C,MAAO,CACHmrB,oBAAqB,WACjBljB,EAASmjB,GAA8BprB,EAASmW,QAAQ7X,SAgBrDjC,EATgC,SAAC,GAAqC,EAAnC8Z,QAAoC,IAA3BgV,EAA0B,EAA1BA,oBACvD,OACI,gCACI,gBAAC9pB,EAAA,EAAD,CAAQ2B,KAAK,SAAS6I,cAAc,OAAO1E,QAASgkB,EAAqBhiB,QAAQ,sBC8D9EkiB,GAFUhvB,aApED,SAACC,EAAoB0D,GAEzC,MAAO,CACH6Q,SAAU+V,GAAetqB,EAAMqU,kBAFoB,SAACjB,GAAD,OAAgDA,EAASyG,UAAYnW,EAASmW,QAAQ7X,SAmExHjC,EA3DwB,SAAC,GAA2B,IAAD,EAAxB8Z,EAAwB,EAAxBA,QAAStF,EAAe,EAAfA,SACnDzS,GAAG,mBACJmB,EAAc+rB,QADV,0BACuCnV,EAAQtY,OAAOb,OADtD,cAEJuC,EAAcgsB,SAFV,0BAEwCpV,EAAQtY,OAAOb,OAFvD,GAIT,OAAImZ,EAAQ1S,SAAWlE,EAAc+rB,SAAWnV,EAAQ1S,SAAWlE,EAAcgsB,SAEzE,gCACI,gBAAC7uB,EAAA,EAAD,CAAQC,GAAG,KAAK6uB,UAAU,GAAOrV,EAAQtY,OAAOb,MAChD,gBAAC+F,EAAA,EAAD,CAASC,MAAM,GACX,gBAACjG,EAAA,EAAD,CAAMC,KAAK,MAAMiG,SAAS,IAC1B,gBAACF,EAAA,EAAQ9F,QAAT,KACI,gBAAC8F,EAAA,EAAQrG,OAAT,KAAiB0B,EAAI+X,EAAQ1S,YAQ7C,gBAACd,EAAA,EAAQgJ,MAAT,CAAehG,MAAO,CAAE8lB,UAAW,MAAOC,aAAc,QACpD,gBAAC/oB,EAAA,EAAQgJ,MAAT,CAAeggB,YAAY,GACvB,gBAAChpB,EAAA,EAAD,KACI,gBAACjG,EAAA,EAAD,CAAQC,GAAG,MACP,gBAACI,EAAA,EAAD,CAAMC,KAAK,aACX,gBAAC6hB,EAAA,EAAD,CAAOC,QACH,gBAACpiB,EAAA,EAAOO,QAAR,KACKkZ,EAAQtY,OAAOb,KACf,IACD,gBAACD,EAAA,EAAD,CAAMC,KAAK,cAAcuJ,KAAK,QAAQqlB,MAAM,MAGhD,gBAAC7M,EAAA,EAAMriB,OAAP,KAAeyZ,EAAQtY,OAAOP,KAA9B,YAA6C6Y,EAAQtY,OAAOb,MAC5D,gBAAC+hB,EAAA,EAAM9hB,QAAP,KACI,gBAAC,GAAD,CAAakZ,QAASA,QAKtC,gBAACxT,EAAA,EAAD,CAASgD,MAAO,CAAEkmB,WAAY,EAAGpkB,SAAU,IACvC,gBAAC,GAAD,CAAgB0O,QAASA,MAI7BtF,EAASmV,IAAIrf,OAAS,EAClB,gCACI,gBAAChE,EAAA,EAAD,KACI,gBAAC,GAAD,CAAckO,SAAUA,MAGhC,KAER,gBAAClO,EAAA,EAAD,CAASmE,UAAU,UACf,gBAAC,GAAD,CAAaqP,QAASA,S,oBC3BvBsT,MAA0D,CACrE1pB,iBAAkB,gBAAE+D,EAAF,EAAEA,KAAMgoB,EAAR,EAAQA,QAAR,MAAuB,CACrC9uB,KAAMksB,GAAe,OAAOplB,EAAKgoB,GACjCC,UAAW/C,GAAW,YAAa,iBAAkB8C,GAASzjB,aAElEshB,WAAY,SAACvpB,EAAQ0D,GACjB,MAAO,CACHA,OACAxG,KAAM+B,EAAa2sB,IACnBhvB,KAAMoD,EAAOpD,KACb+uB,UAAWpD,GAAavoB,EAAO2rB,aAGvCzuB,KAAM+B,EAAa2sB,KAbRvC,EAjCmC,SAAC,GAY7C,EAXFrpB,OAWE,EAVFI,QAUE,EATFC,OASE,EARFE,MAQG,IAPHD,EAOE,EAPFA,aAGAP,GAIE,EANFS,aAME,EALFC,WAKE,EAJFV,cACAW,EAGE,EAHFA,YACAmrB,EAEE,EAFFA,aACAC,EACE,EADFA,SAEA,OACI,gBAACnrB,EAAA,EAAD,CAAMT,SAAUH,GACZ,gBAACY,EAAA,EAAKC,MAAN,KACI,yBAAOC,QAAQ,WAAf,SACA,gBAAC,IAAD,CAAcjE,KAAK,SACnB,gBAAC,IAAD,CAAOA,KAAK,OAAOsB,GAAG,aAE1B,gBAACyC,EAAA,EAAKC,MAAN,KACI,yBAAOC,QAAQ,gBAAf,cACA,gBAAC,IAAD,CAAcjE,KAAK,cACnB,gBAAC,IAAD,CAAOA,KAAK,YAAYsB,GAAG,kBAG/B,gBAAC+C,EAAA,EAAD,CAAQC,SAAS,EAAMhE,KAAK,SAASiE,SAAUb,GAAgBurB,GAA/D,gBACA,gBAAC5qB,EAAA,EAAD,CAAQ/D,KAAK,SAAS6J,QAAS+kB,GAA/B,UACA,gBAAC7qB,EAAA,EAAD,CAAQ/D,KAAK,SAAS6J,QAASrG,GAA/B,aCvCNqrB,GADkBntB,EAAcK,GACKyC,KAAI,SAAAC,GAAC,MAAK,CAEjDC,KAAM3C,EAAa0C,GACnBb,MAAO7B,EAAa0C,OAqBTqqB,GAb8C,SAAC,GAA8B,IAA5BC,EAA2B,EAA3BA,YAAallB,EAAc,EAAdA,QACzE,OACI,gCACI,gBAAC3E,EAAA,EAAD,CACIC,QAAQ,EACRC,QAASypB,GACTjrB,MAAOmrB,EACPlrB,SAAUgG,MCyBXsiB,MAA8D,CACzE1pB,iBAAkB,gBAAE+D,EAAF,EAAEA,KAAMgoB,EAAR,EAAQA,QAAR,MAAuB,CACrC9uB,KAAMksB,GAAe,OAAOplB,EAAKgoB,GACjCQ,UAAWtD,GAAW,YAAa,GAAI8C,GAASzjB,aAEpDshB,WAAY,SAACvpB,EAAQ0D,GACjB,MAAO,CACHA,OACAxG,KAAM+B,EAAaktB,MACnBvvB,KAAMoD,EAAOpD,KACbsvB,UAAW3D,GAAavoB,EAAOksB,aAGvChvB,KAAM+B,EAAaktB,OAbR9C,EA/BiC,SAAC,GAW3C,EAVFrpB,OAUE,EATFI,QASE,EARFC,OAQE,EAPFE,MAOG,IANHD,EAME,EANFA,aAGAP,GAGE,EALFS,aAKE,EAJFC,WAIE,EAHFV,cACAW,EAEE,EAFFA,YACAorB,EACE,EADFA,SAEA,OACI,gBAACnrB,EAAA,EAAD,CAAMT,SAAUH,GACZ,gBAACY,EAAA,EAAKC,MAAN,KACI,yBAAOC,QAAQ,WAAf,SACA,gBAAC,IAAD,CAAcjE,KAAK,SACnB,gBAAC,IAAD,CAAOA,KAAK,OAAOsB,GAAG,aAE1B,gBAACyC,EAAA,EAAKC,MAAN,KACI,yBAAOC,QAAQ,gBAAf,cACA,gBAAC,IAAD,CAAcjE,KAAK,cACnB,gBAAC,IAAD,CAAOA,KAAK,YAAYsB,GAAG,kBAE/B,gBAAC+C,EAAA,EAAD,CAAQC,SAAS,EAAMhE,KAAK,SAASiE,SAAUb,GAA/C,gBACA,gBAACW,EAAA,EAAD,CAAQ/D,KAAK,SAAS6J,QAAS+kB,GAA/B,UACA,gBAAC7qB,EAAA,EAAD,CAAQ/D,KAAK,SAAS6J,QAASrG,GAA/B,aCLG2oB,MAA8D,CACzE1pB,iBAAkB,kBAAwB,CACtC/C,KAAMksB,GAAe,OADP,EAAGplB,KAAH,EAASgoB,WAG3BnC,WAAY,SAACvpB,EAAQ0D,GACjB,MAAO,CACHA,OACAxG,KAAM+B,EAAamtB,MACnBxvB,KAAMoD,EAAOpD,OAGrBM,KAAM+B,EAAamtB,OAXR/C,EA3BiC,SAAC,GAW3C,EAVFrpB,OAUE,EATFI,QASE,EARFC,OAQE,EAPFE,MAOG,IANHD,EAME,EANFA,aAGAP,GAGE,EALFS,aAKE,EAJFC,WAIE,EAHFV,cACAW,EAEE,EAFFA,YACAorB,EACE,EADFA,SAEA,OACI,gBAACnrB,EAAA,EAAD,CAAMT,SAAUH,GACZ,gBAACY,EAAA,EAAKC,MAAN,KACI,yBAAOC,QAAQ,WAAf,SACA,gBAAC,IAAD,CAAcjE,KAAK,SACnB,gBAAC,IAAD,CAAOA,KAAK,OAAOsB,GAAG,aAG1B,gBAAC+C,EAAA,EAAD,CAAQC,SAAS,EAAMhE,KAAK,SAASiE,SAAUb,GAA/C,gBACA,gBAACW,EAAA,EAAD,CAAQ/D,KAAK,SAAS6J,QAAS+kB,GAA/B,UACA,gBAAC7qB,EAAA,EAAD,CAAQ/D,KAAK,SAAS6J,QAASrG,GAA/B,aCiCG2oB,MAA4D,CACvE1pB,iBAAkB,gBAAE+D,EAAF,EAAEA,KAAMgoB,EAAR,EAAQA,QAAR,MAAuB,CACrC9uB,KAAMksB,GAAe,OAAOplB,EAAKgoB,GACjCW,cAAezD,GAAW,gBAAiB,GAAI8C,GAC/CC,UAAW/C,GAAW,YAAa,iBAAkB8C,GAASzjB,WAC9DqkB,QAAS1D,GAAW,UAAW,GAAI8C,KAEvCnC,WAAY,SAACvpB,EAAQ0D,GACjB,MAAO,CACHA,OACAxG,KAAM+B,EAAastB,KACnB3vB,KAAMoD,EAAOpD,KACb0vB,QAAStsB,EAAOssB,QAChBD,cAAersB,EAAOqsB,cACtBV,UAAWpD,GAAavoB,EAAO2rB,aAGvCzuB,KAAM+B,EAAastB,MAjBRlD,EAxDgC,SAAC,GAYzC,IAYCmD,EAvBJxsB,EAWE,EAXFA,OAIAM,GAOE,EAVFF,QAUE,EATFC,OASE,EARFE,MAQE,EAPFD,cAGAP,GAIE,EANFS,aAME,EALFC,WAKE,EAJFV,cACAW,EAGE,EAHFA,YACAorB,EAEE,EAFFA,SACAW,EACE,EADFA,cAGMC,EAAgB1sB,EAAOqsB,cAAc3qB,KAAI,SAAAirB,GAAM,MAAK,CAAEzjB,IAAKyjB,EAAQ/qB,KAAM+qB,EAAQ7rB,MAAO6rB,MAkB9F,OALEH,EAFiD,IAAhCxsB,EAAOqsB,cAAc9lB,OAExB,gBAAC,IAAD,CAAO3J,KAAK,UAAUsB,GAAG,eAEzB,gBAACkE,EAAA,EAAD,CAAUxF,KAAK,UAAUsB,GAAG,aAAa0uB,YAAY,iBAAiBC,OAAO,EAAMC,QAAQ,EAAMC,WAAW,EAAMC,aAAchtB,EAAOssB,QAASvrB,SAZzI,SAAClC,EAAyBiP,GAA2B,IAClEhN,EAAUgN,EAAVhN,MACJA,GACF2rB,EAAc,UAAW3rB,EAAMmH,aASuJ3F,QAASoqB,IAI/L,gBAAC/rB,EAAA,EAAD,CAAMT,SAAUH,GACZ,gBAACY,EAAA,EAAKC,MAAN,KACI,yBAAOC,QAAQ,WAAf,SACA,gBAAC,IAAD,CAAcjE,KAAK,SACnB,gBAAC,IAAD,CAAOA,KAAK,OAAOsB,GAAG,aAE1B,gBAACyC,EAAA,EAAKC,MAAN,KACI,yBAAOC,QAAQ,cAAf,sBACA,gBAAC,IAAD,CAAcjE,KAAK,YAClB4vB,GAEL,gBAAC7rB,EAAA,EAAKC,MAAN,KACI,yBAAOC,QAAQ,gBAAf,cACA,gBAAC,IAAD,CAAcjE,KAAK,cACnB,gBAAC,IAAD,CAAOA,KAAK,YAAYsB,GAAG,kBAE/B,gBAAC+C,EAAA,EAAD,CAAQC,SAAS,EAAMhE,KAAK,SAASiE,SAAUb,GAA/C,gBACA,gBAACW,EAAA,EAAD,CAAQ8F,QAAS+kB,GAAjB,UACA,gBAAC7qB,EAAA,EAAD,CAAQ/D,KAAK,SAAS6J,QAASrG,GAA/B,aCtBG2oB,MAA4D,CACvE1pB,iBAAkB,kBAAuB,CACrC/C,KAAMksB,GAAe,OADP,EAAEplB,KAAF,EAAQgoB,WAG1BnC,WAAY,SAACvpB,EAAQ0D,GACjB,MAAO,CACHA,OACAxG,KAAM+B,EAAaguB,KACnBrwB,KAAMoD,EAAOpD,OAGrBM,KAAM+B,EAAaguB,MAXR5D,EA3BoC,SAAC,GAW9C,EAVFrpB,OAUE,EATFI,QASE,EARFC,OAQE,EAPFE,MAOG,IANHD,EAME,EANFA,aAGAP,GAGE,EALFS,aAKE,EAJFC,WAIE,EAHFV,cACAW,EAEE,EAFFA,YACAorB,EACE,EADFA,SAEA,OACI,gBAACnrB,EAAA,EAAD,CAAMT,SAAUH,GACZ,gBAACY,EAAA,EAAKC,MAAN,KACI,yBAAOC,QAAQ,WAAf,SACA,gBAAC,IAAD,CAAcjE,KAAK,SACnB,gBAAC,IAAD,CAAOA,KAAK,OAAOsB,GAAG,aAG1B,gBAAC+C,EAAA,EAAD,CAAQC,SAAS,EAAMhE,KAAK,SAASiE,SAAUb,GAA/C,gBACA,gBAACW,EAAA,EAAD,CAAQ/D,KAAK,SAAS6J,QAAS+kB,GAA/B,UACA,gBAAC7qB,EAAA,EAAD,CAAQ/D,KAAK,SAAS6J,QAASrG,GAA/B,aCwBG2oB,MAA0D,CACrEE,WAAY,SAACvpB,EAAQ0D,GACjB,MAAO,CACHA,OACAxG,KAAM+B,EAAaiuB,IACnBtwB,KAAMoD,EAAOpD,KACb+uB,UAAWpD,GAAavoB,EAAO2rB,WAC/BO,UAAW3D,GAAavoB,EAAOksB,aAGvCvsB,iBAAkB,gBAAE+D,EAAF,EAAEA,KAAMgoB,EAAR,EAAQA,QAAR,MAAuB,CACrC9uB,KAAMksB,GAAe,OAAOplB,EAAKgoB,GACjCC,UAAW/C,GAAW,YAAa,iBAAkB8C,GAASzjB,WAC9DikB,UAAWtD,GAAW,YAAa,GAAI8C,GAASzjB,aAEpD/K,KAAM+B,EAAaiuB,KAfR7D,EArCmC,SAAC,GAY7C,EAXFrpB,OAWE,EAVFI,QAUE,EATFC,OASE,EARFE,MAQG,IAPHD,EAOE,EAPFA,aAGAP,GAIE,EANFS,aAME,EALFC,WAKE,EAJFV,cACAW,EAGE,EAHFA,YACAmrB,EAEE,EAFFA,aACAC,EACE,EADFA,SAEA,OACI,gBAACnrB,EAAA,EAAD,CAAMT,SAAUH,GACZ,gBAACY,EAAA,EAAKC,MAAN,KACI,yBAAOC,QAAQ,WAAf,SACA,gBAAC,IAAD,CAAcjE,KAAK,SACnB,gBAAC,IAAD,CAAOA,KAAK,OAAOsB,GAAG,aAE1B,gBAACyC,EAAA,EAAKC,MAAN,KACI,yBAAOC,QAAQ,gBAAf,cACA,gBAAC,IAAD,CAAcjE,KAAK,cACnB,gBAAC,IAAD,CAAOA,KAAK,YAAYsB,GAAG,kBAE/B,gBAACyC,EAAA,EAAKC,MAAN,KACI,yBAAOC,QAAQ,gBAAf,cACA,gBAAC,IAAD,CAAcjE,KAAK,cACnB,gBAAC,IAAD,CAAOA,KAAK,YAAYsB,GAAG,kBAE/B,gBAAC+C,EAAA,EAAD,CAAQC,SAAS,EAAMhE,KAAK,SAASiE,SAAUb,GAAgBurB,GAA/D,gBACA,gBAAC5qB,EAAA,EAAD,CAAQ/D,KAAK,SAAS6J,QAAS+kB,GAA/B,UACA,gBAAC7qB,EAAA,EAAD,CAAQ/D,KAAK,SAAS6J,QAASrG,GAA/B,aCaG2oB,MAA0D,CACrE1pB,iBAAkB,gBAAE+D,EAAF,EAAEA,KAAMgoB,EAAR,EAAQA,QAAR,MAAuB,CACrC9uB,KAAMksB,GAAe,OAAOplB,EAAKgoB,GACjCyB,cAAevE,GAAW,iBAAiB,EAAO8C,GAClD0B,cAAexE,GAAW,gBAAiB,GAAI8C,GAASzjB,WACxDikB,UAAWtD,GAAW,YAAa,GAAI8C,GAASzjB,WAChDolB,MAAOzE,GAAW,QAAS,UAAW8C,KAE1CnC,WAAY,SAACvpB,EAAQ0D,GACjB,MAAO,CACHA,OACAxG,KAAM+B,EAAaquB,IACnB1wB,KAAMoD,EAAOpD,KACbywB,MAAOrtB,EAAOqtB,MACdF,cAAentB,EAAOmtB,cACtBjB,UAAW3D,GAAavoB,EAAOksB,WAC/BkB,cAAe7E,GAAavoB,EAAOotB,iBAG3ClwB,KAAM+B,EAAaquB,KAnBRjE,EAhDmC,SAAC,GAW5C,IAVHrpB,EAUE,EAVFA,OAIAM,GAME,EATFF,QASE,EARFC,OAQE,EAPFE,MAOE,EANFD,cAGAP,GAGE,EALFS,aAKE,EAJFC,WAIE,EAHFV,cACAW,EAEE,EAFFA,YACAorB,EACE,EADFA,SAEA,OAEI,gBAACnrB,EAAA,EAAD,CAAMT,SAAUH,GACZ,gBAACY,EAAA,EAAKC,MAAN,KACI,yBAAOC,QAAQ,WAAf,SACA,gBAAC,IAAD,CAAcjE,KAAK,SACnB,gBAAC,IAAD,CAAOA,KAAK,OAAOsB,GAAG,aAE1B,gBAACyC,EAAA,EAAKC,MAAN,KACI,yBAAOC,QAAQ,gBAAf,cACA,gBAAC,IAAD,CAAcjE,KAAK,cACnB,gBAAC,IAAD,CAAOA,KAAK,YAAYsB,GAAG,kBAE/B,gBAACyC,EAAA,EAAKC,MAAN,KACI,yBAAOC,QAAQ,YAAf,iFAA2G,qBAAG/D,KAAK,wEAAR,kCAA3G,MACA,gBAAC,IAAD,CAAcF,KAAK,UACnB,gBAAC,IAAD,CAAOA,KAAK,QAAQsB,GAAG,cAG3B,gBAACyC,EAAA,EAAKC,MAAN,KACI,yBAAOC,QAAQ,oBAAf,6CACA,gBAAC,IAAD,CAAcjE,KAAK,kBACnB,gBAAC,IAAD,CAAOA,KAAK,gBAAgBsB,GAAG,sBAEnC,gBAACyC,EAAA,EAAKC,MAAN,KACI,yBAAOC,QAAQ,oBAAf,gFACA,gBAAC,IAAD,CAAcjE,KAAK,kBACnB,gBAAC,IAAD,CAAOM,KAAK,WAAWN,KAAK,gBAAgB+nB,QAAS3kB,EAAOmtB,cAAejvB,GAAG,sBAElF,gBAAC+C,EAAA,EAAD,CAAQC,SAAS,EAAMhE,KAAK,SAASiE,SAAUb,GAA/C,gBACA,gBAACW,EAAA,EAAD,CAAQ/D,KAAK,SAAS6J,QAAS+kB,GAA/B,UACA,gBAAC7qB,EAAA,EAAD,CAAQ/D,KAAK,SAAS6J,QAASrG,GAA/B,aCvBG2oB,MAA0D,CACrE1pB,iBAAkB,kBAAuB,CACrC/C,KAAMksB,GAAe,OADP,EAAEplB,KAAF,EAAQgoB,WAG1BnC,WAAY,SAACvpB,EAAQ0D,GACjB,MAAO,CACHA,OACAxG,KAAM+B,EAAasuB,IACnB3wB,KAAMoD,EAAOpD,OAGrBM,KAAM+B,EAAasuB,KAXRlE,EA3B+B,SAAC,GAWzC,EAVFrpB,OAUE,EATFI,QASE,EARFC,OAQE,EAPFE,MAOG,IANHD,EAME,EANFA,aAGAP,GAGE,EALFS,aAKE,EAJFC,WAIE,EAHFV,cACAW,EAEE,EAFFA,YACAorB,EACE,EADFA,SAEA,OACI,gBAACnrB,EAAA,EAAD,CAAMT,SAAUH,GACZ,gBAACY,EAAA,EAAKC,MAAN,KACI,yBAAOC,QAAQ,WAAf,SACA,gBAAC,IAAD,CAAcjE,KAAK,SACnB,gBAAC,IAAD,CAAOA,KAAK,OAAOsB,GAAG,aAG1B,gBAAC+C,EAAA,EAAD,CAAQC,SAAS,EAAMhE,KAAK,SAASiE,SAAUb,GAA/C,gBACA,gBAACW,EAAA,EAAD,CAAQ/D,KAAK,SAAS6J,QAAS+kB,GAA/B,UACA,gBAAC7qB,EAAA,EAAD,CAAQ/D,KAAK,SAAS6J,QAASrG,GAA/B,aCNN8sB,GAAmB,SAACC,EAAmBC,GAAiC,IAClEC,EAAyCD,EAAzCC,iBAAkBC,EAAuBF,EAAvBE,mBAC1B,OAAIH,EACOG,EAAqBA,EAAmB1wB,KAAO+B,EAAaquB,IAEnEK,EACOA,EAAiBzwB,KAExB0wB,EACOA,EAAmB1wB,KAEvB+B,EAAaquB,KAuBlBO,GAAiB,SAACJ,EAAmBC,GAAiC,IAChEC,EAAyCD,EAAzCC,iBAAkBC,EAAuBF,EAAvBE,mBAC1B,GAAIH,EACA,OAAIG,EACO,aACHhxB,KAAM+wB,EAAmBA,EAAiB/wB,KAAO,IAC9CgxB,QAGX,EAEJ,GAAID,EAAkB,CAClB,GAAGC,EAAoB,CACrB,IAAME,EAtBU,SAACF,GAMtB,OALuB9uB,OAAOC,KAAK6uB,GAClCjlB,OAAOwgB,IACPhK,QAAO,SAAC4O,EAAiBC,GACxB,OAAkCA,KAApBJ,EAAP,eAAsCG,EAAtC,eAAgDC,EAAOJ,EAAmBI,KAA1E,eAAwFD,KAC9F,IAiByBE,CAAkBL,GACzC,OAAO,eAAKE,EAAZ,GAA+BH,GAEjC,OAAOA,EAEP,OAAOC,GA+FAM,GAvFK,WAChB,IAAMrmB,EAAWoP,cACXyW,EAAYvqB,aAAY,SAACjH,GAAD,OAAwBA,EAAM6qB,eAFtC,EAIOtkB,YAAe,GAJtB,oBAIfgrB,EAJe,KAILU,EAJK,KAKhBC,EAAcP,GAAeJ,EAAUC,GACvCW,EAAcb,GAAiBC,EAAUC,GANzB,EAOgBjrB,WAAe4rB,GAP/B,oBAOfC,EAPe,KAOFC,EAPE,KAShBC,EAAY,SAAC3vB,EAAyBqD,GAA1B,OAAkDqsB,EAAersB,EAAKpB,QAgBlF0B,EAAa,SAACisB,GAChB,OACI,gBAAClsB,EAAA,EAAD,cACU,gBAAC,GAAD,CAAmBwE,QAASynB,EAAWvC,YAAaqC,IAC1D,gBAAChyB,EAAA,EAAD,CAAQC,GAAG,MAAX,SAAuBmxB,EAAUgB,UAChCD,IAKPE,EAAe,CACjBjrB,KAAMgqB,EAAUgB,SAChBxuB,SAAU,SAACzC,GACPoK,EAASmjB,GAA8B,CACnC9sB,GAAI0wB,OACJnxB,aAGRquB,SAAU,kBAAMjkB,EAASmjB,OACzB6D,QAAS,WACLV,GAAS,GACTI,EAAef,IAAiB,EAAME,MAI9C,OAAQY,GACJ,KAAKrvB,EAAastB,KACd,IAAMb,EAAU0C,GAAeE,IAAgBF,EAAYlxB,KAAOkxB,OAAc/wB,EAChF,OAAOmF,EAAW,gBAAC,GAAD,iBAAoBmsB,EAApB,CAAkCjD,QAASA,MAEjE,KAAKzsB,EAAaquB,IACd,IAAM5B,EAAU0C,GAAeE,IAAgBF,EAAYlxB,KAAOkxB,OAAc/wB,EAChF,OAAOmF,EAAW,gBAAC,GAAD,iBAAuBmsB,EAAvB,CAAqCjD,QAASA,MAEpE,KAAKzsB,EAAaiuB,IACd,IAAMxB,EAAU0C,GAAeE,IAAgBF,EAAYlxB,KAAOkxB,OAAc/wB,EAChF,OAAOmF,EAAW,gBAACssB,GAAD,iBAAmBH,EAAnB,CAAiCjD,QAASA,MAEhE,KAAKzsB,EAAa2sB,IACd,IAAMF,EAAU0C,GAAeE,IAAgBF,EAAYlxB,KAAOkxB,OAAc/wB,EAChF,OAAOmF,EAAW,gBAACusB,GAAD,iBAAmBJ,EAAnB,CAAiCjD,QAASA,MAEhE,KAAKzsB,EAAaguB,KACd,IAAMvB,EAAU0C,GAAeE,IAAgBF,EAAYlxB,KAAOkxB,OAAc/wB,EAChF,OAAOmF,EAAW,gBAACwsB,GAAD,iBAAoBL,EAApB,CAAkCjD,QAASA,MAEjE,KAAKzsB,EAAasuB,IACd,IAAM7B,EAAU0C,GAAeE,IAAgBF,EAAYlxB,KAAOkxB,OAAc/wB,EAChF,OAAOmF,EAAW,gBAAC,GAAD,iBAAmBmsB,EAAnB,CAAiCjD,QAASA,MAEhE,KAAKzsB,EAAamtB,MACd,IAAMV,EAAU0C,GAAeE,IAAgBF,EAAYlxB,KAAOkxB,OAAc/wB,EAChF,OAAOmF,EAAW,gBAAC,GAAD,iBAAqBmsB,EAArB,CAAmCjD,QAASA,MAElE,KAAKzsB,EAAaktB,MACd,IAAMT,EAAU0C,GAAeE,IAAgBF,EAAYlxB,KAAOkxB,OAAc/wB,EAChF,OAAOmF,EAAW,gBAAC,GAAD,iBAAqBmsB,EAArB,CAAmCjD,QAASA,MAGtE,OAAOttB,EAAiB,yBC9IbnC,gBA1BS,SAACC,GACrB,MAAO,CACHiQ,KAAMjQ,EAAM6qB,YAAY5a,KACxBzI,KAAMxH,EAAM6qB,YAAYkI,YAuBjBhzB,EAjBoC,SAAC,GAAoB,IAAlBkQ,EAAiB,EAAjBA,KAAMzI,EAAW,EAAXA,KACxD,OAAKyI,EAID,gCACI,gBAAC7P,EAAA,EAAD,CAAQC,GAAG,KAAK6uB,UAAU,GAA1B,cACA,gBAACzoB,EAAA,EAAD,CAASC,MAAM,GACX,gBAACjG,EAAA,EAAD,CAAMC,KAAK,MAAMiG,SAAS,IAC1B,gBAACF,EAAA,EAAQ9F,QAAT,KACI,gBAAC8F,EAAA,EAAQrG,OAAT,iCAA0CoH,MAR/C,QCOTwrB,G,iLACe,IAAD,EACsB/sB,KAAKhC,MAA/BgvB,EADI,EACJA,YAAa3J,EADT,EACSA,SAErB,OACI,gCACKA,EAASI,IAAIlkB,KAAI,SAAC0tB,GAAD,OAAkB,gBAACC,GAAD,CAAStZ,QAASyP,EAAShV,KAAK4e,GAAOlmB,IAAKkmB,OAChF,gBAAC,GAAD,MACCD,GAAe,gBAAC,GAAD,MAChB,gBAAC,GAAD,W,GATU1sB,aAeXxG,gBAzBS,SAACC,GACrB,MAAO,CACHspB,SAAUtpB,EAAMspB,SAChB2J,YAAajzB,EAAM6qB,YAAYoI,YAC/BT,SAAUxyB,EAAM6qB,YAAY2H,YAqBrBzyB,CAAyBizB,K,SdpC5BlzB,K,wBAAAA,E,iCAAAA,Q,KAKL,IAAMsB,GACA,SAACY,GAAD,OAAgBjB,EAAajB,GAAYszB,QAAS,CAAEpxB,QADpDZ,GAEG,kBAAML,EAAajB,GAAYuzB,cegBhCtzB,eAAQ,MAlBI,SAAC4L,EAAoBjI,GAC5C,MAAO,CACH4vB,QAAS,kBAAM3nB,EAAS4nB,GAA6B7vB,EAAS7B,MAAMG,SAgB7DjC,EANgC,SAAC,GAAwB,IAAtBuzB,EAAqB,EAArBA,QAASzxB,EAAY,EAAZA,MACvD,OACI,gBAAC4E,EAAA,EAAD,CAAS+sB,UAAU,EAAMC,UAAWH,GAAUzxB,EAAMC,QCiB7C/B,gBA9BS,SAACC,GACrB,MAAO,CACHmE,OAAQnE,EAAMmE,OACduvB,iBAAkD,cAA/B1zB,EAAMsH,cAAcH,QACJ,UAA/BnH,EAAMsH,cAAcH,UA0BjBpH,EApB2B,SAAC,GAAkC,IChB5CuzB,EDgBYnvB,EAA+B,EAA/BA,OAAQuvB,EAAuB,EAAvBA,iBAE3CC,EAAexvB,EAAOulB,IAAIppB,MAAMyJ,KAAK6K,IAAI,EAAGzQ,EAAOulB,IAAIrf,OAD5C,IAEXupB,EAAYzvB,EAAOulB,IAAIrf,OAAS,GAAKqpB,EAErC/nB,EAAWoP,cAQjB,OC7B6BuY,EDuBX,WACd3nB,EAASvK,OCvBbmF,IAAMyU,WAAU,WACZ,IAAM6Y,EAAY,SAACC,GACA,WAAZA,EAAGC,MAAoC,KAAfD,EAAGE,SAC1BV,KAKR,OAFAW,SAASC,iBAAiB,QAASL,GAE5B,WACHI,SAASE,oBAAoB,QAASN,ODoB1C,gBAACtR,EAAA,EAAD,CAAOva,KAAM4rB,GACRD,EAAanuB,KAAI,SAAA3D,GAAK,OAAI,gBAAC,GAAD,CAAOA,MAAOsC,EAAOmQ,KAAKzS,GAAQmL,IAAKnL,W,qBEC/DuyB,G,iLAvBP,OACI,gBAACC,EAAA,EAAD,CAAWhrB,MAAO,CAAEoG,OAAQ,oBACxB,uBAAKpG,MAAO,CAAEC,QAAS,SACnB,uBAAKzI,IAAKyzB,KAAM9qB,MAAM,MAAMyF,OAAO,KAAKnO,IAAI,WAAWuI,MAAO,CAAE+lB,aAAc,UAC7E,IACD,gBAAC7M,EAAA,EAAD,CAAOC,QACH,gBAAC/hB,EAAA,EAAD,CAAMC,KAAK,cAAc4uB,MAAM,EAAMjmB,MAAO,CAAEkrB,UAAW,iBAEzD,gBAAC9R,EAAA,EAAMriB,OAAP,uBACA,gBAACqiB,EAAA,EAAM9hB,QAAP,KACI,gBAAC,EAAD,SAIZ,gBAAC,GAAD,MACA,gBAAC,GAAD,KACI,gBAAC,GAAD,Y,GAlBF4F,aCEZiuB,GAAcC,QACW,cAA7B5oB,OAAO0U,SAASmU,UAEe,UAA7B7oB,OAAO0U,SAASmU,UAEhB7oB,OAAO0U,SAASmU,SAAS5I,MACvB,2DAyCN,SAAS6I,GAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACT5I,MAAK,SAAAgJ,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WAClCD,IACFA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBl1B,QACf60B,UAAUC,cAAcO,WAK1BC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,6CAOvBC,OAAM,SAAA3zB,GACLyzB,QAAQzzB,MAAM,4CAA6CA,M,YC/E1D,SAAS4zB,GAAUv1B,GAA0C,IAAD,uBAAjBw1B,EAAiB,iCAAjBA,EAAiB,kBAC/D,IAAMC,EAAY,SAACnJ,GAAD,OAAkBA,EAAKX,QAAQ,IAAI+J,OAAJ,UAAcpzB,IAAEqzB,aAAa31B,EAAOqM,WAApC,MAAoD,KAErG,OADAmpB,EAAK,CAAIC,EAAUD,EAAM,KAApB,oBAA4BA,EAAMp1B,MAAM,MAChCkF,KAAI,SAAAgnB,GAAI,OAAIA,EAAKC,UAAQzK,KAAK9hB,EAAOqM,WAG/C,SAASupB,GAAkBC,GAC9B,IAAMC,EAAgBnqB,OAAOoqB,aAAaC,QAT3B,mBAUf,GAAsB,OAAlBF,EACA,OAAOpzB,OAAOmnB,OAAO,GAAIgM,EAAcI,GAAsBJ,IAEjE,IAAMK,EAAsB1Y,KAAK2Y,MAAML,GACjCM,EAAgBH,GAAsBJ,GAE5C,OADqBnzB,OAAOmnB,OAAO,GAAIuM,EAAeP,EAAcK,GAIjE,SAASG,GAAgBr2B,GAC5B,IAAM81B,EAA6B,CAC/BQ,IAAKt2B,EAAOs2B,IACZnqB,WAAYnM,EAAOmM,WACnBC,YAAapM,EAAOoM,YACpBnH,eAAgBjF,EAAOiF,gBAG3B0G,OAAOoqB,aAAaQ,QA3BL,kBA2ByB/Y,KAAKC,UAAUqY,IAOpD,SAASG,GAAsBj2B,GAClC,MAAO,CACHmM,WAAY,GACZC,YAAa,GACbkqB,IAAK,IACLrxB,eAAgB,CACZnE,KAAM8B,EAAaM,MACnB8B,QAAS,yBAKd,SAASwxB,GAAcC,GAC1B,OAAOA,EAAI1T,QAAO,SAACoH,EAAUuM,GACzB,OAA2B,IAAvBvM,EAAIrH,QAAQ4T,GACN,GAAN,oBAAWvM,GAAX,CAAgBuM,IAETvM,IAEZ,ICtDA,SAAewM,GAAtB,mC,gDAAO,WAAmCrvB,GAAnC,oBAAAuG,EAAA,6DACG4S,EAAWN,KACXyW,EAFH,UAEYnW,EAFZ,gCAE4CqK,mBAAmBxjB,IAF/D,SAGaoZ,MAAMkW,EAAK,CACvBhW,OAAQ,MACRD,YAAa,gBALd,cAGGzK,EAHH,gBAOUA,EAAE2K,OAPZ,oF,0BCIKjhB,G,aCGKi3B,I,aAKPC,I,aAWAC,I,aA0BAC,IA1CH,SAAUH,KAAV,kEACH,OADG,SACGI,aAAKH,IADR,OAEH,OAFG,SAEGG,aAAKD,IAFR,wCAKP,SAAUF,KAAV,kFAEuE,OAFvE,SAE6EI,aAAKxrB,EAA2BnE,gBAF7G,OAKoC,OAHtB4vB,EAFd,SAI+BA,EAAOp2B,QAAtBP,EAJhB,EAIgBA,KAAM8G,EAJtB,EAIsBA,KAJtB,SAK0CY,cAAO,SAACpI,GAAD,OAAwBA,EAAME,UAL/E,OAOQ,OAFMA,EALd,OAMco3B,OAAmBn2B,IAATT,EAAqB+0B,GAAUv1B,EAAQsH,EAAM9G,GAAQ8G,EAN7E,UAOc2vB,aAAKF,GAAuBK,GAP1C,gEAWA,SAAUL,GAAsBzvB,GAAhC,sFAEiD,OAFjD,kBAEuD+vB,aAAKV,GAAqBrvB,GAFjF,UAG8B,QADhBoK,EAFd,QAGmBzK,OAHnB,gBAIY,OAJZ,SAIkBqwB,aAAI5rB,GAAuBlE,WAAWkK,EAAOpK,KAAMoK,EAAOjK,KAAMiK,EAAOhK,MAAOgK,EAAO/J,OAAQ+J,EAAO9J,SAJtH,iCAKqC,UAAlB8J,EAAOzK,OAL1B,iBAMwD,OANxD,UAM8DiB,cAAO,SAACpI,GAAD,OAAwBA,EAAMqO,WANnG,QAWwC,OALtBopB,EANlB,OAOkB11B,EAAYgH,KAAK2uB,MACjB11B,EAAK0wB,OACLiF,EAAc/lB,EAAO+lB,YAAc/lB,EAAO+lB,YAAcF,EAAa3vB,OAAO8vB,KAAKpwB,KATnG,UAW8CY,cAAO,SAACpI,GAAD,OAAwBA,EAAME,UAXnF,kBAYuBs2B,MAAQhvB,EAZ/B,iBAac,OAbd,UAaoBgwB,aAAI5rB,GAAuB/J,MAAvB,oCAA0D+P,EAAO9P,KAAOC,EAAWC,IAb3G,QAeY,OAfZ,UAekBw1B,aAAI5rB,GAAuBrE,KAAKowB,IAflD,gCAkBoD,OAlBpD,oCAkB0DvvB,cAAO,SAACpI,GAAD,OAAwBA,EAAMqO,WAlB/F,QAqBQ,OAHMopB,EAlBd,OAmBc11B,EAAYgH,KAAK2uB,MACjB11B,EAAK0wB,OApBnB,UAqBc8E,aAAI5rB,GAAuB/J,MAAvB,oCAA0D,KAAEkK,YAAchK,EAAWC,IArBvG,QAsBQ,OAtBR,UAsBcw1B,aAAI5rB,GAAuBrE,KAAKkwB,EAAa3vB,OAAO8vB,KAAKpwB,OAtBvE,uDA0BA,SAAU0vB,KAAV,wEAEQ,OAFR,SAEcE,aAAKxrB,EAA2B3D,MAF9C,OAGoC,OAHpC,SAG0CG,cAAO,SAACpI,GAAD,OAAwBA,EAAME,UAH/E,OAIQ,OADMA,EAHd,gBAIcs3B,aAAI5rB,GAAuBrE,KAAKrH,EAAOs2B,MAJrD,gE,SD7CY12B,K,sCAAAA,E,kCAAAA,E,gCAAAA,E,kCAAAA,E,8BAAAA,E,oBAAAA,E,sBAAAA,E,sBAAAA,E,sBAAAA,E,oCAAAA,E,oCAAAA,E,qCAAAA,Q,KAeL,IEXK+3B,GFWCz2B,GACK,SAACqT,EAAoB6U,EAAmCjV,EAA6CE,EAA6BxS,GAAlI,OAAwJhB,EAAajB,GAAYg4B,cAAe,CAAErjB,OAAM6U,WAAUvnB,YAAWsS,mBAAkBE,cADpPnT,GAEG,SAACsQ,EAAamI,EAAiB9X,GAA/B,OAAqDhB,EAAajB,GAAYi4B,YAAa,CAAErmB,MAAK3P,YAAW8X,aAFhHzY,GAGE,SAACsQ,EAAaG,EAA0B9P,GAAxC,OAA8DhB,EAAajB,GAAYk4B,WAAY,CAAEtmB,MAAKG,UAAS9P,eAHrHX,GAIG,SAACsQ,EAAaG,EAA8B9P,GAA5C,OAAkEhB,EAAajB,GAAYm4B,YAAa,CAAEvmB,MAAKG,UAAS9P,eAJ3HX,GAKC,SAACsQ,EAAa5P,EAAaE,EAAYD,GAAvC,OAA6DhB,EAAajB,GAAYo4B,UAAW,CAAExmB,MAAK5P,MAAKE,KAAID,eALlHX,GAMH,SAACW,GAAD,OAAuBhB,EAAajB,GAAYmI,KAAM,CAAElG,eANrDX,GAOF,SAACW,GAAD,OAAuBhB,EAAajB,GAAYq4B,MAAO,CAAEp2B,eAPvDX,GAQF,SAACU,EAAaC,EAAmBC,GAAjC,OAAgDjB,EAAajB,GAAYmC,MAAO,CAAEH,MAAKC,YAAWC,QARhGZ,GASE,SAACsQ,GAAD,OAAiB3Q,EAAajB,GAAYs4B,UAAW,CAAE1mB,SExB/D,SAAS2mB,GAAmCC,EAAgBC,GAC/D,OAAO31B,OAAOmnB,OAAO,CAAEuO,eAAeC,I,SAG9BV,K,8BAAAA,E,0BAAAA,E,wBAAAA,E,0BAAAA,E,sBAAAA,E,gBAAAA,E,YAAAA,E,cAAAA,E,cAAAA,E,gCAAAA,E,gCAAAA,E,kCAAAA,E,oCAAAA,E,oCAAAA,E,oCAAAA,E,sDAAAA,E,sDAAAA,E,uDAAAA,Q,KAqBL,IAAMW,GAcD,SAACC,GAAD,OAAuBJ,GAAcR,GAAaa,OAAQ,CAAED,eAd3DD,GAeH,kBAAMH,GAAcR,GAAa5vB,KAAM,KAfpCuwB,GAgBF,kBAAMH,GAAcR,GAAaM,MAAO,KAhBtCK,GAiBF,SAAC12B,GAAD,OAAiBu2B,GAAcR,GAAa51B,MAAO,CAAEH,S,aCa/C62B,I,aAqBAC,I,aAoFAC,I,aASAC,I,aAMAC,IAtKjB,SAASC,KACL,OAAOC,aAAa,SAAAC,GAChB,SAASC,EAAUr3B,GACf,GAAIA,EAAIkE,gBAAgBozB,KAEpBF,EAAKG,GAAgCC,IAAIC,gBAAgBz3B,EAAIkE,YAC1D,CACH,IAAMwzB,EAAS9b,KAAK2Y,MAAMv0B,EAAIkE,MAC9BkzB,EAAKM,IAIb,SAASC,IACLP,EAAKG,MAGT,SAASK,IACLR,EAAKG,MACLH,EAAKS,KAGT,SAASC,EAAQlO,GACbwN,EAAKG,GAA+B,kCAGxC,IAAMQ,EAAK,IAAIC,UzD/BhB,WACH,IAAMnZ,EAAWN,KACjB,MAAM,QAAN,OAAexU,OAAO0U,SAASmU,SAA/B,YAA2C7oB,OAAO0U,SAASwZ,MAA3D,OAAkEpZ,EAAlE,WyD6B6BqZ,IAOzB,OANAH,EAAG3F,iBAAiB,UAAWiF,GAC/BU,EAAG3F,iBAAiB,OAAQuF,GAC5BI,EAAG3F,iBAAiB,QAASwF,GAC7BG,EAAG3F,iBAAiB,QAAS0F,GAGtB,WACHC,EAAG1F,oBAAoB,UAAWgF,GAClCU,EAAG1F,oBAAoB,OAAQsF,GAC/BI,EAAG1F,oBAAoB,QAASuF,GAChCG,EAAG1F,oBAAoB,QAASyF,OAUrC,SAAUjB,KAAV,wEAEuB,OAFvB,SAE6BpB,aAAKyB,IAFlC,OAGC,OADMiB,EAFP,gBAGO9C,aAAKyB,GAAoBqB,GAHhC,OAIwC,OAJxC,SAI8C7C,aAAK,CAC9C8C,GAA2BjyB,KAC3BiyB,GAA2B/B,QANhC,iBAQYn3B,OAASk5B,GAA2BjyB,KARhD,iBASK,OATL,UASWmvB,aAAK,CACP8C,GAA2B/B,MAC3B+B,GAA2Bj4B,QAXpC,QAcC,OAdD,UAcOM,aAAM,KAdb,gEAqBA,SAAUq2B,GAAmBqB,GAA7B,8FAGiB,OAHjB,SAGuB7C,aAAK6C,GAH5B,OAGWn4B,EAHX,OAIWC,EAAYgH,KAAK2uB,MAJ5B,KAKa51B,EAAIw2B,YALjB,cAMce,GAA6BpxB,KAN3C,SAUcoxB,GAA6BlB,MAV3C,UAcckB,GAA6Bp3B,MAd3C,UAmBco3B,GAA6BvB,cAnB3C,UAuBcuB,GAA6BtB,YAvB3C,UA2BcsB,GAA6BrB,WA3B3C,UA+BcqB,GAA6BpB,YA/B3C,UAmCcoB,GAA6Bc,eAnC3C,UAuCcd,GAA6Be,eAvC3C,UA2Ccf,GAA6BnB,UA3C3C,UAgDcmB,GAA6BgB,gBAhD3C,mBAOa,OAPb,UAOmB7C,aAAI0C,GAA4Bn4B,IAPnD,4CAWa,OAXb,UAWmBy1B,aAAI0C,GAA6Bn4B,IAXpD,4CAgBa,OADMC,EAAK0wB,OAfxB,UAgBmB8E,aAAI0C,GAA6Bp4B,EAAIA,IAAKC,EAAWC,IAhBxE,4CAoBa,OApBb,UAoBmBw1B,aAAI0C,GAAoCp4B,EAAI2S,KAAM3S,EAAIwnB,SAAUxnB,EAAIuS,iBAAkBvS,EAAIyS,SAAUxS,IApBvH,4CAwBa,OAxBb,UAwBmBy1B,aAAI0C,GAAkCp4B,EAAI4P,IAAK5P,EAAIgJ,QAAQ+O,QAAS9X,IAxBvF,4CA4Ba,OA5Bb,UA4BmBw1B,aAAKwB,GAAiBj3B,EAAKm4B,EAAel4B,GA5B7D,4CAgCa,OAhCb,UAgCmBw1B,aAAKuB,GAAkBh3B,EAAKm4B,EAAel4B,GAhC9D,4CAoCa,OApCb,UAoCmBy1B,aAAI1I,GAA+BhtB,EAAIgJ,UApC1D,4CAwCa,OAxCb,UAwCmB0sB,aAAI1I,GAA+BhtB,EAAI+X,UAxC1D,4CA6Ca,OADM7X,EAAK0wB,OA5CxB,UA6CmB8E,aAAI0C,GAAgCp4B,EAAI4P,IAAK5P,EAAIA,IAAKE,EAAID,IA7C7E,4CAiDa,OAjDb,UAiDmBy1B,aAAI0C,GAAiCp4B,EAAI4P,MAjD5D,4JAoFA,SAAUmnB,GAAkByB,EAAkBL,GAA9C,0EACGvE,EAAyC,GAD5C,YAEIA,EAAMrrB,OAASiwB,GAFnB,gBAGgB,OAHhB,SAGsBlD,aAAK6C,GAH3B,OAGOM,EAHP,OAIC7E,EAAMzR,KAAKsW,GAJZ,+CAMI7E,GANJ,wCASA,SAAUoD,GAAiBh3B,EAA6Dm4B,EAA8Bl4B,GAAtH,0EAC4C,OAD5C,SACkDw1B,aAAKsB,GAAmB/2B,EAAI04B,SAASC,YAAaR,GADpG,OAGH,OAFMvE,EADH,OAEGgF,EAAShF,EAAMlwB,KAAI,SAACgnB,EAAMzf,GAAP,MAAgB,CAAEqF,SAAUoa,EAAKiM,UAAWtkB,YAAarS,EAAI04B,SAASG,aAAa5tB,OAFzG,SAGGyqB,aAAI0C,GAAkCp4B,EAAI4P,IAAKgpB,EAAQ34B,IAH1D,wCAMA,SAAUg3B,GAAgBj3B,EAA4Dm4B,EAA8Bl4B,GAApH,0EAC4C,OAD5C,SACkDw1B,aAAKsB,GAAmB/2B,EAAI04B,SAASC,YAAaR,GADpG,OAGH,OAFMvE,EADH,OAEGgF,EAAShF,EAAMlwB,KAAI,SAACgnB,EAAMzf,GAAP,MAAgB,CAAEqF,SAAUoa,EAAKiM,UAAWtkB,YAAarS,EAAI04B,SAASG,aAAa5tB,OAFzG,SAGGyqB,aAAI0C,GAAiCp4B,EAAI4P,IAAKgpB,EAAQ34B,IAHzD,wCCnLA,SAAesD,GAAtB,mC,gDAAO,WAAgC9D,GAAhC,gBAAAwM,EAAA,6DACG9M,EAA0B,CAC5B25B,WAAYr5B,GAFb,SAIUyf,GAAW,qBAAsB/f,GAJ3C,oF,sBAOA,SAAe45B,KAAtB,gC,gDAAO,+BAAA9sB,EAAA,6DACG4S,EAAWN,KADd,SAEaO,MAAM,GAAD,OAAID,EAAJ,sBAAkC,CACnDG,OAAQ,QAHT,cAEG1K,EAFH,gBAKUA,EAAE2K,OALZ,oF,0BCLKjhB,G,aCEFg7B,I,aAMAC,I,aAgBAC,I,aAQOC,IA9BjB,SAAUH,GAAYzD,GAAtB,wEACI,OADJ,SACUG,aAAIlyB,EAAuB7D,cADrC,OAEkC,OAFlC,SAEwC81B,aAAKlyB,GAAkBgyB,EAAOp2B,QAAQM,QAF9E,OAGI,OADM25B,EAFV,gBAGU3D,aAAKwD,GAAkBG,GAHjC,wCAMA,SAAUH,GAAiBG,GAA3B,6EACwB,OAAhBA,EAAK/zB,OADb,gBAEQ,OAFR,SAEcqwB,aAAIlyB,EAAuB3D,UAAUu5B,EAAKN,WAAWA,aAFnE,iCAG+B,UAAhBM,EAAK/zB,OAHpB,iBAIQ,OAJR,SAIcqwB,aAAIlyB,EAAuBjE,gBAJzC,OAOQ,OAFMU,EAAYgH,KAAK2uB,MACjB11B,EAAK0wB,OANnB,UAOc8E,aAAIlyB,EAAuBzD,MAAvB,uCAA6Dq5B,EAAKp5B,KAAMC,EAAWC,IAPrG,gCASQ,OATR,UAScw1B,aAAIlyB,EAAuBjE,gBATzC,yCAgBA,SAAU25B,KAAV,wEAEQ,OAFR,SAEc5D,aAAK8C,GAA2BjyB,MAF9C,OAGsC,OAHtC,SAG4CsvB,aAAKsD,IAHjD,OAIQ,OADMK,EAHd,gBAIc3D,aAAKwD,GAAkBG,GAJrC,+DAQO,SAAUD,KAAV,kEACH,OADG,SACGE,aAAU71B,EAA2B9D,QAASs5B,IADjD,OAEH,OAFG,SAEGM,aAAI,CACNJ,OAHD,yC,SDhCKl7B,K,yBAAAA,E,2BAAAA,E,2BAAAA,E,yBAAAA,E,2BAAAA,E,wBAAAA,Q,KASL,IEZKA,GFYCsB,GAKA,SACLgS,EAAyBgB,EAA0BI,GAD9C,OAEJzT,EAAajB,GAAYma,QAAS,CACnC7G,WAAUgB,mBAAkBI,mBARvBpT,GAWA,SACLY,EAAY8I,GADP,OAEJ/J,EAAajB,GAAYu7B,QAAS,CAAEr5B,KAAI8I,aAbpC1J,GAgBA,SAACY,GAAD,OAAgBjB,EAAajB,GAAY0a,QAAS,CAAExY,S,SE5BrDlC,K,qBAAAA,Q,KAIL,IAAMsB,GACD,SAACY,EAAYoR,EAAkBrR,GAA/B,OAAqDhB,EAAajB,GAAYia,OAAQ,CAAE/X,KAAIoR,WAAUrR,eCJ3G,SAAeu5B,GAAtB,qC,gDAAO,WAAwB7Z,EAAerO,GAAvC,gBAAArF,EAAA,6DACG9M,EAA2B,CAC7ByQ,IAAK,CACD0B,aAHL,SAMU4N,GAAW,QAAD,OAASS,EAAT,KAAmBxgB,GANvC,oF,sBASA,SAAes6B,GAAtB,mC,gDAAO,WAAyB9Z,GAAzB,UAAA1T,EAAA,sEACU2S,GAAc,QAAD,OAASe,EAAT,MADvB,oF,sBCTA,SAAe+Z,GAAtB,yC,gDAAO,WACHthB,EAA4ByH,EAC5B9H,EAAiB/O,GAFd,gBAAAiD,EAAA,6DAIG9M,EAAyC,CAC3C4Y,UACA/O,WAND,SAQUkW,GAAW,oBAAD,OAAqB9G,EAArB,qBAAoDyH,EAApD,KAAmE1gB,GARvF,oF,sBAWA,SAAew6B,GAAtB,qC,gDAAO,WAA8BvhB,EAA4ByH,GAA1D,UAAA5T,EAAA,sEACU2S,GAAc,oBAAD,OAAqBxG,EAArB,qBAAoDyH,EAApD,MADvB,oF,sBAIA,SAAe+Z,GAAtB,uC,gDAAO,WAA8CxhB,EAA4BL,EAAiB/O,GAA3F,gBAAAiD,EAAA,6DACG9M,EAAiD,CACnD4Y,UACA/O,WAHD,SAKUkW,GAAW,oBAAD,OAAqB9G,EAArB,KAA4CjZ,GALhE,oF,sBAQA,SAAe06B,GAAtB,mC,gDAAO,WAAsCzhB,GAAtC,UAAAnM,EAAA,sEACU2S,GAAc,oBAAD,OAAqBxG,EAArB,MADvB,oF,0BCvBKpa,G,aC4BK87B,I,aASAC,I,aAiCAC,I,aAoBAC,I,aAiDAC,I,aA2CPC,I,aAUOC,I,aAeAC,IAnMjB,SAASC,GAAcp8B,EAAoB6Z,GACvC,OAAO7Z,EAAMspB,SAAShV,KAAKuF,GAG/B,SAASwiB,GAAuBr8B,EAAoBgC,GAChD,OAAOhC,EAAMqU,iBAAiBC,KAAKtS,GAGvC,SAASs6B,GAAet8B,EAAoBgC,GACxC,OAAOhC,EAAMuU,SAASD,KAAKtS,GAG/B,SAASu6B,GAAUv8B,EAAoBgC,GACnC,OAAOhC,EAAMyU,KAAKH,KAAKtS,GAGpB,SAAU45B,GAAgBxnB,EAAoCooB,GAA9D,kEAEiF,OAFjF,SAEuFpF,aAAKnc,GAAoCV,QAFhI,iBAGkBtZ,QAAQe,KAAOoS,EAAiBA,iBAHlD,gBAIK,OAJL,SAIWlM,aAAOs0B,GAJlB,8DASA,SAAUX,GAA2BxE,GAArC,8EAEoC,OAFpC,kBAE0CjvB,aAAOg0B,GAAe/E,EAAOp2B,QAAQ4Y,SAF/E,iBAGkB1S,SAAWlE,EAAcgF,KAH3C,sBAIW,IAAI7F,MAAM,0BAJrB,OAeC,OATMgS,EAAqC,CACvCA,iBAAkBse,OAClB7Y,QAASwd,EAAOp2B,QAAQ4Y,QACxB/O,QAAS,CACL0e,SAAU6N,EAAOp2B,QAAQ6Y,aACzBvF,SAAU,KAXnB,SAeOgjB,aACFmE,GACAtnB,EAAiBA,iBACjBA,EAAiByF,QACjBzF,EAAiBtJ,SAnBtB,OAsBqB,OAtBrB,UAsB2BqsB,aAAK6E,GAAiB5nB,EAAiBA,iBAAkB,CAAEyJ,aAAa,IAtBnG,QAwBC,OAFM2e,EAtBP,iBAwBOhF,aAAIvc,GAAwC7G,GAAkB,IAxBrE,QAyBC,OAzBD,UAyBO+iB,aAAKyE,GAAiBxnB,EAAkBooB,GAzB/C,gCA6BC,OA7BD,0BA2BOz6B,EAAYgH,KAAK2uB,MACjB11B,EAAK0wB,OA5BZ,UA6BO8E,aAAIvc,GAAA,mCAAkE,KAAElP,YAAchK,EAAWC,IA7BxG,uDAiCA,SAAU85B,GAAsBzE,GAAhC,oHACmBA,EAAOp2B,QAAQoT,iBADlC,kEAEiD,OADzCooB,EADR,iBAEuDr0B,aAAOi0B,GAAwBI,EAAQroB,kBAF9F,OAGqB,OADdA,EAFP,iBAG2B+iB,aAAK6E,GAAiB5nB,EAAiBA,iBAAkB,CAAEyJ,aAAa,IAHnG,QAIC,OADM2e,EAHP,iBAIOrF,aAAKyE,GAAiBxnB,EAAkBooB,GAJ/C,8UAoBA,SAAUT,GACb3nB,EAAyCuN,EACzCnN,EAAuB1J,GAFpB,gGAIC6W,EAJD,iBAMC,OAND,SAMO4V,aAAKiE,GACPpnB,EAAiBA,iBAAkBuN,EACnCvN,EAAiByF,QAAS/O,GAR/B,OAUC,OAVD,SAUO0sB,aAAIha,GAAgCmE,EAAY7W,IAVvD,OAYiC,OAZjC,SAYuC1C,aAAOk0B,GAAgB3a,GAZ9D,OAYOvO,EAZP,OAaOqB,EAAOrB,EAASqB,KAAOrB,EAASqB,KAAO,GAb9C,+BAewBA,EAfxB,mEAgB2B,OADfioB,EAfZ,kBAgBiCt0B,aAAOm0B,GAAWG,GAhBnD,aAgBWhrB,EAhBX,SAiBgC,SAAhBA,EAAIiB,QAjBpB,iBAmBS,OAnBT,UAmBe4kB,aAAKgE,GAAWmB,GAnB/B,wSAsBQ/a,GAtBR,QA0BC,OADMgb,EAAgBjK,OAzBvB,UA0BO6E,aAAKiE,GACPpnB,EAAiBA,iBAAkBuoB,EACnCvoB,EAAiByF,QAAS/O,GA5B/B,QA8BC,OA9BD,UA8BO0sB,aAAIha,GAAgC,CACtCxb,GAAI26B,EACJ9iB,QAASzF,EAAiByF,QAC1B/O,UACA2J,KAAM,IACPL,EAAiBA,iBAAkBI,IAnCvC,QAqCiC,OArCjC,UAqCuCpM,aAAOi0B,GAAwBjoB,EAAiBA,kBArCvF,QAuCC,OAFMwoB,EArCP,iBAuCOrF,aACFmE,GACAkB,EAAwBxoB,iBACxBwoB,EAAwB/iB,QACxB+iB,EAAwB9xB,SA3C7B,iCA6CQ6xB,GA7CR,0EAiDA,SAAUX,GAAgB9hB,EAA4B9T,GAAtD,4FAIwB,OAJxB,SAI8By2B,aAAc5hB,GAAoCb,IAAK0iB,IAAQC,QAAQ,IAJrG,OAIGC,EAJH,cAQgE,OARhE,kBAQsE5F,aAAK4F,GAR3E,WAQW3F,EARX,QAWgBp2B,QAAQe,KAAOkY,EAX/B,uDAgBqD,OAhBrD,UAgB2D9R,aAAOi0B,GAAwBniB,GAhB1F,QAoBwB,OAJb9F,EAhBX,SAiBwCijB,EAAOp2B,QAAlCuT,EAjBb,EAiBaA,cAAe1J,EAjB5B,EAiB4BA,QAEjBmyB,EAAqB7oB,EAAiBtJ,QAAQyJ,SAASC,GAnBlE,UAoB8B+iB,aAAKwE,GAAgB3nB,EAAkB6oB,EAAoBzoB,EAAe1J,GApBxG,QAwBK,OAJM6W,EApBX,OAuBWF,EAAQiR,OAvBnB,UAwBW8E,aAAI0F,GAA0Bzb,EAAOE,EAAY5Y,KAAK2uB,QAxBjE,QAgCK,OAhCL,UAgCWH,aAAK+D,GAAU7Z,EAAOE,GAhCjC,QAiCK,OAjCL,UAiCW6V,aAAIvc,GAAwC7G,EAAiBA,iBAAkBqN,EAAOjN,IAjCjG,gCAsCK,OAtCL,0BAoCWzS,EAAYgH,KAAK2uB,MACjB11B,EAAK0wB,OArChB,UAsCW8E,aAAIvc,GAAA,kCAAiE,KAAElP,YAAchK,EAAWC,IAtC3G,8EA2CP,SAAUi6B,GAAsB7oB,GAAhC,kHAC2BA,EAASqB,KADpC,kEAE8B,OADfioB,EADf,iBAEoCt0B,aAAOm0B,GAAWG,GAFtD,YAEchrB,EAFd,SAGmC,SAAhBA,EAAIiB,QAHvB,iBAKY,OALZ,UAKkB4kB,aAAKgE,GAAWmB,GALlC,8UAUO,SAAUR,GAAqB7E,GAA/B,sFAC6C,OAD7C,SACmDjvB,aAAOi0B,GAAwBhF,EAAOp2B,QAAQe,IADjG,OACGoS,EADH,8CAG0BA,EAAiBtJ,QAAQyJ,SAHnD,kEAIqC,OADzBoN,EAHZ,kBAI2CvZ,aAAOk0B,GAAgB3a,GAJlE,QAKK,OADMvO,EAJX,iBAKWmkB,aAAK0E,GAAuB7oB,GALvC,QAMK,OANL,UAMWmkB,aAAKkE,GAAgBrnB,EAAiBA,iBAAkBuN,GANnE,QAOK,OAPL,UAOW6V,aAAIha,GAAgCmE,IAP/C,6QASC,OATD,UASO4V,aAAKoE,GAAwBtE,EAAOp2B,QAAQe,IATnD,QAWC,OAXD,oBAWOw1B,aAAIvc,GAAwCoc,EAAOp2B,QAAQe,KAXlE,gHAeA,SAAUm6B,KAAV,kEACH,OADG,SACGhB,aAAUlgB,GAAoClB,OAAQ8hB,IADzD,OAEH,OAFG,SAEGV,aAAUlgB,GAAoCV,OAAQ2hB,IAFzD,OAGH,OAHG,SAGGf,aAAUjB,GAA2BpC,cAAegE,IAHvD,yC,SD/MKh8B,K,yBAAAA,E,qBAAAA,E,oCAAAA,Q,KAML,IAAMsB,GACF,kBAAML,EAAajB,GAAYq9B,QAD7B/7B,GAEA,SAAClB,GAAD,OAA0Ba,EAAajB,GAAYs9B,QAAS,CAAEl9B,YAF9DkB,GAGI,SAACU,EAAaC,EAAmBC,GAAjC,OAAgDjB,EAAajB,GAAYu9B,aAAc,CAAEv7B,MAAKC,YAAWC,QETnH,SAAes7B,KAAtB,gC,gDAAO,+BAAAvvB,EAAA,6DACG4S,EAAWN,KADd,SAEaO,MAAM,GAAD,OAAID,EAAJ,WAAuB,CACxCG,OAAQ,MACRD,YAAa,gBAJd,cAEGzK,EAFH,gBAMUA,EAAE2K,OANZ,oF,uCCUGwc,I,aAOAC,I,aAmBAC,I,aAYOC,I,aAUAC,IAhDjB,SAAUJ,KAAV,kEACI,OADJ,SACUpC,aAAUjB,GAA2BjyB,KAAMu1B,IADrD,wCAOA,SAAUA,KAAV,4EACI,OADJ,SACUhG,aAAIoG,MADd,OAE8C,OAF9C,SAEoDrG,aAAK+F,IAFzD,OAKQ,OAHEO,EAFV,gBAIcC,EAAehI,GAAkB+H,EAAe39B,QAJ9D,SAKcs3B,aAAIoG,GAA8BE,IALhD,yDAOQ,IfQJjyB,OAAOoqB,aAAa8H,WA/BL,mBe0BT,MAAOp7B,IAET,OADM2zB,EAAgB1zB,OAAOmnB,OAAO,GAAI8T,EAAe39B,OAAQi2B,GAAsB0H,EAAe39B,SAX5G,UAYcs3B,aAAIoG,GAA8BtH,IAZhD,uDAmBA,SAAUmH,KAAV,kEAEQ,OAFR,SAEcrG,aAAK,CACPtI,GAA2B/U,OAC3BnO,EAA2B7D,kBAC3BzC,EAA2B1D,YALvC,OAOoC,OAPpC,SAO0CwG,cAAO,SAACpI,GAAD,OAAwBA,EAAME,UAP/E,OAQQq2B,GARR,+DAYO,SAAUmH,KAAV,0EAEC,OAFD,kBAEOnG,aAAKiG,IAFZ,8BAMC,OAND,yBAIOz7B,EAAYgH,KAAK2uB,MACjB11B,EAAK0wB,OALZ,UAMO8E,aAAIoG,GAAA,kCAA6D,KAAE7xB,YAAchK,EAAWC,IANnG,sDAUA,SAAU27B,KAAV,kEACH,OADG,SACGxG,aAAKuG,IADR,OAEH,OAFG,SAEGvG,aAAKoG,IAFR,OAGH,OAHG,SAGGpG,aAAKsG,IAHR,wC,iBCjDUO,I,aAiBAC,I,aAUAC,I,aAuBAC,I,aAiBAC,I,aAKAC,I,aAMAC,IA9EV,SAAUN,GAAkB3G,GAA5B,gFAEmC,OAFnC,kBAEyCE,aAAK1M,GAAawM,EAAOp2B,QAAQ4Y,QAAQ7X,GAAI,CAAE6X,QAASwd,EAAOp2B,QAAQ4Y,UAFhH,UAGqB,QADd0kB,EAFP,QAGUp3B,OAHV,gBAIK,OAJL,SAIWqwB,aAAI1I,GAA+ByP,EAAKzzB,UAJnD,iCAK4B,UAAhByzB,EAAKp3B,OALjB,iBAQK,OAFMpF,EAAYgH,KAAK2uB,MACjB11B,EAAK0wB,OAPhB,UAQW8E,aAAI1I,GAA6ByP,EAAK1kB,QAAS0kB,EAAKz8B,IAAKC,EAAWC,IAR/E,gCAaC,OAbD,0BAWOD,EAAYgH,KAAK2uB,MACjB11B,EAAK0wB,OAZZ,UAaO8E,aAAI1I,GAA6BuI,EAAOp2B,QAAQ4Y,QAAQ7X,GAApD,iCAAkF,KAAE+J,YAAchK,EAAWC,IAbxH,uDAiBA,SAAUi8B,GAAkB5G,GAA5B,0EAEC,OAFD,kBAEOE,aAAKzM,GAAeuM,EAAOp2B,QAAQ4Y,SAF1C,8BAMC,OAND,yBAIO9X,EAAYgH,KAAK2uB,MACjB11B,EAAK0wB,OALZ,UAMO8E,aAAI1I,GAA6BuI,EAAOp2B,QAAQ4Y,QAA5C,iCAA+E,KAAE9N,YAAchK,EAAWC,IANrH,sDAUA,SAAUk8B,GAAgBM,GAA1B,gFACH,OADG,SACGhH,aAAI1I,GAA8B0P,IADrC,OAEyC,OAFzC,SAE+CjH,aAAKxM,GAAeyT,GAFnE,UAEGC,EAFH,OAICC,GAAa,EACW,OAAxBD,EAAat3B,OALd,qBAMK2lB,GAAmB2R,EAAaE,cAAc39B,MANnD,iBAQG,OADAstB,EAAiBmQ,EAAaE,cAPjC,UAQSnH,aAAI1I,GAAgC0P,EAAUC,EAAaE,gBARpE,gCAaG,OAFM58B,EAAYgH,KAAK2uB,MACjB11B,EAAK0wB,OAZd,UAaS8E,aAAI1I,GAAoC0P,IAbjD,QAeG,OADAE,GAAa,EAdhB,UAeSlH,aAAI1I,GAA6B9sB,EAAIy8B,EAAaE,cAAc39B,KAA3B,sDAAyFe,EAAWC,IAflJ,gCAkBC,OAlBD,UAkBOw1B,aAAI1I,GAAoC0P,IAlB/C,iCAoBI,CAAClQ,EAAgBoQ,IApBrB,yCAuBA,SAAUP,GAAcK,GAAxB,gFACyB,OADzB,SAC+Bp2B,cAAO,SAACpI,GAAD,OAAwBA,EAAME,UADpE,OAM0B,OALvBA,EADH,OAEGmuB,EAAenuB,EAAOmM,WAAWmyB,GAEnCE,GAAa,EAJd,kBAMgCnH,aAAK2G,GAAiBM,GANtD,OAMKI,EANL,OAODtQ,EAAiBsQ,EAAmB,GACpCF,EAAaE,EAAmB,GAR/B,wBAUC,OAVD,oCAUOpH,aAAI1I,GAAoC0P,IAV/C,YAYAE,EAZA,iBAaD,OAbC,UAaKlH,aAAI1I,GAA4B0P,EAAUnQ,EAAcC,IAb7D,uDAiBA,SAAU8P,GAAwB/G,GAAlC,wEAEH,OADMmH,EAAWnH,EAAOp2B,QAAQuG,KAD7B,SAEG+vB,aAAK4G,GAAeK,GAFvB,wCAKA,SAAUH,GAAgBhH,GAA1B,0EACyB,OADzB,SAC+BjvB,cAAO,SAACpI,GAAD,OAAwBA,EAAME,UADpE,OAGH,OAFMA,EADH,OAEGs+B,EAAW/I,GAAUv1B,EAAQm3B,EAAOp2B,QAAQuG,KAAM6vB,EAAOp2B,QAAQP,MAFpE,SAGG62B,aAAK4G,GAAeK,GAHvB,wCAMA,SAAUF,KAAV,kEACH,OADG,SACGnD,aAAUrM,GAA2B/U,OAAQikB,IADhD,OAEH,OAFG,SAEG7C,aAAUrM,GAA2BN,OAAQyP,IAFhD,OAGH,OAHG,SAGG9C,aAAUvvB,EAA2BvD,OAAQg2B,IAHhD,OAIH,OAJG,SAIGlD,aAAUvvB,EAA2BrD,iBAAkB61B,IAJ1D,wC,iBClFUS,IAAV,SAAUA,KAAV,kEACH,OADG,SACGzD,aAAI,CACNuC,KACAhF,KACAwD,KACAmC,KACArD,KACAlE,OAPD,wCCEP,IAAM+H,GAA6C,CAC/CxqB,KAAM,GACNoV,IAAK,ICNT,ICCYqV,GDDNC,GAA6C,CAC/C1vB,QAAQ,EACRhB,WAAW,EACX9G,KAAM,IACNK,OAAQ,GACRC,OAAQ,GACRF,MAAO,GACPD,KAAM,K,SCNEo3B,K,wBAAAA,E,sBAAAA,E,cAAAA,E,mBAAAA,Q,KAOZ,IAAME,GAA4C,CAC9C93B,OAAQ43B,GAAmBG,SCA/B,IAAMC,GAAwD,CAC1Dh4B,OAAQ,WCNZ,IAAMi4B,GAA6D,CAC/D9qB,KAAM,GACNoV,IAAK,ICaT,IAAM2V,GAAkC,CACpCp/B,QAAS,GACTE,SAAU,GACVyD,WAAY,EACZ4yB,IAAK,IACLjqB,UAAW,IACXF,WAAY,GACZ8V,kBAAmB,GACnB7V,YAAa,GACbtF,YAAY,EACZ7B,eAAgB,CACZnE,KAAM8B,EAAaM,MACnB8B,QAAS,yBC9BjB,IAAMo6B,GAAqC,CACvChrB,KAAM,GACNoV,IAAK,IAwCT,IAAM6V,GAA4C,CAC9CtvB,MAAM,EACN8iB,SAAU,GACVE,aAAa,EACbT,SAAU,IACVf,sBAAkBtwB,EAClBuwB,wBAAoBvwB,GCtCxB,IAAMq+B,GAAgC,CAClClrB,KAAM,GACNoV,IAAK,ICXT,IAAM+V,GAAmC,CACrCnrB,KAAM,GACNoV,IAAK,ICCF,IAAMgW,GAAcC,YAAgB,CACvCtrB,iBLGG,WAA0H,IAAzFrU,EAAwF,uDAAhFo/B,GAA8B/H,EAAkD,uCAC5H,OAAQA,EAAOr2B,MACX,KAAKia,GAAoChB,QACrC,IAAM2lB,EAAmB,aACrB/hB,YAAawZ,EAAOp2B,QAAQ+Y,WACzBqd,EAAOp2B,QAAQmT,kBAEtB,OAAO6V,GAAWjqB,EAAOq3B,EAAOp2B,QAAQmT,iBAAiBA,iBAAkBwrB,GAE/E,KAAK3kB,GAAoCT,QACrC,OAAO8P,GAAetqB,GAAO,SAACoW,GAAD,OAA8BA,EAAEhC,mBAAqBijB,EAAOp2B,QAAQe,MAErG,KAAKiZ,GAAoCd,iBACrC,OAAOyP,GAAW5pB,EAAOq3B,EAAOp2B,QAAQiZ,mBAAoB,CACxD2D,aAAa,IAGrB,KAAKiR,GAA2BN,OAC5B,OAAOlE,GAAetqB,GAAO,SAACoW,GAAD,OAA8BA,EAAEyD,UAAYwd,EAAOp2B,QAAQ4Y,WAE5F,KAAK2D,GAA4BvD,QAC7B,IAAM7F,EAAmBpU,EAAMsU,KAAK+iB,EAAOp2B,QAAQmT,kBAC7CyrB,EAAW,aAAOzrB,EAAiBtJ,QAAQyJ,UAEjD,OADAsrB,EAAYxI,EAAOp2B,QAAQuT,eAAiB6iB,EAAOp2B,QAAQmS,SAASpR,GAC7D4nB,GAAW5pB,EAAOq3B,EAAOp2B,QAAQmT,iBAAkB,CACtDtJ,QAAS,CACLyJ,SAAUsrB,EACVrW,SAAUpV,EAAiBtJ,QAAQ0e,YAI/C,KAAK0Q,GAA2BpC,cAC5B,IAAMzjB,EAAmBgjB,EAAOp2B,QAAQoT,iBAAiB7O,KAAI,SAAAs6B,GAAE,oBAAOjiB,aAAa,GAAUiiB,MAC7F,MAAO,CACHxrB,KAAM6V,GAAc9V,GAAkB,SAAAyrB,GAAE,OAAIA,EAAG1rB,oBAC/CsV,IAAKrV,EAAiB7O,KAAI,SAAAs6B,GAAE,OAAIA,EAAG1rB,qBAI/C,OAAOpU,GKzCPuU,STEG,WAAkG,IAAzEvU,EAAwE,uDAAhE8+B,GAAsBzH,EAA0C,uCACpG,OAAQA,EAAOr2B,MACX,KAAKwc,GAA4BvD,QAC7B,OAAOgQ,GAAWjqB,EAAOq3B,EAAOp2B,QAAQmS,SAASpR,GAAIq1B,EAAOp2B,QAAQmS,UAExE,KAAKoK,GAA4BhD,QAC7B,OAAO8P,GAAetqB,GAAO,SAACoW,GAAD,OAAsBA,EAAEpU,KAAOq1B,EAAOp2B,QAAQe,MAE/E,KAAKwb,GAA4B6d,QAC7B,OAAOzR,GAAW5pB,EAAOq3B,EAAOp2B,QAAQe,GAAI,CACxC8I,QAASusB,EAAOp2B,QAAQ6J,UAGhC,KAAKoyB,GAAuBnjB,OACxB,IAAM3G,EAAWpT,EAAMsU,KAAK+iB,EAAOp2B,QAAQmS,UAErC2sB,EAAU3sB,EAASqB,KAAOrB,EAASqB,KAAO,GAChD,OAAOmV,GAAW5pB,EAAOq3B,EAAOp2B,QAAQmS,SAAU,CAC9CqB,KAAK,CAAE4iB,EAAOp2B,QAAQe,IAAlB,oBAAyB+9B,MAGrC,KAAK7F,GAA2BpC,cAC5B,IAAMkI,EAAiC3I,EAAOp2B,QAAQsT,SAAS/O,KAAI,SAAAkH,GAC/D,MAAO,CACHmR,aAAa,EACb7b,GAAI0K,EAAK0G,SACTyG,QAASnN,EAAKmN,QACd/O,QAAS4B,EAAK5B,QAEd2J,KAAM/H,EAAK+H,SAGnB,MAAO,CACHH,KAAM6V,GAAc6V,GAAe,SAAA5sB,GAAQ,OAAIA,EAASpR,MACxD0nB,IAAK2N,EAAOp2B,QAAQsT,SAAS/O,KAAI,SAAA4N,GAAQ,OAAIA,EAASA,aAG9D,KAAK8mB,GAA2BlC,WAChC,KAAKkC,GAA2BjC,YAC5B,IAAMgI,EAAmBjgC,EAAM0pB,IAAIwW,MAAK,SAAAl+B,GACpC,IAAMoR,EAAWpT,EAAMsU,KAAKtS,GAE5B,OADaoR,EAASqB,KAAOrB,EAASqB,KAAO,IACjC+M,MAAK,SAAA9P,GAAG,OAAIA,IAAQ2lB,EAAOp2B,QAAQyQ,UAEnD,OAAKuuB,EAGErW,GAAW5pB,EAAOigC,EAAkB,CACvC3sB,aAAc+jB,EAAOp2B,QAAQyQ,MAHtB1R,EAOnB,OAAOA,GSrDPsH,cPIG,WAAsG,IAAxEtH,EAAuE,uDAA/Di/B,GAAqB5H,EAA0C,uCACxG,OAAQA,EAAOr2B,MACX,KAAKk5B,GAA2BjyB,KAC5B,MAAO,CAAEd,OAAQ43B,GAAmBn9B,WAExC,KAAKs4B,GAA2BpC,cAC5B,MAAO,CAAE3wB,OAAQ43B,GAAmBoB,OAExC,KAAKjG,GAA2B/B,MAC5B,MAAO,CAAEhxB,OAAQ43B,GAAmBG,SAG5C,OAAOl/B,GOfPkH,kBNIG,WAAsH,IAApFlH,EAAmF,uDAA3Em/B,GAA+B9H,EAA4C,uCACxH,OAAQA,EAAOr2B,MACX,KAAKsE,EAA2BhE,cAC5B,MAAO,CACH6F,OAAQ,gBAGhB,KAAK7B,EAA2B1D,UAC5B,MAAO,CACHuF,OAAQ,YACR5F,OAAQ81B,EAAOp2B,QAAQM,QAG/B,KAAK+D,EAA2B5D,WAC5B,MAAO,CACHyF,OAAQ,cAIpB,OAAOnH,GMtBPspB,SHJG,WAAyF,IAAjEtpB,EAAgE,uDAAxDs/B,GAAqBjI,EAAmC,uCAC3F,OAAQA,EAAOr2B,MACX,KAAKk5B,GAA2BpC,cAC5B,IAAMxO,EAAW+N,EAAOp2B,QAAQqoB,SAAS9jB,KAAI,SAAA46B,GAAE,OAAIx9B,OAAOmnB,OAAO,GAAIqW,EAAI,CAAEj5B,OAAQlE,EAAcgF,UACjG,MAAO,CACHqM,KAAM6V,GAAcb,GAAU,SAAA8W,GAAE,OAAIA,EAAGp+B,MACvC0nB,IAAKJ,EAAS9jB,KAAI,SAAA46B,GAAE,OAAIA,EAAGp+B,OAGnC,KAAK8sB,GAA2B/U,OAC5B,IAAMqmB,EAAW,eACV/I,EAAOp2B,QAAQ4Y,QADL,CAEb1S,OAAQlE,EAAc+rB,UAE1B,OAAO/E,GAAWjqB,EAAOq3B,EAAOp2B,QAAQ4Y,QAAQ7X,GAAIo+B,GAExD,KAAKtR,GAA2B7U,QAC5B,IAAMmmB,EAAKx9B,OAAOmnB,OAAO,GAAIsN,EAAOp2B,QAAQ4Y,QAAS,CAAE1S,OAAQlE,EAAcgF,OAC7E,OAAIjI,EAAMsU,KAAK+iB,EAAOp2B,QAAQ4Y,QAAQ7X,IAC3B4nB,GAAW5pB,EAAOq3B,EAAOp2B,QAAQ4Y,QAAQ7X,GAAIo+B,GAE7CnW,GAAWjqB,EAAOq3B,EAAOp2B,QAAQ4Y,QAAQ7X,GAAIo+B,GAG5D,KAAKtR,GAA2B7sB,MAC5B,OAAOqoB,GAAetqB,GAAO,SAACoW,GAAD,OAAqBA,EAAEpU,KAAOq1B,EAAOp2B,QAAQ4Y,WAE9E,KAAKiV,GAA2BN,OAC5B,OAAO5E,GAAW5pB,EAAOq3B,EAAOp2B,QAAQ4Y,QAAS,CAAE1S,OAAQlE,EAAcgsB,WAE7E,KAAKH,GAA2BL,QAC5B,OAAOnE,GAAetqB,GAAO,SAACoW,GAAD,OAAqBA,EAAEpU,KAAOq1B,EAAOp2B,QAAQ4Y,WAGlF,OAAO7Z,GG7BP6qB,YHyCG,WAAoG,IAAxE7qB,EAAuE,uDAA/Du/B,GAAyBlI,EAAsC,uCACtG,OAAQA,EAAOr2B,MACX,KAAK8tB,GAA2B7mB,KAC5B,OAAO,eACAjI,EADP,CAEIizB,aAAa,EACbT,SAAU6E,EAAOp2B,QAAQuG,KACzBiqB,iBAAkB4F,EAAOp2B,QAAQotB,aACjCqD,mBAAoB2F,EAAOp2B,QAAQqtB,iBAG3C,KAAKQ,GAA2BP,YAMhC,KAAKO,GAA2B/U,OAC5B,OAAO,eACA/Z,EADP,CAEIizB,aAAa,IAGrB,KAAKnE,GAA2BJ,OAC5B,OAAO,eACA1uB,EADP,CAEI+yB,SAAUsE,EAAOp2B,QAAQuG,KACzByI,MAAM,IAGd,KAAK6e,GAA2BH,SAChC,KAAKG,GAA2BF,cAC5B,OAAO,eACA5uB,EADP,CAEI+yB,SAAU,GACV9iB,MAAM,IAIlB,OAAOjQ,GG/EPyU,KDLG,WAAmF,IAA/DzU,EAA8D,uDAAtDy/B,GAAiBpI,EAAqC,uCACrF,OAAQA,EAAOr2B,MACX,KAAKk8B,GAAuBnjB,OACxB,IAAMsmB,EAAepW,GACjBjqB,EACAq3B,EAAOp2B,QAAQe,GACf,CACIA,GAAIq1B,EAAOp2B,QAAQe,GACnBoR,SAAUikB,EAAOp2B,QAAQmS,SACzBT,QAASxE,GAAWmyB,SACpBn5B,OAAQiH,GAAUkyB,SAClBzuB,QAAS,GACT4B,eAAgB4jB,EAAOp2B,QAAQc,YAGvC,OAAOs+B,EAEX,KAAKnG,GAA2BnC,YAC5B,OAAOnO,GACH5pB,EACAq3B,EAAOp2B,QAAQyQ,IACf,CACIiB,QAASxE,GAAWkM,QACpBlT,OAAQiH,GAAUmyB,YAClB9sB,eAAgB4jB,EAAOp2B,QAAQc,YAI3C,KAAKm4B,GAA2BjC,YAC5B,OAAOrO,GACH5pB,EACAq3B,EAAOp2B,QAAQyQ,IACf,CACIG,QAASwlB,EAAOp2B,QAAQ4Q,UAIpC,KAAKqoB,GAA2BlC,WAAa,IAAD,EACJX,EAAOp2B,QAAnCyQ,EADgC,EAChCA,IAAK3P,EAD2B,EAC3BA,UAAW8P,EADgB,EAChBA,QACxB,OAAO+X,GACH5pB,EACA0R,EACA,CACIiB,QAASxE,GAAWyE,KACpBzL,OAAQiH,GAAUsT,QAClB7P,UACA2B,aAAczR,IAI1B,KAAKm4B,GAA2BhC,UAAY,IAAD,EACZb,EAAOp2B,QAA1ByQ,EAD+B,EAC/BA,IAAK3P,EAD0B,EAC1BA,UACb,OAAO6nB,GACH5pB,EACA0R,EACA,CACIiB,QAASxE,GAAWyE,KACpBzL,OAAQiH,GAAUnM,MAClBuR,aAAczR,IAI1B,KAAKm4B,GAA2BpC,cAC5B,IAAMrjB,EAAO4iB,EAAOp2B,QAAQwT,KACtB+rB,EAAuB/rB,EAAKjP,KAAI,SAAAkM,GAClC,MAAO,CACH1P,GAAI0P,EAAI1P,GACRoR,SAAU1B,EAAI0B,SAEdjM,OAAQiH,GAAUsT,QAClBjO,eAAgB,EAEhB5B,QAAS,GAETc,QAASxE,GAAWyE,KACpBY,aAAc,MAItB,MAAO,CACHc,KAAM6V,GAAcqW,GAAU,SAAA9uB,GAAG,OAAIA,EAAI1P,MACzC0nB,IAAK8W,EAASh7B,KAAI,SAAAkM,GAAG,OAAIA,EAAI1P,OAIzC,OAAOhC,GC/EPmE,OFGG,WAAkF,IAA5DnE,EAA2D,uDAAnDw/B,GAAmBnI,EAAgC,uCACpF,OAAQA,EAAOr2B,MACX,KAAK4K,EAA2B3J,MAChC,KAAK6sB,GAA2B7sB,MAChC,KAAKi4B,GAA2Bj4B,MAChC,KAAKqD,EAA2BrD,MAChC,KAAKub,GAA4Bvb,MACjC,KAAKi4B,GAA2BhC,UAC5B,OAAOjO,GAAWjqB,EAAOq3B,EAAOp2B,QAAQe,GAAI,CACxCA,GAAIq1B,EAAOp2B,QAAQe,GACnBF,IAAKu1B,EAAOp2B,QAAQa,IACpBC,UAAWs1B,EAAOp2B,QAAQc,YAGlC,KAAKm4B,GAA2BjyB,KAC5B,OAAOu3B,GAEX,KAAKjM,GAAyBH,QAC1B,OAAO9I,GAAetqB,GAAO,SAACoW,GAAD,OAAqBA,EAAEpU,KAAOq1B,EAAOp2B,QAAQe,MAE9E,KAAKuxB,GAAyBF,YAC1B,OAAOmM,GAGf,OAAOx/B,GE1BPE,OJqBG,WAAqF,IAA9DF,EAA6D,uDAArDq/B,GAAoBhI,EAAiC,uCACvF,OAAQA,EAAOr2B,MACX,KAAK48B,GAA0BR,QAC3B,OAAOx6B,OAAOmnB,OAAO,GAAIsN,EAAOp2B,QAAQf,OAAQ,CAAE8G,YAAY,IAElE,KAAK4E,EAA2B7D,kBAC5B,OAAOnF,OAAOmnB,OAAO,GAAI/pB,EAAO,CAC5Bw2B,IAAKa,EAAOp2B,QAAQuG,OAG5B,KAAKsnB,GAA2B/U,OAC5B,IAAM0mB,EAAgB79B,OAAOmnB,OAAO,GAAI/pB,EAAMqM,WAAxBzJ,OAAA,IAAAA,CAAA,GAAuCy0B,EAAOp2B,QAAQ4Y,QAAQtY,OAAOiG,KAAO6vB,EAAOp2B,QAAQ4Y,QAAQtY,SACnHm/B,EAAiBhK,GAAW,CAC9BW,EAAOp2B,QAAQ4Y,QAAQtY,OAAOiG,MADD,oBACUxH,EAAMsM,eAC9ChM,MAAM,EAAG,IACZ,OAAOsC,OAAOmnB,OAAO,GAAI/pB,EAAO,CAC5BqM,WAAYo0B,EACZn0B,YAAao0B,IAGrB,KAAKp7B,EAA2B9D,QAC5B,GAAI61B,EAAOp2B,QAAQM,OAAOP,OAAS8B,EAAaM,MAAM,CAClD,IAAMu9B,EAAoB/9B,OAAOmnB,OAAO,GAAI/pB,EAAMmF,eAAgB,CAACnE,KAAM8B,EAAaM,QACtF,OAAOR,OAAOmnB,OAAO,GAAI/pB,EAAO,CAC5BmF,eAAiBw7B,IAIrB,OAAO/9B,OAAOmnB,OAAO,GAAI/pB,EAAO,CAC5BmF,eAAgBkyB,EAAOp2B,QAAQM,SAK/C,OAAOvB,GItDPqO,QRLG,WAAiI,IAAhGrO,EAA+F,uDAAhEg/B,GAAqB3H,EAA2C,uCACnI,OAAQA,EAAOr2B,MACX,KAAK48B,GAA0BR,QAC3B,OAAOx6B,OAAOmnB,OAAO,GAAI/pB,EAAO,CAC5BwH,KAAM6vB,EAAOp2B,QAAQf,OAAOs2B,MAGpC,KAAK5qB,EAA2B3D,KAC5B,OAAOrF,OAAOmnB,OAAO,GAAI/pB,EAAO,CAC5BsP,QAAQ,IAGhB,KAAK1D,EAA2BzD,OAC5B,OAAOvF,OAAOmnB,OAAO,GAAI/pB,EAAO,CAC5BsP,QAAQ,IAGhB,KAAK1D,EAA2BnE,eAC5B,OAAO7E,OAAOmnB,OAAO,GAAI/pB,EAAO,CAC5BsO,WAAW,IAGnB,KAAK1C,EAA2B7D,kBAC5B,IAAMD,EAASuvB,EAAOp2B,QAAQ6G,OAAOmb,QAAO,SAACoH,EAAKuW,GAC9C,OAAOh+B,OAAOmnB,OAAO,GAAIM,EAAlBznB,OAAA,IAAAA,CAAA,GACFg+B,EAAM5zB,IAAM4zB,MAElB,IACH,OAAOh+B,OAAOmnB,OAAO,GAAI/pB,EAAO,CAC5BsO,WAAW,EACX9G,KAAM6vB,EAAOp2B,QAAQuG,KACrBI,MAAOyvB,EAAOp2B,QAAQ2G,MACtBD,KAAM0vB,EAAOp2B,QAAQ0G,KACrBE,OAAQwvB,EAAOp2B,QAAQ4G,OACvBC,WAGR,KAAK8D,EAA2BrD,iBAChC,KAAKqD,EAA2BvD,OAC5B,OAAOzF,OAAOmnB,OAAO,GAAI/pB,EAAO,CAC5BsO,WAAW,EACXgB,QAAQ,IAIpB,OAAOtP,KS7CL6gC,GAAiBC,cAEjBC,GAAoBl1B,OAAem1B,sCAAwCC,IAE3EC,GAAQC,YAAYzB,GAAaqB,GACnCK,YACIP,MAIRQ,SACI,gBAAC,IAAD,CAAUH,MAAOA,IACb,gBAAC,GAAD,OAEJjN,SAASqN,eAAe,S7BTb,WACb,GAA6C,kBAAmBzM,UAAW,CAMzE,GAJkB,IAAIyE,IACpBiI,WACA11B,OAAO0U,SAASxU,YAEJy1B,SAAW31B,OAAO0U,SAASihB,OAIvC,OAGF31B,OAAOqoB,iBAAiB,QAAQ,WAC9B,IAAMU,EAAK,UAAM2M,WAAN,sBAEP/M,KAmDV,SAAiCI,GAE/BhU,MAAMgU,GACH5I,MAAK,SAAAyV,GAGkB,MAApBA,EAASt6B,SACwD,IAAjEs6B,EAASC,QAAQC,IAAI,gBAAiB3e,QAAQ,cAG9C6R,UAAUC,cAAc8M,MAAM5V,MAAK,SAAAgJ,GACjCA,EAAa6M,aAAa7V,MAAK,WAC7BngB,OAAO0U,SAASuhB,eAKpBnN,GAAgBC,MAGnBY,OAAM,WACLF,QAAQC,IACN,oEAvEAwM,CAAwBnN,GAIxBC,UAAUC,cAAc8M,MAAM5V,MAAK,WACjCsJ,QAAQC,IACN,gHAMJZ,GAAgBC,O6BpBxBoN,GAEAnB,GAAeoB,IAAIpD,M","file":"static/js/main.ae15975b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"default\":\"ResultImage_default__1X7FO\",\"fallback\":\"ResultImage_fallback__kO3cw\"};","module.exports = __webpack_public_path__ + \"static/media/LiberTEM logo-medium.7999e0dc.png\";","import { ActionsUnion, createAction } from '../helpers/actionHelpers';\nimport { ConnectRequestParams } from '../messages';\n\nexport enum ActionTypes {\n    NOT_CONNECTED = 'CLUSTER_NOT_CONNECTED',\n    CONNECT = 'CLUSTER_CONNECT',\n    CONNECTING = 'CLUSTER_CONNECTING',\n    CONNECTED = 'CLUSTER_CONNECTED',\n    ERROR = 'CLUSTER_ERROR'\n    \n}\n\nexport const Actions = {\n    notConnected: () => createAction(ActionTypes.NOT_CONNECTED),\n    connect: (params: ConnectRequestParams) => createAction(ActionTypes.CONNECT, { params },),\n    connecting: () => createAction(ActionTypes.CONNECTING),\n    connected: (params: ConnectRequestParams) => createAction(ActionTypes.CONNECTED, { params }),\n    error: (msg: string, timestamp: number, id: string) => createAction(ActionTypes.ERROR, { msg, timestamp, id }),\n\n}\n\nexport type Actions = ActionsUnion<typeof Actions>;\n","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Header, List } from \"semantic-ui-react\";\nimport { RootReducer } from \"./store\";\n\nconst mapStateToProps = (state: RootReducer) => {\n    return {\n        version: state.config.version,\n        revision: state.config.revision,\n    }\n}\n\ntype MergedProps = ReturnType<typeof mapStateToProps>;\n\nconst About: React.SFC<MergedProps> = ({ version, revision }) => {\n    return (\n        <>\n            <Header as=\"h3\">This is LiberTEM version {version} (revision {revision.slice(0, 8)})</Header>\n            <List>\n                <List.Item>\n                    <List.Icon name=\"github\" />\n                    <List.Content>\n                        Find us on <a href=\"https://github.com/LiberTEM/LiberTEM\">GitHub</a>\n                    </List.Content>\n                </List.Item>\n                <List.Item>\n                    <List.Icon name=\"bug\" />\n                    <List.Content>\n                        Found a bug? Got a feature request? Please <a href=\"https://github.com/LiberTEM/LiberTEM/issues/new\">open an issue!</a>\n                    </List.Content>\n                </List.Item>\n                <List.Item>\n                    <List.Icon name=\"legal\" />\n                    <List.Content>\n                        LiberTEM is licensed under the <a href=\"https://github.com/LiberTEM/LiberTEM/blob/master/LICENSE\">GNU General Public License v3.0</a>\n                    </List.Content>\n                </List.Item>\n                <List.Item>\n                    <List.Icon name=\"book\" />\n                    <List.Content>\n                        Read <a href=\"https://libertem.github.io/LiberTEM/\">the documentation</a>\n                    </List.Content>\n                </List.Item>\n                <List.Item>\n                    <List.Icon name=\"user\" />\n                    <List.Content>\n                        Read <a href=\"https://libertem.github.io/LiberTEM/acknowledgments.html\">the acknowledgments</a>\n                    </List.Content>\n                </List.Item>\n                <List.Item>\n                    <List.Icon name=\"gitter\" />\n                    <List.Content>\n                        Join our <a href=\"https://gitter.im/LiberTEM/Lobby\">chat on gitter!</a>\n                    </List.Content>\n                </List.Item>\n                <List.Item>\n                    <List.Icon name=\"linkify\" />\n                    <List.Content>\n                    <a href=\"https://doi.org/10.5281/zenodo.1477847\"><img src=\"https://zenodo.org/badge/DOI/10.5281/zenodo.1477847.svg\" alt=\"doi.org/10.5281/zenodo.1477847\"/></a>\n                    </List.Content>\n                </List.Item>\n            </List>\n        </>\n    );\n}\n\nexport default connect(mapStateToProps)(About);\n","import { ActionCreatorsMapObject } from \"redux\";\n\nexport interface Action<T extends string> {\n    type: T\n}\n\nexport interface ActionWithPayload<T extends string, P> extends Action<T> {\n    payload: P\n}\n\nexport interface ActionWithMeta<T extends string, P, M> extends ActionWithPayload<T, P> {\n    meta: M\n}\n\nexport function createAction<T extends string>(type: T): Action<T>\nexport function createAction<T extends string, P, M>(type: T, payload?: P): ActionWithPayload<T, P>\nexport function createAction<T extends string, P, M>(type: T, payload?: P, meta?: M): ActionWithMeta<T, P, M>\nexport function createAction<T extends string, P, M>(type: T, payload?: P, meta?: M) {\n    if (meta === undefined && payload === undefined) {\n        return { type };\n    } else if (meta === undefined) {\n        return { type, payload };\n    } else {\n        return { type, payload, meta }\n    }\n}\n\nexport type ActionsUnion<A extends ActionCreatorsMapObject> = ReturnType<A[keyof A]>","import * as _ from \"lodash\";\n\nexport function assertNotReached(message: string): never {\n    throw new Error(message);\n}\n\nexport function defaultDebounce<T extends (...args: any[]) => any>(fn: T, delay: number = 50) {\n    return _.debounce(fn, delay, { maxWait: delay });\n}\n\nexport function getEnumValues<E>(e: E): Array<keyof E> {\n    return Object.keys(e) as Array<keyof E>;\n}","import { JobList } from \"./analysis/types\"\n\n/*\n * Common\n */\n\nexport interface FollowupPart {\n    numMessages: number,\n    descriptions: Array<{ title: string, desc: string, includeInDownload: boolean }>,\n}\n\nexport interface MsgPartConfig {\n    version: string,\n    revision: string,\n    localCores: number,\n    cwd: string,\n    separator: string,\n    resultFileFormats: {\n        [id: string]: {\n            identifier: string,\n            description: string,\n        }\n    },\n}\n\nexport interface GetConfigResponse {\n    status: \"ok\",\n    config: MsgPartConfig,\n}\n\n/*\n * Connection\n */\n\nexport enum ClusterTypes {\n    LOCAL = \"LOCAL\",\n    TCP = \"TCP\",\n}\n\nexport const ClusterTypeMetadata: { [s: string]: { [s: string]: string } } = {\n    [ClusterTypes.LOCAL]: {\n        label: \"Create local cluster\",\n    },\n    [ClusterTypes.TCP]: {\n        label: \"Connect to cluster\",\n        helpText: \"can be either local or remote, connection via TCP\",\n    }\n}\n\nexport interface ConnectRequestLocalCluster {\n    type: ClusterTypes.LOCAL,\n    numWorkers?: number,\n}\n\nexport interface ConnectRequestTCP {\n    type: ClusterTypes.TCP,\n    address: string,\n}\n\nexport type ConnectRequestParams = ConnectRequestLocalCluster | ConnectRequestTCP\n\nexport interface ConnectRequest {\n    connection: ConnectRequestParams\n}\n\nexport type ConnectResponse = {\n    status: \"ok\",\n    connection: ConnectRequest,\n} | {\n    status: \"disconnected\",\n    connection: {},\n} | {\n    status: \"error\",\n    messageType: string,\n    msg: string,\n}\n\n/*\n * Dataset\n */\n\nexport enum DatasetTypes {\n    HDF5 = \"HDF5\",\n    RAW = \"RAW\",\n    MIB = \"MIB\",\n    BLO = \"BLO\",\n    K2IS = \"K2IS\",\n    SER = \"SER\",\n    FRMS6 = \"FRMS6\",\n    EMPAD = \"EMPAD\",\n}\n\nexport interface DatasetParamsCommon {\n    name: string,\n}\n\nexport enum AdditionalInfo {\n    dataset_paths = \"dataset_paths\",\n}\n\nexport type DatasetParamsHDF5 = {\n    type: DatasetTypes.HDF5,\n    path: string,\n    ds_path: string,\n    dataset_paths: string[],\n    tileshape: number[],\n} & DatasetParamsCommon\n\nexport type DatasetParamsRaw = {\n    type: DatasetTypes.RAW,\n    path: string,\n    dtype: string,\n    detector_size: number[],\n    enable_direct: boolean,\n    scan_size: number[],\n} & DatasetParamsCommon\n\nexport type DatasetParamsMIB = {\n    type: DatasetTypes.MIB,\n    path: string,\n    scan_size: number[],\n    tileshape: number[],\n} & DatasetParamsCommon\n\nexport type DatasetParamsBLO = {\n    type: DatasetTypes.BLO,\n    path: string,\n    tileshape: number[],\n} & DatasetParamsCommon\n\nexport type DatasetParamsK2IS = {\n    type: DatasetTypes.K2IS,\n    path: string,\n} & DatasetParamsCommon\n\nexport type DatasetParamsSER = {\n    type: DatasetTypes.SER,\n    path: string,\n} & DatasetParamsCommon\n\nexport type DatasetParamsFRMS6 = {\n    type: DatasetTypes.FRMS6,\n    path: string,\n} & DatasetParamsCommon\n\nexport type DatasetParamsEMPAD = {\n    type: DatasetTypes.EMPAD,\n    path: string,\n    scan_size: number[],\n} & DatasetParamsCommon\n\nexport type DatasetFormParams = DatasetParamsHDF5 | DatasetParamsRaw | DatasetParamsMIB | DatasetParamsBLO | DatasetParamsK2IS | DatasetParamsSER | DatasetParamsFRMS6 | DatasetParamsEMPAD\n\nexport interface DatasetCreateParams {\n    id: string,\n    params: DatasetFormParams,\n}\n\nexport enum DatasetStatus {\n    OPEN = \"OPEN\",\n    OPENING = \"OPENING\",\n    DELETING = \"DELETING\",\n}\n\nexport interface DiagElemMsg {\n    name: string,\n    value: string | DiagElemMsg[],\n}\n\ninterface DatasetCommon {\n    id: string,\n    params: DatasetFormParams,\n}\n\nexport type DatasetOpening = DatasetCommon & {\n    status: DatasetStatus.OPENING,\n}\n\nexport type DatasetDeleting = DatasetCommon & {\n    status: DatasetStatus.DELETING,\n}\n\nexport type DatasetOpen = DatasetCommon & {\n    status: DatasetStatus.OPEN,\n    params: {\n        shape: number[],\n    }\n    diagnostics: DiagElemMsg[],\n}\n\nexport type Dataset = DatasetOpening | DatasetOpen | DatasetDeleting;\n\nexport interface OpenDatasetRequest {\n    dataset: DatasetCreateParams\n}\n\nexport interface OpenDatasetResponseOk {\n    status: \"ok\",\n    dataset: string,  // TODO: uuid type?\n    details: Dataset,\n}\n\nexport interface OpenDatasetResponseError {\n    status: \"error\",\n    dataset: string,\n    msg: string,\n}\n\nexport type OpenDatasetResponse = OpenDatasetResponseOk | OpenDatasetResponseError\n\nexport interface DeleteDatasetResponse {\n    status: \"ok\",\n    dataset: string,\n}\n\nexport interface DetectDatasetSuccessResponse {\n    status: \"ok\",\n    datasetParams: DatasetFormParams,\n}\n\nexport interface DetectDatasetErrorResponse {\n    status: \"error\",\n    path: string,\n    msg: string,\n}\n\nexport type DetectDatasetResponse = DetectDatasetSuccessResponse | DetectDatasetErrorResponse;\n\nexport interface DataSetOpenSchemaSuccessResponse {\n    status: \"ok\",\n    ds_type: string,\n    schema: object,\n}\n\nexport interface DataSetOpenSchemaErrorResponse {\n    status: \"error\",\n    ds_type: string,\n    msg: string,\n}\n\nexport type DataSetOpenSchemaResponse = DataSetOpenSchemaSuccessResponse | DataSetOpenSchemaErrorResponse;\n\nexport type MsgPartInitialDataset = DatasetOpen\n\n// type alias to add client-side state to datasets\nexport type DatasetState = Dataset & {}\n\n/*\n * Job\n */\nexport interface MsgPartJob {\n    id: string,\n    analysis: string,\n}\n\nexport interface MaskDefRing {\n    shape: \"ring\",\n    cx: number,\n    cy: number,\n    ri: number,\n    ro: number\n}\n\n\nexport interface MaskDefDisk {\n    shape: \"disk\",\n    cx: number,\n    cy: number,\n    r: number,\n}\n\nexport interface PointDef {\n    shape: \"point\",\n    cx: number,\n    cy: number,\n}\n\n// TODO: shape doesn't really make sense here, needs to be restructured\nexport interface CenterOfMassParams {\n    shape: \"com\",\n    cx: number,\n    cy: number,\n    r: number,\n}\n\nexport interface PickFrameParams {\n    x: number,\n    y: number,\n}\n\nexport interface FFTSumFramesParams {\n    real_rad: number | null,\n    real_centerx: number | null,\n    real_centery: number | null,\n}\n\nexport interface PickFFTFrameParams {\n    x: number,\n    y: number,\n    real_rad: number | null,\n    real_centerx: number | null,\n    real_centery: number | null,\n}\nexport interface RadialFourierParams {\n    shape: \"radial_fourier\",\n    cx: number,\n    cy: number,\n    ri: number,\n    ro: number,\n    n_bins: number,\n    max_order: number\n}\n\nexport interface FFTParams {\n    rad_in: number,\n    rad_out: number,\n    real_rad: number | null,\n    real_centerx: number | null,\n    real_centery: number | null,\n}\n\n\nexport interface FrameParams {\n    roi: {\n        shape: \"rect\",\n        x: number,\n        y: number,\n        width: number,\n        height: number,\n    } | {\n        shape: \"disk\",\n        cx: number,\n        cy: number,\n        r: number,\n    } |\n    {}\n}\n\nexport interface ClustParams {\n    roi: {\n        shape: \"rect\",\n        x: number,\n        y: number,\n        width: number,\n        height: number,\n    } | {}\n    cx: number,\n    cy: number,\n    ri: number,\n    ro: number,\n    n_peaks: number,\n    n_clust: number,\n    min_dist: number,\n}\n\nexport enum AnalysisTypes {\n    APPLY_RING_MASK = \"APPLY_RING_MASK\",\n    APPLY_DISK_MASK = \"APPLY_DISK_MASK\",\n    APPLY_POINT_SELECTOR = \"APPLY_POINT_SELECTOR\",\n    CENTER_OF_MASS = \"CENTER_OF_MASS\",\n    SUM_FRAMES = \"SUM_FRAMES\",\n    SD_FRAMES = \"SD_FRAMES\",\n    PICK_FRAME = \"PICK_FRAME\",\n    PICK_FFT_FRAME = \"PICK_FFT_FRAME\",\n    APPLY_FFT_MASK = \"APPLY_FFT_MASK\",\n    FFTSUM_FRAMES = \"FFTSUM_FRAMES\",\n    RADIAL_FOURIER = \"RADIAL_FOURIER\",\n    FEM = \"FEM\",\n    CLUST = \"CLUST\",\n    SUM_SIG = \"SUM_SIG\",\n}\n\nexport interface RingMaskDetails {\n    analysisType: AnalysisTypes.APPLY_RING_MASK,\n    parameters: MaskDefRing,\n}\n\nexport interface FFTDetails {\n    analysisType: AnalysisTypes.APPLY_FFT_MASK,\n    parameters: FFTParams,\n}\n\nexport interface FEMDetails {\n    analysisType: AnalysisTypes.FEM,\n    parameters: MaskDefRing,\n}\n\nexport interface DiskMaskDetails {\n    analysisType: AnalysisTypes.APPLY_DISK_MASK,\n    parameters: MaskDefDisk,\n}\n\nexport interface PointDefDetails {\n    analysisType: AnalysisTypes.APPLY_POINT_SELECTOR,\n    parameters: PointDef,\n}\n\nexport interface CenterOfMassDetails {\n    analysisType: AnalysisTypes.CENTER_OF_MASS,\n    parameters: CenterOfMassParams,\n}\n\nexport interface SumFramesDetails {\n    analysisType: AnalysisTypes.SUM_FRAMES,\n    parameters: FrameParams\n}\n\nexport interface SDFramesDetails {\n    analysisType: AnalysisTypes.SD_FRAMES,\n    parameters: FrameParams\n}\n\nexport interface SumSigDetails {\n    analysisType: AnalysisTypes.SUM_SIG,\n    parameters: {}\n}\n\nexport interface FFTSumFramesDetails {\n    analysisType: AnalysisTypes.FFTSUM_FRAMES,\n    parameters: FFTSumFramesParams,\n}\n\nexport interface PickFrameDetails {\n    analysisType: AnalysisTypes.PICK_FRAME,\n    parameters: PickFrameParams,\n}\n\nexport interface PickFFTFrameDetails {\n    analysisType: AnalysisTypes.PICK_FFT_FRAME,\n    parameters: PickFFTFrameParams,\n}\n\nexport interface RadialFourierDetails {\n    analysisType: AnalysisTypes.RADIAL_FOURIER,\n    parameters: RadialFourierParams,\n}\n\nexport interface ClustDetails {\n    analysisType: AnalysisTypes.CLUST,\n    parameters: ClustParams,\n}\n\nexport type AnalysisParameters = MaskDefRing | MaskDefDisk | CenterOfMassParams | PointDef | PickFrameParams | RadialFourierParams | FFTParams | PickFFTFrameParams | FFTSumFramesParams | ClustParams;\nexport type AnalysisDetails = RingMaskDetails | DiskMaskDetails | CenterOfMassDetails | PointDefDetails | SumFramesDetails | SDFramesDetails | PickFrameDetails | RadialFourierDetails | FEMDetails | FFTDetails | FFTSumFramesDetails | PickFFTFrameDetails | SumSigDetails | ClustDetails;\n\nexport interface MsgPartAnalysis {\n    analysis: string,\n    dataset: string,\n    details: AnalysisDetails,\n    jobs: JobList,\n}\n\nexport type CreateOrUpdateAnalysisRequest = Omit<MsgPartAnalysis, \"analysis\" | \"jobs\">;\n\nexport type CreateAnalysisResponse = {\n    status: \"ok\",\n    messageType: \"ANALYSIS_CREATED\",\n} & MsgPartAnalysis\n\nexport type UpdateAnalysisResponse = {\n    status: \"ok\",\n    messageType: \"ANALYSIS_UPDATED\",\n} & MsgPartAnalysis\n\nexport type RemoveAnalysisResponse = {\n    status: \"ok\"\n    messageType: \"ANALYSIS_REMOVED\",\n    analysis: string,\n} | {\n    status: \"error\",\n    messageType: \"ANALYSIS_REMOVAL_FAILED\",\n    msg: string,\n    analysis: string,\n}\n\nexport interface CompoundAnalysisDetails {\n    mainType: AnalysisTypes,\n    analyses: string[],\n}\n\nexport interface MsgPartCompoundAnalysis {\n    compoundAnalysis: string,\n    dataset: string,\n    details: CompoundAnalysisDetails,\n}\n\nexport interface CreateOrUpdateCompoundAnalysisRequest {\n    dataset: string,\n    details: CompoundAnalysisDetails,\n}\n\nexport type CreateCompoundAnalysisResponse = {\n    status: \"ok\",\n    messageType: \"COMPOUND_ANALYSIS_CREATED\",\n} & MsgPartCompoundAnalysis;\n\nexport type RemoveCompoundAnalysisResponse = {\n    status: \"ok\"\n    messageType: \"COMPOUND_ANALYSIS_REMOVED\",\n    analysis: string,\n} | {\n    status: \"error\",\n    messageType: \"COMPOUND_ANALYSIS_REMOVAL_FAILED\",\n    msg: string,\n    analysis: string,\n}\n\nexport interface StartJobRequest {\n    job: {\n        analysis: string,\n    }\n}\n\nexport interface StartJobResponse {\n    status: \"ok\",\n    job: string,\n    details: MsgPartJob,\n}\n\nexport interface CancelJobResponse {\n    status: \"ok\",\n    job: string,\n}\n\n/*\n * fs browser\n */\n\n// some named place, i.e. \"Documents\", \"Home\", ...\nexport interface FSPlace {\n    title: string,\n    path: string,\n    key: string,\n}\n\nexport interface DirectoryListingDetails {\n    name: string,\n    size: number,\n    ctime: number,\n    mtime: number,\n    owner: string,\n}\n\nexport interface DirectoryListingResponseOK {\n    status: \"ok\",\n    path: string,\n    files: DirectoryListingDetails[],\n    dirs: DirectoryListingDetails[],\n    drives: string[],\n    places: FSPlace[],\n}\n\nexport interface DirectoryListingResponseError {\n    status: \"error\",\n    path: string,\n    code: string,\n    msg: string,\n    alternative?: string,\n}\n\nexport type DirectoryListingResponse = DirectoryListingResponseOK | DirectoryListingResponseError;\n","import { ActionsUnion, createAction } from \"../helpers/actionHelpers\";\nimport { DatasetFormParams, DirectoryListingDetails, FSPlace } from \"../messages\";\n\nexport enum ActionTypes {\n    LIST_DIRECTORY = 'BROWSER_LIST_DIRECTORY',\n    LIST_FULL_PATH = 'BROWSER_LIST_DIRECTORY_FULL',\n    DIRECTORY_LISTING = 'BROWSER_DIRECTORY_LISTING',\n    DETECT_PARAMS = 'BROWSER_DETECT_PARAMS',\n    PARAMS_DETECTED = 'BROWSER_PARAMS_DETECTED',\n    ERROR = 'BROWSER_ERROR',\n    OPEN = 'BROWSER_OPEN',\n    CANCEL = 'BROWSER_CANCEL',\n    SELECT = 'BROWSER_SELECT',\n    SELECT_FULL_PATH = 'BROWSER_SELECT_FULL_PATH',\n}\n\nexport const Actions = {\n    list: (path: string, name?: string) => createAction(ActionTypes.LIST_DIRECTORY, { path, name }),\n    dirListing: (path: string, dirs: DirectoryListingDetails[], files: DirectoryListingDetails[], drives: string[], places: FSPlace[]) => createAction(ActionTypes.DIRECTORY_LISTING, { path, dirs, files, drives, places }),\n    open: () => createAction(ActionTypes.OPEN),\n    cancel: () => createAction(ActionTypes.CANCEL),\n    select: (path: string, name: string) => createAction(ActionTypes.SELECT, { path, name }),\n    selectFullPath: (path: string) => createAction(ActionTypes.SELECT_FULL_PATH, { path }),\n    error: (msg: string, timestamp: number, id: string) => createAction(ActionTypes.ERROR, { msg, timestamp, id }),\n    detectParams: (path: string) => createAction(ActionTypes.DETECT_PARAMS, { path }),\n    paramsDetected: (path: string, params: DatasetFormParams) => createAction(ActionTypes.PARAMS_DETECTED, { path, params }),\n}\n\nexport type Actions = ActionsUnion<typeof Actions>;","import { FormikProps, withFormik } from \"formik\";\nimport * as React from \"react\";\nimport { Button, Form } from \"semantic-ui-react\";\nimport { ConfigState } from \"../../config/reducers\";\nimport { Omit } from \"../../helpers/types\";\nimport { ClusterTypes, ConnectRequestLocalCluster } from \"../../messages\";\n\ntype FormValues = Omit<ConnectRequestLocalCluster, \"type\">;\n\ninterface FormProps {\n    onSubmit: (params: ConnectRequestLocalCluster) => void,\n    config: ConfigState,\n}\n\ntype MergedProps = FormikProps<FormValues> & FormProps;\n\nconst LocalConnectionForm: React.SFC<MergedProps> = ({\n    values,\n    touched,\n    errors,\n    dirty,\n    isSubmitting,\n    handleChange,\n    handleBlur,\n    handleSubmit,\n    handleReset,\n}) => {\n    return (\n        <Form onSubmit={handleSubmit}>\n            <Form.Field>\n                <label htmlFor=\"numWorkers\">Number of Workers:</label>\n                <input type=\"number\" name=\"numWorkers\" value={values.numWorkers}\n                    onChange={handleChange}\n                    onBlur={handleBlur} />\n                {errors.numWorkers && touched.numWorkers && errors.numWorkers}\n            </Form.Field>\n            <Button primary={true} type=\"submit\" disabled={isSubmitting}>Connect</Button>\n        </Form>\n    )\n}\n\nexport default withFormik<FormProps, FormValues>({\n    mapPropsToValues: (ownProps: FormProps) => ({\n        numWorkers: ownProps.config.localCores,\n    }),\n    handleSubmit: (values, formikBag) => {\n        const { onSubmit } = formikBag.props;\n        onSubmit({\n            type: ClusterTypes.LOCAL,\n            ...values,\n        });\n    }\n})(LocalConnectionForm);\n","\nimport { FormikProps, withFormik } from \"formik\";\nimport * as React from \"react\";\nimport { Button, Form } from \"semantic-ui-react\";\nimport { ConfigState } from \"../../config/reducers\";\nimport { Omit } from \"../../helpers/types\";\nimport { ClusterTypes, ConnectRequestTCP } from \"../../messages\";\n\ntype FormValues = Omit<ConnectRequestTCP, \"type\">;\n\ninterface FormProps {\n    onSubmit: (params: ConnectRequestTCP) => void,\n    config: ConfigState,\n}\n\ntype MergedProps = FormikProps<FormValues> & FormProps;\n\nconst TCPConnectionForm: React.SFC<MergedProps> = ({\n    values,\n    touched,\n    errors,\n    dirty,\n    isSubmitting,\n    handleChange,\n    handleBlur,\n    handleSubmit,\n    handleReset,\n}) => {\n    return (\n        <Form onSubmit={handleSubmit}>\n            <Form.Field>\n                <label htmlFor=\"address\">Scheduler URI</label>\n                <input type=\"text\" name=\"address\" value={values.address}\n                    onChange={handleChange}\n                    onBlur={handleBlur} />\n                {errors.address && touched.address && errors.address}\n            </Form.Field>\n            <Button primary={true} type=\"submit\" disabled={isSubmitting}>Connect</Button>\n        </Form>\n    )\n}\n\nexport default withFormik<FormProps, FormValues>({\n    mapPropsToValues: (ownProps: FormProps) => ({\n        address: ownProps.config.lastConnection.address,\n    }),\n    handleSubmit: (values, formikBag) => {\n        const { onSubmit } = formikBag.props;\n        onSubmit({\n            type: ClusterTypes.TCP,\n            ...values\n        });\n    }\n})(TCPConnectionForm);\n","\nimport * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Dropdown, DropdownProps, Segment } from \"semantic-ui-react\";\nimport * as clusterActions from \"../../cluster/actions\";\nimport { getEnumValues } from \"../../helpers\";\nimport { ClusterTypeMetadata, ClusterTypes, ConnectRequestParams } from \"../../messages\";\nimport { RootReducer } from \"../../store\";\nimport LocalConnectionForm from \"./LocalConnectionForm\";\nimport TCPConnectionForm from \"./TCPConnectionForm\";\n\n\nconst mapDispatchToProps = {\n    connectToCluster: clusterActions.Actions.connect,\n};\n\nconst mapStateToProps = (state: RootReducer) => {\n    return {\n        config: state.config,\n        lastConnectionType: state.config.lastConnection.type\n    }\n}\n\ntype MergedProps = DispatchProps<typeof mapDispatchToProps> & ReturnType<typeof mapStateToProps>;\n\nconst clusterTypeKeys = getEnumValues(ClusterTypes);\nconst clusterTypeOptions = clusterTypeKeys.map(t => ({\n    text: ClusterTypeMetadata[ClusterTypes[t]].label,\n    value: ClusterTypes[t],\n}));\n\ninterface ConnectionParamsState {\n    clusterType: ClusterTypes\n}\n\nclass ClusterConnectionForm extends React.Component<MergedProps, ConnectionParamsState> {\n    public state = {\n        clusterType: this.props.lastConnectionType,\n    }\n\n    public setType = (type: ClusterTypes) => {\n        this.setState({\n            clusterType: type,\n        });\n    }\n\n    public handleChange = (e: React.SyntheticEvent, data: DropdownProps) => {\n        const value = data.value as ClusterTypes;\n        this.setType(value);\n    }\n\n    public handleSubmit = (params: ConnectRequestParams) => {\n        this.props.connectToCluster(params);\n    }\n\n    public renderForm() {\n        const { clusterType } = this.state;\n        const { config } = this.props;\n\n        switch (clusterType) {\n            case ClusterTypes.LOCAL: {\n                return <LocalConnectionForm config={config} onSubmit={this.handleSubmit} />\n            }\n            case ClusterTypes.TCP: {\n                return <TCPConnectionForm config={config} onSubmit={this.handleSubmit} />\n            }\n        }\n    }\n\n    public render() {\n        return (\n            <>\n                <div>\n                    <Dropdown\n                        inline={true}\n                        options={clusterTypeOptions}\n                        value={this.state.clusterType}\n                        onChange={this.handleChange}\n                    />\n                </div>\n                <Segment>\n                    {this.renderForm()}\n                </Segment>\n            </>\n        )\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ClusterConnectionForm);","import * as React from 'react';\nimport { Icon, Message } from 'semantic-ui-react';\n\ninterface ChannelConnectingProps {\n    msg: string,\n}\n\nconst ChannelConnecting: React.SFC<ChannelConnectingProps> = ({ msg }) => (\n    <Message icon={true}>\n        <Icon name='cog' loading={true} />\n        <Message.Content>\n            <Message.Header>Connecting to LiberTEM</Message.Header>\n            {msg}\n        </Message.Content>\n    </Message>\n)\n\nexport default ChannelConnecting;","import * as React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport ClusterConnectionForm from \"../../cluster/components/ClusterConnectionForm\";\nimport { assertNotReached } from \"../../helpers\";\nimport { RootReducer } from \"../../store\";\nimport ChannelConnecting from \"./ChannelConnecting\";\n\nconst messages = {\n    waiting: \"Waiting...\",\n    connecting: \"Connecting...\",\n}\n\nconst clusterMessages = {\n    connected: \"Connected, waiting for initial state...\",\n    unknown: \"Connected, fetching cluster status...\",\n    connecting : \"Connecting to cluster\"\n}\n\nconst ConnectedNotReady: React.SFC = () => {\n    const haveConfig = useSelector((state: RootReducer) => state.config.haveConfig);\n    const clusterConnection = useSelector((state: RootReducer) => state.clusterConnection);\n\n    if (!haveConfig) {\n        return <ChannelConnecting msg=\"waiting for configuration...\" />;\n    }\n    if (clusterConnection.status === \"disconnected\") {\n        return <ClusterConnectionForm />\n    } else if (clusterConnection.status === \"connected\") {\n        return <ChannelConnecting msg={clusterMessages.connected} />;\n    } else if (clusterConnection.status === \"unknown\") {\n        return <ChannelConnecting msg={clusterMessages.unknown} />;\n    } else if (clusterConnection.status === \"connecting\") {\n        return <ChannelConnecting msg={clusterMessages.connecting} />\n    }\n    assertNotReached(\"should not happen\");\n}\n\nconst ChannelStatus: React.SFC = ({ children }) => {\n    const channelStatus = useSelector((state: RootReducer) => state.channelStatus);\n\n    switch (channelStatus.status) {\n        case \"waiting\":\n        case \"connecting\": {\n            return <ChannelConnecting msg={messages[channelStatus.status]} />;\n        }\n        case \"connected\": {\n            return <ConnectedNotReady />\n        }\n        case \"ready\":\n            return <>{children}</>;\n        default:\n            assertNotReached(\"should not happen\");\n    }\n}\n\nexport default ChannelStatus;","import * as React from \"react\";\nimport { Icon, SemanticICONS } from \"semantic-ui-react\";\nimport { DirectoryListingDetails } from \"../../messages\";\n\n\ninterface FileBrowserEntryProps {\n    style: object,\n    details: DirectoryListingDetails,\n    onClick?: () => void,\n    icon?: SemanticICONS,\n}\n\ninterface TimeStampProps {\n    ts: number,\n}\n\nexport const TimeStamp: React.SFC<TimeStampProps> = ({ ts }) => {\n    const date = new Date(ts * 1000);\n    const fmtDate = date.toLocaleDateString();\n    const fmtTime = date.toLocaleTimeString();\n    const title = `${fmtDate} ${fmtTime}`;\n    return (\n        <div style={{ display: \"flex\", whiteSpace: \"nowrap\" }} title={title}>\n            <div style={{ width: \"50%\", marginRight: \"10px\" }}>{fmtDate}</div>\n            <div style={{ width: \"45%\" }}>{fmtTime}</div>\n        </div>\n    )\n}\n\n// adapted from https://stackoverflow.com/a/14919494/540644\nfunction humanFileSize(bytes: number, si: boolean = false) {\n    const thresh = si ? 1000 : 1024;\n    if (Math.abs(bytes) < thresh) {\n        return {\n            size: bytes,\n            unit: 'B',\n        }\n    }\n    const units = si\n        ? ['kB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB']\n        : ['KiB', 'MiB', 'GiB', 'TiB', 'PiB', 'EiB', 'ZiB', 'YiB'];\n    let u = -1;\n    do {\n        bytes /= thresh;\n        ++u;\n    } while (Math.abs(bytes) >= thresh && u < units.length - 1);\n\n    return {\n        size: bytes.toFixed(1),\n        unit: units[u],\n    }\n}\n\ninterface FileSizeProps {\n    size: number,\n    si?: boolean,\n}\n\nexport const FileSize: React.SFC<FileSizeProps> = ({ size, si }) => {\n    const fmtSize = humanFileSize(size, si)\n    return (\n        <div style={{ textAlign: \"right\" }}>\n            {fmtSize.size} {fmtSize.unit}\n        </div>\n    );\n}\n\nexport const Cell: React.SFC<{ title?: string }> = ({ children, title }) => {\n    const styles: React.CSSProperties = {\n        whiteSpace: \"nowrap\",\n        overflow: \"hidden\",\n        textOverflow: \"ellipsis\",\n        marginRight: \"10px\",\n    }\n    return (\n        <div style={styles} title={title}>{children}</div>\n    );\n}\n\n\nclass FileBrowserEntry extends React.Component<FileBrowserEntryProps> {\n    public onClick = (e: React.MouseEvent) => {\n        const { onClick } = this.props;\n        if (onClick) {\n            onClick();\n        }\n    }\n\n    public render() {\n        const { details, style, icon } = this.props;\n        const myStyle: React.CSSProperties = {\n            cursor: \"pointer\",\n            ...style,\n        };\n\n        const tsStyles: React.CSSProperties = {\n            textAlign: \"right\",\n        };\n\n        return (\n            <div onClick={this.onClick} style={myStyle}>\n                <div style={{ display: \"flex\", paddingRight: \"10px\" }}>\n                    <div style={{ width: \"20%\", flexGrow: 1 }}>\n                        <Cell title={details.name}>\n                            {icon && <Icon name={icon} />}\n                            {details.name}\n                        </Cell>\n                    </div>\n                    <div style={{ width: \"10%\" }}><Cell><FileSize size={details.size} si={false} /></Cell></div>\n                    <div style={{ width: \"10%\" }}><Cell>{details.owner}</Cell></div>\n                    <div style={{ width: \"18%\", ...tsStyles }}>\n                        <Cell><TimeStamp ts={details.ctime} /></Cell>\n                    </div>\n                    <div style={{ width: \"18%\", ...tsStyles }}>\n                        <Cell><TimeStamp ts={details.mtime} /></Cell>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default FileBrowserEntry;","import * as React from \"react\";\nimport { Cell } from \"./FileBrowserEntry\";\n\nconst FileBrowserHeader: React.SFC = () => {\n    const alignRight: React.CSSProperties = {\n        textAlign: \"right\",\n    };\n\n    // ugly hack: padding-right to compensate for scrollbar size\n    return (\n        <div style={{ paddingRight: \"20px\", paddingBottom: \"10px\" }}>\n            <div style={{ display: \"flex\" }}>\n                <div style={{ width: \"20%\", flexGrow: 1 }}>\n                    <Cell>Name</Cell>\n                </div>\n                <div style={{ width: \"10%\", ...alignRight }}>\n                    <Cell>Size</Cell>\n                </div>\n                <div style={{ width: \"10%\" }}>\n                    <Cell>Owner</Cell>\n                </div>\n                <div style={{ width: \"18%\", ...alignRight }}>\n                    <Cell>Created</Cell>\n                </div>\n                <div style={{ width: \"18%\", ...alignRight }}>\n                    <Cell>Modified</Cell>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default FileBrowserHeader;","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { DirectoryListingDetails } from \"../../messages\";\nimport * as browserActions from '../actions';\nimport FileBrowserEntry from \"./FileBrowserEntry\";\n\ninterface FileEntryProps {\n    path: string,\n    style: object,\n    details: DirectoryListingDetails,\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch, ownProps: FileEntryProps) => {\n    return {\n        select: () => dispatch(browserActions.Actions.select(ownProps.path, ownProps.details.name)),\n    };\n}\n\ntype MergedProps = FileEntryProps & ReturnType<typeof mapDispatchToProps>;\n\nclass FileEntry extends React.Component<MergedProps> {\n    public render() {\n        const { details, style, select } = this.props;\n\n        return (\n            <FileBrowserEntry onClick={select} style={style} details={details}\n                icon=\"file outline\" />\n        )\n    }\n}\n\nexport default connect(null, mapDispatchToProps)(FileEntry);","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { DirectoryListingDetails } from \"../../messages\";\nimport * as browserActions from '../actions';\nimport FileBrowserEntry from \"./FileBrowserEntry\";\n\nconst mapDispatchToProps = (dispatch: Dispatch, ownProps: FolderEntryProps) => {\n    return {\n        list: () => {\n            dispatch(browserActions.Actions.list(ownProps.path, ownProps.details.name));\n            window.setTimeout(() => ownProps.onChange(), 0);\n        },\n    };\n}\n\ninterface FolderEntryProps {\n    path: string,\n    style: object,\n    details: DirectoryListingDetails,\n    onChange: () => void,\n}\n\ntype MergedProps = FolderEntryProps & ReturnType<typeof mapDispatchToProps>;\n\nconst FolderEntry: React.SFC<MergedProps> = ({ list, details, style, onChange }) => {\n    return (\n        <FileBrowserEntry onClick={list} style={style} details={details} icon=\"folder\" />\n    )\n}\n\nexport default connect(null, mapDispatchToProps)(FolderEntry);\n","import * as React from 'react';\nimport { connect } from \"react-redux\";\nimport { Dispatch } from 'redux';\nimport { Dropdown, DropdownItemProps } from \"semantic-ui-react\";\nimport * as browserActions from '../actions';\n\nconst mapDispatchToProps = (dispatch: Dispatch, ownProps: DropdownItemProps) => {\n    return {\n        list: () => {\n            if (ownProps.value !== undefined) {\n                dispatch(browserActions.Actions.list(ownProps.value.toString()));\n                window.setTimeout(() => ownProps.onChange(), 0);\n            }\n        },\n    };\n}\n\ntype MergedProps = ReturnType<typeof mapDispatchToProps> & DropdownItemProps & {\n    onChange: () => void,\n};\n\nconst PathDropDownItem: React.SFC<MergedProps> = ({ list, ...props }) => {\n    const newProps = {\n        onClick: list,\n        ...props,\n    }\n    return <Dropdown.Item {...newProps} />;\n}\n\nexport default connect(null, mapDispatchToProps)(PathDropDownItem);","import { FormikProps, withFormik } from \"formik\";\nimport * as React from \"react\";\nimport { Form, Input } from \"semantic-ui-react\";\n\ninterface FormValues {\n    path: string,\n}\n\ninterface PathInputProps {\n    onChange: (path: string) => void,\n    initialPath: string,\n}\n\ntype MergedProps = FormikProps<FormValues> & PathInputProps;\n\nconst PathInput: React.SFC<MergedProps> = ({\n    values,\n    touched,\n    errors,\n    dirty,\n    isSubmitting,\n    handleChange,\n    handleBlur,\n    handleSubmit,\n    handleReset,\n}) => {\n    return (\n        <Form onSubmit={handleSubmit} style={{ flexGrow: 1 }}>\n            <Form.Field>\n                <Input autoComplete=\"off\" onBlur={handleBlur} onChange={handleChange} value={values.path} name=\"path\" />\n            </Form.Field>\n        </Form>\n    )\n}\n\nexport default withFormik<PathInputProps, FormValues>({\n    mapPropsToValues: ({ initialPath }) => ({\n        path: initialPath,\n    }),\n    handleSubmit: (values, formikBag) => {\n        const { onChange } = formikBag.props;\n        onChange(values.path);\n    },\n    enableReinitialize: true,\n})(PathInput);","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { Dropdown, DropdownItemProps } from \"semantic-ui-react\";\nimport { DatasetTypes } from \"../../messages\";\nimport { RootReducer } from \"../../store\";\nimport * as browserActions from '../actions';\n\n\ntype DropdownOptions = Array<{\n    text: string,\n    value: {\n        type: DatasetTypes,\n        path: string,\n    },\n}>;\n\nconst mapStateToProps = (state: RootReducer) => {\n    return {\n        lastOpened: state.config.lastOpened,\n        fileHistory: state.config.fileHistory,\n        separator: state.config.separator,\n    };\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch) => {\n    return {\n        select: (path: string) => dispatch(browserActions.Actions.selectFullPath(path)),\n    };\n}\n\ntype MergedProps = ReturnType<typeof mapStateToProps> & ReturnType<typeof mapDispatchToProps>;\n\nconst RecentFiles: React.SFC<MergedProps> = ({ lastOpened, fileHistory, select }) => {\n\n    const recentFiles: DropdownOptions = fileHistory.filter((path: string) => lastOpened[path]).map((path: string) => {\n        const item = lastOpened[path];\n        return {\n            text: item.path,\n            value: {\n                type: item.type,\n                path: item.path,\n            },\n        };\n    });\n\n    const onClick = (e: React.MouseEvent<HTMLDivElement>, data: DropdownItemProps) => data.value && select(data.value.toString())\n\n    return (\n        <Dropdown item={true} text=\"Recent\" floating={true}>\n            <Dropdown.Menu>\n                <Dropdown.Header content=\"recent datasets\" />\n                {recentFiles.map((option, idx) => (\n                    <Dropdown.Item key={idx} value={option.value.path} content={option.text} onClick={onClick} />\n                ))}\n            </Dropdown.Menu>\n        </Dropdown>\n    );\n}\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RecentFiles);","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { Dropdown, Menu } from \"semantic-ui-react\";\nimport * as browserActions from '../actions';\nimport { FSPlaces } from \"../types\";\nimport PathDropDownItem from \"./PathDropDownItem\";\nimport PathInput from \"./PathInput\";\nimport RecentFiles from \"./RecentFiles\";\n\nconst mapDispatchToProps = (dispatch: Dispatch, ownProps: PathBarProps) => {\n    return {\n        refresh: () => {\n            dispatch(browserActions.Actions.list(ownProps.currentPath));\n            window.setTimeout(() => ownProps.onChange(), 0);\n        },\n        handleInputChange: (path: string) => {\n            dispatch(browserActions.Actions.list(path));\n            window.setTimeout(() => ownProps.onChange(), 0);\n        },\n        goUp: () => {\n            dispatch(browserActions.Actions.list(ownProps.currentPath, '..'));\n            window.setTimeout(() => ownProps.onChange(), 0);\n        },\n    };\n}\n\ninterface PathBarProps {\n    currentPath: string,\n    onChange: () => void,\n    drives: string[],\n    places: FSPlaces,\n}\n\ntype MergedProps = ReturnType<typeof mapDispatchToProps> & PathBarProps;\n\nconst PathBar: React.SFC<MergedProps> = ({ currentPath, drives, places, onChange, refresh, goUp, handleInputChange }) => {\n    const driveOptions = drives.map((path) => ({ key: path, text: path }));\n    const placeOptions = Object.keys(places).map((key) => ({ key: places[key].path, text: places[key].title }))\n    return (\n        <Menu>\n            <RecentFiles />\n            <Dropdown text=\"Go to...\" floating={true} item={true}>\n                <Dropdown.Menu>\n                    <Dropdown.Header content=\"Drives\" />\n                    {driveOptions.map((option) => {\n                        return <PathDropDownItem key={option.key} value={option.key} content={option.text} onChange={onChange} />\n                    })}\n                    <Dropdown.Header content=\"Places\" />\n                    {placeOptions.map((option) => {\n                        return <PathDropDownItem key={option.key} value={option.key} content={option.text} onChange={onChange} />\n                    })}\n                </Dropdown.Menu>\n            </Dropdown>\n            <Menu.Item icon=\"arrow up\" onClick={goUp} />\n            <Menu.Item style={{ flexGrow: 1 }}>\n                <PathInput onChange={handleInputChange} initialPath={currentPath} />\n            </Menu.Item>\n            <Menu.Item icon=\"refresh\" onClick={refresh} />\n        </Menu>\n    );\n}\n\n\nexport default connect(null, mapDispatchToProps)(PathBar);","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { FixedSizeList as List } from \"react-window\";\nimport { Dispatch } from \"redux\";\nimport { Button, Header, Segment } from \"semantic-ui-react\";\nimport { DirectoryListingDetails } from \"../../messages\";\nimport { RootReducer } from \"../../store\";\nimport * as browserActions from '../actions';\nimport FileBrowserHeader from \"./FileBrowserHeader\";\nimport FileEntry from \"./FileEntry\";\nimport FolderEntry from \"./FolderEntry\";\nimport PathBar from \"./PathBar\";\n\nconst mapStateToProps = (state: RootReducer) => {\n    const { browser } = state;\n    return {\n        files: browser.files,\n        dirs: browser.dirs,\n        path: browser.path,\n        drives: browser.drives,\n        places: browser.places,\n        isLoading: browser.isLoading,\n    };\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch) => {\n    return {\n        cancel: () => dispatch(browserActions.Actions.cancel()),\n    };\n}\n\ntype MergedProps = ReturnType<typeof mapStateToProps> & ReturnType<typeof mapDispatchToProps>;\n\ninterface EntryFnArgs {\n    index: number,\n    style: object\n}\ntype EntryFn = (arg: EntryFnArgs) => void\n\nconst listRef = React.createRef<List>();\n\nconst scrollToTop = () => {\n    if (listRef.current === null) {\n        return;\n    }\n    listRef.current.scrollToItem(0);\n}\n\nfunction sortByKey<T extends object>(array: T[], getKey: (item: T) => any) {\n    return array.sort((a, b) => {\n        const x = getKey(a);\n        const y = getKey(b);\n        return ((x < y) ? -1 : ((x > y) ? 1 : 0));\n    });\n}\n\nconst FileBrowser: React.SFC<MergedProps> = ({ files, dirs, path, drives, places, cancel, isLoading }) => {\n    const getSortKey = (item: DirectoryListingDetails) => item.name.toLowerCase();\n    const dirEntries = sortByKey(dirs, getSortKey).map((dir) => (style: object) => <FolderEntry style={style} onChange={scrollToTop} path={path} details={dir} />);\n    const fileEntries = sortByKey(files, getSortKey).map((f) => ((style: object) => <FileEntry style={style} path={path} details={f} />));\n    const entries = dirEntries.concat(fileEntries);\n\n    const cellFn: EntryFn = ({ index, style }) => {\n        return entries[index](style)\n    }\n\n    let list = (\n        <List style={{ overflowY: \"scroll\" }} ref={listRef} height={300} width=\"100%\" itemCount={entries.length} itemSize={35}>\n            {cellFn}\n        </List>\n    );\n\n    if (isLoading) {\n        // FIXME: hardcoded height\n        list = (\n            <Segment loading={true} style={{ height: \"300px\" }} />\n        )\n    }\n\n    return (\n        <Segment.Group>\n            <Segment>\n                <Header as=\"h2\">Open dataset</Header>\n            </Segment>\n            <Segment>\n                <PathBar currentPath={path} drives={drives} places={places} onChange={scrollToTop} />\n            </Segment>\n            <Segment>\n                <FileBrowserHeader />\n                {list}\n            </Segment>\n            <Segment>\n                <Button onClick={cancel}>Cancel</Button>\n            </Segment>\n        </Segment.Group>\n    );\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FileBrowser);","\nexport interface JobResultType {\n    imageURL: string,\n    description: { title: string, desc: string, includeInDownload: boolean },\n}\n\nexport enum JobRunning {\n    CREATING = 'CREATING',\n    RUNNING = 'RUNNING',\n    DONE = 'DONE',\n}\n\nexport enum JobStatus {\n    CREATING = 'CREATING',\n    IN_PROGRESS = 'IN_PROGRESS',\n    CANCELLED = 'CANCELLED',\n    SUCCESS = 'SUCCESS',\n    ERROR = 'ERROR',\n}\n\nexport interface JobStateCommon {\n    id: string,\n    analysis: string,\n    status: JobStatus,\n    startTimestamp: number,\n    results: JobResultType[],\n}\n\nexport type JobStateStart = JobStateCommon & {\n    running: JobRunning.CREATING | JobRunning.RUNNING,\n}\n\nexport type JobStateDone = JobStateCommon & {\n    running: JobRunning.DONE,\n    endTimestamp: number,\n}\n\nexport type JobState = JobStateStart | JobStateDone;","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Button, Icon } from \"semantic-ui-react\";\nimport { RootReducer } from \"../../store\";\nimport * as browserActions from '../actions';\nimport FileBrowser from \"./FileBrowser\";\n\nexport const mapStateToProps = (state: RootReducer) => {\n    return {\n        isOpen: state.browser.isOpen,\n    }\n}\n\nexport const mapDispatchToProps = {\n    open: browserActions.Actions.open,\n}\n\ntype MergedProps = ReturnType<typeof mapStateToProps> & DispatchProps<typeof mapDispatchToProps>;\n\nconst BrowserWrapper: React.SFC<MergedProps> = ({ isOpen, open }) => {\n    if (!isOpen) {\n        return (\n            <Button icon={true} labelPosition=\"left\" onClick={open}>\n                <Icon name='add' />\n                Browse\n            </Button>\n        );\n    }\n    return (\n        <FileBrowser />\n    );\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(BrowserWrapper)","import * as React from \"react\";\nimport { Icon } from \"semantic-ui-react\";\n\nconst BusySpinner: React.SFC = () => {\n    const styles: React.CSSProperties = {\n        margin: 0,\n        padding: 0,\n        position: \"absolute\",\n        bottom: \"10px\",\n        right: \"10px\",\n        color: \"white\",\n        opacity: 0.7,\n        filter: \"drop-shadow(0 0 3px #000)\",\n    };\n    return (\n        <Icon name=\"cog\" loading={true} style={styles} />\n    )\n}\n\nexport default BusySpinner;","import * as React from \"react\";\nimport BusySpinner from \"./BusySpinner\";\n\ninterface BusyWrapperProps {\n    busy: boolean,\n}\n\nconst BusyWrapper: React.SFC<BusyWrapperProps> = ({ children, busy }) => {\n    const styles: React.CSSProperties = {\n        position: \"relative\",\n    };\n    return (\n        <div style={styles}>\n            {children}\n            {busy && <BusySpinner />}\n        </div>\n    )\n}\n\nexport default BusyWrapper;","import * as React from \"react\";\nimport { DraggableHandle } from \"./DraggableHandle\";\nimport { HandleRenderFunction } from \"./types\";\n\nexport interface HandleParentProps {\n    width: number,\n    height: number,\n    onKeyboardEvent?: React.KeyboardEventHandler<SVGElement>,\n    handles: HandleRenderFunction[],\n}\n\nexport class HandleParent extends React.Component<HandleParentProps> {\n    public currentHandle: DraggableHandle | undefined;\n\n    public handleDragStart = (h: DraggableHandle): void => {\n        this.currentHandle = h;\n    }\n\n    public handleDrop = (): void => {\n        this.currentHandle = undefined;\n    }\n\n    public handleMouseMove = (e: React.MouseEvent<SVGElement>): void => {\n        if (this.currentHandle) {\n            return this.currentHandle.externalMouseMove(e);\n        }\n    }\n\n    public handleMouseLeave = (e: React.MouseEvent<SVGElement>): void => {\n        if (this.currentHandle) {\n            this.currentHandle.externalLeave(e);\n        }\n    }\n\n    public handleMouseUp = (e: React.MouseEvent<SVGElement>): void => {\n        if (this.currentHandle) {\n            this.currentHandle.externalMouseUp(e);\n        }\n    }\n\n    public render() {\n        const { width, height } = this.props;\n        const styles = {\n            outline: \"1px dashed black\"\n        }\n        return (\n            <g\n                onMouseMove={this.handleMouseMove}\n                onMouseLeave={this.handleMouseLeave}\n                onMouseUp={this.handleMouseUp}\n                onKeyDown={this.props.onKeyboardEvent}\n                style={styles}\n                tabIndex={0}\n            >\n                <rect style={{ fill: \"transparent\" }}\n                    x={0} y={0} width={width} height={height}\n                />\n                {this.renderHandles()}\n            </g>\n        );\n    }\n\n    public renderHandles() {\n        const { handles, onKeyboardEvent } = this.props;\n        // we need to inform the handle when there are move/up/leave events\n        // on this parent element, for which we need to know the current handle.\n        // so we pass the handle a dragstart/drop function and kindly ask it\n        // to call us if it starts to be dragged or is dropped.\n        return handles.map((h, i) => {\n            const elem = h(this.handleDragStart, this.handleDrop, onKeyboardEvent);\n            if (React.isValidElement(elem)) {\n                return React.cloneElement(elem, { key: i });\n            }\n            return null;\n        });\n    }\n}\n\nexport default HandleParent;","import * as React from \"react\";\nimport { JobState } from \"../types\";\nimport styles from \"./ResultImage.module.css\";\n\ninterface ResultImageProps {\n    job: JobState,\n    channel: number,\n    width: number,\n    height: number,\n}\n\nconst ResultImage: React.SFC<ResultImageProps> = ({ job, channel, width, height }) => {\n    const result = job.results[channel];\n    if (result === undefined) {\n        return (\n            <svg className={styles.fallback} width={width} height={height} viewBox={`0 0 ${width} ${height}`} key={-1} />\n        )\n    }\n    return (\n        <image className={styles.default} xlinkHref={result.imageURL} width={width} height={height} />\n    );\n}\n\nexport default ResultImage;","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport styled from 'styled-components';\nimport BusyWrapper from \"../../widgets/BusyWrapper\";\nimport HandleParent from \"../../widgets/HandleParent\";\nimport { HandleRenderFunction } from \"../../widgets/types\";\nimport { JobRunning, JobState } from \"../types\";\nimport ResultImage from \"./ResultImage\";\n\ninterface ResultProps {\n    width: number,\n    height: number,\n    job: JobState,\n    extraHandles?: HandleRenderFunction,\n    extraWidgets?: React.ReactElement<SVGElement>,\n    channel: number,\n}\n\nconst ResultWrapper = styled.svg`\n    display: block;\n    border: 1px solid black;\n    width: 100%;\n    height: auto;\n`;\n\ntype MergedProps = ResultProps;\n\nclass Result extends React.Component<MergedProps> {\n    public renderHandles() {\n        const { width, height, extraHandles } = this.props;\n        let handles: HandleRenderFunction[] = [];\n        if (extraHandles) {\n            handles = [...handles, extraHandles];\n        }\n\n        return (\n            <HandleParent width={width} height={height} handles={handles} />\n        )\n    }\n\n    public render() {\n        const { job, channel, width, height, extraWidgets } = this.props;\n        const busy = job.running !== JobRunning.DONE;\n\n        return (\n            <BusyWrapper busy={busy}>\n                <ResultWrapper width={width} height={height} viewBox={`0 0 ${width} ${height}`}>\n                    <ResultImage job={job} channel={channel} width={width} height={height} />\n                    {extraWidgets}\n                    {this.renderHandles()}\n                </ResultWrapper>\n            </BusyWrapper>\n        );\n    }\n};\n\nexport default connect(null, null)(Result);","import styled from 'styled-components';\n\n\nconst Selectors = styled.div`\n    display: flex;\n    & > * {\n        margin-right: 10px;\n    }\n`;\n\n\n\nexport default Selectors;","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Dropdown, DropdownProps } from \"semantic-ui-react\";\nimport { RootReducer } from \"../../store\";\nimport { HandleRenderFunction } from \"../../widgets/types\";\nimport { JobRunning, JobState } from \"../types\";\nimport Result from \"./Result\";\nimport Selectors from \"./Selectors\";\n\ninterface ResultListProps {\n    width: number,\n    height: number,\n    selectors?: React.ReactElement<any>,\n    extraHandles?: HandleRenderFunction,\n    extraWidgets?: React.ReactElement<SVGElement>,\n    subtitle?: React.ReactNode,\n}\n\ninterface ExternalResultListProps {\n    compoundAnalysis: string,\n    analysisIndex: number,\n}\n\nconst mapStateToProps = (state: RootReducer, ownProps: ExternalResultListProps) => {\n    const compoundAnalysis = state.compoundAnalyses.byId[ownProps.compoundAnalysis];\n    const analysis = state.analyses.byId[compoundAnalysis.details.analyses[ownProps.analysisIndex]];\n\n    return {\n        jobsById: state.jobs.byId,\n        analysis,\n        compoundAnalysis,\n        analysisIndex: ownProps.analysisIndex,\n    };\n};\n\ntype MergedProps = ResultListProps & ReturnType<typeof mapStateToProps>;\n\ninterface ResultListState {\n    selectedChannel: number,\n}\n\nconst ResultListPlaceholder: React.SFC<{ width: number, height: number }> = ({ width, height }) => {\n    return (\n        <svg\n            style={{\n                display: \"block\",\n                border: \"1px solid black\",\n                width: \"100%\",\n                height: \"auto\"\n            }}\n            width={width} height={height}\n            viewBox={`0 0 ${width} ${height}`} key={-1} />\n    );\n}\n\n\nclass ResultList extends React.Component<MergedProps, ResultListState> {\n    public state: ResultListState = { selectedChannel: 0 };\n\n    public selectChannel = (e: React.SyntheticEvent, data: DropdownProps) => {\n        const value = data.value as number;\n        this.setState({ selectedChannel: value });\n    }\n\n    public getJob() {\n        const {\n            analysis, jobsById,\n        } = this.props;\n        if (!analysis || !analysis.displayedJob || !jobsById[analysis.displayedJob]) {\n            return undefined;\n        }\n        return jobsById[analysis.displayedJob];\n    }\n\n    public getMsg(job?: JobState) {\n        if (!job) {\n            return <>&nbsp;</>;\n        }\n        if (job.running === JobRunning.DONE) {\n            const dt = (job.endTimestamp - job.startTimestamp) / 1000;\n            return <>Analysis done in {dt.toFixed(3)}s</>;\n        } else {\n            return <>Analysis running...</>;\n        }\n    }\n\n    public genericRender(currentResult: React.ReactElement, job?: JobState) {\n        const { subtitle, children, selectors } = this.props;\n        const msg = this.getMsg(job);\n        return (\n            <div>\n                {currentResult}\n                {children}\n                <Selectors>\n                    <ResultImageSelector job={job} handleChange={this.selectChannel} selectedImg={this.state.selectedChannel} />\n                    {selectors}\n                </Selectors>\n                <p>{subtitle} {msg}</p>\n            </div>\n        );\n    }\n\n    public render() {\n        const job = this.getJob();\n        const {\n            width, height,\n            extraHandles, extraWidgets\n        } = this.props;\n\n        if (!job) {\n            return this.genericRender(<ResultListPlaceholder width={width} height={height} />, job);\n        }\n\n        return this.genericRender(\n            <Result job={job}\n                extraHandles={extraHandles}\n                extraWidgets={extraWidgets}\n                width={width} height={height}\n                channel={this.state.selectedChannel}\n            />,\n            job\n        );\n    }\n}\n\ninterface ImageSelectorProps {\n    job?: JobState,\n    handleChange: (e: React.SyntheticEvent, data: DropdownProps) => void,\n    selectedImg: number,\n}\n\nconst ResultImageSelector: React.SFC<ImageSelectorProps> = ({ job, handleChange, selectedImg }) => {\n    if (!job) {\n        return null;\n    }\n    const availableImages = job.results.map((result, idx) => ({ text: result.description.title, value: idx }));\n    return (\n        <>\n            <div>\n                Channel:{' '}\n                <Dropdown\n                    inline={true}\n                    options={availableImages}\n                    value={selectedImg}\n                    onChange={handleChange}\n                />\n            </div>\n        </>\n    )\n}\n\n\nexport default connect(mapStateToProps)(ResultList);\n","export const inRectConstraint = (width: number, height: number) => (p: Point2D) => {\n    return {\n        x: Math.max(0, Math.min(width - 1, p.x)),\n        y: Math.max(0, Math.min(height - 1, p.y)),\n    }\n}\n\nexport const dist = (cx: number, cy: number, x: number, y: number) => {\n    const dx = cx - x;\n    const dy = cy - y;\n    return Math.sqrt(dx * dx + dy * dy);\n}\n\nexport const cbToRadius = (cx: number, cy: number, cb: ((r: number) => void) | undefined) => (x: number, y: number) => cb && cb(dist(cx, cy, x, y))\n\nexport const keepOnCY = (cy: number) => (p: Point2D) => {\n    return {\n        x: p.x,\n        y: cy,\n    }\n}\n\nexport const keepXLargerThan = (otherX: number) => (p: Point2D) => {\n    return {\n        x: otherX > p.x ? otherX : p.x,\n        y: p.y,\n    }\n}\n\nexport const keepXSmallerThan = (otherX: number) => (p: Point2D) => {\n    return {\n        x: otherX < p.x ? otherX : p.x,\n        y: p.y,\n    }\n}\n\nexport const riConstraint = (outerPos: number, cy: number) => (p: Point2D) => {\n    return keepXLargerThan(outerPos)(\n        keepOnCY(cy)(p)\n    );\n}\n\nexport const roConstraints = (innerPos: number, cy: number) => (p: Point2D) => {\n    return keepXSmallerThan(innerPos)(\n        keepOnCY(cy)(p)\n    );\n}","import { CSSProperties } from \"react\";\n\nexport const defaultMaskStyles = (imageWidth: number): CSSProperties => ({\n    fillOpacity: 0.3,\n    fill: \"red\",\n    strokeOpacity: 0.7,\n    stroke: \"red\",\n    strokeWidth: imageWidth / 128 / 3,\n});","import * as React from \"react\";\nimport { defaultMaskStyles } from \"./styles\";\n\nexport interface DiskProps {\n    imageWidth: number,\n    imageHeight: number,\n    cx: number,\n    cy: number,\n    r: number,\n}\n\nconst Disk: React.SFC<DiskProps> = ({ imageWidth, imageHeight, cx, cy, r }) => {\n    return (\n        <circle cx={cx + .5} cy={cy + .5} r={r} style={{ ...defaultMaskStyles(imageWidth) }} />\n    );\n}\n\nexport default Disk;","import * as React from \"react\";\nimport styled from 'styled-components';\nimport { handleKeyEvent, ModifyCoords } from \"./kbdHandler\";\n\nexport type HandleProps = {\n    x: number,\n    y: number,\n    scale: number,\n    withCross?: boolean,\n    focusRef: React.RefObject<SVGGElement>,\n} & React.SVGProps<SVGGElement>;\n\nconst StyledCircle = styled.circle`\n    stroke: red;\n    stroke-width: 1;\n    fill: transparent;\n    g:focus > & {\n        stroke: lightgreen;\n    }\n`;\n\nconst Cross = styled.path`\n    stroke: red;\n    stroke-width: 1;\n    fill: transparent;\n    g:focus > & {\n        stroke: lightgreen;\n    }\n`;\n\nconst FocusGroup = styled.g`\n    &:focus { outline: none; }\n`;\n\nconst Handle: React.SFC<HandleProps> = ({ scale, x, y, withCross, focusRef, ...args }) => {\n    const r = 3;\n    // scaleMatrix is needed to set the origin of the scale\n    const scaleMatrix = `matrix(${scale}, 0, 0, ${scale}, ${x - scale * x}, ${y - scale * y})`;\n    const style: React.CSSProperties = { transform: scaleMatrix };\n    const crossSpec = `\n        M${x - 4 - r / 2} ${y} L ${x - r / 2} ${y} M${x + r / 2} ${y} L ${x + 4 + r / 2} ${y}\n        M${x} ${y - 4 - r / 2} L ${x} ${y - r / 2} M${x} ${y + r / 2} L ${x} ${y + 4 + r / 2}\n    `;\n    const cross = withCross ? <Cross d={crossSpec} style={style} /> : null;\n    return (\n        <FocusGroup {...args} ref={focusRef}>\n            <StyledCircle cx={x} cy={y} r={r} style={style} />\n            {cross}\n        </FocusGroup>\n    )\n}\n\nexport interface DraggableHandleProps {\n    x: number,\n    y: number,\n    withCross?: boolean,\n    imageWidth?: number,\n    onDragMove?: (x: number, y: number) => void,\n    parentOnDragStart: (h: DraggableHandle) => void,\n    parentOnDrop: (x: number, y: number) => void,\n    onKeyboardEvent?: (e: React.KeyboardEvent<SVGElement>) => void,\n    constraint?: (p: Point2D) => Point2D,\n}\n\nexport function getScalingFactor(elem: SVGElement): number {\n    const svg = elem.ownerSVGElement;\n    if (svg === null) {\n        throw new Error(\"no owner SVG element?\");\n    }\n    const inWidthAttr = svg.getAttribute(\"width\");\n    if (inWidthAttr === null) {\n        throw new Error(\"no width on SVG element?\");\n    }\n    const inWidth = +inWidthAttr;\n    const svgMeasurements = svg.getBoundingClientRect();\n    return svgMeasurements.width / inWidth;\n}\n\nfunction relativeCoords(e: React.MouseEvent, parent: SVGElement) {\n    const f = getScalingFactor(parent);\n    const parentPos = parent.getBoundingClientRect();\n    const res = {\n        x: (e.pageX - (parentPos.left + window.pageXOffset)) / f,\n        y: (e.pageY - (parentPos.top + window.pageYOffset)) / f,\n    }\n    return res;\n}\n\n/**\n * stateful draggable handle, to be used as part of <svg/>\n */\nexport class DraggableHandle extends React.Component<DraggableHandleProps> {\n    public posRef: React.RefObject<SVGRectElement>;\n    public focusRef: React.RefObject<SVGGElement>;\n\n    public state = {\n        dragging: false,\n        drag: { x: 0, y: 0 },\n    }\n\n    constructor(props: DraggableHandleProps) {\n        super(props);\n        this.posRef = React.createRef<SVGRectElement>();\n        this.focusRef = React.createRef<SVGGElement>();\n    }\n\n    // mousemove event from outside (delegated from surrounding element)\n    public externalMouseMove = (e: React.MouseEvent<SVGElement>): void => {\n        this.move(e);\n    }\n\n    // mouseleave event from outside (delegated from surrounding element)\n    public externalLeave = (e: React.MouseEvent<SVGElement>): void => {\n        this.stopDrag(e);\n    }\n\n    // mouseup event from outside (delegated from surrounding element)\n    public externalMouseUp = (e: React.MouseEvent<SVGElement>): void => {\n        this.stopDrag(e);\n    }\n\n    public applyConstraint = (p: Point2D) => {\n        const { constraint } = this.props;\n        if (constraint) {\n            return constraint(p);\n        } else {\n            return p;\n        }\n    }\n\n    public startDrag = (e: React.MouseEvent<SVGElement>): void => {\n        e.preventDefault();\n        const { parentOnDragStart } = this.props;\n        if (this.posRef.current) {\n            this.setState({\n                dragging: true,\n                drag: this.applyConstraint(relativeCoords(e, this.posRef.current)),\n            });\n            if (parentOnDragStart) {\n                parentOnDragStart(this);\n            }\n            if (this.focusRef.current && this.focusRef.current.focus) {\n                this.focusRef.current.focus();\n            }\n        } else {\n            throw new Error(\"startDrag without posRef\");\n        }\n    }\n\n    public move = (e: React.MouseEvent<SVGElement>): void => {\n        const { onDragMove } = this.props;\n        if (!this.state.dragging) {\n            return;\n        }\n        if (this.posRef.current) {\n            this.setState({\n                drag: this.applyConstraint(relativeCoords(e, this.posRef.current)),\n            }, () => {\n                if (onDragMove) {\n                    const constrained = this.applyConstraint(this.state.drag)\n                    onDragMove(constrained.x, constrained.y);\n                }\n            })\n        } else {\n            throw new Error(\"move without posRef\");\n        }\n    }\n\n    public stopDrag = (e: React.MouseEvent<SVGElement>): void => {\n        const { parentOnDrop } = this.props;\n        const { dragging, drag } = this.state;\n        if (!dragging) {\n            return;\n        }\n        this.setState({\n            dragging: false,\n        })\n        if (parentOnDrop) {\n            parentOnDrop(drag.x, drag.y);\n        }\n    }\n\n    public handleKeyDown = (e: React.KeyboardEvent<SVGElement>) => {\n        const update = (fn: ModifyCoords) => {\n            const { x, y, onDragMove } = this.props;\n            const newCoords = fn(x, y);\n            const constrained = this.applyConstraint(newCoords);\n            if (onDragMove) {\n                onDragMove(constrained.x, constrained.y);\n            }\n        }\n        handleKeyEvent(e, update);\n    }\n\n    public renderCommon(x: number, y: number) {\n        const { imageWidth } = this.props;\n        const scale = imageWidth === undefined ? 1 : imageWidth / 128;\n        // empty zero-size <rect> as relative position reference\n        return (\n            <g>\n                <rect\n                    style={{ visibility: \"hidden\" }}\n                    ref={this.posRef}\n                    x={0} y={0} width={0} height={0}\n                />\n                <Handle scale={scale} x={x + .5} y={y + .5} withCross={this.props.withCross}\n                    focusRef={this.focusRef}\n                    onMouseUp={this.stopDrag}\n                    onMouseMove={this.move}\n                    onMouseDown={this.startDrag}\n                    onKeyDown={this.handleKeyDown}\n                    tabIndex={0}\n                />\n            </g>\n        );\n    }\n\n    public renderDragging() {\n        const { x, y } = this.state.drag;\n        return this.renderCommon(x, y);\n    }\n\n    public render() {\n        const { x, y } = this.props;\n        // either render from state (when dragging) or from props\n        if (this.state.dragging) {\n            return this.renderDragging();\n        } else {\n            return this.renderCommon(x, y);\n        }\n    }\n}\n\nexport default DraggableHandle;\n","import { ActionsUnion, createAction } from \"../helpers/actionHelpers\";\nimport { AnalysisDetails, AnalysisTypes, CompoundAnalysisDetails } from \"../messages\";\nimport { CompoundAnalysis } from \"./types\";\n\n\nexport enum ActionTypes {\n    CREATE = 'COMPOUND_ANALYSIS_CREATE',\n    CREATED = 'COMPOUND_ANALYSIS_CREATED',\n    UPDATED = 'COMPOUND_ANALYSIS_UPDATED',\n    RUN = 'COMPOUND_ANALYSIS_RUN',\n    RUNNING = 'COMPOUND_ANALYSIS_RUNNING',\n    REMOVE = 'COMPOUND_ANALYSIS_REMOVE',\n    REMOVED = 'COMPOUND_ANALYSIS_REMOVED',\n    ERROR = 'COMPOUND_ANALYSIS_ERROR',\n    ENABLE_AUTOSTART = 'COMPOUND_ANALYSIS_ENABLE_AUTOSTART',\n}\n\nexport const Actions = {\n    create: (dataset: string, analysisType: AnalysisTypes) => createAction(ActionTypes.CREATE, { dataset, analysisType }),\n    created: (\n        compoundAnalysis: CompoundAnalysis, autoStart: boolean\n    ) => createAction(ActionTypes.CREATED, { compoundAnalysis, autoStart }),\n    enableAutoStart: (\n        compoundAnalysisId: string\n    ) => createAction(ActionTypes.ENABLE_AUTOSTART, { compoundAnalysisId }),\n    updated: (id: string, details: CompoundAnalysisDetails) => createAction(ActionTypes.UPDATED, { id, details }),\n    run: (id: string, analysisIndex: number, details: AnalysisDetails) => createAction(ActionTypes.RUN, { id, analysisIndex, details }),\n    running: (id: string, job: string, analysisIndex: number) => createAction(ActionTypes.RUNNING, { id, job, jobIndex: analysisIndex }),\n    remove: (id: string) => createAction(ActionTypes.REMOVE, { id }),\n    removed: (id: string) => createAction(ActionTypes.REMOVED, { id }),\n    error: (msg: string, timestamp: number, id: string) => createAction(ActionTypes.ERROR, { msg, timestamp, id }),\n}\n\nexport type Actions = ActionsUnion<typeof Actions>;\n\nexport type ActionParts = {\n    [K in keyof typeof Actions]: ReturnType<typeof Actions[K]>\n}","export type ModifyCoords = ((x: number, y: number) => ({ x: number, y: number }));\n\n/**\n * Call this function whenever a keyboard event happens. The keyboard event is then translated\n * to a coordinate transformation, which is passed to the update callback. The update callback is\n * only called if relevant keys were pressed (example: arrow keys).\n * \n * @param e keyboard event\n * @param update a callback to handle coordinate updates\n */\nexport const handleKeyEvent = (e: React.KeyboardEvent<SVGElement>, update: (fn: ModifyCoords) => void) => {\n    let delta = 1;\n    if (e.shiftKey) {\n        delta = 10;\n    }\n    switch (e.key) {\n        case \"ArrowUp\":\n            update((x: number, y: number) => ({ x, y: y - delta }));\n            break;\n        case \"ArrowDown\":\n            update((x: number, y: number) => ({ x, y: y + delta }));\n            break;\n        case \"ArrowLeft\":\n            update((x: number, y: number) => ({ x: x - delta, y }));\n            break;\n        case \"ArrowRight\":\n            update((x: number, y: number) => ({ x: x + delta, y }));\n            break;\n        default:\n            return;\n    }\n    e.preventDefault();\n}\n","import * as React from \"react\";\nimport { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { AnalysisTypes } from \"../../messages\";\nimport { HandleRenderFunction } from \"../../widgets/types\";\nimport * as compoundAnalysisActions from \"../actions\";\nimport useFramePicker from \"./FramePicker\";\nimport ModeSelector from \"./ModeSelector\";\nimport { useDiskROI } from \"./roi/DiskROI\";\nimport { useRectROI } from \"./roi/RectROI\";\nimport { useRoiPicker } from \"./roi/RoiPicker\";\n\n\nexport enum DefaultModes {\n    SUM = \"SUM\",\n    SD = \"SD\",\n    PICK = \"PICK\",\n}\n\nexport enum DefaultRois {\n    ALL = \"ALL\",\n    DISK = \"DISK\",\n    RECT = \"RECT\",\n}\n\nconst useDefaultFrameView = ({\n    scanWidth, scanHeight, compoundAnalysisId, doAutoStart,\n}: {\n    scanWidth: number, scanHeight: number, compoundAnalysisId: string,\n    doAutoStart: boolean,\n}) => {\n    const availableModes = [\n        {\n            text: \"Average\",\n            value: DefaultModes.SUM,\n        },\n        {\n            text: \"Standard Deviation\",\n            value: DefaultModes.SD,\n        },\n        {\n            text: \"Pick\",\n            value: DefaultModes.PICK,\n        },\n    ]\n\n    const availableRois = [\n        {\n            text: \"All\",\n            value: DefaultRois.ALL,\n        },\n        {\n            text: \"Disk\",\n            value: DefaultRois.DISK,\n        },\n        {\n            text: \"Rect\",\n            value: DefaultRois.RECT,\n        },\n    ]\n\n    const [frameMode, setMode] = useState(DefaultModes.SUM);\n    const [roi, setRoi] = useState(DefaultRois.ALL);\n\n    const dispatch = useDispatch();\n\n    const updateFrameMode = (newMode: DefaultModes) => {\n        dispatch(compoundAnalysisActions.Actions.enableAutoStart(compoundAnalysisId));\n        setMode(newMode);\n    }\n\n    const updateRoi = (newRoi: DefaultRois) => {\n        dispatch(compoundAnalysisActions.Actions.enableAutoStart(compoundAnalysisId));\n        setRoi(newRoi);\n    }\n\n    const frameModeSelector = <ModeSelector modes={availableModes} currentMode={frameMode} onModeChange={updateFrameMode} label=\"Mode\" />\n\n    let roiSelector = <ModeSelector modes={availableRois} currentMode={roi} onModeChange={updateRoi} label=\"ROI\" />\n\n    if (frameMode === DefaultModes.PICK) {\n        roiSelector = <></>;\n    }\n\n    const [cx, setCx] = React.useState(Math.round(scanWidth / 2));\n    const [cy, setCy] = React.useState(Math.round(scanHeight / 2));\n\n    const { coords: pickCoords, handles: pickHandles } = useFramePicker({\n        enabled: frameMode === DefaultModes.PICK,\n        scanWidth, scanHeight,\n        analysisIndex: 0,\n        compoundAnalysisId,\n        cx, cy, setCx, setCy\n    });\n\n    const { rectRoiHandles, rectRoiWidgets, rectRoiParameters } = useRectROI({ scanHeight, scanWidth })\n    const { diskRoiHandles, diskRoiWidgets, diskRoiParameters } = useDiskROI({ scanHeight, scanWidth })\n\n    const nullHandles: HandleRenderFunction = (onDragStart, onDrop) => null\n    let handles = nullHandles;\n\n    let widgets;\n    let params = { roi: {} };\n    switch (roi) {\n        case DefaultRois.DISK:\n            handles = diskRoiHandles;\n            widgets = diskRoiWidgets;\n            params = diskRoiParameters;\n            break;\n        case DefaultRois.RECT:\n            handles = rectRoiHandles;\n            widgets = rectRoiWidgets;\n            params = rectRoiParameters;\n            break;\n    }\n\n    switch (frameMode) {\n        case DefaultModes.PICK:\n            handles = pickHandles;\n            widgets = undefined;\n            break;\n    }\n\n    useRoiPicker({\n        enabled: frameMode === DefaultModes.SD && doAutoStart,\n        scanWidth, scanHeight,\n        analysisIndex: 0,\n        compoundAnalysisId,\n        roiParameters: params,\n        analysisType: AnalysisTypes.SD_FRAMES\n    })\n\n    useRoiPicker({\n        enabled: frameMode === DefaultModes.SUM && doAutoStart,\n        scanWidth, scanHeight,\n        analysisIndex: 0,\n        compoundAnalysisId,\n        roiParameters: params,\n        analysisType: AnalysisTypes.SUM_FRAMES,\n    })\n\n    const frameViewTitle = (\n        frameMode !== DefaultModes.PICK ? null : <>Pick: x={pickCoords.cx}, y={pickCoords.cy} &emsp;</>\n    )\n\n    return {\n        frameViewTitle,\n        frameModeSelector: (<>{frameModeSelector} {roiSelector}</>),\n        roiSelector,\n        handles,\n        widgets,\n    }\n}\n\nexport default useDefaultFrameView;","import React from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { AnalysisParameters, AnalysisTypes } from \"../../messages\";\nimport { inRectConstraint } from \"../../widgets/constraints\";\nimport DraggableHandle from \"../../widgets/DraggableHandle\";\nimport { HandleRenderFunction } from \"../../widgets/types\";\nimport * as compoundAnalysisActions from \"../actions\";\n\nconst useFramePicker = ({\n    enabled, scanWidth, scanHeight, analysisIndex, compoundAnalysisId, cx, cy, setCx, setCy\n}: {\n    enabled: boolean, scanWidth: number, scanHeight: number,\n    analysisIndex: number, compoundAnalysisId: string,\n    cx: number, cy: number, setCx: (newCx: number) => void, setCy: (newCy: number) => void,\n}) => {\n\n    const dispatch = useDispatch();\n\n    React.useEffect(() => {\n        if (enabled) {\n            const params: AnalysisParameters = {\n                x: cx,\n                y: cy,\n            };\n\n            dispatch(compoundAnalysisActions.Actions.run(compoundAnalysisId, analysisIndex, {\n                analysisType: AnalysisTypes.PICK_FRAME,\n                parameters: params,\n            }))\n        }\n    }, [compoundAnalysisId, cx, cy, enabled, analysisIndex, dispatch]);\n\n    const onPickChange = (pickX: number, pickY: number) => {\n        const newX = Math.round(pickX);\n        const newY = Math.round(pickY);\n        if (cx === newX && cy === newY) {\n            return;\n        }\n        setCx(newX);\n        setCy(newY);\n    }\n\n    const renderPickHandle: HandleRenderFunction = (onDragStart, onDrop) => (\n        <DraggableHandle x={cx} y={cy} withCross={true}\n            imageWidth={scanWidth}\n            onDragMove={onPickChange}\n            parentOnDragStart={onDragStart}\n            parentOnDrop={onDrop}\n            constraint={inRectConstraint(scanWidth, scanHeight)} />\n    )\n\n    return { coords: { cx, cy }, handles: renderPickHandle };\n}\n\nexport default useFramePicker;","import * as React from \"react\";\nimport { Dropdown, DropdownProps } from \"semantic-ui-react\";\n\n\ntype ModeOptions = Array<{\n    text: string;\n    value: any;\n}>;\n\ninterface ModeSelectorProps {\n    modes: ModeOptions,\n    currentMode: any,\n    onModeChange: (mode: any) => void,\n    label: string,\n}\n\nconst ModeSelector: React.FunctionComponent<ModeSelectorProps> = ({\n    modes, currentMode, onModeChange, label\n}) => {\n\n    const onChange = (e: React.SyntheticEvent, data: DropdownProps) => {\n        onModeChange(data.value)\n    }\n\n    return (\n        <>\n            <div>\n                {label}:{' '}\n                <Dropdown\n                    inline={true}\n                    options={modes}\n                    value={currentMode}\n                    onChange={onChange}\n                />\n            </div>\n        </>\n    )\n}\n\nexport default ModeSelector;","import * as React from \"react\";\nimport { defaultMaskStyles } from \"./styles\";\n\nexport interface RectProps {\n    imageWidth: number,\n    imageHeight: number,\n    x: number,\n    y: number,\n    width: number,\n    height: number,\n}\n\nconst Rect: React.SFC<RectProps> = ({ imageWidth, imageHeight, x, y, width, height }) => {\n    let ymin: number;\n    let xmin: number;\n    if (height*width > 0) {\n    ymin = Math.min(y, y+height);\n    xmin = Math.min(x, x+width);}\n    else if (height > 0 && width < 0) \n    {ymin = y;\n    xmin = x+width;}\n    else \n    {ymin = y+height;\n    xmin = x;}\n    return (\n        <rect x={xmin + .5} y={ymin + .5} width={Math.abs(width)} height={Math.abs(height)} style={{ ...defaultMaskStyles(imageWidth) }} />\n    );\n}\n\nexport default Rect;\n\n","import * as React from \"react\";\nimport { useState } from \"react\";\n\nimport { FrameParams } from \"../../../messages\";\nimport DraggableHandle from \"../../../widgets/DraggableHandle\";\nimport Rect from \"../../../widgets/Rect\";\nimport { HandleRenderFunction } from \"../../../widgets/types\";\n\n\nconst useRectROI = ({ scanWidth, scanHeight }: {\n    scanWidth: number;\n    scanHeight: number;\n}) => {\n    const minLength = Math.min(scanWidth, scanHeight);\n    const [x, setx] = useState(scanWidth / 2);\n    const [y, sety] = useState(scanHeight / 2);\n    const [width, setwidth] = useState(minLength / 8);\n    const [height, setheight] = useState(minLength / 8);\n\n\n    const rectRoiParameters: FrameParams = {\n        roi: {\n            shape: \"rect\",\n            x,\n            y,\n            width,\n            height,\n        },\n    }\n\n\n    const handleCornerChange = (newx: number, newy: number) => {\n        setx(newx);\n        sety(newy);\n    };\n\n    const handleShapeChange = (newx: number, newy: number) => {\n        setwidth(newx - x);\n        setheight(newy - y);\n    };\n\n    const smthHandle = {\n        x: x + width,\n        y: y + height,\n    }\n\n    const rectRoiHandles: HandleRenderFunction = (handleDragStart, handleDrop) => (<>\n        <DraggableHandle x={x} y={y}\n            imageWidth={scanWidth}\n            onDragMove={handleCornerChange}\n            parentOnDragStart={handleDragStart}\n            parentOnDrop={handleDrop} />\n        <DraggableHandle x={smthHandle.x} y={smthHandle.y}\n            imageWidth={scanWidth}\n            onDragMove={handleShapeChange}\n            parentOnDragStart={handleDragStart}\n            parentOnDrop={handleDrop} />\n    </>);\n\n    const rectRoiWidgets = (\n        <Rect x={x} y={y} width={width} height={height}\n            imageWidth={scanWidth} imageHeight={scanHeight}\n        />\n    );\n\n    return {\n        rectRoiParameters,\n        rectRoiHandles,\n        rectRoiWidgets,\n    };\n};\n\nexport { useRectROI };\n\n","import * as React from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { AnalysisTypes, FrameParams } from \"../../../messages\";\nimport * as analysisActions from \"../../actions\";\n\n\nconst useRoiPicker = ({ compoundAnalysisId, enabled, analysisIndex, roiParameters, analysisType }: {\n    scanWidth: number;\n    scanHeight: number;\n    enabled: boolean;\n    analysisIndex: number,\n    compoundAnalysisId: string;\n    roiParameters: FrameParams;\n    analysisType: AnalysisTypes.SD_FRAMES | AnalysisTypes.SUM_FRAMES\n}) => {\n    const dispatch = useDispatch();\n\n    React.useEffect(() => {\n        const handle = setTimeout(() => {\n            if (enabled) {\n                const analysisDetails = {\n                    analysisType,\n                    parameters: roiParameters,\n                };\n                dispatch(analysisActions.Actions.run(compoundAnalysisId, analysisIndex, analysisDetails))\n            }\n        }, 100);\n\n        return () => clearTimeout(handle);\n        // rules-of-hooks can't be statically validated here\n        // eslint-disable-next-line\n    }, [analysisType, compoundAnalysisId, enabled, analysisIndex, JSON.stringify(roiParameters), dispatch]);\n\n    return {\n    };\n};\n\nexport { useRoiPicker };\n\n","import * as React from \"react\";\nimport { useState } from \"react\";\n\nimport { FrameParams } from \"../../../messages\";\nimport { cbToRadius, inRectConstraint, keepOnCY } from \"../../../widgets/constraints\";\nimport Disk from \"../../../widgets/Disk\";\nimport DraggableHandle from \"../../../widgets/DraggableHandle\";\nimport { HandleRenderFunction } from \"../../../widgets/types\";\n\nconst useDiskROI = ({ scanWidth, scanHeight }: {\n    scanWidth: number;\n    scanHeight: number;\n}) => {\n    const minLength = Math.min(scanWidth, scanHeight);\n    const [cx, setCx] = useState(scanWidth / 2);\n    const [cy, setCy] = useState(scanHeight / 2);\n    const [r, setR] = useState(minLength / 8);\n\n\n    const diskRoiParameters: FrameParams = {\n        roi: {\n            shape: \"disk\",\n            cx,\n            cy,\n            r,\n        },\n    }\n\n\n    const handleCenterChange = (newCx: number, newCy: number) => {\n        setCx(newCx);\n        setCy(newCy);\n    };\n\n    const handleRChange = (newR: number) => {\n        setR(newR);\n    };\n\n    const rHandle = {\n        x: cx - r,\n        y: cy,\n    }\n\n    const diskRoiHandles: HandleRenderFunction = (handleDragStart, handleDrop) => (<>\n        <DraggableHandle x={cx} y={cy}\n            imageWidth={scanWidth}\n            onDragMove={handleCenterChange}\n            parentOnDragStart={handleDragStart}\n            parentOnDrop={handleDrop}\n            constraint={inRectConstraint(scanWidth, scanHeight)} />\n        <DraggableHandle x={rHandle.x} y={rHandle.y}\n            imageWidth={scanWidth}\n            onDragMove={cbToRadius(cx, cy, handleRChange)}\n            parentOnDragStart={handleDragStart}\n            parentOnDrop={handleDrop}\n            constraint={keepOnCY(cy)} />\n    </>);\n\n    const diskRoiWidgets = (\n        <Disk cx={cx} cy={cy} r={r}\n            imageWidth={scanWidth} imageHeight={scanHeight}\n        />\n    );\n\n    return {\n        diskRoiParameters,\n        diskRoiHandles,\n        diskRoiWidgets,\n    };\n};\n\nexport { useDiskROI };\n\n","import * as React from \"react\";\nimport { Grid, Header, Icon, Segment } from \"semantic-ui-react\";\n\ninterface AnalysisLayoutTwoColProps {\n    title: string,\n    subtitle: React.ReactNode,\n    left: React.ReactNode,\n    right: React.ReactNode,\n    toolbar?: React.ReactNode,\n}\n\ntype MergedProps = AnalysisLayoutTwoColProps;\n\nconst AnalysisLayoutTwoCol: React.SFC<MergedProps> = ({\n    title, subtitle,\n    left, right,\n    toolbar,\n}) => {\n    return (\n        <>\n            <Header as='h3' attached=\"top\">\n                <Icon name=\"cog\" />\n                <Header.Content>{title}</Header.Content>\n            </Header>\n            <Segment attached={true}>\n                <Grid columns={2}>\n                    <Grid.Row>\n                        <Grid.Column>\n                            {left}\n                            <p>{subtitle}</p>\n                        </Grid.Column>\n                        <Grid.Column>\n                            {right}\n                        </Grid.Column>\n                    </Grid.Row>\n                </Grid>\n            </Segment>\n            {toolbar}\n        </>\n    )\n}\n\nexport default AnalysisLayoutTwoCol","export function getApiBasePath() {\n    const loc = window.location.pathname;\n\n    if(loc.endsWith('/')) {\n        return `${loc}api/`;\n    } else {\n        return `${loc}/api/`;\n    }\n}\n\nexport function getApiWSURL() {\n    const basePath = getApiBasePath();\n    return `ws://${window.location.hostname}:${window.location.port}${basePath}events/`;\n}\n\nexport async function genericDelete(path: string) {\n    const basePath = getApiBasePath();\n    const r = await fetch(`${basePath}${path}`, {\n        credentials: \"same-origin\",\n        method: \"DELETE\",\n    });\n    return await r.json();\n}\n\nexport async function genericPut(path: string, payload: object) {\n    const basePath = getApiBasePath();\n    const r = await fetch(`${basePath}${path}`, {\n        body: JSON.stringify(payload),\n        credentials: \"same-origin\",\n        method: \"PUT\",\n    });\n    return await r.json();\n}","import { AnalysisTypes } from \"../messages\";\nimport { CompoundAnalysisMetadata, CompoundAnalysisMetadataItem } from \"./types\";\n// keyof typeof: https://stackoverflow.com/a/42623905/540644\nexport const getMetadata = (typeName: keyof typeof AnalysisTypes): CompoundAnalysisMetadataItem => {\n    const type: AnalysisTypes = AnalysisTypes[typeName];\n    return CompoundAnalysisMetadata[type];\n};\n","import * as React from \"react\";\nimport { useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { Button, Dropdown, DropdownProps, Header, Icon, Modal, Popup } from \"semantic-ui-react\";\nimport { AnalysisState } from \"../../analysis/types\";\nimport { getApiBasePath } from \"../../helpers/apiHelpers\";\nimport { JobStatus } from \"../../job/types\";\nimport { RootReducer } from \"../../store\";\nimport { getMetadata } from \"../getMetadata\";\nimport { CompoundAnalysisState } from \"../types\";\n\ninterface DownloadItemsProps {\n    compoundAnalysis: CompoundAnalysisState,\n    currentFormat?: string,\n}\n\nconst DownloadItems: React.SFC<DownloadItemsProps> = ({\n    compoundAnalysis, currentFormat\n}) => {\n\n    const basePath = getApiBasePath();\n    const downloadUrl = (analysisId: string) => (\n        `${basePath}compoundAnalyses/${compoundAnalysis.compoundAnalysis}/analyses/${analysisId}/download/${currentFormat}/`\n    )\n\n    const analysesById = useSelector((state: RootReducer) => {\n        return state.analyses.byId;\n    });\n\n    const jobsById = useSelector((state: RootReducer) => {\n        return state.jobs.byId;\n    });\n\n    const analyses = compoundAnalysis.details.analyses.map(analysis => {\n        return analysesById[analysis];\n    }).filter(analysis => {\n        return analysis.jobs.some(jobId => jobsById[jobId].status === JobStatus.SUCCESS);\n    })\n\n    const getAnalysisDescription = (analysis: AnalysisState) => {\n        return getMetadata(analysis.details.analysisType).desc;\n    }\n\n    const getDownloadChannels = (analysis: AnalysisState) => {\n        if(!analysis.displayedJob) {\n            return [];\n        }\n        return jobsById[analysis.displayedJob].results.filter(\n            result => result.description.includeInDownload\n        ).map(\n            result => result.description.title\n        )\n    }\n\n    return (\n        <ul>\n            {analyses.map((analysis) => {\n                return (\n                    <li key={analysis.id}>\n                        <a href={downloadUrl(analysis.id)}>\n                            {getAnalysisDescription(analysis)} (channels: {getDownloadChannels(analysis).join(\", \")})\n                        </a>\n                    </li>\n                );\n            })}\n        </ul>\n    )\n}\n\ninterface DownloadProps {\n    compoundAnalysis: CompoundAnalysisState,\n}\n\ntype FormatOptions = Array<{\n    text: string;\n    value: any;\n}>;\n\nconst Download: React.SFC<DownloadProps> = ({ compoundAnalysis }) => {\n    const formats = useSelector((state: RootReducer) => state.config.resultFileFormats);\n    const formatOptions: FormatOptions = Object.keys(formats).map(identifier => {\n        return {\n            value: identifier,\n            text: formats[identifier].description,\n        }\n    });\n\n    const [currentFormat, setFormat] = useState(formatOptions[0]?.value);\n\n    // we may be called before the config is completely loaded, so we\n    // need to set the format after the list of formats is available\n    React.useEffect(() => {\n        if(formatOptions.length !== 0 && !currentFormat) {\n            setFormat(formatOptions[0].value);\n        }\n    }, [formatOptions, currentFormat])\n\n    const onFormatChange = (e: React.SyntheticEvent, data: DropdownProps) => {\n        setFormat(data.value);\n    }\n\n    return (\n        <Modal trigger={\n            <Button icon={true}>\n                <Icon name='download' />\n                Download\n            </Button>\n        }>\n            <Popup.Header>\n                Download Results, format: <Dropdown inline={true} options={formatOptions} onChange={onFormatChange} value={currentFormat} />\n            </Popup.Header>\n            <Popup.Content>\n                <Header as=\"h3\">Available results:</Header>\n                <DownloadItems compoundAnalysis={compoundAnalysis} currentFormat={currentFormat} />\n            </Popup.Content>\n        </Modal>\n    );\n}\n\nexport default Download;","import * as React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Button, Icon, IconProps, Segment } from \"semantic-ui-react\";\nimport { RootReducer } from \"../../store\";\nimport * as analysisActions from \"../actions\";\nimport { getAnalysisStatus } from \"../helpers\";\nimport { CompoundAnalysisState } from \"../types\";\nimport Download from \"./Download\";\n\ninterface ToolbarProps {\n    compoundAnalysis: CompoundAnalysisState,\n    busyIdxs: number[],\n    onApply: () => void,\n}\n\n\ntype MergedProps = ToolbarProps;\n\nconst Toolbar: React.SFC<MergedProps> = ({ busyIdxs, onApply, compoundAnalysis }) => {\n    const dispatch = useDispatch();\n    const handleRemove = () => dispatch(analysisActions.Actions.remove(compoundAnalysis.compoundAnalysis));\n    const analyses = useSelector((state: RootReducer) => state.analyses);\n    const jobs = useSelector((state: RootReducer) => state.jobs);\n    const status = getAnalysisStatus(\n        compoundAnalysis, analyses, jobs,\n        busyIdxs\n    );\n    const running = status === \"busy\";\n    const applyIconProps: IconProps = running ? { name: 'cog', loading: true } : { name: 'check' }\n\n    return (\n        <Segment attached=\"bottom\">\n            <Button.Group>\n                <Button primary={true} onClick={onApply} icon={true}>\n                    <Icon {...applyIconProps} />\n                    Apply\n                </Button>\n                <Download compoundAnalysis={compoundAnalysis} />\n                <Button onClick={handleRemove} icon={true}>\n                    <Icon name='remove' />\n                    Remove\n                </Button>\n            </Button.Group>\n        </Segment>\n    );\n}\n\nexport default Toolbar;","import { AnalysisReducerState } from \"../analysis/reducers\";\nimport { JobReducerState } from \"../job/reducers\";\nimport { JobRunning } from \"../job/types\";\nimport { CompoundAnalysisState } from \"./types\";\n\nexport const getAnalysisStatus = (compoundAnalysis: CompoundAnalysisState, analyses: AnalysisReducerState, jobs: JobReducerState, analysisIdxsToInclude: number[] = []): \"idle\" | \"busy\" => {\n    let filteredAnalyses = compoundAnalysis.details.analyses;\n\n    if (analysisIdxsToInclude.length > 0) {\n        filteredAnalyses = filteredAnalyses.filter((analysisId: string, idx: number) => {\n            return analysisIdxsToInclude.indexOf(idx) !== -1;\n        })\n    }\n\n    return filteredAnalyses.reduce((prevValue: \"idle\" | \"busy\", analysisId: string) => {\n        const analysis = analyses.byId[analysisId];\n        if(!analysis) {\n            return prevValue; // no analysis, so \"all jobs\" are done\n        }\n        const allDone = analysis.jobs.every(\n            jobId => jobs.byId[jobId].running === JobRunning.DONE\n        );\n        return allDone ? prevValue : \"busy\";\n    }, \"idle\");\n}","import * as React from \"react\";\nimport { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { defaultDebounce } from \"../../helpers\";\nimport ResultList from \"../../job/components/ResultList\";\nimport { AnalysisTypes } from \"../../messages\";\nimport { cbToRadius, inRectConstraint, keepOnCY } from \"../../widgets/constraints\";\nimport Disk from \"../../widgets/Disk\";\nimport { DraggableHandle } from \"../../widgets/DraggableHandle\";\nimport { HandleRenderFunction } from \"../../widgets/types\";\nimport * as compoundAnalysisActions from \"../actions\";\nimport { CompoundAnalysisProps } from \"../types\";\nimport useDefaultFrameView from \"./DefaultFrameView\";\nimport AnalysisLayoutTwoCol from \"./layouts/AnalysisLayoutTwoCol\";\nimport Toolbar from \"./Toolbar\";\n\nconst CenterOfMassAnalysis: React.SFC<CompoundAnalysisProps> = ({ compoundAnalysis, dataset }) => {\n    const { shape } = dataset.params;\n    const [scanHeight, scanWidth, imageHeight, imageWidth] = shape;\n    const minLength = Math.min(imageWidth, imageHeight);\n    const [cx, setCx] = useState(imageWidth / 2);\n    const [cy, setCy] = useState(imageHeight / 2);\n    const [r, setR] = useState(minLength / 4);\n\n    const dispatch = useDispatch();\n\n    const rHandle = {\n        x: cx - r,\n        y: cy,\n    }\n\n    const handleCenterChange = defaultDebounce((newCx: number, newCy: number) => {\n        setCx(newCx);\n        setCy(newCy);\n    });\n    const handleRChange = defaultDebounce(setR);\n\n    const frameViewHandles: HandleRenderFunction = (handleDragStart, handleDrop) => (<>\n        <DraggableHandle x={cx} y={cy}\n            imageWidth={imageWidth}\n            onDragMove={handleCenterChange}\n            parentOnDragStart={handleDragStart}\n            parentOnDrop={handleDrop}\n            constraint={inRectConstraint(imageWidth, imageHeight)} />\n        <DraggableHandle x={rHandle.x} y={rHandle.y}\n            imageWidth={imageWidth}\n            onDragMove={cbToRadius(cx, cy, handleRChange)}\n            parentOnDragStart={handleDragStart}\n            parentOnDrop={handleDrop}\n            constraint={keepOnCY(cy)} />\n    </>);\n\n    const frameViewWidgets = (\n        <Disk cx={cx} cy={cy} r={r}\n            imageWidth={imageWidth} imageHeight={imageHeight} />\n    )\n\n    const {\n        frameViewTitle, frameModeSelector,\n        handles: resultHandles, widgets: resultWidgets\n    } = useDefaultFrameView({\n        scanWidth,\n        scanHeight,\n        compoundAnalysisId: compoundAnalysis.compoundAnalysis,\n        doAutoStart: compoundAnalysis.doAutoStart,\n    })\n\n    const subtitle = <>{frameViewTitle} Disk: center=(x={cx.toFixed(2)}, y={cy.toFixed(2)}), r={r.toFixed(2)}</>;\n\n    const runAnalysis = () => {\n        dispatch(compoundAnalysisActions.Actions.run(compoundAnalysis.compoundAnalysis, 1, {\n            analysisType: AnalysisTypes.CENTER_OF_MASS,\n            parameters: {\n                shape: \"com\",\n                cx,\n                cy,\n                r\n            }\n        }));\n    };\n\n    const toolbar = <Toolbar compoundAnalysis={compoundAnalysis} onApply={runAnalysis} busyIdxs={[1]} />\n\n    return (\n        <AnalysisLayoutTwoCol\n            title=\"COM analysis\" subtitle={subtitle}\n            left={<>\n                <ResultList\n                    extraHandles={frameViewHandles} extraWidgets={frameViewWidgets}\n                    analysisIndex={0} compoundAnalysis={compoundAnalysis.compoundAnalysis}\n                    width={imageWidth} height={imageHeight}\n                    selectors={frameModeSelector}\n                />\n            </>}\n            right={<>\n                <ResultList\n                    analysisIndex={1} compoundAnalysis={compoundAnalysis.compoundAnalysis}\n                    width={scanWidth} height={scanHeight}\n                    extraHandles={resultHandles}\n                    extraWidgets={resultWidgets}\n                />\n            </>}\n            toolbar={toolbar}\n        />\n    );\n}\n\nexport default CenterOfMassAnalysis;","// from https://stackoverflow.com/a/45100420/540644\nexport function getPathArc(center: { x: number, y: number }, start: number, end: number, radius: number) {\n    if (end === start) { end += 360; }\n    let degree = end - start;\n    degree = degree < 0 ? (degree + 360) : degree;\n    const points = [];\n    points.push(getLocationFromAngle(start, radius, center));\n    points.push(getLocationFromAngle(start + degree / 3, radius, center));\n    points.push(getLocationFromAngle(start + degree * 2 / 3, radius, center));\n    points.push(getLocationFromAngle(end, radius, center));\n    return getCirclePath(points, radius, (degree < 180) ? 0 : 1);\n}\n\nfunction getCirclePath(points: Array<{ x: number, y: number }>, radius: number, clockWise: 0 | 1) {\n    return ['M', points[0].x, points[0].y,\n        'A', radius, radius, 0, 0, clockWise, points[1].x, points[1].y,\n        'A', radius, radius, 0, 0, clockWise, points[2].x, points[2].y,\n        'A', radius, radius, 0, 0, clockWise, points[3].x, points[3].y\n    ].join(' ');\n}\n\nfunction getLocationFromAngle(degree: number, radius: number, center: { x: number, y: number }) {\n    const radian = (degree * Math.PI) / 180;\n    return {\n        x: Math.cos(radian) * radius + center.x,\n        y: Math.sin(radian) * radius + center.y\n    }\n}\n","import * as React from \"react\";\nimport { getPathArc } from \"../helpers/svg\";\nimport { defaultMaskStyles } from \"./styles\";\n\nexport interface RingProps {\n    imageWidth: number,\n    cx: number,\n    cy: number,\n    ri: number,\n    ro: number,\n}\n\nconst Ring: React.SFC<RingProps> = ({ imageWidth, cx, cy, ri, ro }) => {\n    // see also: https://stackoverflow.com/a/37883328/540644\n    const pathSpecs = [\n        getPathArc({ x: cx + .5, y: cy + .5 }, 90, 90, ro),\n        getPathArc({ x: cx + .5, y: cy + .5 }, 90, 90, ri)\n    ]\n    const pathSpec = pathSpecs.join(' ');\n\n    return (\n        <path d={pathSpec} fillRule=\"evenodd\" style={{ ...defaultMaskStyles(imageWidth) }} />\n    );\n}\n\nexport default Ring;","import * as React from \"react\";\nimport { Grid, Header, Icon, Segment } from \"semantic-ui-react\";\n\ninterface AnalysisLayoutTwoResProps {\n    title: string,\n    subtitle: React.ReactNode,\n    left: React.ReactNode,\n    mid: React.ReactNode,\n    right: React.ReactNode,\n    clustparams: React.ReactNode,\n    toolbar?: React.ReactNode,\n    title1: string, \n    title2: React.ReactNode,\n    title3:string,\n\n}\n\ntype MergedProps = AnalysisLayoutTwoResProps;\n\nconst AnalysisLayoutTwoRes: React.SFC<MergedProps> = ({\n    title, subtitle,\n    left, mid, right,\n    toolbar, clustparams, title1, title2, title3\n}) => {\n    return (\n        <>\n            <Header as='h3' attached=\"top\">\n                <Icon name=\"cog\" />\n                <Header.Content>{title}</Header.Content>\n            </Header>\n            <Segment attached={true}>\n                <Grid columns={3}>\n                    <Grid.Row>\n                        <Grid.Column width={4}>\n                            <p>{title1}</p>\n                        </Grid.Column> \n\n                        <Grid.Column width={6}>\n                            <p>{title2}</p>   \n\n                        </Grid.Column>\n\n                        <Grid.Column width={6}>\n                            <p>{title3}</p>\n                        </Grid.Column>    \n                    </Grid.Row>\n\n                    <Grid.Row>\n                        <Grid.Column width={4}>\n                            {left}\n                        </Grid.Column>\n\n                        <Grid.Column width={6}>\n                            {mid}\n                        </Grid.Column>\n\n                        <Grid.Column width={6}>\n                            {right}\n                        </Grid.Column>\n\n                    </Grid.Row>\n\n                    <Grid.Row>\n                        <Grid.Column width={16}>\n\n                            <div>{clustparams}</div>\n                            <p>{subtitle}</p>\n\n                        </Grid.Column>\n\n                    </Grid.Row>\n                </Grid>\n                \n            </Segment>\n            \n            {toolbar}\n        </>\n    )\n}\n\nexport default AnalysisLayoutTwoRes","import * as React from \"react\";\nimport { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { Accordion, Form, Icon } from \"semantic-ui-react\";\nimport { defaultDebounce } from \"../../helpers\";\nimport ResultList from \"../../job/components/ResultList\";\nimport { AnalysisTypes } from \"../../messages\";\nimport { cbToRadius, inRectConstraint, riConstraint, roConstraints } from \"../../widgets/constraints\";\nimport DraggableHandle from \"../../widgets/DraggableHandle\";\nimport Ring from \"../../widgets/Ring\";\nimport { HandleRenderFunction } from \"../../widgets/types\";\nimport * as compoundAnalysisActions from \"../actions\";\nimport { CompoundAnalysisProps } from \"../types\";\nimport useDefaultFrameView from \"./DefaultFrameView\";\nimport AnalysisLayoutTwoRes from \"./layouts/AnalysisLayoutTwoRes\";\nimport { useRectROI } from \"./roi/RectROI\";\nimport Toolbar from \"./Toolbar\";\n\n\nconst ClustAnalysis: React.SFC<CompoundAnalysisProps> = ({ compoundAnalysis, dataset }) => {\n    const { shape } = dataset.params;\n    const [scanHeight, scanWidth, imageHeight, imageWidth] = shape;\n    const minLength = Math.min(imageWidth, imageHeight);\n\n    const [cx, setCx] = useState(imageWidth / 2);\n    const [cy, setCy] = useState(imageHeight / 2);\n    const [ri, setRi] = useState(minLength / 4);\n    const [ro, setRo] = useState(minLength / 2);\n\n    const riHandle = {\n        x: cx - ri,\n        y: cy,\n    }\n    const roHandle = {\n        x: cx - ro,\n        y: cy,\n    }\n\n    const [minDist, setMinDist] = React.useState(1);\n\n    const minDistChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setMinDist(event.target.valueAsNumber);\n    }\n\n    const [nPeaks, setNPeaks] = React.useState(500);\n\n    const peakChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setNPeaks(event.target.valueAsNumber);\n    }\n\n    const [nClust, setNClust] = React.useState(20);\n\n    const clustChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setNClust(event.target.valueAsNumber);\n    }\n\n    const handleCenterChange = defaultDebounce((newCx: number, newCy: number) => {\n        setCx(newCx);\n        setCy(newCy);\n    });\n    const handleRIChange = defaultDebounce(setRi);\n    const handleROChange = defaultDebounce(setRo);\n\n    const frameViewHandles: HandleRenderFunction = (handleDragStart, handleDrop) => (<>\n        <DraggableHandle x={cx} y={cy}\n            imageWidth={imageWidth}\n            onDragMove={handleCenterChange}\n            parentOnDrop={handleDrop}\n            parentOnDragStart={handleDragStart}\n            constraint={inRectConstraint(imageWidth, imageHeight)} />\n        <DraggableHandle x={roHandle.x} y={roHandle.y}\n            imageWidth={imageWidth}\n            onDragMove={cbToRadius(cx, cy, handleROChange)}\n            parentOnDrop={handleDrop}\n            parentOnDragStart={handleDragStart}\n            constraint={roConstraints(riHandle.x, cy)} />\n        <DraggableHandle x={riHandle.x} y={riHandle.y}\n            imageWidth={imageWidth}\n            parentOnDrop={handleDrop}\n            parentOnDragStart={handleDragStart}\n            onDragMove={cbToRadius(cx, cy, handleRIChange)}\n            constraint={riConstraint(roHandle.x, cy)} />\n    </>);\n\n    const frameViewWidgets = (\n        <Ring cx={cx} cy={cy} ri={ri} ro={ro}\n            imageWidth={imageWidth} />\n    )\n\n    const dispatch = useDispatch();\n    const { rectRoiParameters, rectRoiHandles, rectRoiWidgets } = useRectROI({ scanWidth, scanHeight });\n\n    React.useEffect(() => {\n        if (compoundAnalysis.doAutoStart) {\n            dispatch(compoundAnalysisActions.Actions.run(compoundAnalysis.compoundAnalysis, 1, {\n                analysisType: AnalysisTypes.SUM_SIG,\n                parameters: {},\n            }))\n        }\n    }, [compoundAnalysis.compoundAnalysis, dispatch, compoundAnalysis.doAutoStart]);\n\n    const runAnalysis = () => {\n        dispatch(compoundAnalysisActions.Actions.run(compoundAnalysis.compoundAnalysis, 2, {\n            analysisType: AnalysisTypes.CLUST,\n            parameters: {\n                roi: rectRoiParameters.roi,\n                cx,\n                cy,\n                ri,\n                ro,\n                n_clust: nClust,\n                n_peaks: nPeaks,\n                min_dist: minDist\n            }\n        }));\n    };\n\n    const {\n        frameViewTitle, frameModeSelector,\n        handles: resultHandles,\n        widgets: resultWidgets,\n    } = useDefaultFrameView({\n        scanWidth,\n        scanHeight,\n        compoundAnalysisId: compoundAnalysis.compoundAnalysis,\n        doAutoStart: compoundAnalysis.doAutoStart,\n    })\n\n    const subtitle = (\n        <>{frameViewTitle} Ring: center=(x={cx.toFixed(2)}, y={cy.toFixed(2)}), ri={ri.toFixed(2)}, ro={ro.toFixed(2)}</>\n    )\n    const toolbar = <Toolbar compoundAnalysis={compoundAnalysis} onApply={runAnalysis} busyIdxs={[2]} />\n\n    const [paramsVisible, setParamsVisible] = React.useState(false);\n\n    const handleClick = (event: React.MouseEvent<HTMLDivElement>) => {\n        setParamsVisible(!paramsVisible);\n    }\n\n    const clustparams =\n        <Accordion>\n            <Accordion.Title active={paramsVisible} index={0} onClick={handleClick}>\n                <Icon name='dropdown' />\n                Parameters\n            </Accordion.Title>\n            <Accordion.Content active={paramsVisible}>\n                <Form>\n                    <Form.Field>\n                        <label> Number of clusters  <input type=\"number\" value={nClust} step=\"1\" min=\"2\" max=\"100\" onChange={clustChange} /> </label>\n                    </Form.Field>\n                    <Form.Field>\n                        <label>  Maximal number of possible peak positions to detect (better put higher value,\n        the output is limited to the number of peaks the algorithm could find)  <input type=\"number\" value={nPeaks} step=\"1\" min=\"5\" max=\"200\" onChange={peakChange} /> </label>\n                    </Form.Field>\n                    <Form.Field>\n                        <label>  Minimal distance in pixels between peaks  <input type=\"number\" value={minDist} step=\"1\" min=\"0\" max=\"100\" onChange={minDistChange} />  </label>\n                    </Form.Field>\n                </Form>\n            </Accordion.Content>\n        </Accordion>\n    return (\n        <AnalysisLayoutTwoRes\n            title=\"Region clustering\" subtitle={subtitle}\n            left={<>\n                <ResultList\n                    extraHandles={frameViewHandles} extraWidgets={frameViewWidgets}\n                    analysisIndex={0} compoundAnalysis={compoundAnalysis.compoundAnalysis}\n                    width={imageWidth} height={imageHeight}\n                    selectors={frameModeSelector}\n                />\n            </>}\n            mid={<>\n                <ResultList\n                    analysisIndex={1} compoundAnalysis={compoundAnalysis.compoundAnalysis}\n                    width={scanWidth} height={scanHeight}\n                    extraHandles={rectRoiHandles}\n                    extraWidgets={rectRoiWidgets}\n                />\n            </>}\n\n            right={<>\n                <ResultList\n                    analysisIndex={2} compoundAnalysis={compoundAnalysis.compoundAnalysis}\n                    width={scanWidth} height={scanHeight}\n                    extraHandles={resultHandles}\n                    extraWidgets={resultWidgets}\n                />\n            </>}\n            toolbar={toolbar}\n            clustparams={clustparams}\n\n            title1=\"Peaks inside the ring will be considered\"\n            title2=\"Choose specimen region\"\n            title3=\"Clustering result\"\n\n        />\n    );\n}\n\nexport default ClustAnalysis;","import * as React from \"react\";\nimport { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport ResultList from \"../../job/components/ResultList\";\nimport { AnalysisTypes } from \"../../messages\";\nimport { cbToRadius, inRectConstraint, keepOnCY } from \"../../widgets/constraints\";\nimport Disk from \"../../widgets/Disk\";\nimport DraggableHandle from \"../../widgets/DraggableHandle\";\nimport { HandleRenderFunction } from \"../../widgets/types\";\nimport * as compoundAnalysisActions from \"../actions\";\nimport { CompoundAnalysisProps } from \"../types\";\nimport useDefaultFrameView from \"./DefaultFrameView\";\nimport AnalysisLayoutTwoCol from \"./layouts/AnalysisLayoutTwoCol\";\nimport Toolbar from \"./Toolbar\";\n\nconst DiskMaskAnalysis: React.SFC<CompoundAnalysisProps> = ({ compoundAnalysis, dataset }) => {\n    const { shape } = dataset.params;\n    const [scanHeight, scanWidth, imageHeight, imageWidth] = shape;\n\n    const minLength = Math.min(imageWidth, imageHeight);\n    const [cx, setCx] = useState(imageWidth / 2);\n    const [cy, setCy] = useState(imageHeight / 2);\n    const [r, setR] = useState(minLength / 4);\n\n    const handleCenterChange = (newCx: number, newCy: number) => {\n        setCx(newCx);\n        setCy(newCy);\n    };\n    const handleRChange = setR;\n\n    const rHandle = {\n        x: cx - r,\n        y: cy,\n    }\n\n    const frameViewHandles: HandleRenderFunction = (handleDragStart, handleDrop) => (<>\n        <DraggableHandle x={cx} y={cy}\n            imageWidth={imageWidth}\n            onDragMove={handleCenterChange}\n            parentOnDragStart={handleDragStart}\n            parentOnDrop={handleDrop}\n            constraint={inRectConstraint(imageWidth, imageHeight)} />\n        <DraggableHandle x={rHandle.x} y={rHandle.y}\n            imageWidth={imageWidth}\n            onDragMove={cbToRadius(cx, cy, handleRChange)}\n            parentOnDragStart={handleDragStart}\n            parentOnDrop={handleDrop}\n            constraint={keepOnCY(cy)} />\n    </>);\n\n    const frameViewWidgets = (\n        <Disk cx={cx} cy={cy} r={r}\n            imageWidth={imageWidth} imageHeight={imageHeight}\n        />\n    );\n\n    const dispatch = useDispatch();\n\n    const runAnalysis = () => {\n        dispatch(compoundAnalysisActions.Actions.run(compoundAnalysis.compoundAnalysis, 1, {\n            analysisType: AnalysisTypes.APPLY_DISK_MASK,\n            parameters: {\n                shape: \"disk\",\n                cx, cy, r\n            }\n        }));\n    };\n\n    const {\n        frameViewTitle, frameModeSelector,\n        handles: resultHandles, widgets: resultWidgets,\n    } = useDefaultFrameView({\n        scanWidth,\n        scanHeight,\n        compoundAnalysisId: compoundAnalysis.compoundAnalysis,\n        doAutoStart: compoundAnalysis.doAutoStart,\n    });\n\n    const subtitle = <>{frameViewTitle} Disk: center=(x={cx.toFixed(2)}, y={cy.toFixed(2)}), r={r.toFixed(2)}</>;\n\n    const toolbar = <Toolbar compoundAnalysis={compoundAnalysis} onApply={runAnalysis} busyIdxs={[1]} />\n\n    return (\n        <AnalysisLayoutTwoCol\n            title=\"Disk analysis\" subtitle={subtitle}\n            left={<>\n                <ResultList\n                    extraHandles={frameViewHandles} extraWidgets={frameViewWidgets}\n                    analysisIndex={0} compoundAnalysis={compoundAnalysis.compoundAnalysis}\n                    width={imageWidth} height={imageHeight}\n                    selectors={frameModeSelector}\n                />\n            </>}\n            right={<>\n                <ResultList\n                    analysisIndex={1} compoundAnalysis={compoundAnalysis.compoundAnalysis}\n                    width={scanWidth} height={scanHeight}\n                    extraHandles={resultHandles}\n                    extraWidgets={resultWidgets}\n                />\n            </>}\n            toolbar={toolbar}\n        />\n    );\n}\n\nexport default DiskMaskAnalysis;","import * as React from \"react\";\nimport { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { defaultDebounce } from \"../../helpers\";\nimport ResultList from \"../../job/components/ResultList\";\nimport { AnalysisTypes } from \"../../messages\";\nimport { cbToRadius, inRectConstraint, riConstraint, roConstraints } from \"../../widgets/constraints\";\nimport DraggableHandle from \"../../widgets/DraggableHandle\";\nimport Ring from \"../../widgets/Ring\";\nimport { HandleRenderFunction } from \"../../widgets/types\";\nimport * as compoundAnalysisActions from \"../actions\";\nimport { CompoundAnalysisProps } from \"../types\";\nimport useDefaultFrameView from \"./DefaultFrameView\";\nimport AnalysisLayoutTwoCol from \"./layouts/AnalysisLayoutTwoCol\";\nimport Toolbar from \"./Toolbar\";\n\nconst FEMAnalysis: React.SFC<CompoundAnalysisProps> = ({ compoundAnalysis, dataset }) => {\n    const { shape } = dataset.params;\n    const [scanHeight, scanWidth, imageHeight, imageWidth] = shape;\n    const minLength = Math.min(imageWidth, imageHeight);\n\n    const [cx, setCx] = useState(imageWidth / 2);\n    const [cy, setCy] = useState(imageHeight / 2);\n    const [ri, setRi] = useState(minLength / 4);\n    const [ro, setRo] = useState(minLength / 2);\n\n    const riHandle = {\n        x: cx - ri,\n        y: cy,\n    }\n    const roHandle = {\n        x: cx - ro,\n        y: cy,\n    }\n\n    const handleCenterChange = defaultDebounce((newCx: number, newCy: number) => {\n        setCx(newCx);\n        setCy(newCy);\n    });\n    const handleRIChange = defaultDebounce(setRi);\n    const handleROChange = defaultDebounce(setRo);\n\n    const frameViewHandles: HandleRenderFunction = (handleDragStart, handleDrop) => (<>\n        <DraggableHandle x={cx} y={cy}\n            imageWidth={imageWidth}\n            onDragMove={handleCenterChange}\n            parentOnDrop={handleDrop}\n            parentOnDragStart={handleDragStart}\n            constraint={inRectConstraint(imageWidth, imageHeight)} />\n        <DraggableHandle x={roHandle.x} y={roHandle.y}\n            imageWidth={imageWidth}\n            onDragMove={cbToRadius(cx, cy, handleROChange)}\n            parentOnDrop={handleDrop}\n            parentOnDragStart={handleDragStart}\n            constraint={roConstraints(riHandle.x, cy)} />\n        <DraggableHandle x={riHandle.x} y={riHandle.y}\n            imageWidth={imageWidth}\n            parentOnDrop={handleDrop}\n            parentOnDragStart={handleDragStart}\n            onDragMove={cbToRadius(cx, cy, handleRIChange)}\n            constraint={riConstraint(roHandle.x, cy)} />\n    </>);\n\n    const frameViewWidgets = (\n        <Ring cx={cx} cy={cy} ri={ri} ro={ro}\n            imageWidth={imageWidth} />\n    )\n\n    const dispatch = useDispatch();\n\n    const runAnalysis = () => {\n        dispatch(compoundAnalysisActions.Actions.run(compoundAnalysis.compoundAnalysis, 1, {\n            analysisType: AnalysisTypes.FEM,\n            parameters: {\n                shape: \"ring\",\n                cx, cy, ri, ro,\n            }\n        }));\n    };\n\n    const {\n        frameViewTitle, frameModeSelector,\n        handles: resultHandles,\n        widgets: resultWidgets,\n    } = useDefaultFrameView({\n        scanWidth,\n        scanHeight,\n        compoundAnalysisId: compoundAnalysis.compoundAnalysis,\n        doAutoStart: compoundAnalysis.doAutoStart,\n    })\n\n    const subtitle = (\n        <>{frameViewTitle} Ring: center=(x={cx.toFixed(2)}, y={cy.toFixed(2)}), ri={ri.toFixed(2)}, ro={ro.toFixed(2)}</>\n    )\n\n    const toolbar = <Toolbar compoundAnalysis={compoundAnalysis} onApply={runAnalysis} busyIdxs={[1]} />\n\n    return (\n        <AnalysisLayoutTwoCol\n            title=\"Fluctuation EM (SD over Ring analysis)\" subtitle={subtitle}\n            left={<>\n                <ResultList\n                    extraHandles={frameViewHandles} extraWidgets={frameViewWidgets}\n                    analysisIndex={0} compoundAnalysis={compoundAnalysis.compoundAnalysis}\n                    width={imageWidth} height={imageHeight}\n                    selectors={frameModeSelector}\n                />\n            </>}\n            right={<>\n                <ResultList\n                    analysisIndex={1} compoundAnalysis={compoundAnalysis.compoundAnalysis}\n                    width={scanWidth} height={scanHeight}\n                    extraHandles={resultHandles}\n                    extraWidgets={resultWidgets}\n                />\n            </>}\n            toolbar={toolbar}\n        />\n    );\n}\n\nexport default FEMAnalysis;","import React from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { AnalysisTypes } from \"../../messages\";\nimport { inRectConstraint } from \"../../widgets/constraints\";\nimport DraggableHandle from \"../../widgets/DraggableHandle\";\nimport { HandleRenderFunction } from \"../../widgets/types\";\nimport * as compoundAnalysisActions from \"../actions\";\n\nconst useFFTFramePicker = ({\n    enabled, scanWidth, scanHeight, analysisIndex, compoundAnalysisId,\n    cx, cy, real_rad, real_centerx, real_centery, setCx, setCy\n}: {\n    enabled: boolean, scanWidth: number, scanHeight: number,\n    analysisIndex: number, compoundAnalysisId: string,\n    cx: number, cy: number, setCx: (newCx: number) => void, setCy: (newCy: number) => void,\n    real_rad: number | null, real_centerx: number | null, real_centery: number | null\n}) => {\n\n    const dispatch = useDispatch();\n\n    React.useEffect(() => {\n        if (enabled) {\n            dispatch(compoundAnalysisActions.Actions.run(compoundAnalysisId, analysisIndex, {\n                analysisType: AnalysisTypes.PICK_FFT_FRAME,\n                parameters: { x: cx, y: cy, real_rad, real_centerx, real_centery },\n            }));\n        }\n    }, [compoundAnalysisId, cx, cy, enabled, analysisIndex, real_rad, real_centerx, real_centery, dispatch]);\n\n    const onPickChange = (pickX: number, pickY: number) => {\n        const newX = Math.round(pickX);\n        const newY = Math.round(pickY);\n        if (cx === newX && cy === newY) {\n            return;\n        }\n        setCx(newX);\n        setCy(newY);\n    }\n\n    const renderPickHandle: HandleRenderFunction = (onDragStart, onDrop) => (\n        <DraggableHandle x={cx} y={cy} withCross={true}\n            imageWidth={scanWidth}\n            onDragMove={onPickChange}\n            parentOnDragStart={onDragStart}\n            parentOnDrop={onDrop}\n            constraint={inRectConstraint(scanWidth, scanHeight)} />\n    )\n\n    return { coords: { cx, cy }, handles: renderPickHandle };\n}\n\nexport default useFFTFramePicker;","import React from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { AnalysisTypes } from \"../../messages\";\nimport * as analysisActions from \"../actions\";\n\nconst useFFTSumFrames = ({\n    enabled, analysisIndex: jobIndex, compoundAnalysisId: analysisId, real_rad, real_centerx, real_centery\n}: {\n    enabled: boolean, analysisIndex: number, compoundAnalysisId: string, real_rad: number | null, real_centerx: number | null, real_centery: number | null\n}) => {\n    const dispatch = useDispatch();\n\n    React.useEffect(() => {\n        if (enabled) {\n            dispatch(analysisActions.Actions.run(analysisId, jobIndex, {\n                analysisType: AnalysisTypes.FFTSUM_FRAMES,\n                parameters: { real_rad, real_centerx, real_centery },\n            }));\n        }\n    }, [analysisId, enabled, jobIndex, real_rad, real_centerx, real_centery, dispatch]);\n};\n\nexport default useFFTSumFrames;\n","import * as React from \"react\";\nimport { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { AnalysisTypes } from \"../../messages\";\nimport { HandleRenderFunction } from \"../../widgets/types\";\nimport * as compoundAnalysisActions from \"../actions\";\nimport useFFTFramePicker from \"./FFTFramePicker\";\nimport useFFTSumFrames from \"./FFTSumFrames\";\nimport useFramePicker from \"./FramePicker\";\nimport ModeSelector from \"./ModeSelector\";\nimport { useRoiPicker } from \"./roi/RoiPicker\";\n\nconst useFFTFrameView = ({\n    scanWidth, scanHeight, compoundAnalysisId, real_rad, real_centerx,\n    real_centery, doAutoStart,\n}: {\n    scanWidth: number, scanHeight: number, compoundAnalysisId: string,\n    real_rad: number | null, real_centerx: number | null, real_centery: number | null,\n    doAutoStart: boolean,\n}) => {\n    const availableModes = [\n        {\n            text: \"Pick\",\n            value: AnalysisTypes.PICK_FRAME,\n        },\n        {\n            text: \"Average\",\n            value: AnalysisTypes.SUM_FRAMES,\n        },\n    ];\n\n    const [frameMode, setMode] = useState(AnalysisTypes.SUM_FRAMES);\n\n    const dispatch = useDispatch();\n\n    const updateMode = (newMode: AnalysisTypes) => {\n        dispatch(compoundAnalysisActions.Actions.enableAutoStart(compoundAnalysisId));\n        setMode(newMode);\n    }\n\n    const frameModeSelector = <ModeSelector modes={availableModes} currentMode={frameMode} onModeChange={updateMode} label=\"Mode\" />\n\n    const [cx, setCx] = React.useState(Math.round(scanWidth / 2));\n    const [cy, setCy] = React.useState(Math.round(scanHeight / 2));\n\n    const { coords: pickCoords, handles: pickHandles } = useFramePicker({\n        enabled: frameMode === AnalysisTypes.PICK_FRAME && doAutoStart,\n        scanWidth, scanHeight,\n        analysisIndex: 1,\n        compoundAnalysisId,\n        cx, cy, setCx, setCy\n    });\n\n    useFFTFramePicker({\n        enabled: frameMode === AnalysisTypes.PICK_FRAME && doAutoStart,\n        scanWidth, scanHeight,\n        analysisIndex: 0,\n        compoundAnalysisId,\n        cx, cy, setCx, setCy, real_rad, real_centerx, real_centery\n    });\n\n    useRoiPicker({\n        enabled: frameMode === AnalysisTypes.SUM_FRAMES && doAutoStart,\n        analysisIndex: 1,\n        compoundAnalysisId,\n        scanWidth, scanHeight,\n        roiParameters: { roi: {} },\n        analysisType: AnalysisTypes.SUM_FRAMES,\n    })\n    useFFTSumFrames({\n        enabled: frameMode === AnalysisTypes.SUM_FRAMES && doAutoStart,\n        analysisIndex: 0,\n        compoundAnalysisId,\n        real_rad,\n        real_centerx,\n        real_centery\n    })\n\n    const frameViewTitle = (\n        frameMode !== AnalysisTypes.PICK_FRAME ? null : <>Pick: x={pickCoords.cx}, y={pickCoords.cy} &emsp;</>\n    )\n\n    const nullHandles: HandleRenderFunction = (onDragStart, onDrop) => null\n\n    return {\n        frameViewTitle,\n        handles: frameMode !== AnalysisTypes.PICK_FRAME ? nullHandles : pickHandles,\n\n        frameModeSelector,\n    }\n}\n\nexport default useFFTFrameView;","import * as React from \"react\";\nimport { Grid, Header, Icon, Segment } from \"semantic-ui-react\";\n\ninterface AnalysisLayoutThreeColProps {\n    title: string,\n    subtitle: React.ReactNode,\n    left: React.ReactNode,\n    mid: React.ReactNode,\n    right: React.ReactNode,\n    toolbar?: React.ReactNode,\n    title1: string,\n    title2: React.ReactNode,\n    title3: string,\n}\n\ntype MergedProps = AnalysisLayoutThreeColProps;\n\nconst AnalysisLayoutThreeCol: React.SFC<MergedProps> = ({\n    title, subtitle,\n    left, mid, right,\n    toolbar, title1, title2, title3\n}) => {\n    return (\n        <>\n            <Header as='h3' attached=\"top\">\n                <Icon name=\"cog\" />\n                <Header.Content>{title}</Header.Content>\n            </Header>\n            <Segment attached={true}>\n                <Grid columns={3}>\n                    <Grid.Row>\n                        <Grid.Column width={5}>\n                            <p>{title1}</p>\n                        </Grid.Column>\n\n                        <Grid.Column width={5}>\n                            <p>{title2}</p>\n                        </Grid.Column>\n\n                        <Grid.Column width={6}>\n                            <p>{title3}</p>\n                        </Grid.Column>\n                    </Grid.Row>\n\n                    <Grid.Row>\n                        <Grid.Column width={5}>\n                            {left}\n                        </Grid.Column>\n\n                        <Grid.Column width={5}>\n                            {mid}\n                        </Grid.Column>\n\n                        <Grid.Column width={6}>\n                            {right}\n                        </Grid.Column>\n\n                    </Grid.Row>\n\n                    <Grid.Row>\n                        <Grid.Column width={10}>\n                            <p>{subtitle}</p>\n                        </Grid.Column>\n\n                        <Grid.Column width={6} />\n                    </Grid.Row>\n                </Grid>\n            </Segment>\n            {toolbar}\n        </>\n    )\n}\n\nexport default AnalysisLayoutThreeCol","import * as React from \"react\";\nimport { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { defaultDebounce } from \"../../helpers\";\nimport ResultList from \"../../job/components/ResultList\";\nimport { AnalysisTypes } from \"../../messages\";\nimport { cbToRadius, inRectConstraint, keepOnCY, riConstraint, roConstraints } from \"../../widgets/constraints\";\nimport Disk from \"../../widgets/Disk\";\nimport DraggableHandle from \"../../widgets/DraggableHandle\";\nimport Ring from \"../../widgets/Ring\";\nimport { HandleRenderFunction } from \"../../widgets/types\";\nimport * as compoundAnalysisActions from \"../actions\";\nimport { CompoundAnalysisProps } from \"../types\";\nimport useFFTFrameView from \"./FFTFrameView\";\nimport AnalysisLayoutThreeCol from \"./layouts/AnalysisLayoutThreeCol\";\nimport Toolbar from \"./Toolbar\";\n\n\nconst FFTAnalysis: React.SFC<CompoundAnalysisProps> = ({ compoundAnalysis, dataset }) => {\n    const { shape } = dataset.params;\n    const [scanHeight, scanWidth, imageHeight, imageWidth] = shape;\n    const minLength = Math.min(imageWidth, imageHeight);\n\n    const cx = imageWidth / 2;\n    const cy = imageHeight / 2;\n    const [radIn, setRi] = useState(minLength / 4);\n    const [radOut, setRo] = useState(minLength / 2);\n\n    const dispatch = useDispatch();\n    const riHandle = {\n        x: cx - radIn,\n        y: cy,\n    }\n    const roHandle = {\n        x: cx - radOut,\n        y: cy,\n    }\n\n\n    const handleRIChange = defaultDebounce(setRi);\n    const handleROChange = defaultDebounce(setRo);\n\n    const frameViewHandlesfft: HandleRenderFunction = (handleDragStart, handleDrop) => (<>\n\n        <DraggableHandle x={roHandle.x} y={roHandle.y}\n            imageWidth={imageWidth}\n            onDragMove={cbToRadius(cx, cy, handleROChange)}\n            parentOnDrop={handleDrop}\n            parentOnDragStart={handleDragStart}\n            constraint={roConstraints(riHandle.x, cy)} />\n        <DraggableHandle x={riHandle.x} y={riHandle.y}\n            imageWidth={imageWidth}\n            parentOnDrop={handleDrop}\n            parentOnDragStart={handleDragStart}\n            onDragMove={cbToRadius(cx, cy, handleRIChange)}\n            constraint={riConstraint(roHandle.x, cy)} />\n    </>);\n\n    const frameViewWidgetsfft = (\n        <Ring cx={cx} cy={cy} ri={radIn} ro={radOut}\n            imageWidth={imageWidth} />\n    )\n\n    const [check, setCheck] = React.useState(true);\n\n    const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        dispatch(compoundAnalysisActions.Actions.enableAutoStart(compoundAnalysis.compoundAnalysis));\n        setCheck(event.target.checked);\n    }\n\n    const [realCenterX, setCx] = useState(imageWidth / 2);\n    const [realCenterY, setCy] = useState(imageHeight / 2);\n    const [realRad, setR] = useState(minLength / 4);\n\n    const handleCenterChange = defaultDebounce((newCx: number, newCy: number) => {\n        dispatch(compoundAnalysisActions.Actions.enableAutoStart(compoundAnalysis.compoundAnalysis));\n        setCx(newCx);\n        setCy(newCy);\n    });\n    const handleRChange = defaultDebounce(setR);\n\n    const rHandle = {\n        x: realCenterX - realRad,\n        y: realCenterY,\n    }\n\n    const frameViewHandlesreal: HandleRenderFunction = (handleDragStart, handleDrop) => (<>\n        <DraggableHandle x={realCenterX} y={realCenterY}\n            imageWidth={imageWidth}\n            onDragMove={handleCenterChange}\n            parentOnDragStart={handleDragStart}\n            parentOnDrop={handleDrop}\n            constraint={inRectConstraint(imageWidth, imageHeight)} />\n        <DraggableHandle x={rHandle.x} y={rHandle.y}\n            imageWidth={imageWidth}\n            onDragMove={cbToRadius(realCenterX, realCenterY, handleRChange)}\n            parentOnDragStart={handleDragStart}\n            parentOnDrop={handleDrop}\n            constraint={keepOnCY(realCenterY)} />\n    </>);\n\n    const frameViewWidgetsreal = (\n        <Disk cx={realCenterX} cy={realCenterY} r={realRad}\n            imageWidth={imageWidth} imageHeight={imageHeight}\n        />\n    );\n\n    const runAnalysis = () => {\n        dispatch(compoundAnalysisActions.Actions.run(compoundAnalysis.compoundAnalysis, 2, {\n            analysisType: AnalysisTypes.APPLY_FFT_MASK,\n            parameters: {\n                rad_in: radIn,\n                rad_out: radOut,\n                real_rad: check ? realRad : null,\n                real_centerx: check ? realCenterX : null,\n                real_centery: check ? realCenterY : null\n            }\n        }));\n    };\n\n    const { frameViewTitle, frameModeSelector, handles: resultHandles } = useFFTFrameView({\n        scanWidth,\n        scanHeight,\n        compoundAnalysisId: compoundAnalysis.compoundAnalysis,\n        real_rad: check ? realRad : null,\n        real_centerx: check ? realCenterX : null,\n        real_centery: check ? realCenterY : null,\n        doAutoStart: compoundAnalysis.doAutoStart,\n    });\n\n    const toolbar = <Toolbar compoundAnalysis={compoundAnalysis} onApply={runAnalysis} busyIdxs={[2]} />\n\n    let subtitle;\n    let mid: React.ReactNode;\n    if (check) {\n        mid = (<>\n            <ResultList\n                extraHandles={frameViewHandlesreal} extraWidgets={frameViewWidgetsreal}\n                analysisIndex={1} compoundAnalysis={compoundAnalysis.compoundAnalysis}\n                width={imageWidth} height={imageHeight}\n                selectors={frameModeSelector}\n            />\n        </>)\n        subtitle = (\n            <>{frameViewTitle} real_rad={radIn.toFixed(2)}, real_center=(x={realCenterX.toFixed(2)}, y={realCenterY.toFixed(2)}), fourier_rad_in={radIn.toFixed(2)}, fourier_rad_out={radOut.toFixed(2)}</>\n        )\n    }\n    else {\n        mid = (<>\n            <ResultList\n                analysisIndex={1} compoundAnalysis={compoundAnalysis.compoundAnalysis}\n                width={imageWidth} height={imageHeight}\n                selectors={frameModeSelector}\n            />\n        </>)\n        subtitle = (\n            <>{frameViewTitle} fourier_rad_in={radIn.toFixed(2)}, fourier_rad_out={radOut.toFixed(2)}</>\n        )\n    }\n\n\n    return (\n        <AnalysisLayoutThreeCol\n            title=\"FFT analysis\" subtitle={subtitle}\n            left={<>\n                <ResultList\n                    extraHandles={frameViewHandlesfft} extraWidgets={frameViewWidgetsfft}\n                    analysisIndex={0} compoundAnalysis={compoundAnalysis.compoundAnalysis}\n                    width={imageWidth} height={imageHeight}\n                />\n            </>}\n            mid={mid}\n\n            right={<>\n                <ResultList\n                    analysisIndex={2} compoundAnalysis={compoundAnalysis.compoundAnalysis}\n                    width={scanWidth} height={scanHeight}\n                    extraHandles={resultHandles}\n                />\n            </>}\n            toolbar={toolbar}\n\n            title2={<><label> Masking out of zero order diffraction peak <input type=\"checkbox\" name=\"check\" onChange={handleChange} checked={check} /> </label>\n            </>}\n            title1=\"Masking of intergation region in Fourier space\"\n            title3=\"Result of analysis\"\n\n        />\n    );\n}\n\n\nexport default FFTAnalysis;","import * as React from \"react\";\nimport { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { defaultDebounce } from \"../../helpers\";\nimport ResultList from \"../../job/components/ResultList\";\nimport { AnalysisTypes } from \"../../messages\";\nimport { inRectConstraint } from \"../../widgets/constraints\";\nimport DraggableHandle from \"../../widgets/DraggableHandle\";\nimport { HandleRenderFunction } from \"../../widgets/types\";\nimport * as analysisActions from \"../actions\";\nimport { CompoundAnalysisProps } from \"../types\";\nimport useDefaultFrameView from \"./DefaultFrameView\";\nimport AnalysisLayoutTwoCol from \"./layouts/AnalysisLayoutTwoCol\";\nimport Toolbar from \"./Toolbar\";\n\n\nconst PointSelectionAnalysis: React.SFC<CompoundAnalysisProps> = ({ compoundAnalysis, dataset, }) => {\n    const { shape } = dataset.params;\n    const [scanHeight, scanWidth, imageHeight, imageWidth] = shape;\n\n    const [cx, setCx] = useState(imageWidth / 2);\n    const [cy, setCy] = useState(imageHeight / 2);\n    const handleCenterChange = defaultDebounce((newCx: number, newCy: number) => {\n        setCx(newCx);\n        setCy(newCy);\n    });\n\n    const frameViewHandles: HandleRenderFunction = (handleDragStart, handleDrop) => (<>\n        <DraggableHandle x={cx} y={cy} withCross={true}\n            onDragMove={handleCenterChange}\n            imageWidth={imageWidth}\n            parentOnDragStart={handleDragStart}\n            parentOnDrop={handleDrop}\n            constraint={inRectConstraint(imageWidth, imageHeight)} />\n    </>);\n\n    const {\n        frameViewTitle, frameModeSelector,\n        handles: resultHandles,\n        widgets: resultWidgets,\n    } = useDefaultFrameView({\n        scanWidth,\n        scanHeight,\n        compoundAnalysisId: compoundAnalysis.compoundAnalysis,\n        doAutoStart: compoundAnalysis.doAutoStart,\n    })\n\n    const subtitle = (\n        <>{frameViewTitle} Point: center=(x={cx.toFixed(2)}, y={cy.toFixed(2)})</>\n    )\n\n    const dispatch = useDispatch();\n\n    const runAnalysis = () => {\n        dispatch(analysisActions.Actions.run(compoundAnalysis.compoundAnalysis, 1, {\n            analysisType: AnalysisTypes.APPLY_POINT_SELECTOR,\n            parameters: {\n                shape: \"point\",\n                cx,\n                cy,\n            }\n        }));\n    };\n\n    const toolbar = <Toolbar compoundAnalysis={compoundAnalysis} onApply={runAnalysis} busyIdxs={[1]} />\n\n    return (\n        <AnalysisLayoutTwoCol\n            title=\"Point analysis\" subtitle={subtitle}\n            left={<>\n                <ResultList\n                    extraHandles={frameViewHandles}\n                    analysisIndex={0} compoundAnalysis={compoundAnalysis.compoundAnalysis}\n                    width={imageWidth} height={imageHeight}\n                    selectors={frameModeSelector}\n                />\n            </>}\n            right={<>\n                <ResultList\n                    analysisIndex={1} compoundAnalysis={compoundAnalysis.compoundAnalysis}\n                    width={scanWidth} height={scanHeight}\n                    extraHandles={resultHandles}\n                    extraWidgets={resultWidgets}\n                />\n            </>}\n            toolbar={toolbar}\n        />\n    );\n}\n\nexport default PointSelectionAnalysis;","import * as React from \"react\";\nimport { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { defaultDebounce } from \"../../helpers\";\nimport ResultList from \"../../job/components/ResultList\";\nimport { AnalysisTypes } from \"../../messages\";\nimport { cbToRadius, inRectConstraint, riConstraint, roConstraints } from \"../../widgets/constraints\";\nimport DraggableHandle from \"../../widgets/DraggableHandle\";\nimport Ring from \"../../widgets/Ring\";\nimport { HandleRenderFunction } from \"../../widgets/types\";\nimport * as analysisActions from \"../actions\";\nimport { CompoundAnalysisProps } from \"../types\";\nimport useDefaultFrameView from \"./DefaultFrameView\";\nimport AnalysisLayoutTwoCol from \"./layouts/AnalysisLayoutTwoCol\";\nimport Toolbar from \"./Toolbar\";\n\nconst RadialFourierAnalysis: React.SFC<CompoundAnalysisProps> = ({ compoundAnalysis, dataset }) => {\n    const { shape } = dataset.params;\n    const [scanHeight, scanWidth, imageHeight, imageWidth] = shape;\n\n    const minLength = Math.min(imageWidth, imageHeight);\n    const [cx, setCx] = useState(imageWidth / 2);\n    const [cy, setCy] = useState(imageHeight / 2);\n    const [ri, setRi] = useState(minLength / 4);\n    const [ro, setRo] = useState(minLength / 2);\n    const [nBins] = useState(1);\n    const [maxOrder] = useState(8);\n\n    const riHandle = {\n        x: cx - ri,\n        y: cy,\n    }\n    const roHandle = {\n        x: cx - ro,\n        y: cy,\n    }\n\n    const handleCenterChange = defaultDebounce((newCx: number, newCy: number) => {\n        setCx(newCx);\n        setCy(newCy);\n    });\n    const handleRIChange = defaultDebounce(setRi);\n    const handleROChange = defaultDebounce(setRo);\n\n    const frameViewHandles: HandleRenderFunction = (handleDragStart, handleDrop) => (<>\n        <DraggableHandle x={cx} y={cy}\n            imageWidth={imageWidth}\n            onDragMove={handleCenterChange}\n            parentOnDrop={handleDrop}\n            parentOnDragStart={handleDragStart}\n            constraint={inRectConstraint(imageWidth, imageHeight)} />\n        <DraggableHandle x={roHandle.x} y={roHandle.y}\n            imageWidth={imageWidth}\n            onDragMove={cbToRadius(cx, cy, handleROChange)}\n            parentOnDrop={handleDrop}\n            parentOnDragStart={handleDragStart}\n            constraint={roConstraints(riHandle.x, cy)} />\n        <DraggableHandle x={riHandle.x} y={riHandle.y}\n            imageWidth={imageWidth}\n            parentOnDrop={handleDrop}\n            parentOnDragStart={handleDragStart}\n            onDragMove={cbToRadius(cx, cy, handleRIChange)}\n            constraint={riConstraint(roHandle.x, cy)} />\n    </>);\n\n    const frameViewWidgets = (\n        <Ring cx={cx} cy={cy} ri={ri} ro={ro}\n            imageWidth={imageWidth} />\n    )\n\n    const {\n        frameViewTitle, frameModeSelector,\n        handles: resultHandles,\n        widgets: resultWidgets,\n    } = useDefaultFrameView({\n        scanWidth,\n        scanHeight,\n        compoundAnalysisId: compoundAnalysis.compoundAnalysis,\n        doAutoStart: compoundAnalysis.doAutoStart,\n    })\n\n    const subtitle = (\n        <>{frameViewTitle} Ring: center=(x={cx.toFixed(2)}, y={cy.toFixed(2)}), ri={ri.toFixed(2)}, ro={ro.toFixed(2)}</>\n    )\n\n    const dispatch = useDispatch();\n\n    const runAnalysis = () => {\n        dispatch(analysisActions.Actions.run(compoundAnalysis.compoundAnalysis, 1, {\n            analysisType: AnalysisTypes.RADIAL_FOURIER,\n            parameters: {\n                shape: \"radial_fourier\",\n                cx, cy, ri, ro,\n                n_bins: nBins,\n                max_order: maxOrder,\n            }\n        }));\n    };\n\n    const toolbar = <Toolbar compoundAnalysis={compoundAnalysis} onApply={runAnalysis} busyIdxs={[1]} />\n\n    return (\n        <AnalysisLayoutTwoCol\n            title=\"Radial Fourier analysis\" subtitle={subtitle}\n            left={<>\n                <ResultList\n                    extraHandles={frameViewHandles} extraWidgets={frameViewWidgets}\n                    analysisIndex={0} compoundAnalysis={compoundAnalysis.compoundAnalysis}\n                    width={imageWidth} height={imageHeight}\n                    selectors={frameModeSelector}\n                />\n            </>}\n            right={<>\n                <ResultList\n                    analysisIndex={1} compoundAnalysis={compoundAnalysis.compoundAnalysis}\n                    width={scanWidth} height={scanHeight}\n                    extraHandles={resultHandles}\n                    extraWidgets={resultWidgets}\n                />\n            </>}\n            toolbar={toolbar}\n        />\n    );\n}\n\nexport default RadialFourierAnalysis;","import * as React from \"react\";\nimport { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { defaultDebounce } from \"../../helpers\";\nimport ResultList from \"../../job/components/ResultList\";\nimport { AnalysisTypes } from \"../../messages\";\nimport { cbToRadius, inRectConstraint, riConstraint, roConstraints } from \"../../widgets/constraints\";\nimport DraggableHandle from \"../../widgets/DraggableHandle\";\nimport Ring from \"../../widgets/Ring\";\nimport { HandleRenderFunction } from \"../../widgets/types\";\nimport * as analysisActions from \"../actions\";\nimport { CompoundAnalysisProps } from \"../types\";\nimport useDefaultFrameView from \"./DefaultFrameView\";\nimport AnalysisLayoutTwoCol from \"./layouts/AnalysisLayoutTwoCol\";\nimport Toolbar from \"./Toolbar\";\n\nconst RingMaskAnalysis: React.SFC<CompoundAnalysisProps> = ({ compoundAnalysis, dataset }) => {\n    const { shape } = dataset.params;\n    const [scanHeight, scanWidth, imageHeight, imageWidth] = shape;\n    const minLength = Math.min(imageWidth, imageHeight);\n\n    const [cx, setCx] = useState(imageWidth / 2);\n    const [cy, setCy] = useState(imageHeight / 2);\n    const [ri, setRi] = useState(minLength / 4);\n    const [ro, setRo] = useState(minLength / 2);\n\n    const riHandle = {\n        x: cx - ri,\n        y: cy,\n    }\n    const roHandle = {\n        x: cx - ro,\n        y: cy,\n    }\n\n    const handleCenterChange = defaultDebounce((newCx: number, newCy: number) => {\n        setCx(newCx);\n        setCy(newCy);\n    });\n    const handleRIChange = defaultDebounce(setRi);\n    const handleROChange = defaultDebounce(setRo);\n\n    const frameViewHandles: HandleRenderFunction = (handleDragStart, handleDrop) => (<>\n        <DraggableHandle x={cx} y={cy}\n            imageWidth={imageWidth}\n            onDragMove={handleCenterChange}\n            parentOnDrop={handleDrop}\n            parentOnDragStart={handleDragStart}\n            constraint={inRectConstraint(imageWidth, imageHeight)} />\n        <DraggableHandle x={roHandle.x} y={roHandle.y}\n            imageWidth={imageWidth}\n            onDragMove={cbToRadius(cx, cy, handleROChange)}\n            parentOnDrop={handleDrop}\n            parentOnDragStart={handleDragStart}\n            constraint={roConstraints(riHandle.x, cy)} />\n        <DraggableHandle x={riHandle.x} y={riHandle.y}\n            imageWidth={imageWidth}\n            parentOnDrop={handleDrop}\n            parentOnDragStart={handleDragStart}\n            onDragMove={cbToRadius(cx, cy, handleRIChange)}\n            constraint={riConstraint(roHandle.x, cy)} />\n    </>);\n\n    const frameViewWidgets = (\n        <Ring cx={cx} cy={cy} ri={ri} ro={ro}\n            imageWidth={imageWidth} />\n    )\n\n    const dispatch = useDispatch();\n\n    const runAnalysis = () => {\n        dispatch(analysisActions.Actions.run(compoundAnalysis.compoundAnalysis, 1, {\n            analysisType: AnalysisTypes.APPLY_RING_MASK,\n            parameters: {\n                shape: \"ring\",\n                cx, cy, ri, ro,\n            }\n        }));\n    };\n\n    const {\n        frameViewTitle, frameModeSelector,\n        handles: resultHandles,\n        widgets: resultWidgets,\n    } = useDefaultFrameView({\n        scanWidth,\n        scanHeight,\n        compoundAnalysisId: compoundAnalysis.compoundAnalysis,\n        doAutoStart: compoundAnalysis.doAutoStart,\n    })\n\n    const subtitle = (\n        <>{frameViewTitle} Ring: center=(x={cx.toFixed(2)}, y={cy.toFixed(2)}), ri={ri.toFixed(2)}, ro={ro.toFixed(2)}</>\n    )\n\n    const toolbar = <Toolbar compoundAnalysis={compoundAnalysis} onApply={runAnalysis} busyIdxs={[1]} />\n\n    return (\n        <AnalysisLayoutTwoCol\n            title=\"Ring analysis\" subtitle={subtitle}\n            left={<>\n                <ResultList\n                    extraHandles={frameViewHandles} extraWidgets={frameViewWidgets}\n                    analysisIndex={0} compoundAnalysis={compoundAnalysis.compoundAnalysis}\n                    width={imageWidth} height={imageHeight}\n                    selectors={frameModeSelector}\n                />\n            </>}\n            right={<>\n                <ResultList\n                    analysisIndex={1} compoundAnalysis={compoundAnalysis.compoundAnalysis}\n                    width={scanWidth} height={scanHeight}\n                    extraHandles={resultHandles}\n                    extraWidgets={resultWidgets}\n                />\n            </>}\n            toolbar={toolbar}\n        />\n    );\n}\n\nexport default RingMaskAnalysis;","import { AnalysisTypes, DatasetOpen, PickFrameDetails, SumFramesDetails } from \"../messages\";\nimport CenterOfMassAnalysis from \"./components/CenterOfMassAnalysis\";\nimport ClustAnalysis from \"./components/Clustering\";\nimport DiskMaskAnalysis from \"./components/DiskMaskAnalysis\";\nimport FEM from \"./components/FEM\";\nimport FFTAnalysis from \"./components/FFTAnalysis\";\nimport PointSelectionAnalysis from \"./components/PointSelectionAnalysis\";\nimport RadialFourierAnalysis from \"./components/RadialFourierAnalysis\";\nimport RingMaskAnalysis from \"./components/RingMaskAnalysis\";\n\n\nexport type CompoundAnalysisStatus = \"busy\" | \"idle\";\n\nexport type JobHistory = string[][];\n\nexport type FrameAnalysisDetails = PickFrameDetails | SumFramesDetails;\n\nexport interface CompoundAnalysis {\n    compoundAnalysis: string,\n    dataset: string,\n    details: {\n        mainType: AnalysisTypes,\n        analyses: string[],\n    }\n}\n\n\n/**\n * CompoundAnalysisProps is the interface you should implement with your\n * CompoundAnalysis, as a functional component. For example:\n * \n * const MyAnalysis: React.FunctionalComponent<CompoundAnalysisProps> = ({ analysis, dataset }) = { ... }\n * \n */\n\nexport type CompoundAnalysisState = CompoundAnalysis & {\n    doAutoStart: boolean,\n};\n\nexport interface CompoundAnalysisProps {\n    compoundAnalysis: CompoundAnalysisState,\n    dataset: DatasetOpen,\n}\n\nexport interface CompoundAnalysisMetadataItem {\n    desc: string,\n    title: string,\n    component?: React.FunctionComponent<CompoundAnalysisProps>,\n}\n\n\n/**\n * list of all analyses; those having a component will be available for selection in the UI\n * \n * please fill in a title and description, and reference your component.\n */\nexport const CompoundAnalysisMetadata: { [s: string]: CompoundAnalysisMetadataItem } = {\n    [AnalysisTypes.APPLY_RING_MASK]: {\n        desc: \"Application of a ring mask\",\n        title: \"Ring\",\n        component: RingMaskAnalysis,\n    },\n    [AnalysisTypes.APPLY_DISK_MASK]: {\n        desc: \"Application of a disk mask\",\n        title: \"Disk\",\n        component: DiskMaskAnalysis,\n    },\n    [AnalysisTypes.FEM]: {\n        desc: \"Application of a ring mask\",\n        title: \"FEM (SD over Ring)\",\n        component: FEM,\n    },\n    [AnalysisTypes.CENTER_OF_MASS]: {\n        desc: \"The center of mass of all diffraction images\",\n        title: \"Center of mass\",\n        component: CenterOfMassAnalysis,\n    },\n    [AnalysisTypes.APPLY_POINT_SELECTOR]: {\n        desc: \"Image from a single pixel selected in the detector\",\n        title: \"Point selection\",\n        component: PointSelectionAnalysis,\n    },\n    [AnalysisTypes.SUM_FRAMES]: {\n        desc: \"A sum of all (or selected) detector frames\",\n        title: \"Sum all frames\",\n    },\n    [AnalysisTypes.SD_FRAMES]: {\n        desc: \"A SD of all (or selected) detector frames\",\n        title: \"SD all frames\",\n    },\n    [AnalysisTypes.PICK_FRAME]: {\n        desc: \"A single picked frame\",\n        title: \"Pick frame\",\n    },\n    [AnalysisTypes.PICK_FFT_FRAME]: {\n        desc: \"Fourier transform of a picked frame\",\n        title: \"Pick frame\",\n    },\n    [AnalysisTypes.APPLY_FFT_MASK]: {\n        desc: \"Application of a ring mask in Fourier space\",\n        title: \"FFT analysis\",\n        component: FFTAnalysis\n    },\n    [AnalysisTypes.FFTSUM_FRAMES]: {\n        desc: \"Fourier transform of sum of all detector frames\",\n        title: \"FFT of Sum all frames\",\n    },\n    [AnalysisTypes.RADIAL_FOURIER]: {\n        desc: \"Radial Fourier analysis over the selected ring\",\n        title: \"Radial Fourier\",\n        component: RadialFourierAnalysis,\n    },\n    [AnalysisTypes.CLUST]: {\n        desc: \"Region clustering based on non-zero order diffraction peaks positions\",\n        title: \"Clustering\",\n        component: ClustAnalysis,\n    },\n    [AnalysisTypes.SUM_SIG]: {\n        desc: \"Frame integration\",\n        title: \"Sum\",\n    },\n}","import * as React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { DatasetStatus } from \"../../../messages\";\nimport { RootReducer } from \"../../../store\";\nimport { CompoundAnalysisMetadata, CompoundAnalysisState } from \"../../types\";\n\ninterface AnalysisDispatcherProps {\n    analysis: CompoundAnalysisState,\n}\n\nconst AnalysisDispatcherComponent: React.SFC<AnalysisDispatcherProps> = ({ analysis }) => {\n    const dataset = useSelector((state: RootReducer) => state.datasets.byId[analysis.dataset])\n\n    if (dataset.status !== DatasetStatus.OPEN) {\n        return null;\n    }\n\n    const AnalysisComponent = CompoundAnalysisMetadata[analysis.details.mainType].component;\n    if (!AnalysisComponent) {\n        throw new Error(\"unknown analysis type\");\n    }\n\n    return <AnalysisComponent dataset={dataset} compoundAnalysis={analysis} />;\n}\n\nexport default AnalysisDispatcherComponent;","import * as React from \"react\";\nimport { CompoundAnalysisReducerState } from \"../../reducers\";\nimport Analysis from \"./Analysis\";\n\ninterface AnalysisProps {\n    analyses: CompoundAnalysisReducerState,\n}\n\nconst AnalysisList: React.SFC<AnalysisProps> = ({ analyses }) => {\n    return (<>{\n        analyses.ids.map(analysisId => <Analysis key={analysisId} analysis={analyses.byId[analysisId]} />)\n    }</>);\n}\n\nexport default AnalysisList;","// tslint:disable-next-line:ban-types\ntype ImmutablePrimitive = undefined | null | boolean | string | number | Function;\n\nexport type Immutable<T> =\n    T extends ImmutablePrimitive ? T :\n    T extends Array<infer U> ? ImmutableArray<U> :\n    T extends Map<infer K, infer V> ? ImmutableMap<K, V> :\n    T extends Set<infer M> ? ImmutableSet<M> : ImmutableObject<T>;\n\nexport type ImmutableArray<T> = ReadonlyArray<Immutable<T>>;\nexport type ImmutableMap<K, V> = ReadonlyMap<Immutable<K>, Immutable<V>>;\nexport type ImmutableSet<T> = ReadonlySet<Immutable<T>>;\nexport type ImmutableObject<T> = { readonly [K in keyof T]: Immutable<T[K]> };\n\n\ntype DeepReadonly<T> =\n    T extends Array<infer R> ? DeepReadonlyArray<R> :\n    // tslint:disable-next-line:ban-types\n    T extends Function ? T :\n    T extends object ? DeepReadonlyObject<T> :\n    T;\n\ninterface DeepReadonlyArray<T> extends ReadonlyArray<DeepReadonly<T>> { }\n\ntype DeepReadonlyObject<T> = {\n    readonly [P in keyof T]: DeepReadonly<T[P]>;\n};\n\ninterface IdMap<R> {\n    [s: string]: R\n}\n\nexport interface ById<R> {\n    ids: string[],\n    byId: IdMap<R>,\n};\n\nexport type ByIdReadOnly<R> = DeepReadonly<ById<R>>;\n\nexport function updateById<R>(state: ById<R>, id: string, partialRecord: Partial<R>): ById<R> {\n    const newObj = Object.assign({}, state.byId[id], partialRecord);\n    const newById = Object.assign({}, state.byId, { [id]: newObj });\n    return Object.assign({}, state, { byId: newById });\n}\n\nexport function insertById<R>(state: ById<R>, id: string, record: R): ById<R> {\n    const newById = Object.assign({}, state.byId, { [id]: record });\n    const newIds = [...state.ids, id];\n    return { byId: newById, ids: newIds };\n}\n\nexport function constructById<R>(items: R[], key: (k: R) => string): IdMap<R> {\n    const byId = items.reduce((acc, item) => Object.assign(acc, {\n        [key(item)]: item,\n    }), {} as IdMap<R>);\n    return byId;\n}\n\nexport type Predicate<R> = (item: R) => boolean;\n\nexport function filterWithPred<R>(state: ById<R>, pred: Predicate<R>): ById<R> {\n    const ids: string[] = state.ids.filter(id => pred(state.byId[id]));\n    const byId: IdMap<R> = ids.reduce((acc, id) => Object.assign(acc, {\n        [id]: state.byId[id],\n    }), {});\n    return {\n        byId,\n        ids,\n    };\n}\n\nexport function filterWithPredReadOnly<R>(state: ByIdReadOnly<R>, pred: Predicate<DeepReadonly<R>>): ByIdReadOnly<R> {\n    const ids: DeepReadonly<string[]> = state.ids.filter(id => pred(state.byId[id]));\n    const byId: DeepReadonly<IdMap<R>> = ids.reduce((acc, id) => Object.assign(acc, {\n        [id]: state.byId[id],\n    }), {});\n    return {\n        byId,\n        ids,\n    };\n}","import * as React from \"react\";\nimport { Dropdown, DropdownItemProps } from \"semantic-ui-react\";\nimport { getEnumValues } from \"../../../helpers\";\nimport { AnalysisTypes } from \"../../../messages\";\nimport { getMetadata } from \"../../getMetadata\";\n\nconst analysisTypeKeys = getEnumValues(AnalysisTypes);\nconst analysisTypeOptions = analysisTypeKeys.filter(t => getMetadata(t).component !== undefined).map(t => ({\n    text: getMetadata(t).title,\n    value: AnalysisTypes[t],\n}));\n\ninterface AnalysisSelectProps {\n    onClick: (analysisType: AnalysisTypes) => void,\n    label: string,\n}\n\nconst selectData = (fn: (v: AnalysisTypes) => void) => (e: React.MouseEvent, data: DropdownItemProps) => {\n    return fn(data.value as AnalysisTypes);\n}\n\nconst AnalysisSelect: React.SFC<AnalysisSelectProps> = ({ onClick, label }) => {\n    return (\n        <Dropdown text={label} icon='add' floating={true} labeled={true} button={true} className='icon'>\n            <Dropdown.Menu>\n                <Dropdown.Header content='implemented analyses' />\n                {analysisTypeOptions.map(option => <Dropdown.Item key={option.value} onClick={selectData(onClick)} {...option} />)}\n            </Dropdown.Menu>\n        </Dropdown>\n    );\n}\n\nexport default AnalysisSelect;","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport * as compoundAnalysisActions from \"../../compoundAnalysis/actions\";\nimport AnalysisSelect from \"../../compoundAnalysis/components/base/AnalysisSelect\";\nimport { AnalysisTypes, DatasetState } from \"../../messages\";\n\ninterface DatasetProps {\n    dataset: DatasetState\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch, ownProps: DatasetProps) => {\n    return {\n        handleAddAnalysis: (type: AnalysisTypes) => {\n            dispatch(compoundAnalysisActions.Actions.create(ownProps.dataset.id, type));\n        },\n    }\n}\ntype MergedProps = DatasetProps & ReturnType<typeof mapDispatchToProps>;\n\nconst AddAnalysis: React.SFC<MergedProps> = ({ handleAddAnalysis }) => {\n    return <AnalysisSelect onClick={handleAddAnalysis} label='Add analysis' />\n}\n\n\nexport default connect(null, mapDispatchToProps)(AddAnalysis);","import { genericDelete, genericPut, getApiBasePath } from \"../helpers/apiHelpers\";\nimport { DataSetOpenSchemaResponse, DeleteDatasetResponse, DetectDatasetResponse, OpenDatasetRequest, OpenDatasetResponse } from \"../messages\";\n\nexport async function openDataset(id: string, dataset: OpenDatasetRequest): Promise<OpenDatasetResponse> {\n    return await genericPut(`datasets/${id}/`, dataset);\n}\n\nexport async function deleteDataset(id: string): Promise<DeleteDatasetResponse> {\n    return await genericDelete(`datasets/${id}/`);\n}\n\n\nexport async function detectDataset(path: string): Promise<DetectDatasetResponse> {\n    const basePath = getApiBasePath();\n    const r = await fetch(`${basePath}datasets/detect/?path=${encodeURIComponent(path)}`, {\n        credentials: \"same-origin\",\n        method: \"GET\",\n    });\n    return await r.json();\n}\n\ninterface SchemaCache {\n    [type: string]: DataSetOpenSchemaResponse,\n}\n\nconst schemaCache: SchemaCache = {};\n\nexport async function getSchema(type: string): Promise<DataSetOpenSchemaResponse> {\n    const basePath = getApiBasePath();\n    const cached = schemaCache[type];\n    if (cached) {\n        return new Promise((resolve) => resolve(cached));\n    } else {\n        const r = await fetch(`${basePath}datasets/schema/?type=${encodeURIComponent(type)}`, {\n            credentials: \"same-origin\",\n            method: \"GET\",\n        });\n        const schemaResponse = await r.json();\n        schemaCache[type] = schemaResponse;\n        return schemaResponse;\n    }\n}","import Ajv, { ErrorObject } from 'ajv';\nimport { FormikErrors, FormikValues } from 'formik';\nimport { DataSetOpenSchemaResponse } from '../messages';\nimport { getSchema } from './api';\n\nexport function convertErrors(errors: ErrorObject[]): FormikErrors<FormikValues> {\n    const res: FormikErrors<FormikValues> = {};\n    errors.forEach(err => {\n        // flatten field names, convert from array to object\n        // FIXME: doesn't support multiple errors per field yet (formik limitation?)\n        const expr = /^\\.([^[]+)(\\[[^]+\\])?$/\n        const fieldName = err.dataPath.replace(expr, (match, plainName) => {\n            return plainName;\n        });\n        res[fieldName] = err.message;\n    });\n    return res;\n}\n\nexport async function validateOpen(type: string, data: object) {\n    return getSchema(type).then((schemaResponse: DataSetOpenSchemaResponse) => {\n        if (schemaResponse.status === \"error\") {\n            throw new Error(schemaResponse.msg);\n        }\n        // FIXME: cache compiled schema\n        const schema = schemaResponse.schema;\n        const ajv = new Ajv();\n        const validate = ajv.compile(schema);\n        const valid = validate(data);\n        if (!valid) {\n            if (validate.errors) {\n                const converted = convertErrors(validate.errors);\n                throw converted;\n            } else {\n                throw new Error(\"unspecified error while validating fields\");\n            }\n        }\n    })\n}","import { withFormik } from \"formik\";\nimport * as pathfind from 'path';\nimport { AdditionalInfo, DatasetTypes } from \"../messages\";\nimport { OpenFormProps } from \"./types\";\nimport { validateOpen } from \"./validate\";\n\nexport function parseNumList(nums: string) {\n    return nums.split(\",\").filter(part => part.trim() !== \"\").map(part => +part);\n}\n\nexport function getInitial<T extends object, K extends keyof T, V>(key: K, otherwise: V, values?: T): V | T[K] {\n    if (!values) {\n        return otherwise;\n    }\n    const res = values[key] !== undefined ? values[key] : otherwise;\n    return res;\n}\n\nexport function getInitialName<T extends object, K extends keyof T>(key: K, otherwise: string, values?: T): string | T[K] {\n    if (!values) {\n        return pathfind.basename(otherwise);\n    }\n    const res = values[key] !== undefined ? values[key] : pathfind.basename(otherwise);\n    return res;\n}\n\nexport function isKnownDatasetType(detectedType: string) {\n  return (Object.keys(DatasetTypes).some((v) => v === detectedType) ? true : false);\n}\n\nexport function isAdditionalInfo(param: string) {\n  return (Object.keys(AdditionalInfo).some((v) => v === param) ? true : false);\n}\n\nexport function hasKey<O>(obj: O, key: keyof any): key is keyof O {\n  return key in obj\n}\n\ntype FormToJsonFn<SubmitParams, FormParams> = (inParams: FormParams, path: string) => SubmitParams;\ntype PropsToValuesFn<SubmitParams, FormParams> = (props: OpenFormProps<SubmitParams>) => FormParams;\n\ninterface WithValidationOpts<SubmitParams extends object, FormParams> {\n    formToJson: FormToJsonFn<SubmitParams, FormParams>,\n    mapPropsToValues: PropsToValuesFn<SubmitParams, FormParams>,\n    type: DatasetTypes,\n    // WrappedComponent: React.FunctionComponent<FormikProps<FormParams> & OpenFormProps<SubmitParams>>\n}\n\nexport function withValidation<SubmitParams extends object, FormParams>(\n    opts: WithValidationOpts<SubmitParams, FormParams>\n) {\n    return withFormik<OpenFormProps<SubmitParams>, FormParams>({\n        mapPropsToValues: opts.mapPropsToValues,\n        handleSubmit: (values, formikBag) => {\n            const { onSubmit, path } = formikBag.props;\n            const submitData = opts.formToJson(values, path);\n            onSubmit(submitData);\n            formikBag.setSubmitting(false);\n        },\n        validate: (values, props) => {\n            return validateOpen(opts.type, opts.formToJson(values, props.path));\n        },\n        enableReinitialize: true,\n        validateOnChange: true,\n        validateOnBlur: true,\n    });\n}\n","import * as React from \"react\";\nimport { Table } from \"semantic-ui-react\";\nimport { DatasetState } from \"../../messages\";\nimport { isAdditionalInfo } from \"../helpers\";\n\ninterface DatasetProps {\n    dataset: DatasetState\n}\n\nconst renderParamValue = (value: any) => {\n    if (value instanceof Array) {\n        return `(${value.join(\",\")})`;\n    } else {\n        return value;\n    }\n}\n\nconst renderParams = (params: any) => {\n    return Object.keys(params).map((key: string, idx: number) => {\n        // Only show parameters, not additional info\n        if(!isAdditionalInfo(key)) {\n            return (\n                <Table.Row key={idx}>\n                    <Table.Cell>{key}</Table.Cell>\n                    <Table.Cell>{renderParamValue(params[key])}</Table.Cell>\n                </Table.Row>\n            );\n        }\n        else {\n          return null;\n        }\n    })\n}\n\n\nconst DatasetParams: React.SFC<DatasetProps> = ({ dataset }) => {\n    return (\n        <Table>\n            <Table.Header>\n                <Table.Row>\n                    <Table.HeaderCell>Parameter</Table.HeaderCell>\n                    <Table.HeaderCell>Value</Table.HeaderCell>\n                </Table.Row>\n            </Table.Header>\n            <Table.Body>\n                {renderParams(dataset.params)}\n            </Table.Body>\n        </Table>\n    );\n}\n\n\nexport default DatasetParams;\n","import { ActionsUnion, createAction } from '../helpers/actionHelpers';\nimport { DatasetCreateParams, DatasetFormParams, DatasetState } from '../messages';\n\nexport enum ActionTypes {\n    OPEN = 'DATASET_OPEN',\n    CANCEL_OPEN = 'DATASET_CANCEL_OPEN',\n    CREATE = 'DATASET_CREATE',\n    CREATED = 'DATASET_CREATED',\n    ERROR = 'DATASET_ERROR',\n    DELETE = 'DATASET_DELETE',\n    DELETED = 'DATASET_DELETED',\n    DETECT = 'DATASET_DETECT',\n    DETECTED = 'DATASET_DETECTED',\n    DETECT_FAILED = 'DATASET_DETECT_FAILED',\n}\n\nexport const Actions = {\n    open: (path: string, cachedParams?: DatasetFormParams, detectedParams?: DatasetFormParams) => createAction(ActionTypes.OPEN, { path, cachedParams, detectedParams }),\n    cancelOpen: () => createAction(ActionTypes.CANCEL_OPEN),\n    create: (dataset: DatasetCreateParams) => createAction(ActionTypes.CREATE, { dataset }),\n    created: (dataset: DatasetState) => createAction(ActionTypes.CREATED, { dataset }),\n    error: (dataset: string, msg: string, timestamp: number, id: string) => createAction(ActionTypes.ERROR, { dataset, msg, timestamp, id }),\n    delete: (dataset: string) => createAction(ActionTypes.DELETE, { dataset }),\n    deleted: (dataset: string) => createAction(ActionTypes.DELETED, { dataset }),\n    detect: (path: string) => createAction(ActionTypes.DETECT, { path }),\n    detected: (path: string, params: DatasetFormParams) => createAction(ActionTypes.DETECTED, { path, params }),\n    detectFailed: (path: string) => createAction(ActionTypes.DETECT_FAILED, { path }),\n}\n\nexport type Actions = ActionsUnion<typeof Actions>;\n","import * as React from \"react\";\nimport { Table } from \"semantic-ui-react\";\nimport { DatasetOpen, DiagElemMsg } from \"../../messages\";\nimport DatasetParams from \"./DatasetParams\";\n\ninterface DatasetInfoProps {\n    dataset: DatasetOpen,\n}\n\nconst renderValue = (elem: DiagElemMsg) => {\n    if (elem.value instanceof Array) {\n        return <DiagElems diagnostics={elem.value} />\n    } else {\n        return elem.value;\n    }\n}\n\nconst DiagElem: React.SFC<{ elem: DiagElemMsg }> = ({ elem }) => {\n    return (\n        <Table.Row>\n            <Table.Cell>{elem.name}</Table.Cell>\n            <Table.Cell>{renderValue(elem)}</Table.Cell>\n        </Table.Row>\n    )\n}\n\nconst DiagElems: React.SFC<{ diagnostics: DiagElemMsg[] }> = ({ diagnostics }) => {\n    if (diagnostics.length === 0) {\n        return null;\n    }\n    return (\n        <Table>\n            <Table.Header>\n                <Table.Row>\n                    <Table.HeaderCell>Name</Table.HeaderCell>\n                    <Table.HeaderCell>Value</Table.HeaderCell>\n                </Table.Row>\n            </Table.Header>\n            <Table.Body>\n                {diagnostics.map((elem, idx) => (\n                    <DiagElem elem={elem} key={idx} />\n                ))}\n            </Table.Body>\n        </Table>\n    );\n}\n\nconst DatasetInfo: React.SFC<DatasetInfoProps> = ({ dataset }) => {\n    return (\n        <>\n            <DatasetParams dataset={dataset} />\n            <DiagElems diagnostics={dataset.diagnostics} />\n        </>\n    );\n}\n\nexport default DatasetInfo;","import { ActionsUnion, createAction } from \"../helpers/actionHelpers\";\n\nexport enum ActionTypes {\n    DISMISS = \"ERROR_DISMISS\",\n    DISMISS_ALL = \"ERROR_DISMISS_ALL\",\n}\n\nexport const Actions = {\n    dismiss: (id: string) => createAction(ActionTypes.DISMISS, { id }),\n    dismissAll: () => createAction(ActionTypes.DISMISS_ALL),\n}\n\nexport type Actions = ActionsUnion<typeof Actions>;","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { Button } from \"semantic-ui-react\";\nimport { DatasetState } from \"../../messages\";\nimport * as datasetActions from \"../actions\";\n\ninterface DatasetProps {\n    dataset: DatasetState,\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch, ownProps: DatasetProps) => {\n    return {\n        handleRemoveDataset: () => {\n            dispatch(datasetActions.Actions.delete(ownProps.dataset.id));\n        }\n    }\n}\n\ntype MergedProps = DatasetProps & ReturnType<typeof mapDispatchToProps>;\n\nconst DatasetToolbar: React.SFC<MergedProps> = ({ dataset, handleRemoveDataset }) => {\n    return (\n        <>\n            <Button icon=\"remove\" labelPosition=\"left\" onClick={handleRemoveDataset} content='Close Dataset' />\n        </>\n    );\n}\n\n\nexport default connect(null, mapDispatchToProps)(DatasetToolbar);","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Header, Icon, Message, Modal, Popup, Segment } from 'semantic-ui-react';\nimport AnalysisList from \"../../compoundAnalysis/components/base/AnalysisList\";\nimport { CompoundAnalysisState } from \"../../compoundAnalysis/types\";\nimport { filterWithPred, Immutable, Predicate } from \"../../helpers/reducerHelpers\";\nimport { DatasetState, DatasetStatus } from \"../../messages\";\nimport { RootReducer } from \"../../store\";\nimport AddAnalysis from \"./AddAnalysis\";\nimport DatasetInfo from \"./DatasetInfo\";\nimport DatasetToolbar from \"./DatasetToolbar\";\n\ninterface DatasetProps {\n    dataset: DatasetState\n}\n\nconst mapStateToProps = (state: RootReducer, ownProps: DatasetProps) => {\n    const p: Predicate<Immutable<CompoundAnalysisState>> = (analysis: Immutable<CompoundAnalysisState>) => analysis.dataset === ownProps.dataset.id;\n    return {\n        analyses: filterWithPred(state.compoundAnalyses, p),\n    }\n}\n\ntype MergedProps = DatasetProps & ReturnType<typeof mapStateToProps>;\n\nconst DatasetComponent: React.SFC<MergedProps> = ({ dataset, analyses }) => {\n    const msg = {\n        [DatasetStatus.OPENING]: `Opening dataset ${dataset.params.name}`,\n        [DatasetStatus.DELETING]: `Closing dataset ${dataset.params.name}`,\n    }\n    if (dataset.status === DatasetStatus.OPENING || dataset.status === DatasetStatus.DELETING) {\n        return (\n            <>\n                <Header as=\"h2\" dividing={true}>{dataset.params.name}</Header>\n                <Message icon={true}>\n                    <Icon name='cog' loading={true} />\n                    <Message.Content>\n                        <Message.Header>{msg[dataset.status]}</Message.Header>\n                    </Message.Content>\n                </Message>\n            </>\n        );\n    }\n\n    return (\n        <Segment.Group style={{ marginTop: \"3em\", marginBottom: \"3em\" }}>\n            <Segment.Group horizontal={true}>\n                <Segment>\n                    <Header as=\"h2\">\n                        <Icon name=\"database\" />\n                        <Modal trigger={\n                            <Header.Content>\n                                {dataset.params.name}\n                                {' '}\n                                <Icon name=\"info circle\" size=\"small\" link={true} />\n                            </Header.Content>\n                        }>\n                            <Popup.Header>{dataset.params.type} Dataset {dataset.params.name}</Popup.Header>\n                            <Popup.Content>\n                                <DatasetInfo dataset={dataset} />\n                            </Popup.Content>\n                        </Modal>\n                    </Header>\n                </Segment>\n                <Segment style={{ flexShrink: 1, flexGrow: 0 }}>\n                    <DatasetToolbar dataset={dataset} />\n                </Segment>\n            </Segment.Group>\n            {\n                analyses.ids.length > 0 ? (\n                    <>\n                        <Segment>\n                            <AnalysisList analyses={analyses} />\n                        </Segment>\n                    </>\n                ) : null\n            }\n            <Segment textAlign=\"center\">\n                <AddAnalysis dataset={dataset} />\n            </Segment>\n        </Segment.Group>\n    );\n}\n\nconst DatasetContainer = connect(mapStateToProps)(DatasetComponent);\n\nexport default DatasetContainer;","import { ErrorMessage, Field, FormikProps } from \"formik\";\nimport * as React from \"react\";\nimport { Button, Form } from \"semantic-ui-react\";\nimport { Omit } from \"../../helpers/types\";\nimport { DatasetParamsBLO, DatasetTypes } from \"../../messages\";\nimport { getInitial, getInitialName, parseNumList, withValidation } from \"../helpers\";\nimport { OpenFormProps } from \"../types\";\n\n// some fields have different types in the form vs. in messages\ntype DatasetParamsBLOForForm = Omit<DatasetParamsBLO,\n    \"path\"\n    | \"type\"\n    | \"tileshape\"> & {\n        tileshape: string,\n    };\n\ntype MergedProps = FormikProps<DatasetParamsBLOForForm> & OpenFormProps<DatasetParamsBLO>;\n\nconst BLOFileParamsForm: React.SFC<MergedProps> = ({\n    values,\n    touched,\n    errors,\n    dirty,\n    isSubmitting,\n    handleChange,\n    handleBlur,\n    handleSubmit,\n    handleReset,\n    isValidating,\n    onCancel,\n}) => {\n    return (\n        <Form onSubmit={handleSubmit}>\n            <Form.Field>\n                <label htmlFor=\"id_name\">Name:</label>\n                <ErrorMessage name=\"name\" />\n                <Field name=\"name\" id=\"id_name\" />\n            </Form.Field>\n            <Form.Field>\n                <label htmlFor=\"id_tileshape\">Tileshape:</label>\n                <ErrorMessage name=\"tileshape\" />\n                <Field name=\"tileshape\" id=\"id_tileshape\" />\n            </Form.Field>\n\n            <Button primary={true} type=\"submit\" disabled={isSubmitting || isValidating}>Load Dataset</Button>\n            <Button type=\"button\" onClick={onCancel}>Cancel</Button>\n            <Button type=\"button\" onClick={handleReset}>Reset</Button>\n        </Form>\n    )\n}\n\nexport default withValidation<DatasetParamsBLO, DatasetParamsBLOForForm>({\n    mapPropsToValues: ({path, initial }) => ({\n        name: getInitialName(\"name\",path,initial),\n        tileshape: getInitial(\"tileshape\", \"1, 8, 128, 128\", initial).toString(),\n    }),\n    formToJson: (values, path) => {\n        return {\n            path,\n            type: DatasetTypes.BLO,\n            name: values.name,\n            tileshape: parseNumList(values.tileshape),\n        };\n    },\n    type: DatasetTypes.BLO,\n})(BLOFileParamsForm);\n","import * as React from \"react\";\nimport { Dropdown, DropdownProps } from \"semantic-ui-react\";\nimport { getEnumValues } from \"../../helpers\";\nimport { DatasetTypes } from \"../../messages\";\n\n\nconst datasetTypeKeys = getEnumValues(DatasetTypes);\nconst datasetTypeOptions = datasetTypeKeys.map(t => ({\n    // text: DatasetTypeMetadata[DatasetTypes[t as any]].short,\n    text: DatasetTypes[t],\n    value: DatasetTypes[t],\n}));\n\ninterface DatasetTypeSelectProps {\n    onClick: (e: React.SyntheticEvent, data: DropdownProps) => void,\n    currentType: DatasetTypes,\n}\n\nconst DatasetTypeSelect: React.SFC<DatasetTypeSelectProps> = ({ currentType, onClick }) => {\n    return (\n        <>\n            <Dropdown\n                inline={true}\n                options={datasetTypeOptions}\n                value={currentType}\n                onChange={onClick}\n            />\n        </>\n    );\n}\n\nexport default DatasetTypeSelect;","import { ErrorMessage, Field, FormikProps } from \"formik\";\nimport * as React from \"react\";\nimport { Button, Form } from \"semantic-ui-react\";\nimport { Omit } from \"../../helpers/types\";\nimport { DatasetParamsEMPAD, DatasetTypes } from \"../../messages\";\nimport { getInitial, getInitialName, parseNumList, withValidation } from \"../helpers\";\nimport { OpenFormProps } from \"../types\";\n\n// some fields have different types in the form vs. in messages\ntype DatasetParamsEMPADForForm = Omit<DatasetParamsEMPAD,\n    \"path\"\n    | \"type\"\n    | \"scan_size\"\n> & {\n    scan_size: string,\n};\n\ntype MergedProps = FormikProps<DatasetParamsEMPADForForm> & OpenFormProps<DatasetParamsEMPAD>;\n\nconst EMPADParamsForm: React.SFC<MergedProps> = ({\n    values,\n    touched,\n    errors,\n    dirty,\n    isSubmitting,\n    handleChange,\n    handleBlur,\n    handleSubmit,\n    handleReset,\n    onCancel,\n}) => {\n    return (\n        <Form onSubmit={handleSubmit}>\n            <Form.Field>\n                <label htmlFor=\"id_name\">Name:</label>\n                <ErrorMessage name=\"name\" />\n                <Field name=\"name\" id=\"id_name\" />\n            </Form.Field>\n            <Form.Field>\n                <label htmlFor=\"id_scan_size\">Scan Size:</label>\n                <ErrorMessage name=\"scan_size\" />\n                <Field name=\"scan_size\" id=\"id_scan_size\" />\n            </Form.Field>\n            <Button primary={true} type=\"submit\" disabled={isSubmitting}>Load Dataset</Button>\n            <Button type=\"button\" onClick={onCancel}>Cancel</Button>\n            <Button type=\"button\" onClick={handleReset}>Reset</Button>\n        </Form>\n    )\n}\n\nexport default withValidation<DatasetParamsEMPAD, DatasetParamsEMPADForForm>({\n    mapPropsToValues: ({path, initial }) => ({\n        name: getInitialName(\"name\",path,initial),\n        scan_size: getInitial(\"scan_size\", \"\", initial).toString(),\n    }),\n    formToJson: (values, path) => {\n        return {\n            path,\n            type: DatasetTypes.EMPAD,\n            name: values.name,\n            scan_size: parseNumList(values.scan_size),\n        };\n    },\n    type: DatasetTypes.EMPAD,\n})(EMPADParamsForm);\n","import { ErrorMessage, Field, FormikProps } from \"formik\";\nimport * as React from \"react\";\nimport { Button, Form } from \"semantic-ui-react\";\nimport { Omit } from \"../../helpers/types\";\nimport { DatasetParamsFRMS6, DatasetTypes } from \"../../messages\";\nimport { getInitialName, withValidation } from \"../helpers\";\nimport { OpenFormProps } from \"../types\";\n\n// some fields have different types in the form vs. in messages\ntype DatasetParamsFRMS6ForForm = Omit<DatasetParamsFRMS6,\n    \"path\" | \"type\">;\n\ntype MergedProps = FormikProps<DatasetParamsFRMS6ForForm> & OpenFormProps<DatasetParamsFRMS6>;\nconst FRMS6ParamsForm: React.SFC<MergedProps> = ({\n    values,\n    touched,\n    errors,\n    dirty,\n    isSubmitting,\n    handleChange,\n    handleBlur,\n    handleSubmit,\n    handleReset,\n    onCancel,\n}) => {\n    return (\n        <Form onSubmit={handleSubmit}>\n            <Form.Field>\n                <label htmlFor=\"id_name\">Name:</label>\n                <ErrorMessage name=\"name\" />\n                <Field name=\"name\" id=\"id_name\" />\n            </Form.Field>\n\n            <Button primary={true} type=\"submit\" disabled={isSubmitting}>Load Dataset</Button>\n            <Button type=\"button\" onClick={onCancel}>Cancel</Button>\n            <Button type=\"button\" onClick={handleReset}>Reset</Button>\n        </Form>\n    )\n}\n\nexport default withValidation<DatasetParamsFRMS6, DatasetParamsFRMS6ForForm>({\n    mapPropsToValues: ({ path, initial }) => ({\n        name: getInitialName(\"name\",path,initial),\n    }),\n    formToJson: (values, path) => {\n        return {\n            path,\n            type: DatasetTypes.FRMS6,\n            name: values.name,\n        };\n    },\n    type: DatasetTypes.FRMS6,\n})(FRMS6ParamsForm);\n","import { ErrorMessage, Field, FormikProps } from \"formik\";\nimport * as React from \"react\";\nimport { Button, Dropdown, DropdownProps, Form } from \"semantic-ui-react\";\nimport { Omit } from \"../../helpers/types\";\nimport { DatasetParamsHDF5, DatasetTypes } from \"../../messages\";\nimport { getInitial, getInitialName, parseNumList, withValidation } from \"../helpers\";\nimport { OpenFormProps } from \"../types\";\n\ntype DatasetParamsHDF5ForForm = Omit<DatasetParamsHDF5, \"path\" | \"type\" | \"tileshape\"> & { tileshape: string, };\n\ntype MergedProps = FormikProps<DatasetParamsHDF5ForForm> & OpenFormProps<DatasetParamsHDF5>;\n\nconst HDF5ParamsForm: React.SFC<MergedProps> = ({\n    values,\n    touched,\n    errors,\n    dirty,\n    isSubmitting,\n    handleChange,\n    handleBlur,\n    handleSubmit,\n    handleReset,\n    onCancel,\n    setFieldValue,\n}) => {\n\n    const dsPathOptions = values.dataset_paths.map(dsPath => ({ key: dsPath, text: dsPath, value: dsPath }));\n\n    // semantic-ui requires value to be set manually on option selection\n    const onDSPathChange = (e: React.SyntheticEvent, result: DropdownProps) => {\n      const { value } = result;\n      if (value) {\n        setFieldValue(\"ds_path\", value.toString());\n      }\n    };\n\n    let dsPathInput;\n    const isTimeOut = (values.dataset_paths.length === 0 ) ? true : false;\n    if (isTimeOut) {\n      dsPathInput = <Field name=\"ds_path\" id=\"id_ds_path\" />;\n    } else {\n      dsPathInput = <Dropdown name=\"ds_path\" id=\"id_ds_path\" placeholder=\"Select dataset\" fluid={true} search={true} selection={true} defaultValue={values.ds_path} onChange={onDSPathChange} options={dsPathOptions} />;\n    }\n\n    return (\n        <Form onSubmit={handleSubmit}>\n            <Form.Field>\n                <label htmlFor=\"id_name\">Name:</label>\n                <ErrorMessage name=\"name\" />\n                <Field name=\"name\" id=\"id_name\" />\n            </Form.Field>\n            <Form.Field>\n                <label htmlFor=\"id_ds_path\">HDF5 Dataset Path:</label>\n                <ErrorMessage name=\"ds_path\" />\n                {dsPathInput}\n            </Form.Field>\n            <Form.Field>\n                <label htmlFor=\"id_tileshape\">Tileshape:</label>\n                <ErrorMessage name=\"tileshape\" />\n                <Field name=\"tileshape\" id=\"id_tileshape\" />\n            </Form.Field>\n            <Button primary={true} type=\"submit\" disabled={isSubmitting}>Load Dataset</Button>\n            <Button onClick={onCancel} >Cancel</Button>\n            <Button type=\"button\" onClick={handleReset}>Reset</Button>\n        </Form>\n    )\n}\n\nexport default withValidation<DatasetParamsHDF5, DatasetParamsHDF5ForForm>({\n    mapPropsToValues: ({path, initial }) => ({\n        name: getInitialName(\"name\",path,initial),\n        dataset_paths: getInitial(\"dataset_paths\", [], initial),\n        tileshape: getInitial(\"tileshape\", \"1, 8, 128, 128\", initial).toString(),\n        ds_path: getInitial(\"ds_path\", \"\", initial),\n    }),\n    formToJson: (values, path) => {\n        return {\n            path,\n            type: DatasetTypes.HDF5,\n            name: values.name,\n            ds_path: values.ds_path,\n            dataset_paths: values.dataset_paths,\n            tileshape: parseNumList(values.tileshape),\n        };\n    },\n    type: DatasetTypes.HDF5,\n})(HDF5ParamsForm);\n","import { ErrorMessage, Field, FormikProps } from \"formik\";\nimport * as React from \"react\";\nimport { Button, Form } from \"semantic-ui-react\";\nimport { Omit } from \"../../helpers/types\";\nimport { DatasetParamsK2IS, DatasetTypes } from \"../../messages\";\nimport { getInitialName, withValidation } from \"../helpers\";\nimport { OpenFormProps } from \"../types\";\n\n// some fields have different types in the form vs. in messages\ntype DatasetParamsK2ISForForm = Omit<DatasetParamsK2IS,\n    \"path\" | \"type\">;\n\ntype MergedProps = FormikProps<DatasetParamsK2ISForForm> & OpenFormProps<DatasetParamsK2IS>;\n\nconst K2ISFileParamsForm: React.SFC<MergedProps> = ({\n    values,\n    touched,\n    errors,\n    dirty,\n    isSubmitting,\n    handleChange,\n    handleBlur,\n    handleSubmit,\n    handleReset,\n    onCancel,\n}) => {\n    return (\n        <Form onSubmit={handleSubmit}>\n            <Form.Field>\n                <label htmlFor=\"id_name\">Name:</label>\n                <ErrorMessage name=\"name\" />\n                <Field name=\"name\" id=\"id_name\" />\n            </Form.Field>\n\n            <Button primary={true} type=\"submit\" disabled={isSubmitting}>Load Dataset</Button>\n            <Button type=\"button\" onClick={onCancel}>Cancel</Button>\n            <Button type=\"button\" onClick={handleReset}>Reset</Button>\n        </Form>\n    )\n}\n\nexport default withValidation<DatasetParamsK2IS, DatasetParamsK2ISForForm>({\n    mapPropsToValues: ({path, initial }) => ({\n        name: getInitialName(\"name\",path,initial),\n    }),\n    formToJson: (values, path) => {\n        return {\n            path,\n            type: DatasetTypes.K2IS,\n            name: values.name,\n        }\n    },\n    type: DatasetTypes.K2IS,\n})(K2ISFileParamsForm);\n","import { ErrorMessage, Field, FormikProps } from \"formik\";\nimport * as React from \"react\";\nimport { Button, Form } from \"semantic-ui-react\";\nimport { Omit } from \"../../helpers/types\";\nimport { DatasetParamsMIB, DatasetTypes } from \"../../messages\";\nimport { getInitial, getInitialName, parseNumList, withValidation } from \"../helpers\";\nimport { OpenFormProps } from \"../types\";\n\n// some fields have different types in the form vs. in messages\ntype DatasetParamsMIBForForm = Omit<DatasetParamsMIB,\n    \"path\"\n    | \"type\"\n    | \"tileshape\"\n    | \"scan_size\"\n> & {\n    tileshape: string,\n    scan_size: string,\n};\n\ntype FormValues = DatasetParamsMIBForForm\n\ntype MergedProps = FormikProps<FormValues> & OpenFormProps<DatasetParamsMIB>;\n\nconst MIBFileParamsForm: React.SFC<MergedProps> = ({\n    values,\n    touched,\n    errors,\n    dirty,\n    isSubmitting,\n    handleChange,\n    handleBlur,\n    handleSubmit,\n    handleReset,\n    isValidating,\n    onCancel,\n}) => {\n    return (\n        <Form onSubmit={handleSubmit}>\n            <Form.Field>\n                <label htmlFor=\"id_name\">Name:</label>\n                <ErrorMessage name=\"name\" />\n                <Field name=\"name\" id=\"id_name\" />\n            </Form.Field>\n            <Form.Field>\n                <label htmlFor=\"id_tileshape\">Tileshape:</label>\n                <ErrorMessage name=\"tileshape\" />\n                <Field name=\"tileshape\" id=\"id_tileshape\" />\n            </Form.Field>\n            <Form.Field>\n                <label htmlFor=\"id_scan_size\">Scan Size:</label>\n                <ErrorMessage name=\"scan_size\" />\n                <Field name=\"scan_size\" id=\"id_scan_size\" />\n            </Form.Field>\n            <Button primary={true} type=\"submit\" disabled={isSubmitting || isValidating}>Load Dataset</Button>\n            <Button type=\"button\" onClick={onCancel}>Cancel</Button>\n            <Button type=\"button\" onClick={handleReset}>Reset</Button>\n        </Form>\n    )\n}\n\nexport default withValidation<DatasetParamsMIB, DatasetParamsMIBForForm>({\n    formToJson: (values, path) => {\n        return {\n            path,\n            type: DatasetTypes.MIB,\n            name: values.name,\n            tileshape: parseNumList(values.tileshape),\n            scan_size: parseNumList(values.scan_size),\n        }\n    },\n    mapPropsToValues: ({path, initial }) => ({\n        name: getInitialName(\"name\",path,initial),\n        tileshape: getInitial(\"tileshape\", \"1, 8, 256, 256\", initial).toString(),\n        scan_size: getInitial(\"scan_size\", \"\", initial).toString(),\n    }),\n    type: DatasetTypes.MIB,\n})(MIBFileParamsForm);\n","import { ErrorMessage, Field, FormikProps } from \"formik\";\nimport * as React from \"react\";\nimport { Button, Form } from \"semantic-ui-react\";\nimport { Omit } from \"../../helpers/types\";\nimport { DatasetParamsRaw, DatasetTypes } from \"../../messages\";\nimport { getInitial, getInitialName, parseNumList, withValidation } from \"../helpers\";\nimport { OpenFormProps } from \"../types\";\n\n// some fields have different types in the form vs. in messages\ntype DatasetParamsRawForForm = Omit<DatasetParamsRaw,\n    \"type\"\n    | \"path\"\n    | \"scan_size\"\n    | \"detector_size\"> & {\n        scan_size: string\n        detector_size: string,\n    };\n\ntype MergedProps = FormikProps<DatasetParamsRawForForm> & OpenFormProps<DatasetParamsRaw>;\n\nconst RawFileParamsForm: React.SFC<MergedProps> = ({\n    values,\n    touched,\n    errors,\n    dirty,\n    isSubmitting,\n    handleChange,\n    handleBlur,\n    handleSubmit,\n    handleReset,\n    onCancel,\n}) => {\n    return (\n\n        <Form onSubmit={handleSubmit}>\n            <Form.Field>\n                <label htmlFor=\"id_name\">Name:</label>\n                <ErrorMessage name=\"name\" />\n                <Field name=\"name\" id=\"id_name\" />\n            </Form.Field>\n            <Form.Field>\n                <label htmlFor=\"id_scan_size\">Scan Size:</label>\n                <ErrorMessage name=\"scan_size\" />\n                <Field name=\"scan_size\" id=\"id_scan_size\" />\n            </Form.Field>\n            <Form.Field>\n                <label htmlFor=\"id_dtype\">Datatype (uint16, uint32, float32, float64, &gt;u2, ..., can be anything that is <a href=\"https://docs.scipy.org/doc/numpy-1.15.1/reference/arrays.dtypes.html\">understood by numpy as a dtype</a>):</label>\n                <ErrorMessage name=\"dtype\" />\n                <Field name=\"dtype\" id=\"id_dtype\" />\n            </Form.Field>\n\n            <Form.Field>\n                <label htmlFor=\"id_detector_size\">Detector Size (pixels, example: 256,256):</label>\n                <ErrorMessage name=\"detector_size\" />\n                <Field name=\"detector_size\" id=\"id_detector_size\" />\n            </Form.Field>\n            <Form.Field>\n                <label htmlFor=\"id_enable_direct\">Enable Direct I/O (for usage with fast SSDs and files much larger than RAM):</label>\n                <ErrorMessage name=\"enable_direct\" />\n                <Field type=\"checkbox\" name=\"enable_direct\" checked={values.enable_direct} id=\"id_enable_direct\" />\n            </Form.Field>\n            <Button primary={true} type=\"submit\" disabled={isSubmitting}>Load Dataset</Button>\n            <Button type=\"button\" onClick={onCancel}>Cancel</Button>\n            <Button type=\"button\" onClick={handleReset}>Reset</Button>\n        </Form>\n    )\n}\n\nexport default withValidation<DatasetParamsRaw, DatasetParamsRawForForm>({\n    mapPropsToValues: ({path, initial }) => ({\n        name: getInitialName(\"name\",path,initial),\n        enable_direct: getInitial(\"enable_direct\", false, initial),\n        detector_size: getInitial(\"detector_size\", \"\", initial).toString(),\n        scan_size: getInitial(\"scan_size\", \"\", initial).toString(),\n        dtype: getInitial(\"dtype\", \"float32\", initial),\n    }),\n    formToJson: (values, path) => {\n        return {\n            path,\n            type: DatasetTypes.RAW,\n            name: values.name,\n            dtype: values.dtype,\n            enable_direct: values.enable_direct,\n            scan_size: parseNumList(values.scan_size),\n            detector_size: parseNumList(values.detector_size),\n        }\n    },\n    type: DatasetTypes.RAW,\n})(RawFileParamsForm);\n","import { ErrorMessage, Field, FormikProps } from \"formik\";\nimport * as React from \"react\";\nimport { Button, Form } from \"semantic-ui-react\";\nimport { Omit } from \"../../helpers/types\";\nimport { DatasetParamsSER, DatasetTypes } from \"../../messages\";\nimport { getInitialName, withValidation } from \"../helpers\";\nimport { OpenFormProps } from \"../types\";\n\n// some fields have different types in the form vs. in messages\ntype DatasetParamsSERForForm = Omit<DatasetParamsSER,\n    \"path\" | \"type\">;\n\ntype MergedProps = FormikProps<DatasetParamsSERForForm> & OpenFormProps<DatasetParamsSER>;\nconst SERParamsForm: React.SFC<MergedProps> = ({\n    values,\n    touched,\n    errors,\n    dirty,\n    isSubmitting,\n    handleChange,\n    handleBlur,\n    handleSubmit,\n    handleReset,\n    onCancel,\n}) => {\n    return (\n        <Form onSubmit={handleSubmit}>\n            <Form.Field>\n                <label htmlFor=\"id_name\">Name:</label>\n                <ErrorMessage name=\"name\" />\n                <Field name=\"name\" id=\"id_name\" />\n            </Form.Field>\n\n            <Button primary={true} type=\"submit\" disabled={isSubmitting}>Load Dataset</Button>\n            <Button type=\"button\" onClick={onCancel}>Cancel</Button>\n            <Button type=\"button\" onClick={handleReset}>Reset</Button>\n        </Form>\n    )\n}\n\nexport default withValidation<DatasetParamsSER, DatasetParamsSERForForm>({\n    mapPropsToValues: ({path, initial }) => ({\n        name: getInitialName(\"name\",path,initial),\n    }),\n    formToJson: (values, path) => {\n        return {\n            path,\n            type: DatasetTypes.SER,\n            name: values.name,\n        }\n    },\n    type: DatasetTypes.SER,\n})(SERParamsForm);\n","import * as React from \"react\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport { DropdownProps, Header, Segment } from \"semantic-ui-react\";\nimport uuid from \"uuid/v4\";\nimport { assertNotReached } from \"../../helpers\";\nimport { DatasetFormParams, DatasetTypes } from '../../messages';\nimport { RootReducer } from \"../../store\";\nimport * as datasetActions from \"../actions\";\nimport { hasKey, isAdditionalInfo } from \"../helpers\";\nimport { OpenDatasetState } from \"../types\";\nimport BLOParamsForm from \"./BLOParamsForm\";\nimport DatasetTypeSelect from \"./DatasetTypeSelect\";\nimport EMPADParamsForm from \"./EMPADParamsForm\";\nimport FRMS6ParamsForm from \"./FRMS6ParamsForm\";\nimport HDF5ParamsForm from \"./HDF5ParamsForm\";\nimport K2ISParamsForm from \"./K2ISParamsForm\";\nimport MIBParamsForm from \"./MIBParamsForm\";\nimport RawFileParamsForm from \"./RawFileParamsForm\";\nimport SERParamsForm from \"./SERParamsForm\";\n\n\n/**\n * Get the initial selection for the dataset type dropdown. If we have a previous\n * user selection, we use it, but only if the reset button was not pressed. If it was,\n * we use the detected dataset type, falling back to RAW.\n *\n * @param didReset flag: was the reset button pressed?\n * @param openState complete OpenDatasetState instance\n */\nconst getDefaultDSType = (didReset: boolean, openState: OpenDatasetState) => {\n    const { formCachedParams, formDetectedParams } = openState;\n    if (didReset) {\n        return formDetectedParams ? formDetectedParams.type : DatasetTypes.RAW;\n    }\n    if (formCachedParams) {\n        return formCachedParams.type;\n    }\n    if (formDetectedParams) {\n        return formDetectedParams.type;\n    }\n    return DatasetTypes.RAW;\n}\n\n\n/**\n * Get the initial form field values. If we have previously entered values, we\n * use these, otherwise we use the detected parameters. If the reset button was\n * clicked, we use the detected params, but keep the original name field,\n *\n * @param didReset flag: was the reset button pressed?\n * @param openState complete OpenDatasetState instance\n */\n\n // Fix this after separating info from params\nconst getAdditionalInfo = (formDetectedParams: DatasetFormParams) => {\n     const additionalInfo = Object.keys(formDetectedParams)\n     .filter(isAdditionalInfo)\n     .reduce((allInfo: object, info: string) => {\n       return hasKey(formDetectedParams, info)? {...allInfo, [info]: formDetectedParams[info] } : {...allInfo};\n     }, {});\n     return additionalInfo;\n}\n\nconst getFormInitial = (didReset: boolean, openState: OpenDatasetState) => {\n    const { formCachedParams, formDetectedParams } = openState;\n    if (didReset) {\n        if (formDetectedParams) {\n            return {\n                name: formCachedParams ? formCachedParams.name : \"\",\n                ...formDetectedParams,\n            };\n        }\n        return undefined;\n    }\n    if (formCachedParams) {\n        if(formDetectedParams) {\n          const additionalInfo = getAdditionalInfo(formDetectedParams);\n          return { ...additionalInfo, ...formCachedParams };\n        }\n        return formCachedParams;\n    } else {\n        return formDetectedParams;\n    }\n}\n\n/**\n * Dispatch to specific dataset opening forms, including a selection of dataset type\n * via a dropdown.\n */\nconst DatasetOpen = () => {\n    const dispatch = useDispatch();\n    const openState = useSelector((state: RootReducer) => state.openDataset);\n\n    const [didReset, setReset] = React.useState(false);\n    const formInitial = getFormInitial(didReset, openState);\n    const defaultType = getDefaultDSType(didReset, openState);\n    const [datasetType, setDatasetType] = React.useState(defaultType);\n\n    const doSetType = (e: React.SyntheticEvent, data: DropdownProps) => setDatasetType(data.value as DatasetTypes);\n    // FIXME: find out how to make ts correctly correlate the types of FormComponent\n    // and initial and replace the huge switch below with something like:\n    // const initial = formInitial && datasetType === formInitial.type ? formInitial : undefined;\n    // const formComponentMap = {\n    //     [DatasetTypes.HDF5]: HDF5ParamsForm,\n    //     [DatasetTypes.RAW]: RawFileParamsForm,\n    //     [DatasetTypes.MIB]: MIBParamsForm,\n    //     [DatasetTypes.BLO]: BLOParamsForm,\n    //     [DatasetTypes.K2IS]: K2ISParamsForm,\n    //     [DatasetTypes.SER]: SERParamsForm,\n    //     [DatasetTypes.FRMS6]: FRMS6ParamsForm,\n    //     [DatasetTypes.EMPAD]: EMPADParamsForm,\n    // }\n    // const FormComponent = formComponentMap[datasetType];\n\n    const renderForm = (form: React.ReactNode) => {\n        return (\n            <Segment>\n                Type: <DatasetTypeSelect onClick={doSetType} currentType={datasetType} />\n                <Header as=\"h2\">Open: {openState.formPath}</Header>\n                {form}\n            </Segment>\n        );\n    }\n\n    const commonParams = {\n        path: openState.formPath,\n        onSubmit: (params: DatasetFormParams) => {\n            dispatch(datasetActions.Actions.create({\n                id: uuid(),\n                params,\n            }))\n        },\n        onCancel: () => dispatch(datasetActions.Actions.cancelOpen()),\n        onReset: () => {\n            setReset(true);\n            setDatasetType(getDefaultDSType(true, openState));\n        },\n    }\n\n    switch (datasetType) {\n        case DatasetTypes.HDF5: {\n            const initial = formInitial && datasetType === formInitial.type ? formInitial : undefined;\n            return renderForm(<HDF5ParamsForm {...commonParams} initial={initial} />);\n        }\n        case DatasetTypes.RAW: {\n            const initial = formInitial && datasetType === formInitial.type ? formInitial : undefined;\n            return renderForm(<RawFileParamsForm {...commonParams} initial={initial} />);\n        }\n        case DatasetTypes.MIB: {\n            const initial = formInitial && datasetType === formInitial.type ? formInitial : undefined;\n            return renderForm(<MIBParamsForm {...commonParams} initial={initial} />);\n        }\n        case DatasetTypes.BLO: {\n            const initial = formInitial && datasetType === formInitial.type ? formInitial : undefined;\n            return renderForm(<BLOParamsForm {...commonParams} initial={initial} />);\n        }\n        case DatasetTypes.K2IS: {\n            const initial = formInitial && datasetType === formInitial.type ? formInitial : undefined;\n            return renderForm(<K2ISParamsForm {...commonParams} initial={initial} />);\n        }\n        case DatasetTypes.SER: {\n            const initial = formInitial && datasetType === formInitial.type ? formInitial : undefined;\n            return renderForm(<SERParamsForm {...commonParams} initial={initial} />);\n        }\n        case DatasetTypes.FRMS6: {\n            const initial = formInitial && datasetType === formInitial.type ? formInitial : undefined;\n            return renderForm(<FRMS6ParamsForm {...commonParams} initial={initial} />);\n        }\n        case DatasetTypes.EMPAD: {\n            const initial = formInitial && datasetType === formInitial.type ? formInitial : undefined;\n            return renderForm(<EMPADParamsForm {...commonParams} initial={initial} />)\n        }\n    }\n    return assertNotReached(\"unknown dataset type\");\n}\n\nexport default DatasetOpen;\n","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Header, Icon, Message } from \"semantic-ui-react\";\nimport { RootReducer } from \"../../store\";\n\nconst mapStateToProps = (state: RootReducer) => {\n    return {\n        busy: state.openDataset.busy,\n        path: state.openDataset.busyPath,\n    };\n}\n\ntype MergedProps = ReturnType<typeof mapStateToProps>;\n\nconst DatasetOpenSpinner: React.SFC<MergedProps> = ({ busy, path }) => {\n    if (!busy) {\n        return null;\n    }\n    return (\n        <>\n            <Header as=\"h2\" dividing={true}>Loading...</Header>\n            <Message icon={true}>\n                <Icon name='cog' loading={true} />\n                <Message.Content>\n                    <Message.Header>Detecting parameters for {path}</Message.Header>\n                </Message.Content>\n            </Message>\n        </>\n    );\n}\n\nexport default connect(mapStateToProps)(DatasetOpenSpinner);","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport BrowserWrapper from \"../../browser/components/BrowserWrapper\";\nimport { RootReducer } from \"../../store\";\nimport { DatasetsState } from \"../types\";\nimport Dataset from \"./Dataset\";\nimport DatasetOpen from \"./DatasetOpen\";\nimport DatasetOpenSpinner from \"./DatasetOpenSpinner\";\n\ninterface DatasetListProps {\n    datasets: DatasetsState\n}\n\nconst mapStateToProps = (state: RootReducer) => {\n    return {\n        datasets: state.datasets,\n        formVisible: state.openDataset.formVisible,\n        formPath: state.openDataset.formPath,\n    };\n}\n\ntype MergedProps = DatasetListProps & ReturnType<typeof mapStateToProps>;\n\nclass DatasetList extends React.Component<MergedProps> {\n    public render() {\n        const { formVisible, datasets } = this.props;\n\n        return (\n            <>\n                {datasets.ids.map((dsId: string) => <Dataset dataset={datasets.byId[dsId]} key={dsId} />)}\n                <DatasetOpenSpinner />\n                {formVisible && <DatasetOpen />}\n                <BrowserWrapper />\n            </>\n        );\n    }\n}\n\nexport default connect(mapStateToProps)(DatasetList);","import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { Dispatch } from 'redux';\nimport { Message } from 'semantic-ui-react';\nimport * as errorActions from '../actions';\nimport { ErrorMessage } from '../reducers';\n\nconst mapDispatchToProps = (dispatch: Dispatch, ownProps: ErrorProps) => {\n    return {\n        dismiss: () => dispatch(errorActions.Actions.dismiss(ownProps.error.id)),\n    }\n}\n\ninterface ErrorProps {\n    error: ErrorMessage,\n}\n\ntype MergedProps = ErrorProps & ReturnType<typeof mapDispatchToProps>;\n\nconst ErrorComponent: React.SFC<MergedProps> = ({ dismiss, error }) => {\n    return (\n        <Message negative={true} onDismiss={dismiss}>{error.msg}</Message>\n    )\n}\n\nexport default connect(null, mapDispatchToProps)(ErrorComponent);","import * as React from \"react\";\nimport { connect, useDispatch } from \"react-redux\";\nimport { Modal } from \"semantic-ui-react\";\nimport { useDismissEscape } from \"../../helpers/hooks\";\nimport { RootReducer } from \"../../store\";\nimport { Actions } from \"../actions\";\nimport Error from \"./Error\";\n\nconst mapStateToProps = (state: RootReducer) => {\n    return {\n        errors: state.errors,\n        channelConnected: (state.channelStatus.status === \"connected\" ||\n            state.channelStatus.status === \"ready\"),\n    }\n}\n\ntype MergedProps = ReturnType<typeof mapStateToProps>;\n\nconst ErrorList: React.SFC<MergedProps> = ({ errors, channelConnected }) => {\n    const numShown = 3;\n    const latestErrors = errors.ids.slice(Math.max(0, errors.ids.length - numShown));\n    const showModal = errors.ids.length > 0 && channelConnected;\n\n    const dispatch = useDispatch();\n\n    const doDismiss = () => {\n        dispatch(Actions.dismissAll());\n    }\n\n    useDismissEscape(doDismiss);\n\n    return (\n        <Modal open={showModal}>\n            {latestErrors.map(error => <Error error={errors.byId[error]} key={error} />)}\n        </Modal>\n    );\n}\n\nexport default connect(mapStateToProps)(ErrorList);","import React from \"react\";\n\nexport const useDismissEscape = (dismiss: () => void) => {\n    React.useEffect(() => {\n        const handleEsc = (ev: KeyboardEvent) => {\n            if(ev.code === \"Escape\" || ev.keyCode === 27) {\n                dismiss();\n            }\n        }\n        document.addEventListener(\"keyup\", handleEsc);\n\n        return () => {\n            document.removeEventListener(\"keyup\", handleEsc);\n        };\n    });\n}","import * as React from 'react';\nimport 'semantic-ui-css/semantic.min.css';\nimport { Container, Icon, Modal, Popup } from 'semantic-ui-react';\nimport About from './About';\nimport ChannelStatus from './channel/components/ChannelStatus';\nimport DatasetList from './dataset/components/DatasetList';\nimport ErrorList from './errors/components/ErrorList';\nimport logo from './images/LiberTEM logo-medium.png';\n\nclass App extends React.Component {\n    public render() {\n        return (\n            <Container style={{ margin: \"5em 1em 5em 1em\" }}>\n                <div style={{ display: \"flex\" }}>\n                    <img src={logo} width=\"200\" height=\"46\" alt=\"LiberTEM\" style={{ marginBottom: \"20px\" }} />\n                    {' '}\n                    <Modal trigger={\n                        <Icon name=\"info circle\" link={true} style={{ alignSelf: \"flex-start\" }} />\n                    }>\n                        <Popup.Header>About LiberTEM</Popup.Header>\n                        <Popup.Content>\n                            <About />\n                        </Popup.Content>\n                    </Modal>\n                </div>\n                <ErrorList />\n                <ChannelStatus>\n                    <DatasetList />\n                </ChannelStatus>\n            </Container>\n        );\n    }\n}\n\nexport default App;\n","// tslint:disable:no-console\n// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the 'N+1' visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL!,\n      window.location.toString()\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker) {\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the old content will have been purged and\n                // the fresh content will have been added to the cache.\n                // It's the perfect time to display a 'New content is\n                // available; please refresh.' message in your web app.\n                console.log('New content is available; please refresh.');\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // 'Content is cached for offline use.' message.\n                console.log('Content is cached for offline use.');\n              }\n            }\n          };\n        }\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type')!.indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import _ from 'lodash';\nimport { ClusterTypes, MsgPartConfig } from \"../messages\";\nimport { ConfigParams, ConfigState, LocalConfig } from \"./reducers\";\n\nconst CONFIG_KEY = \"LiberTEM.config\";\n\nexport function joinPaths(config: ConfigState, ...parts: string[]) {\n    const removeSep = (part: string) => part.replace(new RegExp(`${_.escapeRegExp(config.separator)}$`), \"\")\n    parts = [removeSep(parts[0]), ...parts.slice(1)];\n    return parts.map(part => part.trim()).join(config.separator);\n}\n\nexport function mergeLocalStorage(serverConfig: MsgPartConfig): ConfigParams {\n    const localSettings = window.localStorage.getItem(CONFIG_KEY);\n    if (localSettings === null) {\n        return Object.assign({}, serverConfig, getDefaultLocalConfig(serverConfig));\n    }\n    const localSettingsParsed = JSON.parse(localSettings);\n    const defaultConfig = getDefaultLocalConfig(serverConfig);\n    const mergedConfig = Object.assign({}, defaultConfig, serverConfig, localSettingsParsed);\n    return mergedConfig;\n}\n\nexport function setLocalStorage(config: ConfigState): void {\n    const localSettings: LocalConfig = {\n        cwd: config.cwd,\n        lastOpened: config.lastOpened,\n        fileHistory: config.fileHistory,\n        lastConnection: config.lastConnection,\n    }\n\n    window.localStorage.setItem(CONFIG_KEY, JSON.stringify(localSettings));\n}\n\nexport function clearLocalStorage(): void {\n    window.localStorage.removeItem(CONFIG_KEY);\n}\n\nexport function getDefaultLocalConfig(config: MsgPartConfig): LocalConfig {\n    return {\n        lastOpened: {},\n        fileHistory: [],\n        cwd: \"/\",\n        lastConnection: {\n            type: ClusterTypes.LOCAL,\n            address: \"tcp://localhost:8786\"\n        }\n    };\n}\n\nexport function makeUnique<T>(inp: T[]): T[] {\n    return inp.reduce((acc: T[], curr: T) => {\n        if (acc.indexOf(curr) === -1) {\n            return [...acc, curr];\n        } else {\n            return acc;\n        }\n    }, [] as T[]);\n}","import { getApiBasePath } from \"../helpers/apiHelpers\";\nimport { DirectoryListingResponse } from \"../messages\";\n\nexport async function getDirectoryListing(path: string): Promise<DirectoryListingResponse> {\n    const basePath = getApiBasePath();\n    const url = `${basePath}browse/localfs/?path=${encodeURIComponent(path)}`;\n    const r = await fetch(url, {\n        method: 'GET',\n        credentials: \"same-origin\",\n    });\n    return await r.json();\n}","import { ActionsUnion, createAction } from '../helpers/actionHelpers';\nimport { JobResultType } from '../job/types';\nimport { AnalysisDetails, MsgPartAnalysis, MsgPartCompoundAnalysis, MsgPartInitialDataset, MsgPartJob } from '../messages';\n\n\nexport type PartialResultType = JobResultType;\n\nexport enum ActionTypes {\n    INITIAL_STATE = 'CHANNEL_INITIAL_STATE',\n    JOB_STARTED = 'CHANNEL_JOB_STARTED',\n    FINISH_JOB = 'CHANNEL_FINISH_JOB',\n    TASK_RESULT = 'CHANNEL_TASK_RESULT',\n    JOB_ERROR = 'CHANNEL_JOB_ERROR',\n    OPEN = \"CHANNEL_OPEN\",\n    CLOSE = \"CHANNEL_CLOSE\",\n    ERROR = \"CHANNEL_ERROR\",\n    CANCELLED = \"CANCELLED\",\n    ANALYSIS_CREATED = 'ANALYSIS_CREATED',\n    ANALYSIS_UPDATED = 'ANALYSIS_UPDATED',\n    ANALYSIS_REMOVED = 'ANALYSIS_REMOVED',\n}\n\nexport const Actions = {\n    initialState: (jobs: MsgPartJob[], datasets: MsgPartInitialDataset[], compoundAnalyses: MsgPartCompoundAnalysis[], analyses: MsgPartAnalysis[], timestamp: number) => createAction(ActionTypes.INITIAL_STATE, { jobs, datasets, timestamp, compoundAnalyses, analyses }),\n    jobStarted: (job: string, dataset: string, timestamp: number) => createAction(ActionTypes.JOB_STARTED, { job, timestamp, dataset }),\n    finishJob: (job: string, results: JobResultType[], timestamp: number) => createAction(ActionTypes.FINISH_JOB, { job, results, timestamp }),\n    taskResult: (job: string, results: PartialResultType[], timestamp: number) => createAction(ActionTypes.TASK_RESULT, { job, results, timestamp }),\n    jobError: (job: string, msg: string, id: string, timestamp: number) => createAction(ActionTypes.JOB_ERROR, { job, msg, id, timestamp }),\n    open: (timestamp: number) => createAction(ActionTypes.OPEN, { timestamp }),\n    close: (timestamp: number) => createAction(ActionTypes.CLOSE, { timestamp }),\n    error: (msg: string, timestamp: number, id: string) => createAction(ActionTypes.ERROR, { msg, timestamp, id }),\n    cancelled: (job: string) => createAction(ActionTypes.CANCELLED, { job }),\n    analysisCreated: (analysis: string, dataset: string, details: AnalysisDetails) => createAction(ActionTypes.ANALYSIS_CREATED, { dataset, analysis, details }),\n    analysisUpdated: (analysis: string, dataset: string, details: AnalysisDetails) => createAction(ActionTypes.ANALYSIS_UPDATED, { dataset, analysis, details }),\n    analysisRemoved: (analysis: string) => createAction(ActionTypes.ANALYSIS_REMOVED, { analysis }),\n}\n\nexport type Actions = ActionsUnion<typeof Actions>;","import { call, fork, put, select, take } from \"redux-saga/effects\";\nimport uuid from 'uuid/v4';\nimport { joinPaths } from \"../config/helpers\";\nimport { ConfigState } from \"../config/reducers\";\nimport { DirectoryListingResponse } from \"../messages\";\nimport { RootReducer } from \"../store\";\nimport * as browserActions from './actions';\nimport { getDirectoryListing } from \"./api\";\nimport { DirectoryBrowserState } from \"./types\";\n\nexport function* directoryListingSaga() {\n    yield fork(fetchOnRequest);\n    yield fork(fetchDirectoryListOnOpen);\n}\n\nfunction* fetchOnRequest() {\n    while (true) {\n        const action: ReturnType<typeof browserActions.Actions.list> = yield take(browserActions.ActionTypes.LIST_DIRECTORY);\n\n        const { name, path } = action.payload;\n        const config: ConfigState = yield select((state: RootReducer) => state.config);\n        const newPath = name !== undefined ? joinPaths(config, path, name) : path;\n        yield fork(fetchDirectoryListing, newPath);\n    }\n}\n\nfunction* fetchDirectoryListing(path: string) {\n    try {\n        const result: DirectoryListingResponse = yield call(getDirectoryListing, path);\n        if (result.status === \"ok\") {\n            yield put(browserActions.Actions.dirListing(result.path, result.dirs, result.files, result.drives, result.places));\n        } else if (result.status === \"error\") {\n            const browserState: DirectoryBrowserState = yield select((state: RootReducer) => state.browser);\n            const timestamp = Date.now();\n            const id = uuid();\n            const alternative = result.alternative ? result.alternative : browserState.places.home.path;\n            // Don't show an error, if it's due to last recent directory not being available\n            const config: ConfigState = yield select((state: RootReducer) => state.config);\n            if (config.cwd !== path) {\n              yield put(browserActions.Actions.error(`Error browsing directory: ${result.msg}`, timestamp, id));\n            }\n            yield put(browserActions.Actions.list(alternative));\n        }\n    } catch (e) {\n        const browserState: DirectoryBrowserState = yield select((state: RootReducer) => state.browser);\n        const timestamp = Date.now();\n        const id = uuid();\n        yield put(browserActions.Actions.error(`Error browsing directory: ${e.toString()}`, timestamp, id));\n        yield put(browserActions.Actions.list(browserState.places.home.path));\n    }\n}\n\nfunction* fetchDirectoryListOnOpen() {\n    while (true) {\n        yield take(browserActions.ActionTypes.OPEN);\n        const config: ConfigState = yield select((state: RootReducer) => state.config);\n        yield put(browserActions.Actions.list(config.cwd));\n    }\n}\n","import { ActionCreatorsMapObject } from \"redux\";\nimport { AnalysisDetails, CompoundAnalysisDetails, FollowupPart, MsgPartAnalysis, MsgPartCompoundAnalysis, MsgPartInitialDataset, MsgPartJob } from \"../messages\";\n\nexport interface Message<T extends string> {\n    messageType: T\n}\n\nexport function createMessage<T extends string, O>(messageType: T, attribs: O) {\n    return Object.assign({ messageType }, attribs);\n}\n\nexport enum MessageTypes {\n    INITIAL_STATE = \"INITIAL_STATE\",\n    JOB_STARTED = \"JOB_STARTED\",\n    FINISH_JOB = \"FINISH_JOB\",\n    TASK_RESULT = \"TASK_RESULT\",\n    JOB_ERROR = \"JOB_ERROR\",\n    BINARY = \"BINARY\",\n    OPEN = \"OPEN\",\n    CLOSE = \"CLOSE\",\n    ERROR = \"ERROR\",\n    DELETE_DATASET = \"DELETE_DATASET\",\n    CREATE_DATASET = \"CREATE_DATASET\",\n    CANCEL_JOB_DONE = \"CANCEL_JOB_DONE\",\n    ANALYSIS_CREATED = \"ANALYSIS_CREATED\",\n    ANALYSIS_UPDATED = \"ANALYSIS_UPDATED\",\n    ANALYSIS_REMOVED = \"ANALYSIS_REMOVED\",\n    COMPOUND_ANALYSIS_CREATED = \"COMPOUND_ANALYSIS_CREATED\",\n    COMPOUND_ANALYSIS_UPDATED = \"COMPOUND_ANALYSIS_UPDATED\",\n    COMPOUND_ANALYSIS_REMOVED = \"COMPOUND_ANALYSIS_REMOVED\",\n}\n\nexport const Messages = {\n    initialState: (\n        jobs: MsgPartJob[],\n        datasets: MsgPartInitialDataset[],\n        analyses: MsgPartAnalysis[],\n        compoundAnalyses: MsgPartCompoundAnalysis[]\n    ) => createMessage(MessageTypes.INITIAL_STATE, {\n        jobs, datasets, compoundAnalyses, analyses,\n    }),\n\n    startJob: (job: string, dataset: string) => createMessage(MessageTypes.JOB_STARTED, { job, dataset }),\n    finishJob: (job: string, followup: FollowupPart) => createMessage(MessageTypes.FINISH_JOB, { job, followup }),\n    taskResult: (job: string, followup: FollowupPart) => createMessage(MessageTypes.TASK_RESULT, { job, followup }),\n    jobError: (job: string, msg: string) => createMessage(MessageTypes.JOB_ERROR, { job, msg }),\n    binary: (objectURL: string) => createMessage(MessageTypes.BINARY, { objectURL }),\n    open: () => createMessage(MessageTypes.OPEN, {}),\n    close: () => createMessage(MessageTypes.CLOSE, {}),\n    error: (msg: string) => createMessage(MessageTypes.ERROR, { msg }),\n    deleteDataset: (dataset: string) => createMessage(MessageTypes.DELETE_DATASET, { dataset }),\n    cancelled: (job: string) => createMessage(MessageTypes.CANCEL_JOB_DONE, { job }),\n    analysisCreated: (analysis: string, dataset: string, details: AnalysisDetails) => createMessage(MessageTypes.ANALYSIS_CREATED, { dataset, analysis, details }),\n    analysisUpdated: (analysis: string, dataset: string, details: AnalysisDetails) => createMessage(MessageTypes.ANALYSIS_UPDATED, { dataset, analysis, details }),\n    analysisRemoved: (analysis: string) => createMessage(MessageTypes.ANALYSIS_REMOVED, { analysis }),\n\n    compoundAnalysisCreated: (compoundAnalysis: string, dataset: string, details: CompoundAnalysisDetails) => createMessage(MessageTypes.COMPOUND_ANALYSIS_CREATED, { dataset, compoundAnalysis, details }),\n    compoundAnalysisUpdated: (compoundAnalysis: string, dataset: string, details: CompoundAnalysisDetails) => createMessage(MessageTypes.COMPOUND_ANALYSIS_UPDATED, { dataset, compoundAnalysis, details }),\n    compoundAnalysisRemoved: (compoundAnalysis: string) => createMessage(MessageTypes.ANALYSIS_REMOVED, { compoundAnalysis }),\n}\n\nexport type MessagesUnion<A extends ActionCreatorsMapObject> = ReturnType<A[keyof A]>\nexport type Messages = MessagesUnion<typeof Messages>;\n\n// types of messages sent by the server:\n/*\nexport type InitialStateMessage = ReturnType<typeof Messages.initialState>;\nexport type StartJobMessage = ReturnType<typeof Messages.startJob>;\nexport type FinishJobMessage = ReturnType<typeof Messages.finishJob>;\nexport type TaskResultMessage = ReturnType<typeof Messages.taskResult>;\n*/\n\nexport type BinaryMessage = ReturnType<typeof Messages.binary>;","import { END, eventChannel, EventChannel } from \"redux-saga\";\nimport { call, delay, fork, put, take } from \"redux-saga/effects\";\nimport uuid from 'uuid/v4';\nimport * as datasetActions from '../dataset/actions';\nimport { getApiWSURL } from \"../helpers/apiHelpers\";\nimport * as channelActions from \"./actions\";\nimport * as channelMessages from './messages';\n\ntype SocketChannel = EventChannel<channelMessages.Messages>;\n\n\n/**\n * create typesafe messages from the websocket messages\n * \n * also creates some synthetic events like open, close, error\n */\nfunction createWebSocketChannel(/* addr */): SocketChannel {\n    return eventChannel(emit => {\n        function onMessage(msg: MessageEvent) {\n            if (msg.data instanceof Blob) {\n                // TODO: cleanup createObjectURL results somewhere\n                emit(channelMessages.Messages.binary(URL.createObjectURL(msg.data)));\n            } else {\n                const parsed = JSON.parse(msg.data) as channelMessages.Messages;\n                emit(parsed);\n            }\n        }\n\n        function onOpen() {\n            emit(channelMessages.Messages.open());\n        }\n\n        function onClose() {\n            emit(channelMessages.Messages.close());\n            emit(END);\n        }\n\n        function onError(err: Event) {\n            emit(channelMessages.Messages.error(\"Error in weboscket connection\"));\n        }\n\n        const ws = new WebSocket(getApiWSURL());\n        ws.addEventListener(\"message\", onMessage);\n        ws.addEventListener(\"open\", onOpen);\n        ws.addEventListener(\"close\", onClose);\n        ws.addEventListener(\"error\", onError);\n\n        // return cleanup function:\n        return () => {\n            ws.removeEventListener(\"message\", onMessage);\n            ws.removeEventListener(\"open\", onOpen);\n            ws.removeEventListener(\"close\", onClose);\n            ws.removeEventListener(\"error\", onError);\n            // TODO: close connection if still open\n            // (or is it guaranteed that if an error was thrown, the connection is closed?)\n        };\n    });\n}\n\n/**\n * handles the connection lifecycle for our websocket\n */\nexport function* webSocketSaga() {\n    while (true) {\n        const socketChannel = yield call(createWebSocketChannel);\n        yield fork(actionsFromChannel, socketChannel);\n        const action: channelActions.Actions = yield take([\n            channelActions.ActionTypes.OPEN,\n            channelActions.ActionTypes.CLOSE,\n        ]);\n        if (action.type === channelActions.ActionTypes.OPEN) {\n            yield take([\n                channelActions.ActionTypes.CLOSE,\n                channelActions.ActionTypes.ERROR,\n            ]);\n        }\n        yield delay(1000);\n    }\n}\n\n/**\n * translates the messages from the channel to redux actions, handles aggregation etc.\n */\nexport function* actionsFromChannel(socketChannel: SocketChannel) {\n    try {\n        while (true) {\n            const msg = yield take(socketChannel);\n            const timestamp = Date.now();\n            switch (msg.messageType) {\n                case channelMessages.MessageTypes.OPEN: {\n                    yield put(channelActions.Actions.open(timestamp));\n                    break;\n                }\n                case channelMessages.MessageTypes.CLOSE: {\n                    yield put(channelActions.Actions.close(timestamp));\n                    break;\n                }\n                case channelMessages.MessageTypes.ERROR: {\n                    const id = uuid();\n                    yield put(channelActions.Actions.error(msg.msg, timestamp, id));\n                    break;\n                }\n                case channelMessages.MessageTypes.INITIAL_STATE: {\n                    yield put(channelActions.Actions.initialState(msg.jobs, msg.datasets, msg.compoundAnalyses, msg.analyses, timestamp));\n                    break;\n                }\n                case channelMessages.MessageTypes.JOB_STARTED: {\n                    yield put(channelActions.Actions.jobStarted(msg.job, msg.details.dataset, timestamp));\n                    break;\n                }\n                case channelMessages.MessageTypes.FINISH_JOB: {\n                    yield call(handleFinishJob, msg, socketChannel, timestamp);\n                    break;\n                }\n                case channelMessages.MessageTypes.TASK_RESULT: {\n                    yield call(handleTaskResult, msg, socketChannel, timestamp);\n                    break;\n                }\n                case channelMessages.MessageTypes.CREATE_DATASET: {\n                    yield put(datasetActions.Actions.created(msg.details));\n                    break;\n                }\n                case channelMessages.MessageTypes.DELETE_DATASET: {\n                    yield put(datasetActions.Actions.deleted(msg.dataset));\n                    break;\n                }\n                case channelMessages.MessageTypes.JOB_ERROR: {\n                    const id = uuid();\n                    yield put(channelActions.Actions.jobError(msg.job, msg.msg, id, timestamp));\n                    break;\n                }\n                case channelMessages.MessageTypes.CANCEL_JOB_DONE: {\n                    yield put(channelActions.Actions.cancelled(msg.job));\n                    break;\n                }\n                /*\n                // FIXME: server needs to know about compount analyses\n                case channelMessages.MessageTypes.ANALYSIS_CREATED: {\n                    yield put(channelActions.Actions.analysisCreated(\n                        msg.analysis,\n                        msg.dataset,\n                        msg.details,\n                    ));\n                    break;\n                }\n                case channelMessages.MessageTypes.ANALYSIS_UPDATED: {\n                    yield put(channelActions.Actions.analysisUpdated(\n                        msg.analysis,\n                        msg.dataset,\n                        msg.details,\n                    ));\n                    break;\n                }\n                case channelMessages.MessageTypes.ANALYSIS_REMOVED: {\n                    yield put(channelActions.Actions.analysisRemoved(\n                        msg.analysis,\n                    ));\n                    break;\n                }\n                */\n            }\n        }\n    } finally {\n        // disconnected\n    }\n}\n\nexport function* handleBinaryParts(numParts: number, socketChannel: SocketChannel) {\n    const parts: channelMessages.BinaryMessage[] = [];\n    while (parts.length < numParts) {\n        const binMsg = yield take(socketChannel)\n        parts.push(binMsg);\n    }\n    return parts;\n}\n\nexport function* handleTaskResult(msg: ReturnType<typeof channelMessages.Messages.taskResult>, socketChannel: SocketChannel, timestamp: number) {\n    const parts: channelMessages.BinaryMessage[] = yield call(handleBinaryParts, msg.followup.numMessages, socketChannel);\n    const images = parts.map((part, idx) => ({ imageURL: part.objectURL, description: msg.followup.descriptions[idx] }));\n    yield put(channelActions.Actions.taskResult(msg.job, images, timestamp));\n}\n\nexport function* handleFinishJob(msg: ReturnType<typeof channelMessages.Messages.finishJob>, socketChannel: SocketChannel, timestamp: number) {\n    const parts: channelMessages.BinaryMessage[] = yield call(handleBinaryParts, msg.followup.numMessages, socketChannel);\n    const images = parts.map((part, idx) => ({ imageURL: part.objectURL, description: msg.followup.descriptions[idx] }));\n    yield put(channelActions.Actions.finishJob(msg.job, images, timestamp));\n}","import { genericPut, getApiBasePath } from \"../helpers/apiHelpers\";\nimport { ConnectRequest, ConnectRequestParams, ConnectResponse } from \"../messages\";\n\nexport async function connectToCluster(params: ConnectRequestParams): Promise<ConnectResponse> {\n    const payload: ConnectRequest = {\n        connection: params\n    }\n    return await genericPut(\"config/connection/\", payload);\n}\n\nexport async function checkClusterConnection(): Promise<ConnectResponse> {\n    const basePath = getApiBasePath();\n    const r = await fetch(`${basePath}config/connection/`, {\n        method: 'GET',\n    });\n    return await r.json();\n}","import { ActionsUnion, createAction } from \"../helpers/actionHelpers\";\nimport { AnalysisDetails, AnalysisTypes } from \"../messages\";\nimport { AnalysisState } from \"./types\";\n\n\nexport enum ActionTypes {\n    CREATE = 'ANALYSIS_CREATE',\n    CREATED = 'ANALYSIS_CREATED',\n    UPDATED = 'ANALYSIS_UPDATED',\n    REMOVE = 'ANALYSIS_REMOVE',\n    REMOVED = 'ANALYSIS_REMOVED',\n    ERROR = 'ANALYSIS_ERROR',\n}\n\nexport const Actions = {\n    create: (\n        dataset: string, analysisType: AnalysisTypes\n    ) => createAction(ActionTypes.CREATE, { dataset, analysisType }),\n\n    created: (\n        analysis: AnalysisState, compoundAnalysis: string, analysisIndex: number\n    ) => createAction(ActionTypes.CREATED, {\n        analysis, compoundAnalysis, analysisIndex\n    }),\n\n    updated: (\n        id: string, details: AnalysisDetails\n    ) => createAction(ActionTypes.UPDATED, { id, details }),\n\n    remove: (id: string) => createAction(ActionTypes.REMOVE, { id }),\n    removed: (id: string) => createAction(ActionTypes.REMOVED, { id }),\n    error: (\n        msg: string, timestamp: number, id: string\n    ) => createAction(ActionTypes.ERROR, { msg, timestamp, id }),\n}\n\nexport type Actions = ActionsUnion<typeof Actions>;\n\nexport type ActionParts = {\n    [K in keyof typeof Actions]: ReturnType<typeof Actions[K]>\n}\n","import { all, call, put, take, takeEvery } from \"redux-saga/effects\";\nimport uuid from 'uuid/v4';\nimport * as channelActions from '../channel/actions';\nimport { ConnectResponse } from \"../messages\";\nimport * as clusterActions from './actions';\nimport { checkClusterConnection, connectToCluster } from \"./api\";\n\nfunction* connectSaga(action: ReturnType<typeof clusterActions.Actions.connect>) {\n    yield put(clusterActions.Actions.connecting())\n    const conn: ConnectResponse = yield call(connectToCluster, action.payload.params);\n    yield call(putClusterStatus, conn);\n}\n\nfunction* putClusterStatus(conn: ConnectResponse) {\n    if (conn.status === \"ok\") {\n        yield put(clusterActions.Actions.connected(conn.connection.connection));\n    } else if (conn.status === \"error\") {\n        yield put(clusterActions.Actions.notConnected());\n        const timestamp = Date.now();\n        const id = uuid();\n        yield put(clusterActions.Actions.error(`error connecting to cluster: ${conn.msg}`,timestamp, id));\n    } else {\n        yield put(clusterActions.Actions.notConnected());\n    }\n}\n\n/**\n * when the channel is connected, check if cluster is connected and update status accordingly\n */\nfunction* trackClusterConnection() {\n    while (true) {\n        yield take(channelActions.ActionTypes.OPEN)\n        const conn: ConnectResponse = yield call(checkClusterConnection);\n        yield call(putClusterStatus, conn);\n    }\n}\n\nexport function* clusterConnectionSaga() {\n    yield takeEvery(clusterActions.ActionTypes.CONNECT, connectSaga);\n    yield all([\n        trackClusterConnection(),\n    ])\n}","import { ActionsUnion, createAction } from \"../helpers/actionHelpers\";\n\nexport enum ActionTypes {\n    CREATE = 'JOB_CREATE',\n}\n\nexport const Actions = {\n    create: (id: string, analysis: string, timestamp: number) => createAction(ActionTypes.CREATE, { id, analysis, timestamp }),\n}\n\nexport type Actions = ActionsUnion<typeof Actions>;\n\nexport type ActionParts = {\n    [K in keyof typeof Actions]: ReturnType<typeof Actions[K]>\n}","import { genericDelete, genericPut } from \"../helpers/apiHelpers\";\nimport { CancelJobResponse, StartJobRequest, StartJobResponse } from \"../messages\";\n\nexport async function startJob(jobId: string, analysis: string): Promise<StartJobResponse> {\n    const payload: StartJobRequest = {\n        job: {\n            analysis,\n        }\n    }\n    return await genericPut(`jobs/${jobId}/`, payload);\n}\n\nexport async function cancelJob(jobId: string): Promise<CancelJobResponse> {\n    return await genericDelete(`jobs/${jobId}/`);\n}\n\n\n","import { genericDelete, genericPut } from \"../helpers/apiHelpers\";\nimport { AnalysisDetails, CompoundAnalysisDetails, CreateAnalysisResponse, CreateCompoundAnalysisResponse, CreateOrUpdateAnalysisRequest, CreateOrUpdateCompoundAnalysisRequest, RemoveAnalysisResponse, RemoveCompoundAnalysisResponse } from \"../messages\";\n\nexport async function createOrUpdateAnalysis(\n    compoundAnalysisId: string, analysisId: string,\n    dataset: string, details: AnalysisDetails\n): Promise<CreateAnalysisResponse> {\n    const payload: CreateOrUpdateAnalysisRequest = {\n        dataset,\n        details,\n    };\n    return await genericPut(`compoundAnalyses/${compoundAnalysisId}/analyses/${analysisId}/`, payload);\n}\n\nexport async function removeAnalysis(compoundAnalysisId: string, analysisId: string): Promise<RemoveAnalysisResponse> {\n    return await genericDelete(`compoundAnalyses/${compoundAnalysisId}/analyses/${analysisId}/`)\n}\n\nexport async function createOrUpdateCompoundAnalysis(compoundAnalysisId: string, dataset: string, details: CompoundAnalysisDetails): Promise<CreateCompoundAnalysisResponse> {\n    const payload: CreateOrUpdateCompoundAnalysisRequest = {\n        dataset,\n        details,\n    };\n    return await genericPut(`compoundAnalyses/${compoundAnalysisId}/`, payload);\n}\n\nexport async function removeCompoundAnalysis(compoundAnalysisId: string): Promise<RemoveCompoundAnalysisResponse> {\n    return await genericDelete(`compoundAnalyses/${compoundAnalysisId}/`)\n}\n","import { ActionsUnion, createAction } from \"../helpers/actionHelpers\";\nimport { ConfigParams } from \"./reducers\";\n\nexport enum ActionTypes {\n    FETCHED = \"CONFIG_FETCHED\",\n    FETCH = \"CONFIG_FETCH\",\n    FETCH_FAILED = \"CONFIG_FETCH_FAILED\",\n}\n\nexport const Actions = {\n    fetch: () => createAction(ActionTypes.FETCH),\n    fetched: (config: ConfigParams) => createAction(ActionTypes.FETCHED, { config }),\n    fetchFailed: (msg: string, timestamp: number, id: string) => createAction(ActionTypes.FETCH_FAILED, { msg, timestamp, id }),\n}\n\nexport type Actions = ActionsUnion<typeof Actions>;","import { buffers, Task } from 'redux-saga';\nimport { actionChannel, call, cancel, fork, put, select, take, takeEvery } from 'redux-saga/effects';\nimport uuid from 'uuid/v4';\nimport * as analysisActions from '../analysis/actions';\nimport { AnalysisState } from '../analysis/types';\nimport * as channelActions from '../channel/actions';\nimport * as jobActions from '../job/actions';\nimport { cancelJob, startJob } from '../job/api';\nimport { JobState } from '../job/types';\nimport { AnalysisDetails, DatasetState, DatasetStatus } from '../messages';\nimport { RootReducer } from '../store';\nimport * as compoundAnalysisActions from './actions';\nimport { createOrUpdateAnalysis, createOrUpdateCompoundAnalysis, removeAnalysis, removeCompoundAnalysis } from \"./api\";\nimport { CompoundAnalysis, CompoundAnalysisState } from './types';\n\nfunction selectDataset(state: RootReducer, dataset: string) {\n    return state.datasets.byId[dataset];\n}\n\nfunction selectCompoundAnalysis(state: RootReducer, id: string) {\n    return state.compoundAnalyses.byId[id];\n}\n\nfunction selectAnalysis(state: RootReducer, id: string) {\n    return state.analyses.byId[id];\n}\n\nfunction selectJob(state: RootReducer, id: string) {\n    return state.jobs.byId[id];\n}\n\nexport function* cleanupOnRemove(compoundAnalysis: CompoundAnalysis, sidecarTask: Task) {\n    while (true) {\n        const removeAction: ReturnType<typeof compoundAnalysisActions.Actions.remove> = yield take(compoundAnalysisActions.ActionTypes.REMOVE);\n        if (removeAction.payload.id === compoundAnalysis.compoundAnalysis) {\n            yield cancel(sidecarTask);\n        }\n    }\n}\n\nexport function* createCompoundAnalysisSaga(action: ReturnType<typeof compoundAnalysisActions.Actions.create>) {\n    try {\n        const datasetState: DatasetState = yield select(selectDataset, action.payload.dataset)\n        if (datasetState.status !== DatasetStatus.OPEN) {\n            throw new Error(\"invalid dataset status\");\n        }\n        const compoundAnalysis: CompoundAnalysis = {\n            compoundAnalysis: uuid(),\n            dataset: action.payload.dataset,\n            details: {\n                mainType: action.payload.analysisType,\n                analyses: [],\n            }\n        }\n\n        yield call(\n            createOrUpdateCompoundAnalysis,\n            compoundAnalysis.compoundAnalysis,\n            compoundAnalysis.dataset,\n            compoundAnalysis.details,\n        );\n\n        const sidecarTask = yield fork(analysisSidecar, compoundAnalysis.compoundAnalysis, { doAutoStart: true });\n\n        yield put(compoundAnalysisActions.Actions.created(compoundAnalysis, true));\n        yield fork(cleanupOnRemove, compoundAnalysis, sidecarTask);\n    } catch (e) {\n        const timestamp = Date.now();\n        const id = uuid();\n        yield put(compoundAnalysisActions.Actions.error(`Error creating analysis: ${e.toString()}`, timestamp, id));\n    }\n}\n\nexport function* createFromServerState(action: ReturnType<typeof channelActions.Actions.initialState>) {\n    for (const msgPart of action.payload.compoundAnalyses) {\n        const compoundAnalysis: CompoundAnalysisState = yield select(selectCompoundAnalysis, msgPart.compoundAnalysis);\n        const sidecarTask = yield fork(analysisSidecar, compoundAnalysis.compoundAnalysis, { doAutoStart: false });\n        yield fork(cleanupOnRemove, compoundAnalysis, sidecarTask);\n    }\n}\n\nexport function* cancelOldJob(analysis: AnalysisState, jobIndex: number) {\n    const jobId = analysis.jobs[jobIndex];\n    if (jobId === undefined) {\n        return;\n    } else {\n        const job: JobState = yield select(selectJob, jobId);\n        if (job.running !== \"DONE\") {\n            yield call(cancelJob, jobId);\n        }\n    }\n}\n\nexport function* createOrUpdate(\n    compoundAnalysis: CompoundAnalysisState, analysisId: string | undefined,\n    analysisIndex: number, details: AnalysisDetails\n) {\n    if (analysisId) {\n        // update the analysis on the server:\n        yield call(createOrUpdateAnalysis,\n            compoundAnalysis.compoundAnalysis, analysisId,\n            compoundAnalysis.dataset, details\n        );\n        yield put(analysisActions.Actions.updated(analysisId, details));\n\n        const analysis: AnalysisState = yield select(selectAnalysis, analysisId);\n        const jobs = analysis.jobs ? analysis.jobs : [];\n\n        for (const oldJobId of jobs) {\n            const job: JobState = yield select(selectJob, oldJobId);\n            if (job && job.running !== \"DONE\") {\n                // wait until the job is cancelled:\n                yield call(cancelJob, oldJobId);\n            }\n        }\n        return analysisId;\n    } else {\n        // create the analysis on the server:\n        const newAnalysisId = uuid();\n        yield call(createOrUpdateAnalysis,\n            compoundAnalysis.compoundAnalysis, newAnalysisId,\n            compoundAnalysis.dataset, details\n        );\n        yield put(analysisActions.Actions.created({\n            id: newAnalysisId,\n            dataset: compoundAnalysis.dataset,\n            details,\n            jobs: [],\n        }, compoundAnalysis.compoundAnalysis, analysisIndex));\n\n        const updatedCompoundAnalysis = yield select(selectCompoundAnalysis, compoundAnalysis.compoundAnalysis);\n\n        yield call(\n            createOrUpdateCompoundAnalysis,\n            updatedCompoundAnalysis.compoundAnalysis,\n            updatedCompoundAnalysis.dataset,\n            updatedCompoundAnalysis.details,\n        );\n        return newAnalysisId;\n    }\n}\n\nexport function* analysisSidecar(compoundAnalysisId: string, options: { doAutoStart: boolean }) {\n    // channel for incoming actions:\n    // all actions that arrive while we block in `call` will be buffered here.\n    // because the buffer is sliding of size 1, we only keep the latest action!\n    const runOrParamsChannel = yield actionChannel(compoundAnalysisActions.ActionTypes.RUN, buffers.sliding(2));\n\n    while (true) {\n        try {\n            const action: compoundAnalysisActions.ActionParts[\"run\"] = yield take(runOrParamsChannel);\n\n            // ignore actions meant for other analyses\n            if (action.payload.id !== compoundAnalysisId) {\n                continue;\n            }\n\n            // get the current state incl. configuration\n            const compoundAnalysis: CompoundAnalysisState = yield select(selectCompoundAnalysis, compoundAnalysisId);\n            const { analysisIndex, details } = action.payload;\n\n            const existingAnalysisId = compoundAnalysis.details.analyses[analysisIndex];\n            const analysisId = yield call(createOrUpdate, compoundAnalysis, existingAnalysisId, analysisIndex, details);\n\n            // prepare running the job:\n            const jobId = uuid();\n            yield put(jobActions.Actions.create(jobId, analysisId, Date.now()));\n\n            // FIXME: we have a race here, as the websocket msg FINISH_JOB may\n            // arrive before call(startJob, ...) returns. this causes the apply button\n            // to feel unresponsive (the action gets done, but only after we finish here...)\n            // best reproduced in \"Slow 3G\" network simulation mode in devtools\n\n            // wait until the job is started\n            yield call(startJob, jobId, analysisId);\n            yield put(compoundAnalysisActions.Actions.running(compoundAnalysis.compoundAnalysis, jobId, analysisIndex));\n            // tslint:disable-next-line:no-empty\n        } catch (e) {\n            const timestamp = Date.now();\n            const id = uuid();\n            yield put(compoundAnalysisActions.Actions.error(`Error running analysis: ${e.toString()}`, timestamp, id));\n        }\n    }\n}\n\nfunction* removeJobsForAnalysis(analysis: AnalysisState) {\n    for (const oldJobId of analysis.jobs) {\n        const job: JobState = yield select(selectJob, oldJobId);\n        if (job && job.running !== \"DONE\") {\n            // wait until the job is cancelled:\n            yield call(cancelJob, oldJobId);\n        }\n    }\n}\n\nexport function* doRemoveAnalysisSaga(action: ReturnType<typeof compoundAnalysisActions.Actions.remove>) {\n    const compoundAnalysis: CompoundAnalysisState = yield select(selectCompoundAnalysis, action.payload.id);\n    try {\n        for (const analysisId of compoundAnalysis.details.analyses) {\n            const analysis: AnalysisState = yield select(selectAnalysis, analysisId);\n            yield call(removeJobsForAnalysis, analysis);\n            yield call(removeAnalysis, compoundAnalysis.compoundAnalysis, analysisId);\n            yield put(analysisActions.Actions.removed(analysisId));\n        }\n        yield call(removeCompoundAnalysis, action.payload.id);\n    } finally {\n        yield put(compoundAnalysisActions.Actions.removed(action.payload.id));\n    }\n}\n\nexport function* analysisRootSaga() {\n    yield takeEvery(compoundAnalysisActions.ActionTypes.CREATE, createCompoundAnalysisSaga);\n    yield takeEvery(compoundAnalysisActions.ActionTypes.REMOVE, doRemoveAnalysisSaga);\n    yield takeEvery(channelActions.ActionTypes.INITIAL_STATE, createFromServerState);\n}","import { getApiBasePath } from \"../helpers/apiHelpers\";\nimport { GetConfigResponse } from \"../messages\";\n\nexport async function getConfig(): Promise<GetConfigResponse> {\n    const basePath = getApiBasePath();\n    const r = await fetch(`${basePath}config/`, {\n        method: \"GET\",\n        credentials: \"same-origin\",\n    });\n    return await r.json();\n}","import { call, fork, put, select, take, takeEvery } from 'redux-saga/effects';\nimport uuid from 'uuid/v4';\nimport * as browserActions from '../browser/actions';\nimport * as channelActions from '../channel/actions';\nimport * as clusterActions from '../cluster/actions';\nimport * as datasetActions from '../dataset/actions';\nimport { GetConfigResponse } from '../messages';\nimport { RootReducer } from '../store';\nimport * as configActions from './actions';\nimport { getConfig } from './api';\nimport { clearLocalStorage, getDefaultLocalConfig, mergeLocalStorage, setLocalStorage } from './helpers';\nimport { ConfigState } from './reducers';\n\nfunction* getConfigOnReconnect() {\n    yield takeEvery(channelActions.ActionTypes.OPEN, getConfigSaga);\n}\n\n/**\n * get config from server and try to merge in the localStorage config\n */\nfunction* getConfigSaga() {\n    yield put(configActions.Actions.fetch());\n    const configResponse: GetConfigResponse = yield call(getConfig);\n    try {\n        const mergedConfig = mergeLocalStorage(configResponse.config);\n        yield put(configActions.Actions.fetched(mergedConfig));\n    } catch (e) {\n        try {\n            clearLocalStorage();\n            // tslint:disable-next-line:no-empty\n        } catch (e) { }\n        const defaultConfig = Object.assign({}, configResponse.config, getDefaultLocalConfig(configResponse.config));\n        yield put(configActions.Actions.fetched(defaultConfig));\n    }\n}\n\n/**\n * update localStorage config on opening files or using the file browser\n */\nfunction* updateLocalStorageConfig() {\n    while (true) {\n        yield take([\n            datasetActions.ActionTypes.CREATE,\n            browserActions.ActionTypes.DIRECTORY_LISTING,\n            clusterActions.ActionTypes.CONNECTED\n        ]);\n        const config: ConfigState = yield select((state: RootReducer) => state.config);\n        setLocalStorage(config);\n    }\n}\n\nexport function* firstConfigFetch() {\n    try {\n        yield call(getConfigSaga);\n    } catch (e) {\n        const timestamp = Date.now();\n        const id = uuid();\n        yield put(configActions.Actions.fetchFailed(`failed to fetch config: ${e.toString()}`, timestamp, id));\n    }\n}\n\nexport function* configRootSaga() {\n    yield fork(firstConfigFetch);\n    yield fork(getConfigOnReconnect);\n    yield fork(updateLocalStorageConfig);\n}","import { call, put, select, takeEvery } from 'redux-saga/effects';\nimport uuid from 'uuid/v4';\nimport * as browserActions from '../browser/actions';\nimport { joinPaths } from '../config/helpers';\nimport { ConfigState } from '../config/reducers';\nimport { DetectDatasetResponse, OpenDatasetResponse } from '../messages';\nimport { RootReducer } from '../store';\nimport * as datasetActions from \"./actions\";\nimport { deleteDataset, detectDataset, openDataset } from './api';\nimport { isKnownDatasetType } from './helpers';\n\n\nexport function* createDatasetSaga(action: ReturnType<typeof datasetActions.Actions.create>) {\n    try {\n        const resp: OpenDatasetResponse = yield call(openDataset, action.payload.dataset.id, { dataset: action.payload.dataset });\n        if (resp.status === \"ok\") {\n            yield put(datasetActions.Actions.created(resp.details));\n        } else if (resp.status === \"error\") {\n            const timestamp = Date.now();\n            const id = uuid();\n            yield put(datasetActions.Actions.error(resp.dataset, resp.msg, timestamp, id));\n        }\n    } catch (e) {\n        const timestamp = Date.now();\n        const id = uuid();\n        yield put(datasetActions.Actions.error(action.payload.dataset.id, `Error loading dataset: ${e.toString()}`, timestamp, id));\n    }\n}\n\nexport function* deleteDatasetSaga(action: ReturnType<typeof datasetActions.Actions.delete>) {\n    try {\n        yield call(deleteDataset, action.payload.dataset);\n    } catch (e) {\n        const timestamp = Date.now();\n        const id = uuid();\n        yield put(datasetActions.Actions.error(action.payload.dataset, `Error closing dataset: ${e.toString()}`, timestamp, id));\n    }\n}\n\nexport function* doDetectDataset(fullPath: string) {\n    yield put(datasetActions.Actions.detect(fullPath));\n    const detectResult: DetectDatasetResponse = yield call(detectDataset, fullPath);\n    let detectedParams;\n    let shouldOpen = true;\n    if (detectResult.status === \"ok\") {\n        if (isKnownDatasetType(detectResult.datasetParams.type)) {\n          detectedParams = detectResult.datasetParams;\n          yield put(datasetActions.Actions.detected(fullPath, detectResult.datasetParams));\n        }\n        else {\n          const timestamp = Date.now();\n          const id = uuid();\n          yield put(datasetActions.Actions.detectFailed(fullPath));\n          shouldOpen = false;\n          yield put(datasetActions.Actions.error(id, detectResult.datasetParams.type + ` dataset type is currently not supported in the GUI`, timestamp, id));\n        }\n    } else {\n        yield put(datasetActions.Actions.detectFailed(fullPath));\n    }\n    return [detectedParams, shouldOpen];\n}\n\nexport function* doOpenDataset(fullPath: string) {\n    const config: ConfigState = yield select((state: RootReducer) => state.config);\n    const cachedParams = config.lastOpened[fullPath];\n    let detectedParams;\n    let shouldOpen = true;\n    try {\n      const doDetectDatasetRes = yield call(doDetectDataset, fullPath);\n      detectedParams = doDetectDatasetRes[0];\n      shouldOpen = doDetectDatasetRes[1];\n    } catch (e) {\n        yield put(datasetActions.Actions.detectFailed(fullPath));\n    }\n    if(shouldOpen) {\n      yield put(datasetActions.Actions.open(fullPath, cachedParams, detectedParams));\n    }\n}\n\nexport function* openDatasetSagaFullPath(action: ReturnType<typeof browserActions.Actions.selectFullPath>) {\n    const fullPath = action.payload.path;\n    yield call(doOpenDataset, fullPath);\n}\n\nexport function* openDatasetSaga(action: ReturnType<typeof browserActions.Actions.select>) {\n    const config: ConfigState = yield select((state: RootReducer) => state.config);\n    const fullPath = joinPaths(config, action.payload.path, action.payload.name);\n    yield call(doOpenDataset, fullPath);\n}\n\nexport function* datasetRootSaga() {\n    yield takeEvery(datasetActions.ActionTypes.CREATE, createDatasetSaga);\n    yield takeEvery(datasetActions.ActionTypes.DELETE, deleteDatasetSaga);\n    yield takeEvery(browserActions.ActionTypes.SELECT, openDatasetSaga);\n    yield takeEvery(browserActions.ActionTypes.SELECT_FULL_PATH, openDatasetSagaFullPath);\n}\n","import { all } from 'redux-saga/effects';\nimport { directoryListingSaga } from './browser/sagas';\nimport { webSocketSaga } from './channel/sagas';\nimport { clusterConnectionSaga } from './cluster/sagas';\nimport { analysisRootSaga } from './compoundAnalysis/sagas';\nimport { configRootSaga } from './config/sagas';\nimport { datasetRootSaga } from './dataset/sagas';\n\nexport function* rootSaga() {\n    yield all([\n        configRootSaga(),\n        webSocketSaga(),\n        analysisRootSaga(),\n        datasetRootSaga(),\n        clusterConnectionSaga(),\n        directoryListingSaga(),\n    ]);\n}","import { AllActions } from \"../actions\";\nimport * as channelActions from '../channel/actions';\nimport { ById, constructById, filterWithPred, insertById, updateById } from \"../helpers/reducerHelpers\";\nimport * as jobActions from '../job/actions';\nimport * as analysisActions from \"./actions\";\nimport { AnalysisState } from \"./types\";\n\n\nexport type AnalysisReducerState = ById<AnalysisState>;\n\nconst initialAnalysisState: AnalysisReducerState = {\n    byId: {},\n    ids: [],\n}\n\nexport function analysisReducer(state = initialAnalysisState, action: AllActions): AnalysisReducerState {\n    switch (action.type) {\n        case analysisActions.ActionTypes.CREATED: {\n            return insertById(state, action.payload.analysis.id, action.payload.analysis);\n        }\n        case analysisActions.ActionTypes.REMOVED: {\n            return filterWithPred(state, (r: AnalysisState) => r.id !== action.payload.id);\n        }\n        case analysisActions.ActionTypes.UPDATED: {\n            return updateById(state, action.payload.id, {\n                details: action.payload.details,\n            });\n        }\n        case jobActions.ActionTypes.CREATE: {\n            const analysis = state.byId[action.payload.analysis];\n            // FIXME: remove old jobs\n            const oldJobs = analysis.jobs ? analysis.jobs : [];\n            return updateById(state, action.payload.analysis, {\n                jobs: [action.payload.id, ...oldJobs],\n            })\n        }\n        case channelActions.ActionTypes.INITIAL_STATE: {\n            const analysisState: AnalysisState[] = action.payload.analyses.map(item => {\n                return {\n                    doAutoStart: false,\n                    id: item.analysis,\n                    dataset: item.dataset,\n                    details: item.details,\n                    // FIXME: add jobs!\n                    jobs: item.jobs,\n                };\n            });\n            return {\n                byId: constructById(analysisState, analysis => analysis.id),\n                ids: action.payload.analyses.map(analysis => analysis.analysis),\n            }\n        }\n        case channelActions.ActionTypes.FINISH_JOB:\n        case channelActions.ActionTypes.TASK_RESULT: {\n            const analysisIdForJob = state.ids.find(id => {\n                const analysis = state.byId[id];\n                const jobs = analysis.jobs ? analysis.jobs : [];\n                return jobs.some(job => job === action.payload.job)\n            });\n            if (!analysisIdForJob) {\n                return state;\n            }\n            return updateById(state, analysisIdForJob, {\n                displayedJob: action.payload.job,\n            });\n        }\n    }\n    return state;\n}\n","import { AllActions } from \"../actions\";\nimport * as configActions from '../config/actions';\nimport { DirectoryListingDetails, FSPlace } from \"../messages\";\nimport * as browserActions from './actions';\nimport { DirectoryBrowserState } from \"./types\";\n\nconst initialBrowserState: DirectoryBrowserState = {\n    isOpen: false,\n    isLoading: true,\n    path: \"/\",\n    drives: [],\n    places: {},\n    files: [] as DirectoryListingDetails[],\n    dirs: [] as DirectoryListingDetails[],\n}\n\nexport function directoryBrowserReducer(state: DirectoryBrowserState = initialBrowserState, action: AllActions): DirectoryBrowserState {\n    switch (action.type) {\n        case configActions.ActionTypes.FETCHED: {\n            return Object.assign({}, state, {\n                path: action.payload.config.cwd,\n            })\n        }\n        case browserActions.ActionTypes.OPEN: {\n            return Object.assign({}, state, {\n                isOpen: true,\n            })\n        }\n        case browserActions.ActionTypes.CANCEL: {\n            return Object.assign({}, state, {\n                isOpen: false,\n            })\n        }\n        case browserActions.ActionTypes.LIST_DIRECTORY: {\n            return Object.assign({}, state, {\n                isLoading: true,\n            })\n        }\n        case browserActions.ActionTypes.DIRECTORY_LISTING: {\n            const places = action.payload.places.reduce((acc, place: FSPlace) => {\n                return Object.assign({}, acc, {\n                    [place.key]: place,\n                })\n            }, {});\n            return Object.assign({}, state, {\n                isLoading: false,\n                path: action.payload.path,\n                files: action.payload.files,\n                dirs: action.payload.dirs,\n                drives: action.payload.drives,\n                places,\n            })\n        }\n        case browserActions.ActionTypes.SELECT_FULL_PATH:\n        case browserActions.ActionTypes.SELECT: {\n            return Object.assign({}, state, {\n                isLoading: false,\n                isOpen: false,\n            });\n        }\n    }\n    return state;\n}","import { AllActions } from \"../actions\";\nimport * as channelActions from './actions';\n\nexport interface ChannelStatusReducer {\n    status: ChannelStatusCodes,\n}\n\nexport enum ChannelStatusCodes {\n    CONNECTING = \"connecting\",\n    CONNECTED = \"connected\",\n    READY = \"ready\",\n    WAITING = \"waiting\",\n}\n\nconst initialChannelState: ChannelStatusReducer = {\n    status: ChannelStatusCodes.WAITING,\n}\n\nexport function channelStatusReducer(state = initialChannelState, action: AllActions): ChannelStatusReducer {\n    switch (action.type) {\n        case channelActions.ActionTypes.OPEN: {\n            return { status: ChannelStatusCodes.CONNECTED };\n        }\n        case channelActions.ActionTypes.INITIAL_STATE: {\n            return { status: ChannelStatusCodes.READY };\n        }\n        case channelActions.ActionTypes.CLOSE: {\n            return { status: ChannelStatusCodes.WAITING };\n        }\n    }\n    return state;\n}","import { AllActions } from \"../actions\";\nimport { ConnectRequestParams } from \"../messages\";\nimport * as clusterActions from './actions';\n\nexport type ClusterConnectionState = {\n    status: \"connected\",\n    params: ConnectRequestParams,\n} | {\n    status: \"disconnected\",\n} | {\n    status: \"unknown\",\n} | {\n    status: \"connecting\"\n}\n\nconst initialClusterConnectionState: ClusterConnectionState = {\n    status: \"unknown\"\n}\n\nexport function clusterConnectionReducer(state = initialClusterConnectionState, action: AllActions): ClusterConnectionState {\n    switch (action.type) {\n        case clusterActions.ActionTypes.NOT_CONNECTED: {\n            return {\n                status: \"disconnected\"\n            };\n        }\n        case clusterActions.ActionTypes.CONNECTED: {\n            return {\n                status: \"connected\",\n                params: action.payload.params,\n            }\n        }\n        case clusterActions.ActionTypes.CONNECTING: {\n            return {\n                status: \"connecting\"\n            }\n        }\n    }\n    return state;\n}","import { AllActions } from \"../actions\";\nimport * as analysisActions from \"../analysis/actions\";\nimport * as channelActions from '../channel/actions';\nimport * as datasetActions from \"../dataset/actions\";\nimport { ById, constructById, filterWithPred, insertById, updateById } from \"../helpers/reducerHelpers\";\nimport * as compoundAnalysisActions from \"./actions\";\nimport { CompoundAnalysisState } from \"./types\";\n\nexport type CompoundAnalysisReducerState = ById<CompoundAnalysisState>;\n\nconst initialCompoundAnalysisState: CompoundAnalysisReducerState = {\n    byId: {},\n    ids: [],\n}\n\nexport function compoundAnalysisReducer(state = initialCompoundAnalysisState, action: AllActions): CompoundAnalysisReducerState {\n    switch (action.type) {\n        case compoundAnalysisActions.ActionTypes.CREATED: {\n            const newCompoundAnalysis = {\n                doAutoStart: action.payload.autoStart,\n                ...action.payload.compoundAnalysis,\n            }\n            return insertById(state, action.payload.compoundAnalysis.compoundAnalysis, newCompoundAnalysis);\n        }\n        case compoundAnalysisActions.ActionTypes.REMOVED: {\n            return filterWithPred(state, (r: CompoundAnalysisState) => r.compoundAnalysis !== action.payload.id);\n        }\n        case compoundAnalysisActions.ActionTypes.ENABLE_AUTOSTART: {\n            return updateById(state, action.payload.compoundAnalysisId, {\n                doAutoStart: true,\n            })\n        }\n        case datasetActions.ActionTypes.DELETE: {\n            return filterWithPred(state, (r: CompoundAnalysisState) => r.dataset !== action.payload.dataset);\n        }\n        case analysisActions.ActionTypes.CREATED: {\n            const compoundAnalysis = state.byId[action.payload.compoundAnalysis];\n            const newAnalyses = [...compoundAnalysis.details.analyses];\n            newAnalyses[action.payload.analysisIndex] = action.payload.analysis.id;\n            return updateById(state, action.payload.compoundAnalysis, {\n                details: {\n                    analyses: newAnalyses,\n                    mainType: compoundAnalysis.details.mainType,\n                }\n            });\n        }\n        case channelActions.ActionTypes.INITIAL_STATE: {\n            const compoundAnalyses = action.payload.compoundAnalyses.map(ca => ({ doAutoStart: false, ...ca }));\n            return {\n                byId: constructById(compoundAnalyses, ca => ca.compoundAnalysis),\n                ids: compoundAnalyses.map(ca => ca.compoundAnalysis),\n            };\n        }\n    }\n    return state;\n}","import { AllActions } from \"../actions\";\nimport * as browserActions from '../browser/actions';\nimport * as clusterActions from '../cluster/actions'\nimport * as datasetActions from '../dataset/actions';\nimport { ClusterTypes, DatasetFormParams, MsgPartConfig } from \"../messages\";\nimport * as configActions from './actions';\nimport { makeUnique } from \"./helpers\";\n\nexport interface LocalConfig {\n    cwd: string,\n    fileHistory: string[],\n    lastOpened: {\n        [path: string]: DatasetFormParams\n    },\n    lastConnection: {\n        type: ClusterTypes,\n        address: string\n    }\n}\n\nexport type ConfigParams = MsgPartConfig & LocalConfig ;\nexport type ConfigState = ConfigParams & {\n    haveConfig: boolean,\n};\n\nconst initialConfigState: ConfigState = {\n    version: \"\",\n    revision: \"\",\n    localCores: 0,\n    cwd: \"/\",\n    separator: \"/\",\n    lastOpened: {},\n    resultFileFormats: {},\n    fileHistory: [],\n    haveConfig: false,\n    lastConnection: {\n        type: ClusterTypes.LOCAL,\n        address: \"tcp://localhost:8786\",\n    }\n}\n\nexport function configReducer(state = initialConfigState, action: AllActions): ConfigState {\n    switch (action.type) {\n        case configActions.ActionTypes.FETCHED: {\n            return Object.assign({}, action.payload.config, { haveConfig: true });\n        }\n        case browserActions.ActionTypes.DIRECTORY_LISTING: {\n            return Object.assign({}, state, {\n                cwd: action.payload.path,\n            });\n        }\n        case datasetActions.ActionTypes.CREATE: {\n            const newLastOpened = Object.assign({}, state.lastOpened, { [action.payload.dataset.params.path]: action.payload.dataset.params });\n            const newFileHistory = makeUnique([\n                action.payload.dataset.params.path, ...state.fileHistory\n            ]).slice(0, 11);\n            return Object.assign({}, state, {\n                lastOpened: newLastOpened,\n                fileHistory: newFileHistory,\n            });\n        }\n        case clusterActions.ActionTypes.CONNECT: {\n            if (action.payload.params.type === ClusterTypes.LOCAL){\n                const newLastConnection = Object.assign({}, state.lastConnection, {type: ClusterTypes.LOCAL})\n                return Object.assign({}, state, {\n                    lastConnection : newLastConnection\n                })\n            }\n            else {\n                return Object.assign({}, state, {\n                    lastConnection: action.payload.params\n                })\n            }\n        }\n    }\n    return state;\n}","import { AllActions } from \"../actions\";\nimport * as channelActions from '../channel/actions';\nimport { constructById, filterWithPred, insertById, updateById } from \"../helpers/reducerHelpers\";\nimport { Dataset, DatasetState, DatasetStatus } from \"../messages\";\nimport * as datasetActions from './actions';\nimport { DatasetsState, OpenDatasetState } from \"./types\";\n\nconst initialDatasetState: DatasetsState = {\n    byId: {},\n    ids: [],\n};\n\nexport function datasetReducer(state = initialDatasetState, action: AllActions): DatasetsState {\n    switch (action.type) {\n        case channelActions.ActionTypes.INITIAL_STATE: {\n            const datasets = action.payload.datasets.map(ds => Object.assign({}, ds, { status: DatasetStatus.OPEN }));\n            return {\n                byId: constructById(datasets, ds => ds.id),\n                ids: datasets.map(ds => ds.id),\n            }\n        }\n        case datasetActions.ActionTypes.CREATE: {\n            const ds: Dataset = {\n                ...action.payload.dataset,\n                status: DatasetStatus.OPENING\n            };\n            return insertById(state, action.payload.dataset.id, ds);\n        }\n        case datasetActions.ActionTypes.CREATED: {\n            const ds = Object.assign({}, action.payload.dataset, { status: DatasetStatus.OPEN });\n            if (state.byId[action.payload.dataset.id]) {\n                return updateById(state, action.payload.dataset.id, ds);\n            } else {\n                return insertById(state, action.payload.dataset.id, ds);\n            }\n        }\n        case datasetActions.ActionTypes.ERROR: {\n            return filterWithPred(state, (r: DatasetState) => r.id !== action.payload.dataset);\n        }\n        case datasetActions.ActionTypes.DELETE: {\n            return updateById(state, action.payload.dataset, { status: DatasetStatus.DELETING });\n        }\n        case datasetActions.ActionTypes.DELETED: {\n            return filterWithPred(state, (r: DatasetState) => r.id !== action.payload.dataset);\n        }\n    }\n    return state;\n}\n\nconst initialOpenDatasetState: OpenDatasetState = {\n    busy: false,\n    busyPath: \"\",\n    formVisible: false,\n    formPath: \"/\",\n    formCachedParams: undefined,\n    formDetectedParams: undefined,\n}\n\nexport function openDatasetReducer(state = initialOpenDatasetState, action: AllActions): OpenDatasetState {\n    switch (action.type) {\n        case datasetActions.ActionTypes.OPEN: {\n            return {\n                ...state,\n                formVisible: true,\n                formPath: action.payload.path,\n                formCachedParams: action.payload.cachedParams,\n                formDetectedParams: action.payload.detectedParams,\n            };\n        }\n        case datasetActions.ActionTypes.CANCEL_OPEN: {\n            return {\n                ...state,\n                formVisible: false,\n            }\n        }\n        case datasetActions.ActionTypes.CREATE: {\n            return {\n                ...state,\n                formVisible: false,\n            }\n        }\n        case datasetActions.ActionTypes.DETECT: {\n            return {\n                ...state,\n                busyPath: action.payload.path,\n                busy: true,\n            }\n        }\n        case datasetActions.ActionTypes.DETECTED:\n        case datasetActions.ActionTypes.DETECT_FAILED: {\n            return {\n                ...state,\n                busyPath: \"\",\n                busy: false,\n            }\n        }\n    }\n    return state;\n}","import { AllActions } from \"../actions\";\nimport * as browserActions from '../browser/actions';\nimport * as channelActions from '../channel/actions';\nimport * as clusterActions from '../cluster/actions';\nimport * as analysisActions from '../compoundAnalysis/actions';\nimport * as datasetActions from '../dataset/actions';\nimport { ById, filterWithPred, insertById } from \"../helpers/reducerHelpers\";\nimport * as errorActions from './actions';\n\nexport interface ErrorMessage {\n    id: string,\n    msg: string,\n    timestamp: number,\n}\n\nexport type ErrorState = ById<ErrorMessage>;\n\nconst initialErrorState: ErrorState = {\n    byId: {},\n    ids: [],\n};\n\nexport function errorReducer(state = initialErrorState, action: AllActions): ErrorState {\n    switch (action.type) {\n        case browserActions.ActionTypes.ERROR:\n        case datasetActions.ActionTypes.ERROR:\n        case channelActions.ActionTypes.ERROR:\n        case clusterActions.ActionTypes.ERROR:\n        case analysisActions.ActionTypes.ERROR:\n        case channelActions.ActionTypes.JOB_ERROR: {\n            return insertById(state, action.payload.id, {\n                id: action.payload.id,\n                msg: action.payload.msg,\n                timestamp: action.payload.timestamp,\n            });\n        }\n        case channelActions.ActionTypes.OPEN: {\n            return initialErrorState;\n        }\n        case errorActions.ActionTypes.DISMISS: {\n            return filterWithPred(state, (r: ErrorMessage) => r.id !== action.payload.id);\n        }\n        case errorActions.ActionTypes.DISMISS_ALL: {\n            return initialErrorState;\n        }\n    }\n    return state;\n}","import { AllActions } from \"../actions\";\nimport * as channelActions from '../channel/actions';\nimport { ById, constructById, insertById, updateById } from \"../helpers/reducerHelpers\";\nimport * as jobActions from './actions';\nimport { JobRunning, JobState, JobStatus } from \"./types\";\n\nexport type JobReducerState = ById<JobState>;\n\nconst initialJobState: JobReducerState = {\n    byId: {},\n    ids: [],\n};\n\nexport function jobReducer(state = initialJobState, action: AllActions): JobReducerState {\n    switch (action.type) {\n        case jobActions.ActionTypes.CREATE: {\n            const createResult = insertById(\n                state,\n                action.payload.id,\n                {\n                    id: action.payload.id,\n                    analysis: action.payload.analysis,\n                    running: JobRunning.CREATING,\n                    status: JobStatus.CREATING,\n                    results: [],\n                    startTimestamp: action.payload.timestamp,\n                }\n            )\n            return createResult;\n        }\n        case channelActions.ActionTypes.JOB_STARTED: {\n            return updateById(\n                state,\n                action.payload.job,\n                {\n                    running: JobRunning.RUNNING,\n                    status: JobStatus.IN_PROGRESS,\n                    startTimestamp: action.payload.timestamp,\n                }\n            )\n        }\n        case channelActions.ActionTypes.TASK_RESULT: {\n            return updateById(\n                state,\n                action.payload.job,\n                {\n                    results: action.payload.results,\n                }\n            );\n        }\n        case channelActions.ActionTypes.FINISH_JOB: {\n            const { job, timestamp, results } = action.payload;\n            return updateById(\n                state,\n                job,\n                {\n                    running: JobRunning.DONE,\n                    status: JobStatus.SUCCESS,\n                    results,\n                    endTimestamp: timestamp,\n                }\n            );\n        }\n        case channelActions.ActionTypes.JOB_ERROR: {\n            const { job, timestamp } = action.payload;\n            return updateById(\n                state,\n                job,\n                {\n                    running: JobRunning.DONE,\n                    status: JobStatus.ERROR,\n                    endTimestamp: timestamp,\n                }\n            )\n        }\n        case channelActions.ActionTypes.INITIAL_STATE: {\n            const jobs = action.payload.jobs;\n            const jobState: JobState[] = jobs.map(job => {\n                return {\n                    id: job.id,\n                    analysis: job.analysis,\n                    // FIXME: right job status!\n                    status: JobStatus.SUCCESS,\n                    startTimestamp: 0,\n                    // FIXME: result blobs?\n                    results: [],\n                    // FIXME: right job running status!\n                    running: JobRunning.DONE,\n                    endTimestamp: 0,\n                };\n            })\n\n            return {\n                byId: constructById(jobState, job => job.id),\n                ids: jobState.map(job => job.id),\n            };\n        }\n    }\n    return state;\n}","import { combineReducers } from \"redux\";\nimport { analysisReducer } from \"./analysis/reducers\";\nimport { directoryBrowserReducer } from './browser/reducers';\nimport { channelStatusReducer } from \"./channel/reducers\";\nimport { clusterConnectionReducer } from \"./cluster/reducers\";\nimport { compoundAnalysisReducer } from \"./compoundAnalysis/reducers\";\nimport { configReducer } from \"./config/reducers\";\nimport { datasetReducer, openDatasetReducer } from \"./dataset/reducers\";\nimport { errorReducer } from \"./errors/reducers\";\nimport { jobReducer } from \"./job/reducers\";\n\nexport const rootReducer = combineReducers({\n    compoundAnalyses: compoundAnalysisReducer,\n    analyses: analysisReducer,\n    channelStatus: channelStatusReducer,\n    clusterConnection: clusterConnectionReducer,\n    datasets: datasetReducer,\n    openDataset: openDatasetReducer,\n    jobs: jobReducer,\n    errors: errorReducer,\n    config: configReducer,\n    browser: directoryBrowserReducer,\n})\n\nexport type RootReducer = ReturnType<typeof rootReducer>;","// tslint:disable:ordered-imports\nimport \"core-js/fn/symbol/iterator.js\";\nimport \"core-js/es6/symbol.js\";\nimport 'react-app-polyfill/ie11';\n// tslint:enable:ordered-imports\n\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { applyMiddleware, compose, createStore } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\nimport { rootSaga } from './sagas';\nimport { rootReducer } from './store';\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst composeEnhancers = (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(rootReducer, composeEnhancers(\n    applyMiddleware(\n        sagaMiddleware,\n    )\n));\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root') as HTMLElement\n);\nregisterServiceWorker();\n\nsagaMiddleware.run(rootSaga);"],"sourceRoot":""}