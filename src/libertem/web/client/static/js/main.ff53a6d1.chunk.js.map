{"version":3,"sources":["job/components/ResultImage.module.css","cluster/actions.ts","helpers/actionHelpers.ts","errors/actions.ts","messages.ts","errors/helpers.ts","helpers/index.ts","browser/actions.ts","cluster/components/GPUSelector.tsx","cluster/components/LocalConnectionForm.tsx","cluster/components/TCPConnectionForm.tsx","cluster/components/ClusterConnectionForm.tsx","channel/components/ChannelConnecting.tsx","channel/components/ChannelShutdown.tsx","channel/components/ChannelStatus.tsx","config/actions.ts","browser/components/FileBrowserEntry.tsx","browser/components/FileBrowserHeader.tsx","browser/components/FileEntry.tsx","browser/components/FolderEntry.tsx","job/types.ts","browser/components/PathDropDownItem.tsx","browser/components/PathInput.tsx","browser/components/RecentFiles.tsx","browser/components/PathBar.tsx","browser/components/FileBrowser.tsx","browser/components/BrowserWrapper.tsx","compoundAnalysis/actions.ts","widgets/BusySpinner.tsx","widgets/BusyWrapper.tsx","widgets/HandleParent.tsx","job/components/ResultImage.tsx","job/components/Result.tsx","job/components/Selectors.tsx","job/components/ResultList.tsx","widgets/constraints.ts","widgets/styles.ts","widgets/Disk.tsx","widgets/DraggableHandle.tsx","widgets/kbdHandler.ts","helpers/svg.ts","widgets/Ring.tsx","compoundAnalysis/components/DefaultFrameView.tsx","compoundAnalysis/components/FramePicker.tsx","compoundAnalysis/components/ModeSelector.tsx","widgets/Rect.tsx","compoundAnalysis/components/roi/RectROI.tsx","compoundAnalysis/components/roi/RoiPicker.tsx","compoundAnalysis/components/CenterOfMassAnalysis.tsx","compoundAnalysis/components/roi/DiskROI.tsx","compoundAnalysis/components/layouts/AnalysisLayoutTwoCol.tsx","helpers/apiHelpers.ts","compoundAnalysis/api.ts","compoundAnalysis/getMetadata.tsx","compoundAnalysis/components/Download.tsx","compoundAnalysis/components/Toolbar.tsx","compoundAnalysis/helpers.ts","dataset/actions.ts","widgets/compose.tsx","compoundAnalysis/components/layouts/AnalysisLayoutTwoRes.tsx","compoundAnalysis/components/Clustering.tsx","compoundAnalysis/components/DiskMaskAnalysis.tsx","compoundAnalysis/components/FEM.tsx","compoundAnalysis/components/FFTFramePicker.tsx","compoundAnalysis/components/FFTSumFrames.tsx","compoundAnalysis/components/FFTFrameView.tsx","compoundAnalysis/components/layouts/AnalysisLayoutThreeCol.tsx","compoundAnalysis/components/FFTAnalysis.tsx","compoundAnalysis/components/PointSelectionAnalysis.tsx","compoundAnalysis/components/RadialFourierAnalysis.tsx","compoundAnalysis/components/RingMaskAnalysis.tsx","compoundAnalysis/types.ts","compoundAnalysis/components/base/Analysis.tsx","compoundAnalysis/components/base/AnalysisList.tsx","helpers/reducerHelpers.ts","compoundAnalysis/components/base/AnalysisSelect.tsx","dataset/components/AddAnalysis.tsx","dataset/components/DatasetParams.tsx","dataset/components/DatasetInfo.tsx","channel/actions.ts","dataset/components/DatasetToolbar.tsx","dataset/components/Dataset.tsx","dataset/validate.ts","dataset/helpers.ts","dataset/components/BackendSelectionDropdown.tsx","dataset/components/TupleInputPart.tsx","dataset/components/TupleInput.tsx","dataset/components/Reshape.tsx","dataset/components/BLOParamsForm.tsx","dataset/components/DatasetTypeSelect.tsx","dataset/components/EMPADParamsForm.tsx","dataset/components/FRMS6ParamsForm.tsx","dataset/components/HDF5ParamsForm.tsx","dataset/components/K2ISParamsForm.tsx","dataset/components/MIBParamsForm.tsx","dataset/components/MRCParamsForm.tsx","dataset/components/RawFileParamsForm.tsx","dataset/components/SEQParamsForm.tsx","dataset/components/SERParamsForm.tsx","dataset/components/DatasetOpen.tsx","dataset/components/DatasetOpenSpinner.tsx","dataset/components/DatasetList.tsx","errors/components/Error.tsx","errors/components/ErrorList.tsx","helpers/hooks.ts","images/LiberTEM logo-medium.png","About.tsx","clusterStatus/api.ts","clusterStatus/components/LocalStatus.tsx","clusterStatus/components/NotConnected.tsx","clusterStatus/components/TCPStatus.tsx","clusterStatus/components/Cluster.tsx","shutdown/api.ts","shutdown/components/ShutdownButton.tsx","Menu.tsx","App.tsx","config/helpers.ts","browser/api.ts","browser/sagas.ts","channel/messages.ts","channel/sagas.ts","cluster/api.ts","cluster/sagas.ts","analysis/actions.ts","job/actions.ts","job/api.ts","compoundAnalysis/sagas.ts","config/api.ts","config/sagas.ts","dataset/api.ts","dataset/sagas.ts","sagas.ts","analysis/reducers.ts","channel/reducers.ts","browser/reducers.ts","cluster/reducers.ts","compoundAnalysis/reducers.ts","config/reducers.ts","dataset/reducers.ts","errors/reducers.ts","job/reducers.ts","store.ts","index.tsx"],"names":["module","exports","ActionTypes","createAction","type","payload","meta","undefined","Actions","notConnected","NOT_CONNECTED","connect","params","CONNECT","connecting","CONNECTING","connected","CONNECTED","error","msg","timestamp","id","ERROR","ClusterTypes","DISMISS","DISMISS_ALL","GENERIC","dispatchGenericError","dispatch","uuid","Date","now","errorActions","assertNotReached","message","Error","defaultDebounce","fn","delay","_","maxWait","getEnumValues","e","Object","keys","writeClipboard","contents","navigator","clipboard","writeText","catch","DatasetTypes","DatasetStatus","ClusterTypeMetadata","LOCAL","label","TCP","helpText","AnalysisTypes","IOBackendMetadata","GPUSelector","config","name","value","setFieldValue","options","devices","cudas","map","key","text","hasCupy","has_cupy","haveCudaDevices","length","disabled","showWarning","Message","warning","visible","Header","href","rel","target","Dropdown","onChange","data","placeholder","fluid","multiple","selection","withFormik","mapPropsToValues","ownProps","numWorkers","localCores","handleSubmit","values","formikBag","onSubmit","props","touched","errors","isSubmitting","handleChange","handleBlur","React","Form","Field","htmlFor","onBlur","Modal","trigger","Icon","link","Content","Button","primary","address","lastConnection","primarytype","mapDispatchToProps","connectToCluster","clusterActions","clusterTypeOptions","t","ClusterConnectionForm","state","clusterType","lastConnectionType","setType","setState","this","inline","Segment","renderForm","ChannelConnecting","icon","loading","ChannelShutdown","negative","messages","waiting","clusterMessages","ConnectedNotReady","haveConfig","useSelector","clusterConnection","status","ChannelStatus","children","channelStatus","list","path","LIST_DIRECTORY","dirListing","dirs","files","drives","places","DIRECTORY_LISTING","open","OPEN","cancel","CANCEL","select","SELECT","selectFullPath","SELECT_FULL_PATH","detectParams","DETECT_PARAMS","paramsDetected","PARAMS_DETECTED","TimeStamp","ts","date","fmtDate","toLocaleDateString","fmtTime","toLocaleTimeString","title","style","display","whiteSpace","width","marginRight","FileSize","fmtSize","bytes","si","thresh","Math","abs","size","unit","units","u","toFixed","humanFileSize","textAlign","Cell","overflow","textOverflow","FileBrowserEntry","onClick","details","myStyle","cursor","tsStyles","paddingRight","flexGrow","owner","ctime","mtime","FileBrowserHeader","alignRight","paddingBottom","FileEntry","browserActions","window","setTimeout","JobRunning","JobStatus","FETCH","FETCHED","FETCH_FAILED","TOGGLE_STAR","toString","newProps","Item","initialPath","enableReinitialize","Input","autoComplete","lastOpened","fileHistory","separator","recentFiles","filter","item","floating","Menu","content","option","idx","refresh","currentPath","handleInputChange","goUp","toggleStar","configActions","starred","driveOptions","placeOptions","starOptions","isStarred","includes","starredIcon","bookmarkTitle","listRef","scrollToTop","current","scrollToItem","sortByKey","array","getKey","sort","a","b","x","y","browser","isLoading","getSortKey","toLowerCase","dirEntries","dir","fileEntries","f","entries","concat","overflowY","ref","height","itemCount","itemSize","index","Group","as","isOpen","busy","openDataset","formVisible","labelPosition","BusySpinner","margin","padding","position","bottom","right","color","opacity","BusyWrapper","HandleParent","currentHandle","handleDragStart","h","handleDrop","handleMouseMove","externalMouseMove","handleMouseLeave","externalLeave","handleMouseUp","externalMouseUp","onMouseMove","onMouseLeave","onMouseUp","onKeyDown","onKeyboardEvent","outline","tabIndex","fill","renderHandles","handles","i","elem","ResultImage","job","channel","result","results","className","styles","fallback","viewBox","default","xlinkHref","imageURL","ResultWrapper","styled","svg","Result","extraHandles","extraWidgets","running","DONE","Selectors","div","ResultListPlaceholder","border","ResultList","selectedChannel","selectChannel","analysis","jobsById","displayedJob","dt","endTimestamp","startTimestamp","currentResult","subtitle","selectors","getMsg","selectedImg","getJob","genericRender","ResultImageSelector","availableImages","description","compoundAnalysis","compoundAnalyses","byId","analyses","analysisIndex","jobs","inRectConstraint","p","max","min","cbToRadius","cx","cy","cb","dx","dy","sqrt","dist","keepOnCY","riConstraint","outerPos","otherX","roConstraints","innerPos","defaultMaskStyles","imageWidth","fillOpacity","strokeOpacity","stroke","strokeWidth","Disk","r","StyledCircle","circle","Cross","FocusGroup","g","Handle","scale","withCross","focusRef","args","transform","crossSpec","cross","d","relativeCoords","parent","ownerSVGElement","inWidthAttr","getAttribute","inWidth","getBoundingClientRect","getScalingFactor","parentPos","pageX","left","pageXOffset","pageY","top","pageYOffset","DraggableHandle","posRef","dragging","drag","move","stopDrag","applyConstraint","constraint","startDrag","preventDefault","parentOnDragStart","focus","onDragMove","constrained","parentOnDrop","handleKeyDown","update","delta","shiftKey","handleKeyEvent","newCoords","visibility","onMouseDown","renderCommon","renderDragging","getPathArc","center","start","end","radius","degree","points","push","getLocationFromAngle","getCirclePath","clockWise","join","radian","PI","cos","sin","Ring","ri","ro","pathSpec","fillRule","DefaultModes","DefaultRois","dataset","analysisType","CREATE","autoStart","CREATED","compoundAnalysisId","ENABLE_AUTOSTART","RUN","RUNNING","jobIndex","REMOVE","REMOVED","useFramePicker","enabled","scanWidth","scanHeight","setCx","setCy","useDispatch","useEffect","compoundAnalysisActions","PICK_FRAME","parameters","onPickChange","pickX","pickY","newX","round","newY","coords","onDragStart","onDrop","ModeSelector","modes","currentMode","onModeChange","Rect","ymin","xmin","useRectROI","minLength","useState","setx","sety","setwidth","setheight","handleCornerChange","newx","newy","handleShapeChange","smthHandle","rectRoiParameters","roi","shape","rectRoiHandles","rectRoiWidgets","imageHeight","useRoiPicker","roiParameters","handle","analysisActions","clearTimeout","JSON","stringify","CoMMaskShapes","useDefaultFrameView","doAutoStart","availableModes","SUM","SD","PICK","availableRois","ALL","DISK","RECT","frameMode","setMode","setRoi","frameModeSelector","newMode","roiSelector","newRoi","widgets","floor","pickCoords","pickHandles","setR","handleCenterChange","newCx","newCy","handleRChange","newR","rHandle","diskRoiParameters","diskRoiHandles","diskRoiWidgets","useDiskROI","SD_FRAMES","SUM_FRAMES","frameViewTitle","AnalysisLayoutTwoCol","toolbar","attached","Grid","columns","Row","Column","getApiBasePath","loc","location","pathname","endsWith","genericDelete","basePath","fetch","credentials","method","json","genericPut","body","createOrUpdateAnalysis","analysisId","removeAnalysis","createOrUpdateCompoundAnalysis","removeCompoundAnalysis","getNotebook","url","getMetadata","typeName","CompoundAnalysisMetadata","DownloadItems","currentFormat","analysesById","some","jobId","SUCCESS","getAnalysisDescription","desc","getDownloadChannels","includeInDownload","CopyScripts","dependency","initial_setup","ctx","plot","notebook","setNotebook","cell","code","padded","floated","then","CurrentNotebook","clearing","firstPart","secondPart","scrolling","DownloadScripts","downloadUrl","DownloadResultItem","formatOptions","onFormatChange","Tab","Pane","DownloadNotebookItem","CopyNotebookItem","Download","formats","resultFileFormats","identifier","setFormat","panes","menuItem","render","Toolbar","busyIdxs","onApply","applyIconProps","analysisIdxsToInclude","filteredAnalyses","indexOf","reduce","prevValue","forEach","console","every","getAnalysisStatus","MaskShapeMetadata","RING","maskShapeOptions","MaskShapeSelector","selectedShape","CenterOfMassAnalysis","flip_y","setFlipY","scan_rotation","setScanRotation","setRI","maskShape","setMaskShape","riHandle","handleRIChange","rConstraint","frameViewHandles","frameViewWidgets","resultHandles","resultWidgets","parsedScanRotation","parseFloat","runAnalysis","CENTER_OF_MASS","haveResult","haveDisplayResult","updateScanRotation","comParams","Popup","List","relaxed","control","Checkbox","checked","step","AnalysisLayoutTwoRes","mid","clustparams","title1","title2","title3","ClustAnalysis","setRi","setRo","roHandle","minDist","setMinDist","nPeaks","setNPeaks","nClust","setNClust","handleROChange","SUM_SIG","CLUST","n_clust","n_peaks","min_dist","paramsVisible","setParamsVisible","Accordion","Title","active","event","valueAsNumber","DiskMaskAnalysis","APPLY_DISK_MASK","FEMAnalysis","FEM","useFFTFramePicker","real_rad","real_centerx","real_centery","PICK_FFT_FRAME","useFFTSumFrames","FFTSUM_FRAMES","useFFTFrameView","AnalysisLayoutThreeCol","FFTAnalysis","radIn","radOut","frameViewWidgetsfft","check","setCheck","realCenterX","realCenterY","realRad","frameViewWidgetsreal","APPLY_FFT_MASK","rad_in","rad_out","PointSelectionAnalysis","APPLY_POINT_SELECTOR","RadialFourierAnalysis","nBins","maxOrder","RADIAL_FOURIER","n_bins","max_order","RingMaskAnalysis","APPLY_RING_MASK","component","AnalysisDispatcherComponent","datasets","AnalysisComponent","mainType","AnalysisList","ids","Analysis","updateById","partialRecord","newObj","assign","newById","insertById","record","constructById","items","acc","updateWithMap","filterWithPred","pred","toggleItemInList","analysisTypeOptions","AnalysisSelect","labeled","button","handleAddAnalysis","renderRow","param","Table","Array","DatasetParams","HeaderCell","Body","objKey","keyIdx","renderValue","diagnostics","DiagElem","DiagElems","DatasetInfo","cachedParams","detectedParams","detectedInfo","CANCEL_OPEN","DELETE","DELETED","DETECT","info","DETECTED","DETECT_FAILED","handleRemoveDataset","datasetActions","DatasetContainer","OPENING","DELETING","dividing","marginTop","marginBottom","horizontal","flexShrink","convertErrors","res","err","fieldName","instancePath","replace","match","plainName","validateOpen","schema","customValidateErrors","validate","Ajv","compile","validateErrors","throwErrors","parseNumList","nums","split","part","trim","parseNumListProduct","validateSyncOffsetAndSigShape","nativeSigShape","sigShape","syncOffset","imageCount","isSigShapeValid","sig_shape","isSyncOffsetValid","sync_offset","getInitial","otherwise","getInitialName","pathfind","isKnownDatasetType","detectedType","v","withValidation","opts","formToJson","setSubmitting","datasetTypeInfo","customValidation","validateOnChange","validateOnBlur","BackendSelectionDropdown","backendOptions","supported_io_backends","backendId","defaultBackend","default_io_backend","defaultValue","TupleInputPart","tupleKey","tupleInputChangeHandle","commaPressHandle","tupleRef","keyCode","TupleInput","minLen","maxLen","tupleInputValue","maxLength","initialList","slice","parseNumListWithPadding","tupleInputRefsArray","val","newTupleInputValue","newTupleDim","hidden","basic","pop","Reshape","navShape","hideInfo","reshapedNavShape","reshapedSigShape","navShapeProduct","offsetValue","setOffset","offsetVal","parseInt","framesSkippedStart","framesIgnoredEnd","framesInsertedStart","framesInsertedEnd","frameCalcForOffset","required","initial","nav_shape","io_backend","BLO","native_sig_shape","image_count","handleReset","isValidating","onCancel","datasetTypeOptions","DatasetTypeSelect","currentType","EMPAD","FRMS6","ds_path","HDF5","dsItemsByPath","dsItem","dsPathInput","dsPathOptions","chunks","compression","pathsLength","search","selectedItem","K2IS","MIB","MRC","dtype","RAW","SEQ","SER","getDefaultDSType","didReset","openState","formCachedParams","formDetectedParams","DatasetOpen","setReset","formInitial","newFormCachedParams","scan_size","detector_size","getFormInitial","formInfo","formDetectedInfo","getFormInfo","defaultType","datasetType","setDatasetType","doSetType","form","formPath","datasetTypes","commonParams","onReset","MIBParamsForm","BLOParamsForm","K2ISParamsForm","SEQParamsForm","MRCParamsForm","busyPath","DatasetList","dsId","Dataset","dismiss","onDismiss","channelConnected","latestErrors","showModal","handleEsc","ev","document","addEventListener","removeEventListener","version","revision","src","alt","getClusterDetail","LocalStatus","cudaText","localCore","host","cpu","cuda","service","clustDetails","setDetails","newDetails","NotConnected","ClusterDetails","clustOverview","setOverview","setIdx","expandMsg","setMsg","overview","node","clusterExpanded","TCPStatus","localcore","ColorType","grey","setColor","setStatus","disable","setDisable","blue","initialState","INITIAL_STATE","jobStarted","JOB_STARTED","finishJob","FINISH_JOB","taskResult","TASK_RESULT","jobError","JOB_ERROR","close","CLOSE","shutdown","SHUTDOWN","closeloop","CLOSE_LOOP","cancelled","CANCELLED","cancelFailed","CANCEL_JOB_FAILED","analysisCreated","ANALYSIS_CREATED","analysisUpdated","ANALYSIS_UPDATED","analysisRemoved","ANALYSIS_REMOVED","doShutdown","closeLoopAction","channelActions","shutdownAction","ShutdownButton","modal","modalOpen","modalClose","handleShutdown","closeOnDimmerClick","onClose","HeaderMenu","fixed","Cluster","App","Container","logo","CONFIG_KEY","joinPaths","parts","removeSep","RegExp","escapeRegExp","mergeLocalStorage","serverConfig","localSettings","localStorage","getItem","getDefaultLocalConfig","localSettingsParsed","parse","defaultConfig","setLocalStorage","cwd","setItem","makeUnique","inp","curr","getDirectoryListing","encodeURIComponent","directoryListingSaga","fetchOnRequest","fetchDirectoryListing","fetchDirectoryListOnOpen","fork","take","action","newPath","call","put","browserState","alternative","home","MessageTypes","createMessage","messageType","attribs","Messages","objectURL","BINARY","webSocketSaga","actionsFromChannel","handleBinaryParts","handleTaskResult","handleFinishJob","createWebSocketChannel","eventChannel","emit","onMessage","Blob","channelMessages","URL","createObjectURL","parsed","onOpen","END","onError","ws","WebSocket","isSecure","protocol","hostname","port","getApiWSURL","socketChannel","CREATE_DATASET","DELETE_DATASET","CANCEL_JOB_DONE","numParts","binMsg","followup","numMessages","images","descriptions","connection","checkClusterConnection","connectSaga","putClusterStatus","trackClusterConnection","clusterConnectionSaga","conn","takeEvery","all","UPDATED","startJob","cancelJob","cleanupOnRemove","createCompoundAnalysisSaga","createFromServerState","createOrUpdate","analysisSidecar","removeJobsForAnalysis","doRemoveAnalysisSaga","analysisRootSaga","selectDataset","selectCompoundAnalysis","selectAnalysis","selectJob","sidecarTask","msgPart","oldJobId","newAnalysisId","updatedCompoundAnalysis","actionChannel","buffers","sliding","runOrParamsChannel","existingAnalysisId","jobActions","getConfig","getConfigOnReconnect","getConfigSaga","updateLocalStorageConfig","firstConfigFetch","configRootSaga","configResponse","mergedConfig","removeItem","deleteDataset","detectDataset","createDatasetSaga","deleteDatasetSaga","doDetectDataset","doOpenDataset","openDatasetSagaFullPath","openDatasetSaga","datasetRootSaga","resp","fullPath","detectResult","shouldOpen","datasetParams","datasetInfo","rootSaga","ChannelStatusCodes","initialAnalysisState","initialBrowserState","initialChannelState","WAITING","initialClusterConnectionState","initialCompoundAnalysisState","initialConfigState","cpus","initialDatasetState","initialOpenDatasetState","initialErrorState","initialJobState","rootReducer","combineReducers","newCompoundAnalysis","newAnalyses","ca","oldJobs","analysisState","analysisIdForJob","find","READY","DISCONNECTED","ds","createResult","CREATING","IN_PROGRESS","jobState","newLastOpened","newFileHistory","newLastConnection","place","sagaMiddleware","createSagaMiddleware","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","ReactDOM","getElementById","run"],"mappings":"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","file":"static/js/main.ff53a6d1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"default\":\"ResultImage_default__1X7FO\",\"fallback\":\"ResultImage_fallback__kO3cw\"};","import { ActionsUnion, createAction } from '../helpers/actionHelpers';\nimport { ConnectRequestParams } from '../messages';\n\nexport enum ActionTypes {\n    NOT_CONNECTED = 'CLUSTER_NOT_CONNECTED',\n    CONNECT = 'CLUSTER_CONNECT',\n    CONNECTING = 'CLUSTER_CONNECTING',\n    CONNECTED = 'CLUSTER_CONNECTED',\n    ERROR = 'CLUSTER_ERROR'\n    \n}\n\nexport const Actions = {\n    notConnected: () => createAction(ActionTypes.NOT_CONNECTED),\n    connect: (params: ConnectRequestParams) => createAction(ActionTypes.CONNECT, { params },),\n    connecting: () => createAction(ActionTypes.CONNECTING),\n    connected: (params: ConnectRequestParams ) => createAction(ActionTypes.CONNECTED, { params }),\n    error: (msg: string, timestamp: number, id: string) => createAction(ActionTypes.ERROR, { msg, timestamp, id }),\n}\n\nexport type Actions = ActionsUnion<typeof Actions>;\n","import { ActionCreatorsMapObject } from \"redux\";\n\nexport interface Action<T extends string> {\n    type: T\n}\n\nexport interface ActionWithPayload<T extends string, P> extends Action<T> {\n    payload: P\n}\n\nexport interface ActionWithMeta<T extends string, P, M> extends ActionWithPayload<T, P> {\n    meta: M\n}\n\nexport function createAction<T extends string>(type: T): Action<T>;\nexport function createAction<T extends string, P>(type: T, payload: P): ActionWithPayload<T, P>;\nexport function createAction<T extends string, P, M>(type: T, payload: P, meta: M): ActionWithMeta<T, P, M>;\n// eslint-disable-next-line prefer-arrow/prefer-arrow-functions\nexport function createAction<T extends string, P, M>(type: T, payload?: P, meta?: M) {\n    if (meta === undefined && payload === undefined) {\n        return { type };\n    } else if (meta === undefined) {\n        return { type, payload };\n    } else {\n        return { type, payload, meta }\n    }\n}\n\nexport type ActionsUnion<A extends ActionCreatorsMapObject> = ReturnType<A[keyof A]>","import { ActionsUnion, createAction } from \"../helpers/actionHelpers\";\n\nexport enum ActionTypes {\n    GENERIC = \"ERROR_GENERIC\",\n    DISMISS = \"ERROR_DISMISS\",\n    DISMISS_ALL = \"ERROR_DISMISS_ALL\",\n}\n\nexport const Actions = {\n    dismiss: (id: string) => createAction(ActionTypes.DISMISS, { id }),\n    dismissAll: () => createAction(ActionTypes.DISMISS_ALL),\n    generic: (id: string, msg: string, timestamp: number) => createAction(ActionTypes.GENERIC, { id, msg, timestamp }),\n}\n\nexport type Actions = ActionsUnion<typeof Actions>;","import { JobList } from \"./analysis/types\"\n\n/*\n * Common\n */\n\nexport interface FollowupPart {\n    numMessages: number,\n    descriptions: Array<{ title: string, desc: string, includeInDownload: boolean }>,\n}\n\nexport interface ResultFileFormat {\n    identifier: string,\n    description: string,\n}\n\nexport type JsonSchema = Record<string, unknown>;\n\nexport interface DatasetTypeInfo {\n    schema: JsonSchema,\n    default_io_backend: IOBackendId | null,\n    supported_io_backends: IOBackendId[],\n}\n\nexport interface MsgPartConfig {\n    version: string,\n    revision: string,\n    localCores: number,\n    devices: {\n        cpus: number[],\n        cudas: number[],\n        has_cupy: boolean,\n    }\n    cwd: string,\n    separator: string,\n    resultFileFormats: {\n        [id: string]: ResultFileFormat,\n    },\n    datasetTypes: {\n        [id: string]: DatasetTypeInfo,\n    },\n}\n\nexport interface GetConfigResponse {\n    status: \"ok\",\n    config: MsgPartConfig,\n}\n\n/*\n * Connection\n */\n\nexport enum ClusterTypes {\n    LOCAL = \"LOCAL\",\n    TCP = \"TCP\",\n}\n\nexport const ClusterTypeMetadata: { [s: string]: { [s: string]: string } } = {\n    [ClusterTypes.LOCAL]: {\n        label: \"Create local cluster\",\n    },\n    [ClusterTypes.TCP]: {\n        label: \"Connect to cluster\",\n        helpText: \"can be either local or remote, connection via TCP\",\n    }\n}\n\nexport interface ConnectRequestLocalCluster {\n    type: ClusterTypes.LOCAL,\n    numWorkers?: number,\n    cudas: number[],\n}\n\nexport interface ConnectRequestTCP {\n    type: ClusterTypes.TCP,\n    address: string,\n}\n\nexport type ConnectRequestParams = ConnectRequestLocalCluster | ConnectRequestTCP\n\nexport interface ConnectRequest {\n    connection: ConnectRequestParams\n}\n\nexport type ConnectResponse = {\n    status: \"ok\",\n    connection: ConnectRequest,\n} | {\n    status: \"disconnected\",\n    connection: Record<string, never>,\n} | {\n    status: \"error\",\n    messageType: string,\n    msg: string,\n}\n\nexport interface HostDetails {\n    host: string,\n    cpu: number,\n    cuda: number,\n    service: number,\n}\n\nexport interface ClusterDetailsResponse {\n    status: \"ok\",\n    messageType: string,\n    details: HostDetails[],\n}\n\n/*\n * Dataset\n */\n\nexport enum DatasetTypes {\n    HDF5 = \"HDF5\",\n    RAW = \"RAW\",\n    MIB = \"MIB\",\n    BLO = \"BLO\",\n    K2IS = \"K2IS\",\n    SER = \"SER\",\n    FRMS6 = \"FRMS6\",\n    EMPAD = \"EMPAD\",\n    SEQ = \"SEQ\",\n    MRC = \"MRC\",\n}\n\nexport interface DatasetParamsCommon {\n    name: string,\n    nav_shape: number[],\n    sig_shape: number[],\n    sync_offset: number,\n    io_backend?: IOBackendId,\n\n    // deprecated, for loading old localStorage values:\n    scan_size?: number[],\n    detector_size?: number[],\n}\n\nexport interface DatasetInfoCommon {\n    image_count: number,\n    native_sig_shape: number[],\n}\n\nexport type DatasetParamsHDF5 = {\n    type: DatasetTypes.HDF5,\n    path: string,\n    ds_path: string,\n} & DatasetParamsCommon\n\nexport interface DatasetInfoHDF5Item {\n    path: string,\n    shape: number[],\n    compression: null | string,\n    chunks: null | number[],\n}\n\nexport type DatasetInfoHDF5 = {\n    type: DatasetTypes.HDF5,\n    datasets?: DatasetInfoHDF5Item[],\n} & DatasetInfoCommon\n\nexport type DatasetParamsRaw = {\n    type: DatasetTypes.RAW,\n    path: string,\n    dtype: string,\n} & DatasetParamsCommon\n\nexport interface DatasetInfoRAW {\n    type: DatasetTypes.RAW,\n}\n\nexport type DatasetParamsMIB = {\n    type: DatasetTypes.MIB,\n    path: string,\n} & DatasetParamsCommon\n\nexport type DatasetInfoMIB = {\n    type: DatasetTypes.MIB,\n} & DatasetInfoCommon\n\nexport type DatasetParamsBLO = {\n    type: DatasetTypes.BLO,\n    path: string,\n} & DatasetParamsCommon\n\nexport type DatasetInfoBLO = {\n    type: DatasetTypes.BLO,\n} & DatasetInfoCommon\n\nexport type DatasetParamsK2IS = {\n    type: DatasetTypes.K2IS,\n    path: string,\n} & DatasetParamsCommon\n\nexport type DatasetInfoK2IS = {\n    type: DatasetTypes.K2IS,\n} & DatasetInfoCommon\n\nexport type DatasetParamsSER = {\n    type: DatasetTypes.SER,\n    path: string,\n} & DatasetParamsCommon\n\nexport type DatasetInfoSER = {\n    type: DatasetTypes.SER,\n} & DatasetInfoCommon\n\nexport type DatasetParamsFRMS6 = {\n    type: DatasetTypes.FRMS6,\n    path: string,\n} & DatasetParamsCommon\n\nexport type DatasetInfoFRMS6 = {\n    type: DatasetTypes.FRMS6,\n} & DatasetInfoCommon\n\nexport type DatasetParamsEMPAD = {\n    type: DatasetTypes.EMPAD,\n    path: string,\n} & DatasetParamsCommon\n\nexport type DatasetInfoEMPAD = {\n    type: DatasetTypes.EMPAD,\n} & DatasetInfoCommon\n\nexport type DatasetParamsSEQ = {\n    type: DatasetTypes.SEQ,\n    path: string,\n} & DatasetParamsCommon\n\nexport type DatasetInfoSEQ = {\n    type: DatasetTypes.SEQ,\n} & DatasetInfoCommon\n\nexport type DatasetParamsMRC = {\n    type: DatasetTypes.MRC,\n    path: string,\n} & DatasetParamsCommon\n\nexport type DatasetInfoMRC = {\n    type: DatasetTypes.MRC,\n} & DatasetInfoCommon\n\nexport type DatasetFormParams = DatasetParamsHDF5 | DatasetParamsRaw | DatasetParamsMIB | DatasetParamsBLO | DatasetParamsK2IS | DatasetParamsSER | DatasetParamsFRMS6 | DatasetParamsEMPAD | DatasetParamsSEQ | DatasetParamsMRC\n\nexport type DatasetFormInfo = DatasetInfoHDF5 | DatasetInfoRAW | DatasetInfoMIB | DatasetInfoBLO | DatasetInfoK2IS | DatasetInfoSER | DatasetInfoFRMS6 | DatasetInfoEMPAD | DatasetInfoSEQ | DatasetInfoMRC\n\nexport interface DatasetCreateParams {\n    id: string,\n    params: DatasetFormParams,\n}\n\nexport enum DatasetStatus {\n    OPEN = \"OPEN\",\n    OPENING = \"OPENING\",\n    DELETING = \"DELETING\",\n}\n\nexport interface DiagElemMsg {\n    name: string,\n    value: string | DiagElemMsg[],\n}\n\ninterface DatasetCommon {\n    id: string,\n    params: DatasetFormParams,\n}\n\nexport type DatasetOpening = DatasetCommon & {\n    status: DatasetStatus.OPENING,\n}\n\nexport type DatasetDeleting = DatasetCommon & {\n    status: DatasetStatus.DELETING,\n}\n\nexport type DatasetOpen = DatasetCommon & {\n    status: DatasetStatus.OPEN,\n    params: {\n        shape: number[],\n    }\n    diagnostics: DiagElemMsg[],\n}\n\nexport type CreateDatasetMessage = Omit<DatasetOpen, \"status\">;\n\nexport type Dataset = DatasetOpening | DatasetOpen | DatasetDeleting;\n\nexport type IOBackendId = \"direct\" | \"buffered\" | \"mmap\";\n\nexport const IOBackendMetadata: { [s in IOBackendId]: { label: string } } = {\n    \"mmap\": {\n        label: \"MMAP I/O backend (default on Linux)\",\n    },\n    \"buffered\": {\n        label: \"Buffered I/O backend, useful for slow HDD storage (default on Windows)\",\n    },\n    \"direct\": {\n        label: \"Direct I/O backend, useful for very large data on fast storage\",\n    },\n};\n\nexport interface OpenDatasetRequest {\n    dataset: DatasetCreateParams,\n}\n\nexport interface OpenDatasetResponseOk {\n    status: \"ok\",\n    dataset: string,  // TODO: uuid type?\n    details: DatasetOpen,\n}\n\nexport interface OpenDatasetResponseError {\n    status: \"error\",\n    dataset: string,\n    msg: string,\n}\n\nexport type OpenDatasetResponse = OpenDatasetResponseOk | OpenDatasetResponseError\n\nexport interface DeleteDatasetResponse {\n    status: \"ok\",\n    dataset: string,\n}\n\nexport interface DetectDatasetSuccessResponse {\n    status: \"ok\",\n    datasetParams: DatasetFormParams,\n    datasetInfo: DatasetFormInfo,\n}\n\nexport interface DetectDatasetErrorResponse {\n    status: \"error\",\n    path: string,\n    msg: string,\n}\n\nexport type DetectDatasetResponse = DetectDatasetSuccessResponse | DetectDatasetErrorResponse;\n\nexport type MsgPartInitialDataset = DatasetOpen\n\n// type alias to add client-side state to datasets (currently empty)\nexport type DatasetState = Dataset\n\n/*\n * Job\n */\nexport interface MsgPartJob {\n    id: string,\n    analysis: string,\n}\n\nexport interface MaskDefRing {\n    shape: \"ring\",\n    cx: number,\n    cy: number,\n    ri: number,\n    ro: number\n}\n\n\nexport interface MaskDefDisk {\n    shape: \"disk\",\n    cx: number,\n    cy: number,\n    r: number,\n}\n\nexport interface PointDef {\n    shape: \"point\",\n    cx: number,\n    cy: number,\n}\n\n// TODO: shape doesn't really make sense here, needs to be restructured\nexport interface CenterOfMassParams {\n    shape: \"com\",\n    cx: number,\n    cy: number,\n    r: number,\n    ri?: number,\n    flip_y: boolean,\n    scan_rotation: number,\n}\n\nexport interface PickFrameParams {\n    x: number,\n    y: number,\n}\n\nexport interface FFTSumFramesParams {\n    real_rad: number | null,\n    real_centerx: number | null,\n    real_centery: number | null,\n}\n\nexport interface PickFFTFrameParams {\n    x: number,\n    y: number,\n    real_rad: number | null,\n    real_centerx: number | null,\n    real_centery: number | null,\n}\nexport interface RadialFourierParams {\n    shape: \"radial_fourier\",\n    cx: number,\n    cy: number,\n    ri: number,\n    ro: number,\n    n_bins: number,\n    max_order: number\n}\n\nexport interface FFTParams {\n    rad_in: number,\n    rad_out: number,\n    real_rad: number | null,\n    real_centerx: number | null,\n    real_centery: number | null,\n}\n\nexport interface RectRoiParams {\n    shape: \"rect\",\n    x: number,\n    y: number,\n    width: number,\n    height: number,\n}\n\nexport interface DiskRoiParams {\n    shape: \"disk\",\n    cx: number,\n    cy: number,\n    r: number,\n}\n\nexport interface FrameParams {\n    roi: RectRoiParams | DiskRoiParams | Record<string, never>\n}\n\nexport interface ClustParams {\n    roi: RectRoiParams | Record<string, never>,\n    cx: number,\n    cy: number,\n    ri: number,\n    ro: number,\n    n_peaks: number,\n    n_clust: number,\n    min_dist: number,\n}\n\nexport enum AnalysisTypes {\n    APPLY_RING_MASK = \"APPLY_RING_MASK\",\n    APPLY_DISK_MASK = \"APPLY_DISK_MASK\",\n    APPLY_POINT_SELECTOR = \"APPLY_POINT_SELECTOR\",\n    CENTER_OF_MASS = \"CENTER_OF_MASS\",\n    SUM_FRAMES = \"SUM_FRAMES\",\n    SD_FRAMES = \"SD_FRAMES\",\n    PICK_FRAME = \"PICK_FRAME\",\n    PICK_FFT_FRAME = \"PICK_FFT_FRAME\",\n    APPLY_FFT_MASK = \"APPLY_FFT_MASK\",\n    FFTSUM_FRAMES = \"FFTSUM_FRAMES\",\n    RADIAL_FOURIER = \"RADIAL_FOURIER\",\n    FEM = \"FEM\",\n    CLUST = \"CLUST\",\n    SUM_SIG = \"SUM_SIG\",\n}\n\nexport interface RingMaskDetails {\n    analysisType: AnalysisTypes.APPLY_RING_MASK,\n    parameters: MaskDefRing,\n}\n\nexport interface FFTDetails {\n    analysisType: AnalysisTypes.APPLY_FFT_MASK,\n    parameters: FFTParams,\n}\n\nexport interface FEMDetails {\n    analysisType: AnalysisTypes.FEM,\n    parameters: MaskDefRing,\n}\n\nexport interface DiskMaskDetails {\n    analysisType: AnalysisTypes.APPLY_DISK_MASK,\n    parameters: MaskDefDisk,\n}\n\nexport interface PointDefDetails {\n    analysisType: AnalysisTypes.APPLY_POINT_SELECTOR,\n    parameters: PointDef,\n}\n\nexport interface CenterOfMassDetails {\n    analysisType: AnalysisTypes.CENTER_OF_MASS,\n    parameters: CenterOfMassParams,\n}\n\nexport interface SumFramesDetails {\n    analysisType: AnalysisTypes.SUM_FRAMES,\n    parameters: FrameParams\n}\n\nexport interface SDFramesDetails {\n    analysisType: AnalysisTypes.SD_FRAMES,\n    parameters: FrameParams\n}\n\nexport interface SumSigDetails {\n    analysisType: AnalysisTypes.SUM_SIG,\n    parameters: Record<string, never>\n}\n\nexport interface FFTSumFramesDetails {\n    analysisType: AnalysisTypes.FFTSUM_FRAMES,\n    parameters: FFTSumFramesParams,\n}\n\nexport interface PickFrameDetails {\n    analysisType: AnalysisTypes.PICK_FRAME,\n    parameters: PickFrameParams,\n}\n\nexport interface PickFFTFrameDetails {\n    analysisType: AnalysisTypes.PICK_FFT_FRAME,\n    parameters: PickFFTFrameParams,\n}\n\nexport interface RadialFourierDetails {\n    analysisType: AnalysisTypes.RADIAL_FOURIER,\n    parameters: RadialFourierParams,\n}\n\nexport interface ClustDetails {\n    analysisType: AnalysisTypes.CLUST,\n    parameters: ClustParams,\n}\n\nexport type AnalysisParameters = MaskDefRing | MaskDefDisk | CenterOfMassParams | PointDef | PickFrameParams | RadialFourierParams | FFTParams | PickFFTFrameParams | FFTSumFramesParams | ClustParams;\nexport type AnalysisDetails = RingMaskDetails | DiskMaskDetails | CenterOfMassDetails | PointDefDetails | SumFramesDetails | SDFramesDetails | PickFrameDetails | RadialFourierDetails | FEMDetails | FFTDetails | FFTSumFramesDetails | PickFFTFrameDetails | SumSigDetails | ClustDetails;\n\nexport interface MsgPartAnalysis {\n    analysis: string,\n    dataset: string,\n    details: AnalysisDetails,\n    jobs: JobList,\n}\n\nexport type CreateOrUpdateAnalysisRequest = Omit<MsgPartAnalysis, \"analysis\" | \"jobs\">;\n\nexport type CreateAnalysisResponse = {\n    status: \"ok\",\n    messageType: \"ANALYSIS_CREATED\",\n} & MsgPartAnalysis\n\nexport type UpdateAnalysisResponse = {\n    status: \"ok\",\n    messageType: \"ANALYSIS_UPDATED\",\n} & MsgPartAnalysis\n\nexport type RemoveAnalysisResponse = {\n    status: \"ok\"\n    messageType: \"ANALYSIS_REMOVED\",\n    analysis: string,\n} | {\n    status: \"error\",\n    messageType: \"ANALYSIS_REMOVAL_FAILED\",\n    msg: string,\n    analysis: string,\n}\n\nexport interface CompoundAnalysisDetails {\n    mainType: AnalysisTypes,\n    analyses: string[],\n}\n\nexport interface MsgPartCompoundAnalysis {\n    compoundAnalysis: string,\n    dataset: string,\n    details: CompoundAnalysisDetails,\n}\n\nexport interface CreateOrUpdateCompoundAnalysisRequest {\n    dataset: string,\n    details: CompoundAnalysisDetails,\n}\n\nexport type CreateCompoundAnalysisResponse = {\n    status: \"ok\",\n    messageType: \"COMPOUND_ANALYSIS_CREATED\",\n} & MsgPartCompoundAnalysis;\n\nexport type RemoveCompoundAnalysisResponse = {\n    status: \"ok\"\n    messageType: \"COMPOUND_ANALYSIS_REMOVED\",\n    analysis: string,\n} | {\n    status: \"error\",\n    messageType: \"COMPOUND_ANALYSIS_REMOVAL_FAILED\",\n    msg: string,\n    analysis: string,\n}\n\nexport interface StartJobRequest {\n    job: {\n        analysis: string,\n    }\n}\n\nexport interface StartJobResponse {\n    status: \"ok\",\n    job: string,\n    details: MsgPartJob,\n}\n\nexport interface CancelJobResponse {\n    status: \"ok\",\n    job: string,\n}\n\n/*\n * fs browser\n */\n\n// some named place, i.e. \"Documents\", \"Home\", ...\nexport interface FSPlace {\n    title: string,\n    path: string,\n    key: string,\n}\n\nexport interface DirectoryListingDetails {\n    name: string,\n    size: number,\n    ctime: number,\n    mtime: number,\n    owner: string,\n}\n\nexport interface DirectoryListingResponseOK {\n    status: \"ok\",\n    path: string,\n    files: DirectoryListingDetails[],\n    dirs: DirectoryListingDetails[],\n    drives: string[],\n    places: FSPlace[],\n}\n\nexport interface DirectoryListingResponseError {\n    status: \"error\",\n    path: string,\n    code: string,\n    msg: string,\n    alternative?: string,\n}\n\nexport type DirectoryListingResponse = DirectoryListingResponseOK | DirectoryListingResponseError;\n\nexport interface ShutdownResponse {\n    status: \"ok\",\n    messageType: \"SERVER_SHUTDOWN\",\n}\n\nexport interface  CopyAnalysis{\n    analysis: string,\n    plot: string[],\n}\n\nexport interface CopyNotebookResponse {\n    dependency: string,\n    initial_setup: string,\n    ctx: string,\n    dataset: string,\n    analysis: CopyAnalysis[],\n}\n","import { Dispatch } from \"redux\";\nimport { v4 as uuid } from 'uuid';\nimport { AllActions } from \"../actions\";\nimport * as errorActions from \"./actions\"\n\nexport const dispatchGenericError = (msg: string, dispatch: Dispatch<AllActions>): void => {\n    const id = uuid();\n    const timestamp = Date.now();\n    dispatch(errorActions.Actions.generic(id, \"could not write to clipboard\", timestamp));\n}","import * as _ from \"lodash\";\nimport { Dispatch } from \"redux\";\nimport { AllActions } from \"../actions\";\nimport { dispatchGenericError } from \"../errors/helpers\";\n\nexport const assertNotReached = (message: string): never => {\n    throw new Error(message);\n}\n\nexport const defaultDebounce = <T extends (...args: any[]) => any>(fn: T, delay = 50) => (\n    _.debounce(fn, delay, { maxWait: delay })\n);\n\nexport const getEnumValues = <E>(e: E): Array<keyof E> => (\n    Object.keys(e) as Array<keyof E>\n);\n\nexport const writeClipboard = (contents: string, dispatch: Dispatch<AllActions>): void => {\n    navigator.clipboard.writeText(contents).catch(() => dispatchGenericError(\"could not write to clipboard\", dispatch));\n}","import { ActionsUnion, createAction } from \"../helpers/actionHelpers\";\nimport { DatasetFormParams, DirectoryListingDetails, FSPlace } from \"../messages\";\n\nexport enum ActionTypes {\n    LIST_DIRECTORY = 'BROWSER_LIST_DIRECTORY',\n    LIST_FULL_PATH = 'BROWSER_LIST_DIRECTORY_FULL',\n    DIRECTORY_LISTING = 'BROWSER_DIRECTORY_LISTING',\n    DETECT_PARAMS = 'BROWSER_DETECT_PARAMS',\n    PARAMS_DETECTED = 'BROWSER_PARAMS_DETECTED',\n    ERROR = 'BROWSER_ERROR',\n    OPEN = 'BROWSER_OPEN',\n    CANCEL = 'BROWSER_CANCEL',\n    SELECT = 'BROWSER_SELECT',\n    SELECT_FULL_PATH = 'BROWSER_SELECT_FULL_PATH',\n}\n\nexport const Actions = {\n    list: (path: string, name?: string) => createAction(ActionTypes.LIST_DIRECTORY, { path, name }),\n    dirListing: (path: string, dirs: DirectoryListingDetails[], files: DirectoryListingDetails[], drives: string[], places: FSPlace[]) => createAction(ActionTypes.DIRECTORY_LISTING, { path, dirs, files, drives, places }),\n    open: () => createAction(ActionTypes.OPEN),\n    cancel: () => createAction(ActionTypes.CANCEL),\n    select: (path: string, name: string) => createAction(ActionTypes.SELECT, { path, name }),\n    selectFullPath: (path: string) => createAction(ActionTypes.SELECT_FULL_PATH, { path }),\n    error: (msg: string, timestamp: number, id: string) => createAction(ActionTypes.ERROR, { msg, timestamp, id }),\n    detectParams: (path: string) => createAction(ActionTypes.DETECT_PARAMS, { path }),\n    paramsDetected: (path: string, params: DatasetFormParams) => createAction(ActionTypes.PARAMS_DETECTED, { path, params }),\n}\n\nexport type Actions = ActionsUnion<typeof Actions>;","import * as React from \"react\";\nimport { Dropdown, DropdownProps, Message } from \"semantic-ui-react\";\nimport { ConfigState } from \"../../config/reducers\";\n\ninterface GPUSelectorProps {\n    config: ConfigState,\n    name: string,\n    value: number[],\n    setFieldValue: (name: string, value: any) => void,\n}\n\n\nexport const GPUSelector: React.FC<GPUSelectorProps> = ({\n    config, name, value, setFieldValue,\n}) => {\n    const options = config.devices.cudas.map(id => ({ key: id, value: id, text: `GPU ${id}` }));\n    const myHandleChange = (e: React.ChangeEvent<any>, data: DropdownProps) => {\n        setFieldValue(name, data.value);\n    }\n    const hasCupy = config.devices.has_cupy;\n    const haveCudaDevices = config.devices.cudas.length > 0;\n    const disabled = !hasCupy || !haveCudaDevices;\n    const showWarning = !hasCupy && haveCudaDevices;\n    return (\n        <>\n            {showWarning ?\n                <Message warning visible>\n                    <Message.Header>No cupy installation found</Message.Header>\n                    <p>\n                        To make use of the built-in GPU support, make\n                        sure to install <a href=\"https://cupy.dev/\" rel=\"noreferrer noopener\" target=\"_blank\">cupy</a>\n                    </p>\n                </Message> : ''\n            }\n            <Dropdown onChange={myHandleChange}\n                disabled={disabled}\n                placeholder='Select CUDA devices'\n                fluid multiple selection\n                value={value}\n                options={options} />\n        </>\n    );\n};\n","import { FormikProps, withFormik } from \"formik\";\nimport * as React from \"react\";\nimport { Button, Form, Icon, Modal } from \"semantic-ui-react\";\nimport { ConfigState } from \"../../config/reducers\";\nimport { Omit } from \"../../helpers/types\";\nimport { ClusterTypes, ConnectRequestLocalCluster } from \"../../messages\";\nimport { GPUSelector } from \"./GPUSelector\";\n\ntype FormValues = Omit<ConnectRequestLocalCluster, \"type\"> & {\n    cudas: number[],\n};\n\ninterface FormProps {\n    onSubmit: (params: ConnectRequestLocalCluster) => void,\n    config: ConfigState,\n}\n\ntype MergedProps = FormikProps<FormValues> & FormProps;\n\nconst LocalConnectionForm: React.FC<MergedProps> = ({\n    config,\n    values,\n    touched,\n    errors,\n    isSubmitting,\n    handleChange,\n    handleBlur,\n    handleSubmit,\n    setFieldValue,\n}) => {\n    // default value:\n    React.useEffect(() => {\n        setFieldValue(\"cudas\", config.devices.cudas);\n    }, [config.devices.cudas, setFieldValue]);\n\n    return (\n        <Form onSubmit={handleSubmit}>\n            <Form.Field>\n                <label htmlFor=\"numWorkers\">Number of Workers:</label>\n                <input type=\"number\" name=\"numWorkers\" value={values.numWorkers}\n                    onChange={handleChange}\n                    onBlur={handleBlur} />\n                {errors.numWorkers && touched.numWorkers && errors.numWorkers}\n            </Form.Field>\n            <Form.Field>\n                <label htmlFor=\"cudas\">\n                    CUDA devices to use{' '}\n                    <Modal trigger={<Icon name=\"info circle\" link/>}>\n                        <Modal.Header>\n                            CUDA information\n                        </Modal.Header>\n                        <Modal.Content>\n                            <p>\n                                For some operations, LiberTEM can automatically make use of your graphics card,\n                                if it supports CUDA.\n                            </p>\n                            <ul>\n                                <li>Number of CUDA devices found: {config.devices.cudas.length}</li>\n                                <li>cupy installation found:{' '}{config.devices.has_cupy ? 'Yes' : 'No'}</li>\n                            </ul>\n                            <p>cupy needs to be installed to make use of any CUDA devices on your system. Also,\n                                the matching cuda libraries and graphics drivers need to be installed. Please\n                                refer to{' '}\n                                <a href=\"https://docs.cupy.dev/en/stable/install.html\" target=\"_blank\" rel=\"noopener noreferrer\">\n                                    the cupy documentation\n                                </a>{' '}\n                                for more information.\n                            </p>\n                        </Modal.Content>\n                    </Modal>\n                </label>\n                <GPUSelector name=\"cudas\" value={values.cudas} config={config} setFieldValue={setFieldValue} />\n            </Form.Field>\n            <Button primary type=\"submit\" disabled={isSubmitting}>Connect</Button>\n        </Form>\n    )\n}\n\nexport default withFormik<FormProps, FormValues>({\n    mapPropsToValues: (ownProps: FormProps) => ({\n        numWorkers: ownProps.config.localCores,\n        cudas: [],\n    }),\n    handleSubmit: (values, formikBag) => {\n        const { onSubmit } = formikBag.props;\n        onSubmit({\n            type: ClusterTypes.LOCAL,\n            ...values,\n        });\n    }\n})(LocalConnectionForm);\n","import { FormikProps, withFormik } from \"formik\";\nimport * as React from \"react\";\nimport { Button, Form } from \"semantic-ui-react\";\nimport { ConfigState } from \"../../config/reducers\";\nimport { Omit } from \"../../helpers/types\";\nimport { ClusterTypes, ConnectRequestTCP } from \"../../messages\";\n\ntype FormValues = Omit<ConnectRequestTCP, \"type\">;\n\ninterface FormProps {\n    onSubmit: (params: ConnectRequestTCP) => void,\n    config: ConfigState,\n}\n\ntype MergedProps = FormikProps<FormValues> & FormProps;\n\nconst TCPConnectionForm: React.FC<MergedProps> = ({\n    values,\n    touched,\n    errors,\n    isSubmitting,\n    handleChange,\n    handleBlur,\n    handleSubmit,\n}) => (\n    <Form onSubmit={handleSubmit}>\n        <Form.Field>\n            <label htmlFor=\"address\">Scheduler URI</label>\n            <input type=\"text\" name=\"address\" value={values.address}\n                onChange={handleChange}\n                onBlur={handleBlur} />\n            {errors.address && touched.address && errors.address}\n        </Form.Field>\n        <Button primarytype=\"submit\" disabled={isSubmitting}>Connect</Button>\n    </Form>\n)\n\nexport default withFormik<FormProps, FormValues>({\n    mapPropsToValues: (ownProps: FormProps) => ({\n        address: ownProps.config.lastConnection.address,\n    }),\n    handleSubmit: (values, formikBag) => {\n        const { onSubmit } = formikBag.props;\n        onSubmit({\n            type: ClusterTypes.TCP,\n            ...values\n        });\n    }\n})(TCPConnectionForm);\n","\nimport * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Dropdown, DropdownProps, Segment } from \"semantic-ui-react\";\nimport * as clusterActions from \"../../cluster/actions\";\nimport { getEnumValues } from \"../../helpers\";\nimport { DispatchProps } from \"../../helpers/props\";\nimport { ClusterTypeMetadata, ClusterTypes, ConnectRequestParams } from \"../../messages\";\nimport { RootReducer } from \"../../store\";\nimport LocalConnectionForm from \"./LocalConnectionForm\";\nimport TCPConnectionForm from \"./TCPConnectionForm\";\n\n\nconst mapDispatchToProps = {\n    connectToCluster: clusterActions.Actions.connect,\n};\n\nconst mapStateToProps = (state: RootReducer) => ({\n    config: state.config,\n    lastConnectionType: state.config.lastConnection.type\n})\n\ntype MergedProps = DispatchProps<typeof mapDispatchToProps> & ReturnType<typeof mapStateToProps>;\n\nconst clusterTypeKeys = getEnumValues(ClusterTypes);\nconst clusterTypeOptions = clusterTypeKeys.map(t => ({\n    text: ClusterTypeMetadata[ClusterTypes[t]].label,\n    value: ClusterTypes[t],\n}));\n\ninterface ConnectionParamsState {\n    clusterType: ClusterTypes\n}\n\nclass ClusterConnectionForm extends React.Component<MergedProps, ConnectionParamsState> {\n    public state = {\n        clusterType: this.props.lastConnectionType,\n    }\n\n    public setType = (type: ClusterTypes) => {\n        this.setState({\n            clusterType: type,\n        });\n    }\n\n    public handleChange = (e: React.SyntheticEvent, data: DropdownProps) => {\n        const value = data.value as ClusterTypes;\n        this.setType(value);\n    }\n\n    public handleSubmit = (params: ConnectRequestParams) => {\n        this.props.connectToCluster(params);\n    }\n\n    public renderForm() {\n        const { clusterType } = this.state;\n        const { config } = this.props;\n\n        switch (clusterType) {\n            case ClusterTypes.LOCAL: {\n                return <LocalConnectionForm config={config} onSubmit={this.handleSubmit} />\n            }\n            case ClusterTypes.TCP: {\n                return <TCPConnectionForm config={config} onSubmit={this.handleSubmit} />\n            }\n        }\n    }\n\n    public render() {\n        return (\n            <>\n                <div>\n                    <Dropdown\n                        inline\n                        options={clusterTypeOptions}\n                        value={this.state.clusterType}\n                        onChange={this.handleChange}\n                    />\n                </div>\n                <Segment>\n                    {this.renderForm()}\n                </Segment>\n            </>\n        )\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ClusterConnectionForm);","import * as React from 'react';\nimport { Icon, Message } from 'semantic-ui-react';\n\ninterface ChannelConnectingProps {\n    msg: string,\n}\n\nconst ChannelConnecting: React.FC<ChannelConnectingProps> = ({ msg }) => (\n    <Message icon>\n        <Icon name='cog' loading />\n        <Message.Content>\n            <Message.Header>Connecting to LiberTEM</Message.Header>\n            {msg}\n        </Message.Content>\n    </Message>\n)\n\nexport default ChannelConnecting;","import * as React from \"react\";\nimport { Icon, Message } from \"semantic-ui-react\";\n\nconst ChannelShutdown: React.FC = () => (\n    <Message negative icon>\n        <Icon name=\"shutdown\" />\n        <Message.Content>\n            <Message.Header>Connection is closed</Message.Header>\n            <p>please close the tab</p>\n        </Message.Content>\n    </Message>\n);\n\nexport default ChannelShutdown;\n","import * as React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport ClusterConnectionForm from \"../../cluster/components/ClusterConnectionForm\";\nimport { assertNotReached } from \"../../helpers\";\nimport { RootReducer } from \"../../store\";\nimport ChannelConnecting from \"./ChannelConnecting\";\nimport ChannelShutdown from './ChannelShutdown'\n\nconst messages = {\n    waiting: \"Waiting...\",\n    connecting: \"Connecting...\",\n}\n\nconst clusterMessages = {\n    connected: \"Connected, waiting for initial state...\",\n    unknown: \"Connected, fetching cluster status...\",\n    connecting: \"Connecting to cluster\"\n}\n\nconst ConnectedNotReady: React.FC = () => {\n    const haveConfig = useSelector((state: RootReducer) => state.config.haveConfig);\n    const clusterConnection = useSelector((state: RootReducer) => state.clusterConnection);\n\n    if (!haveConfig) {\n        return <ChannelConnecting msg=\"waiting for configuration...\" />;\n    }\n    if (clusterConnection.status === \"disconnected\") {\n        return <ClusterConnectionForm />\n    } else if (clusterConnection.status === \"connected\") {\n        return <ChannelConnecting msg={clusterMessages.connected} />;\n    } else if (clusterConnection.status === \"unknown\") {\n        return <ChannelConnecting msg={clusterMessages.unknown} />;\n    } else if (clusterConnection.status === \"connecting\") {\n        return <ChannelConnecting msg={clusterMessages.connecting} />\n    }\n    assertNotReached(\"should not happen\");\n    return null;\n}\n\nconst ChannelStatus: React.FC = ({ children }) => {\n    const channelStatus = useSelector((state: RootReducer) => state.channelStatus);\n\n    switch (channelStatus.status) {\n        case \"waiting\":\n        case \"connecting\": {\n            return <ChannelConnecting msg={messages[channelStatus.status]} />;\n        }\n        case \"connected\": {\n            return <ConnectedNotReady />\n        }\n        case \"ready\":\n            return <>{children}</>;\n        case \"disconnected\":\n            return <ChannelShutdown />\n        default:\n            assertNotReached(\"should not happen\");\n            return null;\n    }\n}\n\nexport default ChannelStatus;","import { ActionsUnion, createAction } from \"../helpers/actionHelpers\";\nimport { ConfigParams } from \"./reducers\";\n\nexport enum ActionTypes {\n    FETCHED = \"CONFIG_FETCHED\",\n    FETCH = \"CONFIG_FETCH\",\n    FETCH_FAILED = \"CONFIG_FETCH_FAILED\",\n    TOGGLE_STAR = \"CONFIG_TOGGLE_STAR\",\n}\n\nexport const Actions = {\n    fetch: () => createAction(ActionTypes.FETCH),\n    fetched: (config: ConfigParams) => createAction(ActionTypes.FETCHED, { config }),\n    fetchFailed: (msg: string, timestamp: number, id: string) => createAction(ActionTypes.FETCH_FAILED, { msg, timestamp, id }),\n    toggleStar: (path: string) => createAction(ActionTypes.TOGGLE_STAR, { path }),\n}\n\nexport type Actions = ActionsUnion<typeof Actions>;","import * as React from \"react\";\nimport { Icon, SemanticICONS } from \"semantic-ui-react\";\nimport { DirectoryListingDetails } from \"../../messages\";\n\n\ninterface FileBrowserEntryProps {\n    style: Record<string, unknown>,\n    details: DirectoryListingDetails,\n    onClick?: () => void,\n    icon?: SemanticICONS,\n}\n\ninterface TimeStampProps {\n    ts: number,\n}\n\nexport const TimeStamp: React.FC<TimeStampProps> = ({ ts }) => {\n    const date = new Date(ts * 1000);\n    const fmtDate = date.toLocaleDateString();\n    const fmtTime = date.toLocaleTimeString();\n    const title = `${fmtDate} ${fmtTime}`;\n    return (\n        <div style={{ display: \"flex\", whiteSpace: \"nowrap\" }} title={title}>\n            <div style={{ width: \"50%\", marginRight: \"10px\" }}>{fmtDate}</div>\n            <div style={{ width: \"45%\" }}>{fmtTime}</div>\n        </div>\n    )\n}\n\n// adapted from https://stackoverflow.com/a/14919494/540644\nconst humanFileSize = (bytes: number, si = false) => {\n    const thresh = si ? 1000 : 1024;\n    if (Math.abs(bytes) < thresh) {\n        return {\n            size: bytes,\n            unit: 'B',\n        }\n    }\n    const units = si\n        ? ['kB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB']\n        : ['KiB', 'MiB', 'GiB', 'TiB', 'PiB', 'EiB', 'ZiB', 'YiB'];\n    let u = -1;\n    do {\n        bytes /= thresh;\n        ++u;\n    } while (Math.abs(bytes) >= thresh && u < units.length - 1);\n\n    return {\n        size: bytes.toFixed(1),\n        unit: units[u],\n    }\n}\n\ninterface FileSizeProps {\n    size: number,\n    si?: boolean,\n}\n\nexport const FileSize: React.FC<FileSizeProps> = ({ size, si }) => {\n    const fmtSize = humanFileSize(size, si)\n    return (\n        <div style={{ textAlign: \"right\" }}>\n            {fmtSize.size} {fmtSize.unit}\n        </div>\n    );\n}\n\nexport const Cell: React.FC<{ title?: string }> = ({ children, title }) => {\n    const styles: React.CSSProperties = {\n        whiteSpace: \"nowrap\",\n        overflow: \"hidden\",\n        textOverflow: \"ellipsis\",\n        marginRight: \"10px\",\n    }\n    return (\n        <div style={styles} title={title}>{children}</div>\n    );\n}\n\n\nclass FileBrowserEntry extends React.Component<FileBrowserEntryProps> {\n    public onClick = (): void => {\n        const { onClick } = this.props;\n        if (onClick) {\n            onClick();\n        }\n    }\n\n    public render(): JSX.Element {\n        const { details, style, icon } = this.props;\n        const myStyle: React.CSSProperties = {\n            cursor: \"pointer\",\n            ...style,\n        };\n\n        const tsStyles: React.CSSProperties = {\n            textAlign: \"right\",\n        };\n\n        return (\n            <div onClick={this.onClick} style={myStyle}>\n                <div style={{ display: \"flex\", paddingRight: \"10px\" }}>\n                    <div style={{ width: \"20%\", flexGrow: 1 }}>\n                        <Cell title={details.name}>\n                            {icon && <Icon name={icon} />}\n                            {details.name}\n                        </Cell>\n                    </div>\n                    <div style={{ width: \"10%\" }}><Cell><FileSize size={details.size} si={false} /></Cell></div>\n                    <div style={{ width: \"10%\" }}><Cell>{details.owner}</Cell></div>\n                    <div style={{ width: \"18%\", ...tsStyles }}>\n                        <Cell><TimeStamp ts={details.ctime} /></Cell>\n                    </div>\n                    <div style={{ width: \"18%\", ...tsStyles }}>\n                        <Cell><TimeStamp ts={details.mtime} /></Cell>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default FileBrowserEntry;","import * as React from \"react\";\nimport { Cell } from \"./FileBrowserEntry\";\n\nconst FileBrowserHeader: React.FC = () => {\n    const alignRight: React.CSSProperties = {\n        textAlign: \"right\",\n    };\n\n    // ugly hack: padding-right to compensate for scrollbar size\n    return (\n        <div style={{ paddingRight: \"20px\", paddingBottom: \"10px\" }}>\n            <div style={{ display: \"flex\" }}>\n                <div style={{ width: \"20%\", flexGrow: 1 }}>\n                    <Cell>Name</Cell>\n                </div>\n                <div style={{ width: \"10%\", ...alignRight }}>\n                    <Cell>Size</Cell>\n                </div>\n                <div style={{ width: \"10%\" }}>\n                    <Cell>Owner</Cell>\n                </div>\n                <div style={{ width: \"18%\", ...alignRight }}>\n                    <Cell>Created</Cell>\n                </div>\n                <div style={{ width: \"18%\", ...alignRight }}>\n                    <Cell>Modified</Cell>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default FileBrowserHeader;","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { DirectoryListingDetails } from \"../../messages\";\nimport * as browserActions from '../actions';\nimport FileBrowserEntry from \"./FileBrowserEntry\";\n\ninterface FileEntryProps {\n    path: string,\n    style: Record<string, unknown>,\n    details: DirectoryListingDetails,\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch, ownProps: FileEntryProps) => ({\n    select: () => dispatch(browserActions.Actions.select(ownProps.path, ownProps.details.name)),\n})\n\ntype MergedProps = FileEntryProps & ReturnType<typeof mapDispatchToProps>;\n\nclass FileEntry extends React.Component<MergedProps> {\n    public render() {\n        const { details, style, select } = this.props;\n\n        return (\n            <FileBrowserEntry onClick={select} style={style} details={details}\n                icon=\"file outline\" />\n        )\n    }\n}\n\nexport default connect(null, mapDispatchToProps)(FileEntry);","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { DirectoryListingDetails } from \"../../messages\";\nimport * as browserActions from '../actions';\nimport FileBrowserEntry from \"./FileBrowserEntry\";\n\nconst mapDispatchToProps = (dispatch: Dispatch, ownProps: FolderEntryProps) => ({\n    list: () => {\n        dispatch(browserActions.Actions.list(ownProps.path, ownProps.details.name));\n        window.setTimeout(() => ownProps.onChange(), 0);\n    },\n})\n\ninterface FolderEntryProps {\n    path: string,\n    style: Record<string, unknown>,\n    details: DirectoryListingDetails,\n    onChange: () => void,\n}\n\ntype MergedProps = FolderEntryProps & ReturnType<typeof mapDispatchToProps>;\n\nconst FolderEntry: React.FC<MergedProps> = ({ list, details, style }) => (\n    <FileBrowserEntry onClick={list} style={style} details={details} icon=\"folder\" />\n);\n\nexport default connect(null, mapDispatchToProps)(FolderEntry);\n","\nexport interface JobResultType {\n    imageURL: string,\n    description: { title: string, desc: string, includeInDownload: boolean },\n}\n\nexport enum JobRunning {\n    CREATING = 'CREATING',\n    RUNNING = 'RUNNING',\n    DONE = 'DONE',\n}\n\nexport enum JobStatus {\n    CREATING = 'CREATING',\n    IN_PROGRESS = 'IN_PROGRESS',\n    CANCELLED = 'CANCELLED',\n    SUCCESS = 'SUCCESS',\n    ERROR = 'ERROR',\n}\n\nexport interface JobStateCommon {\n    id: string,\n    analysis: string,\n    status: JobStatus,\n    startTimestamp: number,\n    results: JobResultType[],\n}\n\nexport type JobStateStart = JobStateCommon & {\n    running: JobRunning.CREATING | JobRunning.RUNNING,\n}\n\nexport type JobStateDone = JobStateCommon & {\n    running: JobRunning.DONE,\n    endTimestamp: number,\n}\n\nexport type JobState = JobStateStart | JobStateDone;","import * as React from 'react';\nimport { connect } from \"react-redux\";\nimport { Dispatch } from 'redux';\nimport { Dropdown, DropdownItemProps } from \"semantic-ui-react\";\nimport * as browserActions from '../actions';\n\ntype PathDropdownItemProps = DropdownItemProps & {\n    onChange: () => void,\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch, ownProps: PathDropdownItemProps) => ({\n    list: () => {\n        if (ownProps.value !== undefined) {\n            dispatch(browserActions.Actions.list(ownProps.value.toString()));\n            window.setTimeout(() => ownProps.onChange(), 0);\n        }\n    },\n})\n\ntype MergedProps = ReturnType<typeof mapDispatchToProps> & PathDropdownItemProps;\n\nconst PathDropDownItem: React.FC<MergedProps> = ({ list, ...props }) => {\n    const newProps = {\n        onClick: list,\n        ...props,\n    }\n    return <Dropdown.Item {...newProps} />;\n}\n\nexport default connect(null, mapDispatchToProps)(PathDropDownItem);","import { FormikProps, withFormik } from \"formik\";\nimport * as React from \"react\";\nimport { Form, Input } from \"semantic-ui-react\";\n\ninterface FormValues {\n    path: string,\n}\n\ninterface PathInputProps {\n    onChange: (path: string) => void,\n    initialPath: string,\n}\n\ntype MergedProps = FormikProps<FormValues> & PathInputProps;\n\nconst PathInput: React.FC<MergedProps> = ({\n    values,\n    handleChange,\n    handleBlur,\n    handleSubmit,\n}) => (\n    <Form onSubmit={handleSubmit} style={{ flexGrow: 1 }}>\n        <Form.Field>\n            <Input autoComplete=\"off\" onBlur={handleBlur} onChange={handleChange} value={values.path} name=\"path\" />\n        </Form.Field>\n    </Form>\n);\n\nexport default withFormik<PathInputProps, FormValues>({\n    mapPropsToValues: ({ initialPath }) => ({\n        path: initialPath,\n    }),\n    handleSubmit: (values, formikBag) => {\n        const { onChange } = formikBag.props;\n        onChange(values.path);\n    },\n    enableReinitialize: true,\n})(PathInput);","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { Dropdown, DropdownItemProps } from \"semantic-ui-react\";\nimport { DatasetTypes } from \"../../messages\";\nimport { RootReducer } from \"../../store\";\nimport * as browserActions from '../actions';\n\n\ntype DropdownOptions = Array<{\n    text: string,\n    value: {\n        type: DatasetTypes,\n        path: string,\n    },\n}>;\n\nconst mapStateToProps = (state: RootReducer) => ({\n    lastOpened: state.config.lastOpened,\n    fileHistory: state.config.fileHistory,\n    separator: state.config.separator,\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n    select: (path: string) => dispatch(browserActions.Actions.selectFullPath(path)),\n})\n\ntype MergedProps = ReturnType<typeof mapStateToProps> & ReturnType<typeof mapDispatchToProps>;\n\nconst RecentFiles: React.FC<MergedProps> = ({ lastOpened, fileHistory, select }) => {\n\n    const recentFiles: DropdownOptions = fileHistory.filter((path: string) => lastOpened[path]).map((path: string) => {\n        const item = lastOpened[path];\n        return {\n            text: item.path,\n            value: {\n                type: item.type,\n                path: item.path,\n            },\n        };\n    });\n\n    const onClick = (e: React.MouseEvent<HTMLDivElement>, data: DropdownItemProps) => data.value && select(data.value.toString())\n\n    return (\n        <Dropdown item text=\"Recent\" floating>\n            <Dropdown.Menu>\n                <Dropdown.Header content=\"recent datasets\" />\n                {recentFiles.map((option, idx) => (\n                    <Dropdown.Item key={idx} value={option.value.path} content={option.text} onClick={onClick} />\n                ))}\n            </Dropdown.Menu>\n        </Dropdown>\n    );\n}\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RecentFiles);","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { Dropdown, Menu } from \"semantic-ui-react\";\nimport * as configActions from '../../config/actions';\nimport * as browserActions from '../actions';\nimport { FSPlaces } from \"../types\";\nimport PathDropDownItem from \"./PathDropDownItem\";\nimport PathInput from \"./PathInput\";\nimport RecentFiles from \"./RecentFiles\";\n\nconst mapDispatchToProps = (dispatch: Dispatch, ownProps: PathBarProps) => ({\n    refresh: () => {\n        dispatch(browserActions.Actions.list(ownProps.currentPath));\n        window.setTimeout(() => ownProps.onChange(), 0);\n    },\n    handleInputChange: (path: string) => {\n        dispatch(browserActions.Actions.list(path));\n        window.setTimeout(() => ownProps.onChange(), 0);\n    },\n    goUp: () => {\n        dispatch(browserActions.Actions.list(ownProps.currentPath, '..'));\n        window.setTimeout(() => ownProps.onChange(), 0);\n    },\n    toggleStar: () => {\n        dispatch(configActions.Actions.toggleStar(ownProps.currentPath));\n    }\n});\n\ninterface PathBarProps {\n    currentPath: string,\n    onChange: () => void,\n    drives: string[],\n    places: FSPlaces,\n    starred: string[],\n}\n\ntype MergedProps = ReturnType<typeof mapDispatchToProps> & PathBarProps;\n\nconst PathBar: React.FC<MergedProps> = ({ currentPath, drives, places, starred, onChange, refresh, goUp, handleInputChange, toggleStar }) => {\n    const driveOptions = drives.map((path) => ({ key: path, text: path }));\n    const placeOptions = Object.keys(places).map((key) => ({ key: places[key].path, text: places[key].title }));\n    const starOptions = starred.map((path) => ({ key: path, text: path }));\n    const isStarred = starred.includes(currentPath);\n    const starredIcon = isStarred ? \"star\" : \"star outline\";\n    const bookmarkTitle = isStarred ? \"Remove from bookmarks\" : \"Bookmark this location\";\n\n    return (\n        <Menu>\n            <RecentFiles />\n            <Dropdown text=\"Go to...\" floating item>\n                <Dropdown.Menu>\n                    <Dropdown.Header content=\"Drives\" />\n                    {driveOptions.map((option) =>\n                        <PathDropDownItem key={option.key} value={option.key} content={option.text} onChange={onChange} />\n                    )}\n                    <Dropdown.Header content=\"Places\" />\n                    {placeOptions.map((option) =>\n                        <PathDropDownItem key={option.key} value={option.key} content={option.text} onChange={onChange} />\n                    )}\n                    <Dropdown.Header content=\"Starred\" />\n                    {starOptions.length === 0 && \n                        <Dropdown.Item key=\"empty\" value=\"empty\" content=\"No bookmarks yet\" />\n                    }\n                    {starOptions.map((option) =>\n                        <PathDropDownItem key={option.key} value={option.key} content={option.text} onChange={onChange} />\n                    )}\n                </Dropdown.Menu>\n            </Dropdown>\n            <Menu.Item title={bookmarkTitle} icon={starredIcon} onClick={toggleStar} />\n            <Menu.Item icon=\"arrow up\" onClick={goUp} />\n            <Menu.Item style={{ flexGrow: 1 }}>\n                <PathInput onChange={handleInputChange} initialPath={currentPath} />\n            </Menu.Item>\n            <Menu.Item icon=\"refresh\" onClick={refresh} />\n        </Menu>\n    );\n}\n\n\nexport default connect(null, mapDispatchToProps)(PathBar);","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { FixedSizeList as List } from \"react-window\";\nimport { Dispatch } from \"redux\";\nimport { Button, Header, Segment } from \"semantic-ui-react\";\nimport { DirectoryListingDetails } from \"../../messages\";\nimport { RootReducer } from \"../../store\";\nimport * as browserActions from '../actions';\nimport FileBrowserHeader from \"./FileBrowserHeader\";\nimport FileEntry from \"./FileEntry\";\nimport FolderEntry from \"./FolderEntry\";\nimport PathBar from \"./PathBar\";\n\nconst mapStateToProps = (state: RootReducer) => {\n    const { browser, config } = state;\n    return {\n        files: browser.files,\n        dirs: browser.dirs,\n        path: browser.path,\n        drives: browser.drives,\n        places: browser.places,\n        isLoading: browser.isLoading,\n        starred: config.starred,\n    };\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n    cancel: () => dispatch(browserActions.Actions.cancel()),\n});\n\ntype MergedProps = ReturnType<typeof mapStateToProps> & ReturnType<typeof mapDispatchToProps>;\n\ninterface EntryFnArgs {\n    index: number,\n    style: Record<string, unknown>,\n}\ntype EntryFn = (arg: EntryFnArgs) => void\n\nconst listRef = React.createRef<List>();\n\nconst scrollToTop = () => {\n    if (listRef.current === null) {\n        return;\n    }\n    listRef.current.scrollToItem(0);\n}\n\nconst sortByKey = <K, T>(array: T[], getKey: (item: T) => K) => (\n    array.sort((a, b) => {\n        const x = getKey(a);\n        const y = getKey(b);\n        return ((x < y) ? -1 : ((x > y) ? 1 : 0));\n    })\n);\n\nconst FileBrowser: React.FC<MergedProps> = ({ files, dirs, path, drives, places, starred, cancel, isLoading }) => {\n    const getSortKey = (item: DirectoryListingDetails) => item.name.toLowerCase();\n    const dirEntries = sortByKey(dirs, getSortKey).map((dir) => (style: Record<string, unknown>) => <FolderEntry style={style} onChange={scrollToTop} path={path} details={dir} />);\n    const fileEntries = sortByKey(files, getSortKey).map((f) => ((style: Record<string, unknown>) => <FileEntry style={style} path={path} details={f} />));\n    const entries = dirEntries.concat(fileEntries);\n\n    const cellFn: EntryFn = ({ index, style }) => entries[index](style);\n\n    let list = (\n        <List style={{ overflowY: \"scroll\" }} ref={listRef} height={300} width=\"100%\" itemCount={entries.length} itemSize={35}>\n            {cellFn}\n        </List>\n    );\n\n    if (isLoading) {\n        // FIXME: hardcoded height\n        list = (\n            <Segment loading style={{ height: \"300px\" }} />\n        )\n    }\n\n    return (\n        <Segment.Group>\n            <Segment>\n                <Header as=\"h2\">Open dataset</Header>\n            </Segment>\n            <Segment>\n                <PathBar currentPath={path} drives={drives} places={places} starred={starred} onChange={scrollToTop} />\n            </Segment>\n            <Segment>\n                <FileBrowserHeader />\n                {list}\n            </Segment>\n            <Segment>\n                <Button onClick={cancel}>Cancel</Button>\n            </Segment>\n        </Segment.Group>\n    );\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FileBrowser);","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Button, Icon } from \"semantic-ui-react\";\nimport { DispatchProps } from \"../../helpers/props\";\nimport { RootReducer } from \"../../store\";\nimport * as browserActions from '../actions';\nimport FileBrowser from \"./FileBrowser\";\n\nconst mapStateToProps = (state: RootReducer) => ({\n    isOpen: state.browser.isOpen,\n    busy: state.openDataset.busy,\n    formVisible: state.openDataset.formVisible,\n});\n\nexport const mapDispatchToProps = {\n    open: browserActions.Actions.open,\n}\n\ntype MergedProps = ReturnType<typeof mapStateToProps> & DispatchProps<typeof mapDispatchToProps>;\n\nconst BrowserWrapper: React.FC<MergedProps> = ({ formVisible, isOpen, open, busy }) => {\n    if(formVisible || busy) {\n        return null;\n    } else if (!isOpen) {\n        return (\n            <Button icon labelPosition=\"left\" onClick={open}>\n                <Icon name='add' />\n                Browse\n            </Button>\n        );\n    } else {\n        return (\n            <FileBrowser />\n        );\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(BrowserWrapper)\n","import { ActionsUnion, createAction } from \"../helpers/actionHelpers\";\nimport { AnalysisDetails, AnalysisTypes, CompoundAnalysisDetails } from \"../messages\";\nimport { CompoundAnalysis } from \"./types\";\n\n\nexport enum ActionTypes {\n    CREATE = 'COMPOUND_ANALYSIS_CREATE',\n    CREATED = 'COMPOUND_ANALYSIS_CREATED',\n    UPDATED = 'COMPOUND_ANALYSIS_UPDATED',\n    RUN = 'COMPOUND_ANALYSIS_RUN',\n    RUNNING = 'COMPOUND_ANALYSIS_RUNNING',\n    REMOVE = 'COMPOUND_ANALYSIS_REMOVE',\n    REMOVED = 'COMPOUND_ANALYSIS_REMOVED',\n    ERROR = 'COMPOUND_ANALYSIS_ERROR',\n    ENABLE_AUTOSTART = 'COMPOUND_ANALYSIS_ENABLE_AUTOSTART',\n}\n\nexport const Actions = {\n    create: (dataset: string, analysisType: AnalysisTypes) => createAction(ActionTypes.CREATE, { dataset, analysisType }),\n    created: (\n        compoundAnalysis: CompoundAnalysis, autoStart: boolean\n    ) => createAction(ActionTypes.CREATED, { compoundAnalysis, autoStart }),\n    enableAutoStart: (\n        compoundAnalysisId: string\n    ) => createAction(ActionTypes.ENABLE_AUTOSTART, { compoundAnalysisId }),\n    updated: (id: string, details: CompoundAnalysisDetails) => createAction(ActionTypes.UPDATED, { id, details }),\n    run: (id: string, analysisIndex: number, details: AnalysisDetails) => createAction(ActionTypes.RUN, { id, analysisIndex, details }),\n    running: (id: string, job: string, analysisIndex: number) => createAction(ActionTypes.RUNNING, { id, job, jobIndex: analysisIndex }),\n    remove: (id: string) => createAction(ActionTypes.REMOVE, { id }),\n    removed: (id: string) => createAction(ActionTypes.REMOVED, { id }),\n    error: (msg: string, timestamp: number, id: string) => createAction(ActionTypes.ERROR, { msg, timestamp, id }),\n}\n\nexport type Actions = ActionsUnion<typeof Actions>;\n\nexport type ActionParts = {\n    [K in keyof typeof Actions]: ReturnType<typeof Actions[K]>\n}","import * as React from \"react\";\nimport { Icon } from \"semantic-ui-react\";\n\nconst BusySpinner: React.FC = () => {\n    const styles: React.CSSProperties = {\n        margin: 0,\n        padding: 0,\n        position: \"absolute\",\n        bottom: \"10px\",\n        right: \"10px\",\n        color: \"white\",\n        opacity: 0.7,\n        filter: \"drop-shadow(0 0 3px #000)\",\n    };\n    return <Icon name=\"cog\" loading style={styles} />\n}\n\nexport default BusySpinner;","import * as React from \"react\";\nimport BusySpinner from \"./BusySpinner\";\n\ninterface BusyWrapperProps {\n    busy: boolean,\n}\n\nconst BusyWrapper: React.FC<BusyWrapperProps> = ({ children, busy }) => {\n    const styles: React.CSSProperties = {\n        position: \"relative\",\n    };\n    return (\n        <div style={styles}>\n            {children}\n            {busy && <BusySpinner />}\n        </div>\n    )\n}\n\nexport default BusyWrapper;","import * as React from \"react\";\nimport { DraggableHandle } from \"./DraggableHandle\";\nimport { HandleRenderFunction } from \"./types\";\n\nexport interface HandleParentProps {\n    width: number,\n    height: number,\n    onKeyboardEvent?: React.KeyboardEventHandler<SVGElement>,\n    handles: HandleRenderFunction[],\n}\n\nexport class HandleParent extends React.Component<HandleParentProps> {\n    public currentHandle: DraggableHandle | undefined;\n\n    public handleDragStart = (h: DraggableHandle): void => {\n        this.currentHandle = h;\n    }\n\n    public handleDrop = (): void => {\n        this.currentHandle = undefined;\n    }\n\n    public handleMouseMove = (e: React.MouseEvent<SVGElement>): void => {\n        if (this.currentHandle) {\n            return this.currentHandle.externalMouseMove(e);\n        }\n    }\n\n    public handleMouseLeave = (): void => {\n        if (this.currentHandle) {\n            this.currentHandle.externalLeave();\n        }\n    }\n\n    public handleMouseUp = (): void => {\n        if (this.currentHandle) {\n            this.currentHandle.externalMouseUp();\n        }\n    }\n\n    public render() {\n        const { width, height } = this.props;\n        const styles = {\n            outline: \"1px dashed black\"\n        }\n        return (\n            <g\n                onMouseMove={this.handleMouseMove}\n                onMouseLeave={this.handleMouseLeave}\n                onMouseUp={this.handleMouseUp}\n                onKeyDown={this.props.onKeyboardEvent}\n                style={styles}\n                tabIndex={0}\n            >\n                <rect style={{ fill: \"transparent\" }}\n                    x={0} y={0} width={width} height={height}\n                />\n                {this.renderHandles()}\n            </g>\n        );\n    }\n\n    public renderHandles() {\n        const { handles, onKeyboardEvent } = this.props;\n        // we need to inform the handle when there are move/up/leave events\n        // on this parent element, for which we need to know the current handle.\n        // so we pass the handle a dragstart/drop function and kindly ask it\n        // to call us if it starts to be dragged or is dropped.\n        return handles.map((h, i) => {\n            const elem = h(this.handleDragStart, this.handleDrop, onKeyboardEvent);\n            if (React.isValidElement(elem)) {\n                return React.cloneElement(elem, { key: i });\n            }\n            return null;\n        });\n    }\n}\n\nexport default HandleParent;","import * as React from \"react\";\nimport { JobState } from \"../types\";\nimport styles from \"./ResultImage.module.css\";\n\ninterface ResultImageProps {\n    job: JobState,\n    channel: number,\n    width: number,\n    height: number,\n}\n\nconst ResultImage: React.FC<ResultImageProps> = ({ job, channel, width, height }) => {\n    const result = job.results[channel];\n    if (result === undefined) {\n        return (\n            <svg className={styles.fallback} width={width} height={height} viewBox={`0 0 ${width} ${height}`} key={-1} />\n        )\n    }\n    return (\n        <image className={styles.default} xlinkHref={result.imageURL} width={width} height={height} />\n    );\n}\n\nexport default ResultImage;","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport styled from 'styled-components';\nimport BusyWrapper from \"../../widgets/BusyWrapper\";\nimport HandleParent from \"../../widgets/HandleParent\";\nimport { HandleRenderFunction } from \"../../widgets/types\";\nimport { JobRunning, JobState } from \"../types\";\nimport ResultImage from \"./ResultImage\";\n\ninterface ResultProps {\n    width: number,\n    height: number,\n    job: JobState,\n    extraHandles?: HandleRenderFunction,\n    extraWidgets?: React.ReactElement<SVGElement>,\n    channel: number,\n}\n\nconst ResultWrapper = styled.svg`\n    display: block;\n    border: 1px solid black;\n    width: 100%;\n    height: auto;\n`;\n\ntype MergedProps = ResultProps;\n\nclass Result extends React.Component<MergedProps> {\n    public renderHandles() {\n        const { width, height, extraHandles } = this.props;\n        let handles: HandleRenderFunction[] = [];\n        if (extraHandles) {\n            handles = [...handles, extraHandles];\n        }\n\n        return (\n            <HandleParent width={width} height={height} handles={handles} />\n        )\n    }\n\n    public render() {\n        const { job, channel, width, height, extraWidgets } = this.props;\n        const busy = job.running !== JobRunning.DONE;\n\n        return (\n            <BusyWrapper busy={busy}>\n                <ResultWrapper width={width} height={height} viewBox={`0 0 ${width} ${height}`}>\n                    <ResultImage job={job} channel={channel} width={width} height={height} />\n                    {extraWidgets}\n                    {this.renderHandles()}\n                </ResultWrapper>\n            </BusyWrapper>\n        );\n    }\n}\n\nexport default connect(null, null)(Result);","import styled from 'styled-components';\n\n\nconst Selectors = styled.div`\n    display: flex;\n    & > * {\n        margin-right: 10px;\n    }\n`;\n\n\n\nexport default Selectors;","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Dropdown, DropdownProps } from \"semantic-ui-react\";\nimport { RootReducer } from \"../../store\";\nimport { HandleRenderFunction } from \"../../widgets/types\";\nimport { JobRunning, JobState } from \"../types\";\nimport Result from \"./Result\";\nimport Selectors from \"./Selectors\";\n\ninterface ResultListProps {\n    width: number,\n    height: number,\n    selectors?: React.ReactElement<any>,\n    extraHandles?: HandleRenderFunction,\n    extraWidgets?: React.ReactElement<SVGElement>,\n    subtitle?: React.ReactNode,\n}\n\ninterface ExternalResultListProps {\n    compoundAnalysis: string,\n    analysisIndex: number,\n}\n\nconst mapStateToProps = (state: RootReducer, ownProps: ExternalResultListProps) => {\n    const compoundAnalysis = state.compoundAnalyses.byId[ownProps.compoundAnalysis];\n    const analysis = state.analyses.byId[compoundAnalysis.details.analyses[ownProps.analysisIndex]];\n\n    return {\n        jobsById: state.jobs.byId,\n        analysis,\n        compoundAnalysis,\n        analysisIndex: ownProps.analysisIndex,\n    };\n};\n\ntype MergedProps = ResultListProps & ReturnType<typeof mapStateToProps>;\n\ninterface ResultListState {\n    selectedChannel: number,\n}\n\nconst ResultListPlaceholder: React.FC<{ width: number, height: number }> = ({ width, height }) => (\n    <svg\n        style={{\n            display: \"block\",\n            border: \"1px solid black\",\n            width: \"100%\",\n            height: \"auto\"\n        }}\n        width={width} height={height}\n        viewBox={`0 0 ${width} ${height}`} key={-1} />\n);\n\n\nclass ResultList extends React.Component<MergedProps, ResultListState> {\n    public state: ResultListState = { selectedChannel: 0 };\n\n    public selectChannel = (e: React.SyntheticEvent, data: DropdownProps) => {\n        const value = data.value as number;\n        this.setState({ selectedChannel: value });\n    }\n\n    public getJob() {\n        const {\n            analysis, jobsById,\n        } = this.props;\n        if (!analysis || !analysis.displayedJob || !jobsById[analysis.displayedJob]) {\n            return undefined;\n        }\n        return jobsById[analysis.displayedJob];\n    }\n\n    public getMsg(job?: JobState) {\n        if (!job) {\n            return <>&nbsp;</>;\n        }\n        if (job.running === JobRunning.DONE) {\n            const dt = (job.endTimestamp - job.startTimestamp) / 1000;\n            return <>Analysis done in {dt.toFixed(3)}s</>;\n        } else {\n            return <>Analysis running...</>;\n        }\n    }\n\n    public genericRender(currentResult: React.ReactElement, job?: JobState) {\n        const { subtitle, children, selectors } = this.props;\n        const msg = this.getMsg(job);\n        return (\n            <div>\n                {currentResult}\n                {children}\n                <Selectors>\n                    <ResultImageSelector job={job} handleChange={this.selectChannel} selectedImg={this.state.selectedChannel} />\n                    {selectors}\n                </Selectors>\n                <p>{subtitle} {msg}</p>\n            </div>\n        );\n    }\n\n    public render() {\n        const job = this.getJob();\n        const {\n            width, height,\n            extraHandles, extraWidgets\n        } = this.props;\n\n        if (!job) {\n            return this.genericRender(<ResultListPlaceholder width={width} height={height} />, job);\n        }\n\n        return this.genericRender(\n            <Result job={job}\n                extraHandles={extraHandles}\n                extraWidgets={extraWidgets}\n                width={width} height={height}\n                channel={this.state.selectedChannel}\n            />,\n            job\n        );\n    }\n}\n\ninterface ImageSelectorProps {\n    job?: JobState,\n    handleChange: (e: React.SyntheticEvent, data: DropdownProps) => void,\n    selectedImg: number,\n}\n\nconst ResultImageSelector: React.FC<ImageSelectorProps> = ({ job, handleChange, selectedImg }) => {\n    if (!job) {\n        return null;\n    }\n    const availableImages = job.results.map((result, idx) => ({ text: result.description.title, value: idx }));\n    return (\n        <>\n            <div>\n                Channel:{' '}\n                <Dropdown\n                    inline\n                    options={availableImages}\n                    value={selectedImg}\n                    onChange={handleChange}\n                />\n            </div>\n        </>\n    )\n}\n\n\nexport default connect(mapStateToProps)(ResultList);\n","import { Point2D } from \"../basicTypes\";\n\ntype Constraint2D = (point: Point2D) => Point2D;\n\n\nexport const inRectConstraint = (width: number, height: number): Constraint2D => (p: Point2D): Point2D => ({\n    x: Math.max(0, Math.min(width - 1, p.x)),\n    y: Math.max(0, Math.min(height - 1, p.y)),\n});\n\nexport const dist = (cx: number, cy: number, x: number, y: number): number => {\n    const dx = cx - x;\n    const dy = cy - y;\n    return Math.sqrt(dx * dx + dy * dy);\n}\n\nexport const cbToRadius = (cx: number, cy: number, cb: ((r: number) => void) | undefined) => (x: number, y: number): (number | void) => cb && cb(dist(cx, cy, x, y))\n\nexport const keepOnCY = (cy: number) => (p: Point2D): Point2D => ({\n    x: p.x,\n    y: cy,\n});\n\nexport const keepXLargerThan = (otherX: number) => (p: Point2D): Point2D => ({\n    x: otherX > p.x ? otherX : p.x,\n    y: p.y,\n});\n\nexport const keepXSmallerThan = (otherX: number) => (p: Point2D): Point2D => ({\n    x: otherX < p.x ? otherX : p.x,\n    y: p.y,\n});\n\nexport const riConstraint = (outerPos: number, cy: number) => (p: Point2D): Point2D => (\n    keepXLargerThan(outerPos)(keepOnCY(cy)(p))\n)\n\nexport const roConstraints = (innerPos: number, cy: number) => (p: Point2D): Point2D => (\n    keepXSmallerThan(innerPos)(keepOnCY(cy)(p))\n);","import { CSSProperties } from \"react\";\n\nexport const defaultMaskStyles = (imageWidth: number): CSSProperties => ({\n    fillOpacity: 0.3,\n    fill: \"red\",\n    strokeOpacity: 0.7,\n    stroke: \"red\",\n    strokeWidth: imageWidth / 128 / 3,\n});","import * as React from \"react\";\nimport { defaultMaskStyles } from \"./styles\";\n\nexport interface DiskProps {\n    imageWidth: number,\n    cx: number,\n    cy: number,\n    r: number,\n}\n\nconst Disk: React.FC<DiskProps> = ({ imageWidth, cx, cy, r }) => (\n    <circle cx={cx + .5} cy={cy + .5} r={r} style={{ ...defaultMaskStyles(imageWidth) }} />\n);\n\nexport default Disk;\n","import * as React from \"react\";\nimport styled from 'styled-components';\nimport { Point2D } from \"../basicTypes\";\nimport { handleKeyEvent, ModifyCoords } from \"./kbdHandler\";\n\nexport type HandleProps = {\n    x: number,\n    y: number,\n    scale: number,\n    withCross?: boolean,\n    focusRef: React.RefObject<SVGGElement>,\n} & React.SVGProps<SVGGElement>;\n\nconst StyledCircle = styled.circle`\n    stroke: red;\n    stroke-width: 1;\n    fill: transparent;\n    g:focus > & {\n        stroke: lightgreen;\n    }\n`;\n\nconst Cross = styled.path`\n    stroke: red;\n    stroke-width: 1;\n    fill: transparent;\n    g:focus > & {\n        stroke: lightgreen;\n    }\n`;\n\nconst FocusGroup = styled.g`\n    &:focus { outline: none; }\n`;\n\nconst Handle: React.FC<HandleProps> = ({ scale, x, y, withCross, focusRef, ...args }) => {\n    const r = 3;\n    // scaleMatrix is needed to set the origin of the scale\n    const scaleMatrix = `matrix(${scale}, 0, 0, ${scale}, ${x - scale * x}, ${y - scale * y})`;\n    const style: React.CSSProperties = { transform: scaleMatrix };\n    const crossSpec = `\n        M${x - 4 - r / 2} ${y} L ${x - r / 2} ${y} M${x + r / 2} ${y} L ${x + 4 + r / 2} ${y}\n        M${x} ${y - 4 - r / 2} L ${x} ${y - r / 2} M${x} ${y + r / 2} L ${x} ${y + 4 + r / 2}\n    `;\n    const cross = withCross ? <Cross d={crossSpec} style={style} /> : null;\n    return (\n        <FocusGroup {...args} ref={focusRef}>\n            <StyledCircle cx={x} cy={y} r={r} style={style} />\n            {cross}\n        </FocusGroup>\n    )\n}\n\nexport interface DraggableHandleProps {\n    x: number,\n    y: number,\n    withCross?: boolean,\n    imageWidth?: number,\n    onDragMove?: (x: number, y: number) => void,\n    parentOnDragStart: (h: DraggableHandle) => void,\n    parentOnDrop: (x: number, y: number) => void,\n    onKeyboardEvent?: (e: React.KeyboardEvent<SVGElement>) => void,\n    constraint?: (p: Point2D) => Point2D,\n}\n\nexport const getScalingFactor = (elem: SVGElement): number => {\n    const svg = elem.ownerSVGElement;\n    if (svg === null) {\n        throw new Error(\"no owner SVG element?\");\n    }\n    const inWidthAttr = svg.getAttribute(\"width\");\n    if (inWidthAttr === null) {\n        throw new Error(\"no width on SVG element?\");\n    }\n    const inWidth = +inWidthAttr;\n    const svgMeasurements = svg.getBoundingClientRect();\n    return svgMeasurements.width / inWidth;\n};\n\nconst relativeCoords = (e: React.MouseEvent, parent: SVGElement) => {\n    const f = getScalingFactor(parent);\n    const parentPos = parent.getBoundingClientRect();\n    const res = {\n        x: (e.pageX - (parentPos.left + window.pageXOffset)) / f,\n        y: (e.pageY - (parentPos.top + window.pageYOffset)) / f,\n    }\n    return res;\n}\n\n/**\n * stateful draggable handle, to be used as part of <svg/>\n */\nexport class DraggableHandle extends React.Component<DraggableHandleProps> {\n    public posRef: React.RefObject<SVGRectElement>;\n    public focusRef: React.RefObject<SVGGElement>;\n\n    public state = {\n        dragging: false,\n        drag: { x: 0, y: 0 },\n    }\n\n    public constructor(props: DraggableHandleProps) {\n        super(props);\n        this.posRef = React.createRef<SVGRectElement>();\n        this.focusRef = React.createRef<SVGGElement>();\n    }\n\n    // mousemove event from outside (delegated from surrounding element)\n    public externalMouseMove = (e: React.MouseEvent<SVGElement>): void => {\n        this.move(e);\n    }\n\n    // mouseleave event from outside (delegated from surrounding element)\n    public externalLeave = (): void => {\n        this.stopDrag();\n    }\n\n    // mouseup event from outside (delegated from surrounding element)\n    public externalMouseUp = (): void => {\n        this.stopDrag();\n    }\n\n    public applyConstraint = (p: Point2D): Point2D => {\n        const { constraint } = this.props;\n        if (constraint) {\n            return constraint(p);\n        } else {\n            return p;\n        }\n    }\n\n    public startDrag = (e: React.MouseEvent<SVGElement>): void => {\n        e.preventDefault();\n        const { parentOnDragStart } = this.props;\n        if (this.posRef.current) {\n            this.setState({\n                dragging: true,\n                drag: this.applyConstraint(relativeCoords(e, this.posRef.current)),\n            });\n            if (parentOnDragStart) {\n                parentOnDragStart(this);\n            }\n            if (this.focusRef.current && this.focusRef.current.focus) {\n                this.focusRef.current.focus();\n            }\n        } else {\n            throw new Error(\"startDrag without posRef\");\n        }\n    }\n\n    public move = (e: React.MouseEvent<SVGElement>): void => {\n        const { onDragMove } = this.props;\n        if (!this.state.dragging) {\n            return;\n        }\n        if (this.posRef.current) {\n            this.setState({\n                drag: this.applyConstraint(relativeCoords(e, this.posRef.current)),\n            }, () => {\n                if (onDragMove) {\n                    const constrained = this.applyConstraint(this.state.drag)\n                    onDragMove(constrained.x, constrained.y);\n                }\n            })\n        } else {\n            throw new Error(\"move without posRef\");\n        }\n    }\n\n    public stopDrag = (): void => {\n        const { parentOnDrop } = this.props;\n        const { dragging, drag } = this.state;\n        if (!dragging) {\n            return;\n        }\n        this.setState({\n            dragging: false,\n        })\n        if (parentOnDrop) {\n            parentOnDrop(drag.x, drag.y);\n        }\n    }\n\n    public handleKeyDown = (e: React.KeyboardEvent<SVGElement>): void => {\n        const update = (fn: ModifyCoords) => {\n            const { x, y, onDragMove } = this.props;\n            const newCoords = fn(x, y);\n            const constrained = this.applyConstraint(newCoords);\n            if (onDragMove) {\n                onDragMove(constrained.x, constrained.y);\n            }\n        }\n        handleKeyEvent(e, update);\n    }\n\n    public renderCommon(x: number, y: number): JSX.Element {\n        const { imageWidth } = this.props;\n        const scale = imageWidth === undefined ? 1 : imageWidth / 128;\n        // empty zero-size <rect> as relative position reference\n        return (\n            <g>\n                <rect\n                    style={{ visibility: \"hidden\" }}\n                    ref={this.posRef}\n                    x={0} y={0} width={0} height={0}\n                />\n                <Handle scale={scale} x={x + .5} y={y + .5} withCross={this.props.withCross}\n                    focusRef={this.focusRef}\n                    onMouseUp={this.stopDrag}\n                    onMouseMove={this.move}\n                    onMouseDown={this.startDrag}\n                    onKeyDown={this.handleKeyDown}\n                    tabIndex={0}\n                />\n            </g>\n        );\n    }\n\n    public renderDragging(): JSX.Element {\n        const { x, y } = this.state.drag;\n        return this.renderCommon(x, y);\n    }\n\n    public render(): JSX.Element {\n        const { x, y } = this.props;\n        // either render from state (when dragging) or from props\n        if (this.state.dragging) {\n            return this.renderDragging();\n        } else {\n            return this.renderCommon(x, y);\n        }\n    }\n}\n\nexport default DraggableHandle;\n","export type ModifyCoords = ((x: number, y: number) => ({ x: number, y: number }));\n\n/**\n * Call this function whenever a keyboard event happens. The keyboard event is then translated\n * to a coordinate transformation, which is passed to the update callback. The update callback is\n * only called if relevant keys were pressed (example: arrow keys).\n * \n * @param e keyboard event\n * @param update a callback to handle coordinate updates\n */\nexport const handleKeyEvent = (e: React.KeyboardEvent<SVGElement>, update: (fn: ModifyCoords) => void): void => {\n    let delta = 1;\n    if (e.shiftKey) {\n        delta = 10;\n    }\n    switch (e.key) {\n        case \"ArrowUp\":\n            update((x: number, y: number) => ({ x, y: y - delta }));\n            break;\n        case \"ArrowDown\":\n            update((x: number, y: number) => ({ x, y: y + delta }));\n            break;\n        case \"ArrowLeft\":\n            update((x: number, y: number) => ({ x: x - delta, y }));\n            break;\n        case \"ArrowRight\":\n            update((x: number, y: number) => ({ x: x + delta, y }));\n            break;\n        default:\n            return;\n    }\n    e.preventDefault();\n}\n","import { Point2D } from \"../basicTypes\";\n\n// from https://stackoverflow.com/a/45100420/540644\nexport const getPathArc = (center: { x: number, y: number }, start: number, end: number, radius: number): string => {\n    if (end === start) { end += 360; }\n    let degree = end - start;\n    degree = degree < 0 ? (degree + 360) : degree;\n    const points = [];\n    points.push(getLocationFromAngle(start, radius, center));\n    points.push(getLocationFromAngle(start + degree / 3, radius, center));\n    points.push(getLocationFromAngle(start + degree * 2 / 3, radius, center));\n    points.push(getLocationFromAngle(end, radius, center));\n    return getCirclePath(points, radius, (degree < 180) ? 0 : 1);\n}\n\nconst getCirclePath = (points: Array<{ x: number, y: number }>, radius: number, clockWise: 0 | 1): string => (\n    ['M', points[0].x, points[0].y,\n        'A', radius, radius, 0, 0, clockWise, points[1].x, points[1].y,\n        'A', radius, radius, 0, 0, clockWise, points[2].x, points[2].y,\n        'A', radius, radius, 0, 0, clockWise, points[3].x, points[3].y\n    ].join(' ')\n);\n\nconst getLocationFromAngle = (degree: number, radius: number, center: { x: number, y: number }): Point2D => {\n    const radian = (degree * Math.PI) / 180;\n    return {\n        x: Math.cos(radian) * radius + center.x,\n        y: Math.sin(radian) * radius + center.y\n    }\n}\n","import * as React from \"react\";\nimport { getPathArc } from \"../helpers/svg\";\nimport { defaultMaskStyles } from \"./styles\";\n\nexport interface RingProps {\n    imageWidth: number,\n    cx: number,\n    cy: number,\n    ri: number,\n    ro: number,\n}\n\nconst Ring: React.FC<RingProps> = ({ imageWidth, cx, cy, ri, ro }) => {\n    // see also: https://stackoverflow.com/a/37883328/540644\n    const pathSpecs = [\n        getPathArc({ x: cx + .5, y: cy + .5 }, 90, 90, ro),\n        getPathArc({ x: cx + .5, y: cy + .5 }, 90, 90, ri)\n    ]\n    const pathSpec = pathSpecs.join(' ');\n\n    return (\n        <path d={pathSpec} fillRule=\"evenodd\" style={{ ...defaultMaskStyles(imageWidth) }} />\n    );\n}\n\nexport default Ring;\n","import * as React from \"react\";\nimport { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { AnalysisTypes } from \"../../messages\";\nimport { HandleRenderFunction } from \"../../widgets/types\";\nimport * as compoundAnalysisActions from \"../actions\";\nimport useFramePicker from \"./FramePicker\";\nimport ModeSelector from \"./ModeSelector\";\nimport { useDiskROI } from \"./roi/DiskROI\";\nimport { useRectROI } from \"./roi/RectROI\";\nimport { useRoiPicker } from \"./roi/RoiPicker\";\n\n\nexport enum DefaultModes {\n    SUM = \"SUM\",\n    SD = \"SD\",\n    PICK = \"PICK\",\n}\n\nexport enum DefaultRois {\n    ALL = \"ALL\",\n    DISK = \"DISK\",\n    RECT = \"RECT\",\n}\n\nconst useDefaultFrameView = ({\n    scanWidth, scanHeight, compoundAnalysisId, doAutoStart,\n}: {\n    scanWidth: number, scanHeight: number, compoundAnalysisId: string,\n    doAutoStart: boolean,\n}) => {\n    const availableModes = [\n        {\n            text: \"Average\",\n            value: DefaultModes.SUM,\n        },\n        {\n            text: \"Standard Deviation\",\n            value: DefaultModes.SD,\n        },\n        {\n            text: \"Pick\",\n            value: DefaultModes.PICK,\n        },\n    ]\n\n    const availableRois = [\n        {\n            text: \"All\",\n            value: DefaultRois.ALL,\n        },\n        {\n            text: \"Disk\",\n            value: DefaultRois.DISK,\n        },\n        {\n            text: \"Rect\",\n            value: DefaultRois.RECT,\n        },\n    ]\n\n    const [frameMode, setMode] = useState(DefaultModes.SUM);\n    const [roi, setRoi] = useState(DefaultRois.ALL);\n\n    const dispatch = useDispatch();\n\n    const updateFrameMode = (newMode: string) => {\n        dispatch(compoundAnalysisActions.Actions.enableAutoStart(compoundAnalysisId));\n        setMode(newMode as DefaultModes);\n    }\n\n    const updateRoi = (newRoi: string) => {\n        dispatch(compoundAnalysisActions.Actions.enableAutoStart(compoundAnalysisId));\n        setRoi(newRoi as DefaultRois);\n    }\n\n    const frameModeSelector = <ModeSelector modes={availableModes} currentMode={frameMode} onModeChange={updateFrameMode} label=\"Mode\" />\n\n    let roiSelector = <ModeSelector modes={availableRois} currentMode={roi} onModeChange={updateRoi} label=\"ROI\" />\n\n    if (frameMode === DefaultModes.PICK) {\n        roiSelector = <></>;\n    }\n\n    const [cx, setCx] = React.useState(Math.floor(scanWidth / 2));\n    const [cy, setCy] = React.useState(Math.floor(scanHeight / 2));\n\n    const { coords: pickCoords, handles: pickHandles } = useFramePicker({\n        enabled: frameMode === DefaultModes.PICK,\n        scanWidth, scanHeight,\n        analysisIndex: 0,\n        compoundAnalysisId,\n        cx, cy, setCx, setCy\n    });\n\n    const { rectRoiHandles, rectRoiWidgets, rectRoiParameters } = useRectROI({ scanHeight, scanWidth })\n    const { diskRoiHandles, diskRoiWidgets, diskRoiParameters } = useDiskROI({ scanHeight, scanWidth })\n\n    const nullHandles: HandleRenderFunction = () => null\n    let handles = nullHandles;\n\n    let widgets;\n    let params = { roi: {} };\n    switch (roi) {\n        case DefaultRois.DISK:\n            handles = diskRoiHandles;\n            widgets = diskRoiWidgets;\n            params = diskRoiParameters;\n            break;\n        case DefaultRois.RECT:\n            handles = rectRoiHandles;\n            widgets = rectRoiWidgets;\n            params = rectRoiParameters;\n            break;\n    }\n\n    switch (frameMode) {\n        case DefaultModes.PICK:\n            handles = pickHandles;\n            widgets = undefined;\n            break;\n    }\n\n    useRoiPicker({\n        enabled: frameMode === DefaultModes.SD && doAutoStart,\n        scanWidth, scanHeight,\n        analysisIndex: 0,\n        compoundAnalysisId,\n        roiParameters: params,\n        analysisType: AnalysisTypes.SD_FRAMES\n    })\n\n    useRoiPicker({\n        enabled: frameMode === DefaultModes.SUM && doAutoStart,\n        scanWidth, scanHeight,\n        analysisIndex: 0,\n        compoundAnalysisId,\n        roiParameters: params,\n        analysisType: AnalysisTypes.SUM_FRAMES,\n    })\n\n    const frameViewTitle = (\n        frameMode !== DefaultModes.PICK ? null : <>Pick: x={pickCoords.cx}, y={pickCoords.cy} &emsp;</>\n    )\n\n    return {\n        frameViewTitle,\n        frameModeSelector: (<>{frameModeSelector} {roiSelector}</>),\n        roiSelector,\n        handles,\n        widgets,\n    }\n}\n\nexport default useDefaultFrameView;\n","import React from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { AnalysisParameters, AnalysisTypes } from \"../../messages\";\nimport { inRectConstraint } from \"../../widgets/constraints\";\nimport DraggableHandle from \"../../widgets/DraggableHandle\";\nimport { HandleRenderFunction } from \"../../widgets/types\";\nimport * as compoundAnalysisActions from \"../actions\";\n\nconst useFramePicker = ({\n    enabled, scanWidth, scanHeight, analysisIndex, compoundAnalysisId, cx, cy, setCx, setCy\n}: {\n    enabled: boolean, scanWidth: number, scanHeight: number,\n    analysisIndex: number, compoundAnalysisId: string,\n    cx: number, cy: number, setCx: (newCx: number) => void, setCy: (newCy: number) => void,\n}) => {\n\n    const dispatch = useDispatch();\n\n    React.useEffect(() => {\n        if (enabled) {\n            const params: AnalysisParameters = {\n                x: cx,\n                y: cy,\n            };\n\n            dispatch(compoundAnalysisActions.Actions.run(compoundAnalysisId, analysisIndex, {\n                analysisType: AnalysisTypes.PICK_FRAME,\n                parameters: params,\n            }))\n        }\n    }, [compoundAnalysisId, cx, cy, enabled, analysisIndex, dispatch]);\n\n    const onPickChange = (pickX: number, pickY: number) => {\n        const newX = Math.round(pickX);\n        const newY = Math.round(pickY);\n        if (cx === newX && cy === newY) {\n            return;\n        }\n        setCx(newX);\n        setCy(newY);\n    }\n\n    const renderPickHandle: HandleRenderFunction = (onDragStart, onDrop) => (\n        <DraggableHandle x={cx} y={cy} withCross\n            imageWidth={scanWidth}\n            onDragMove={onPickChange}\n            parentOnDragStart={onDragStart}\n            parentOnDrop={onDrop}\n            constraint={inRectConstraint(scanWidth, scanHeight)} />\n    )\n\n    return { coords: { cx, cy }, handles: renderPickHandle };\n}\n\nexport default useFramePicker;","import * as React from \"react\";\nimport { Dropdown, DropdownProps } from \"semantic-ui-react\";\n\n\ntype ModeOptions = Array<{\n    text: string;\n    value: string;\n}>;\n\ninterface ModeSelectorProps {\n    modes: ModeOptions,\n    currentMode: string,\n    onModeChange: (mode: string) => void,\n    label: string,\n}\n\nconst ModeSelector: React.FunctionComponent<ModeSelectorProps> = ({\n    modes, currentMode, onModeChange, label\n}) => {\n\n    const onChange = (e: React.SyntheticEvent, data: DropdownProps) => {\n        if(data.value !== undefined && typeof data.value === \"string\") {\n            onModeChange(data.value);\n        }\n    }\n\n    return (\n        <>\n            <div>\n                {label}:{' '}\n                <Dropdown\n                    inline\n                    options={modes}\n                    value={currentMode}\n                    onChange={onChange}\n                />\n            </div>\n        </>\n    )\n}\n\nexport default ModeSelector;","import * as React from \"react\";\nimport { defaultMaskStyles } from \"./styles\";\n\nexport interface RectProps {\n    imageWidth: number,\n    imageHeight: number,\n    x: number,\n    y: number,\n    width: number,\n    height: number,\n}\n\nconst Rect: React.FC<RectProps> = ({ imageWidth, x, y, width, height }) => {\n    let ymin: number;\n    let xmin: number;\n    if (height*width > 0) {\n    ymin = Math.min(y, y+height);\n    xmin = Math.min(x, x+width);}\n    else if (height > 0 && width < 0) \n    {ymin = y;\n    xmin = x+width;}\n    else \n    {ymin = y+height;\n    xmin = x;}\n    return (\n        <rect x={xmin + .5} y={ymin + .5} width={Math.abs(width)} height={Math.abs(height)} style={{ ...defaultMaskStyles(imageWidth) }} />\n    );\n}\n\nexport default Rect;\n\n","import { useState } from \"react\";\nimport { RectRoiParams } from \"../../../messages\";\nimport DraggableHandle from \"../../../widgets/DraggableHandle\";\nimport Rect from \"../../../widgets/Rect\";\nimport { HandleRenderFunction } from \"../../../widgets/types\";\n\n\n\nconst useRectROI = ({ scanWidth, scanHeight }: {\n    scanWidth: number;\n    scanHeight: number;\n}) => {\n    const minLength = Math.min(scanWidth, scanHeight);\n    const [x, setx] = useState(scanWidth / 2);\n    const [y, sety] = useState(scanHeight / 2);\n    const [width, setwidth] = useState(minLength / 8);\n    const [height, setheight] = useState(minLength / 8);\n\n\n    const rectRoiParameters: {roi: RectRoiParams} = {\n        roi: {\n            shape: \"rect\",\n            x,\n            y,\n            width,\n            height,\n        },\n    }\n\n\n    const handleCornerChange = (newx: number, newy: number) => {\n        setx(newx);\n        sety(newy);\n    };\n\n    const handleShapeChange = (newx: number, newy: number) => {\n        setwidth(newx - x);\n        setheight(newy - y);\n    };\n\n    const smthHandle = {\n        x: x + width,\n        y: y + height,\n    }\n\n    const rectRoiHandles: HandleRenderFunction = (handleDragStart, handleDrop) => (<>\n        <DraggableHandle x={x} y={y}\n            imageWidth={scanWidth}\n            onDragMove={handleCornerChange}\n            parentOnDragStart={handleDragStart}\n            parentOnDrop={handleDrop} />\n        <DraggableHandle x={smthHandle.x} y={smthHandle.y}\n            imageWidth={scanWidth}\n            onDragMove={handleShapeChange}\n            parentOnDragStart={handleDragStart}\n            parentOnDrop={handleDrop} />\n    </>);\n\n    const rectRoiWidgets = (\n        <Rect x={x} y={y} width={width} height={height}\n            imageWidth={scanWidth} imageHeight={scanHeight}\n        />\n    );\n\n    return {\n        rectRoiParameters,\n        rectRoiHandles,\n        rectRoiWidgets,\n    };\n};\n\nexport { useRectROI };\n\n","import * as React from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { AnalysisTypes, FrameParams } from \"../../../messages\";\nimport * as analysisActions from \"../../actions\";\n\n\nconst useRoiPicker = ({ compoundAnalysisId, enabled, analysisIndex, roiParameters, analysisType }: {\n    scanWidth: number;\n    scanHeight: number;\n    enabled: boolean;\n    analysisIndex: number,\n    compoundAnalysisId: string;\n    roiParameters: FrameParams;\n    analysisType: AnalysisTypes.SD_FRAMES | AnalysisTypes.SUM_FRAMES\n}) => {\n    const dispatch = useDispatch();\n\n    React.useEffect(() => {\n        const handle = setTimeout(() => {\n            if (enabled) {\n                const analysisDetails = {\n                    analysisType,\n                    parameters: roiParameters,\n                };\n                dispatch(analysisActions.Actions.run(compoundAnalysisId, analysisIndex, analysisDetails))\n            }\n        }, 100);\n\n        return () => clearTimeout(handle);\n        // rules-of-hooks can't be statically validated here\n        // eslint-disable-next-line\n    }, [analysisType, compoundAnalysisId, enabled, analysisIndex, JSON.stringify(roiParameters), dispatch]);\n\n    return {\n    };\n};\n\nexport { useRoiPicker };\n\n","import * as React from \"react\";\nimport { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Checkbox, Dropdown, DropdownProps, Form, Header, Icon, Input, List, Modal, Popup } from \"semantic-ui-react\";\nimport { defaultDebounce, getEnumValues } from \"../../helpers\";\nimport ResultList from \"../../job/components/ResultList\";\nimport { AnalysisTypes, CenterOfMassParams } from \"../../messages\";\nimport { RootReducer } from \"../../store\";\nimport { composeHandles } from \"../../widgets/compose\";\nimport { cbToRadius, inRectConstraint, keepOnCY, riConstraint, roConstraints } from \"../../widgets/constraints\";\nimport Disk from \"../../widgets/Disk\";\nimport { DraggableHandle } from \"../../widgets/DraggableHandle\";\nimport Ring from \"../../widgets/Ring\";\nimport { HandleRenderFunction } from \"../../widgets/types\";\nimport * as compoundAnalysisActions from \"../actions\";\nimport { haveDisplayResult } from \"../helpers\";\nimport { CompoundAnalysisProps } from \"../types\";\nimport useDefaultFrameView from \"./DefaultFrameView\";\nimport AnalysisLayoutTwoCol from \"./layouts/AnalysisLayoutTwoCol\";\nimport Toolbar from \"./Toolbar\";\n\nexport enum CoMMaskShapes {\n    DISK = \"DISK\",\n    RING = \"RING\",\n}\n\nexport const MaskShapeMetadata: { [s: string]: { [s: string]: string } } = {\n    [CoMMaskShapes.DISK]: {\n        label: \"Disk cut-off\",\n    },\n    [CoMMaskShapes.RING]: {\n        label: \"Annular CoM\",\n    }\n}\nconst maskShapeKeys = getEnumValues(CoMMaskShapes);\nconst maskShapeOptions = maskShapeKeys.map(t => ({\n    text: MaskShapeMetadata[CoMMaskShapes[t]].label,\n    value: CoMMaskShapes[t],\n}));\n\ninterface MaskShapeSelectorProps {\n    selectedShape: CoMMaskShapes,\n    handleChange: (e: React.SyntheticEvent, data: DropdownProps) => void,\n}\n\nconst MaskShapeSelector: React.FC<MaskShapeSelectorProps> = ({ selectedShape, handleChange }) => (\n        <>\n            CoM mask shape:{' '}\n            <Dropdown inline options={maskShapeOptions}\n            value={selectedShape}\n            onChange={handleChange}\n            />\n        </>\n    )\n\nconst CenterOfMassAnalysis: React.FC<CompoundAnalysisProps> = ({ compoundAnalysis, dataset }) => {\n    const { shape } = dataset.params;\n    const [scanHeight, scanWidth, imageHeight, imageWidth] = shape;\n    const minLength = Math.min(imageWidth, imageHeight);\n    const [cx, setCx] = useState(imageWidth / 2);\n    const [cy, setCy] = useState(imageHeight / 2);\n    const [r, setR] = useState(minLength / 4);\n    const [flip_y, setFlipY] = useState(false);\n    const [scan_rotation, setScanRotation] = useState(\"0.0\");\n    const [ri, setRI] = useState(minLength / 8);\n    const [maskShape, setMaskShape] = useState(CoMMaskShapes.DISK)\n\n    const dispatch = useDispatch();\n\n    const rHandle = {\n        x: cx - r,\n        y: cy,\n    }\n\n    const riHandle = {\n        x: cx - ri,\n        y: cy,\n    }\n\n    const handleCenterChange = defaultDebounce((newCx: number, newCy: number) => {\n        setCx(newCx);\n        setCy(newCy);\n    });\n    const handleRChange = defaultDebounce(setR);\n    const handleRIChange = defaultDebounce(setRI);\n\n    let rConstraint = keepOnCY(cy);\n    if (maskShape === CoMMaskShapes.RING) {\n        rConstraint = roConstraints(riHandle.x, cy);\n    }\n\n    let frameViewHandles: HandleRenderFunction = (handleDragStart, handleDrop) => (<>\n        <DraggableHandle x={cx} y={cy}\n            imageWidth={imageWidth}\n            onDragMove={handleCenterChange}\n            parentOnDragStart={handleDragStart}\n            parentOnDrop={handleDrop}\n            constraint={inRectConstraint(imageWidth, imageHeight)} />\n        <DraggableHandle x={rHandle.x} y={rHandle.y}\n            imageWidth={imageWidth}\n            onDragMove={cbToRadius(cx, cy, handleRChange)}\n            parentOnDragStart={handleDragStart}\n            parentOnDrop={handleDrop}\n            constraint={rConstraint} />\n    </>);\n\n    let frameViewWidgets = (<></>);\n\n    if (maskShape === CoMMaskShapes.DISK) {\n        frameViewWidgets = (\n            <Disk cx={cx} cy={cy} r={r}\n                imageWidth={imageWidth} />\n        );\n    } else if(maskShape === CoMMaskShapes.RING) {\n        frameViewWidgets = (\n            <Ring cx={cx} cy={cy} ro={r} ri={ri}\n                imageWidth={imageWidth} />\n        );\n        frameViewHandles = composeHandles(frameViewHandles, (handleDragStart, handleDrop)  => (\n            <>\n                <DraggableHandle x={riHandle.x} y={riHandle.y}\n                    imageWidth={imageWidth}\n                    onDragMove={cbToRadius(cx, cy, handleRIChange)}\n                    parentOnDragStart={handleDragStart}\n                    parentOnDrop={handleDrop}\n                    constraint={riConstraint(rHandle.x, cy)} />\n            </>\n        ));\n    }\n\n    const {\n        frameViewTitle, frameModeSelector,\n        handles: resultHandles, widgets: resultWidgets\n    } = useDefaultFrameView({\n        scanWidth,\n        scanHeight,\n        compoundAnalysisId: compoundAnalysis.compoundAnalysis,\n        doAutoStart: compoundAnalysis.doAutoStart,\n    })\n\n    const subtitle = <>{frameViewTitle} Disk: center=(x={cx.toFixed(2)}, y={cy.toFixed(2)}), r={r.toFixed(2)}</>;\n\n    let parsedScanRotation: number =  parseFloat(scan_rotation);\n    if (!parsedScanRotation) {\n        parsedScanRotation = 0.0;\n    }\n\n    const runAnalysis = () => {\n        const parameters: CenterOfMassParams = {\n            shape: \"com\",\n            cx,\n            cy,\n            r,\n            flip_y,\n            scan_rotation: parsedScanRotation,\n        };\n        if (maskShape === CoMMaskShapes.RING) {\n            parameters.ri = ri;\n        }\n        dispatch(compoundAnalysisActions.Actions.run(compoundAnalysis.compoundAnalysis, 1, {\n            analysisType: AnalysisTypes.CENTER_OF_MASS,\n            parameters,\n        }));\n    };\n\n    const analyses = useSelector((state: RootReducer) => state.analyses)\n    const jobs = useSelector((state: RootReducer) => state.jobs)\n\n    const haveResult = haveDisplayResult(\n        compoundAnalysis,\n        analyses,\n        jobs,\n        [1],\n    );\n\n    // NOTE: haveResult is not a dependency here, as we don't want to re-run directly\n    // after the results have become available.\n    React.useEffect(() => {\n        if (haveResult) {\n            runAnalysis();\n        }\n    }, [flip_y, scan_rotation]);\n\n    const toolbar = <Toolbar compoundAnalysis={compoundAnalysis} onApply={runAnalysis} busyIdxs={[1]} />\n\n    const updateFlipY = (e: React.ChangeEvent<HTMLInputElement>, { checked }: { checked: boolean }) => {\n        setFlipY(checked);\n    };\n\n    const updateScanRotation = (e: React.ChangeEvent<HTMLInputElement>, { value }: { value: string }) => {\n        if (value === \"-\") {\n            setScanRotation(\"-\");\n        }\n        setScanRotation(value);\n    };\n\n    // TODO: debounce parameters\n    const comParams = (\n        <>\n            <Header>\n                <Modal trigger={\n                    <Header.Content>\n                        Parameters\n                        {' '}\n                        <Icon name=\"info circle\" size=\"small\" link />\n                    </Header.Content>\n                }>\n                    <Popup.Header>CoM / first moment parameters</Popup.Header>\n                    <Popup.Content>\n                        <Header>CoM mask shape</Header>\n                        <p>\n                            Select a shape that will be used to mask out the data:\n                        </p>\n                        <ul>\n                            <li><em>Annular CoM</em>: calculate the center of mass in a selected ring</li>\n                            <li><em>Disk cut-off</em>: calculate the center of mass in a selected disk</li>\n                        </ul>\n                        <Header>Flip in y direction</Header>\n                        <p>\n                            Flip the Y coordinate. Some detectors, for example Quantum\n                            Detectors Merlin, may have pixel (0, 0) at the lower\n                            left corner. This has to be corrected to get the sign of\n                            the y shift as well as curl and divergence right.\n                        </p>\n                        <Header>Rotation between scan and detector</Header>\n                        <p>\n                            The optics of an electron microscope can rotate the\n                            image. Furthermore, scan generators may allow\n                            scanning in arbitrary directions. This means that\n                            the x and y coordinates of the detector image are\n                            usually not parallel to the x and y scan\n                            coordinates. For interpretation of center of mass\n                            shifts, however, the shift vector in detector\n                            coordinates has to be put in relation to the\n                            position on the sample. This parameter can be used\n                            to rotate the detector coordinates to match the scan\n                            coordinate system. A positive value rotates the\n                            displacement vector clock-wise. That means if the\n                            detector seems rotated to the right relative to the\n                            scan, this value should be negative to counteract\n                            this rotation.\n                        </p>\n                        <p>\n                            Use either the numeric input or the slider to adjust\n                            the rotation angle.\n                        </p>\n                    </Popup.Content>\n                </Modal>\n            </Header>\n            <Form>\n                <List relaxed=\"very\">\n                    <List.Item>\n                        <List.Content>\n                            <MaskShapeSelector selectedShape={maskShape} handleChange={(e, data) => {\n                                setMaskShape(data.value as CoMMaskShapes)\n                            }} />\n                        </List.Content>\n                    </List.Item>\n                    <List.Item>\n                        <List.Content>\n                            <Form.Field control={Checkbox} label=\"Flip in y direction\" checked={flip_y} onChange={updateFlipY} />\n                        </List.Content>\n                    </List.Item>\n                    <List.Item>\n                        <List.Content>\n                            <Form.Field type=\"number\" control={Input} label=\"Rotation between scan and detector (deg)\" value={scan_rotation} onChange={updateScanRotation} />\n                            <Form.Field type=\"range\" min=\"-180\" max=\"180\" step=\"0.1\" control={Input} value={scan_rotation} onChange={updateScanRotation} />\n                        </List.Content>\n                    </List.Item>\n                </List>\n            </Form>\n        </>\n    );\n\n    if(false) {\n        setMaskShape(CoMMaskShapes.DISK);\n    }\n\n    return (\n        <AnalysisLayoutTwoCol\n            title=\"CoM / first moment analysis\" subtitle={subtitle}\n            left={<>\n                <ResultList\n                    extraHandles={frameViewHandles} extraWidgets={frameViewWidgets}\n                    analysisIndex={0} compoundAnalysis={compoundAnalysis.compoundAnalysis}\n                    width={imageWidth} height={imageHeight}\n                    selectors={frameModeSelector}\n                />\n            </>}\n            right={<>\n                <ResultList\n                    analysisIndex={1} compoundAnalysis={compoundAnalysis.compoundAnalysis}\n                    width={scanWidth} height={scanHeight}\n                    extraHandles={resultHandles}\n                    extraWidgets={resultWidgets}\n                />\n            </>}\n            toolbar={toolbar}\n            params={comParams}\n        />\n    );\n}\n\nexport default CenterOfMassAnalysis;\n","import { useState } from \"react\";\n\nimport { FrameParams } from \"../../../messages\";\nimport { cbToRadius, inRectConstraint, keepOnCY } from \"../../../widgets/constraints\";\nimport Disk from \"../../../widgets/Disk\";\nimport DraggableHandle from \"../../../widgets/DraggableHandle\";\nimport { HandleRenderFunction } from \"../../../widgets/types\";\n\nconst useDiskROI = ({ scanWidth, scanHeight }: {\n    scanWidth: number;\n    scanHeight: number;\n}) => {\n    const minLength = Math.min(scanWidth, scanHeight);\n    const [cx, setCx] = useState(scanWidth / 2);\n    const [cy, setCy] = useState(scanHeight / 2);\n    const [r, setR] = useState(minLength / 8);\n\n\n    const diskRoiParameters: FrameParams = {\n        roi: {\n            shape: \"disk\",\n            cx,\n            cy,\n            r,\n        },\n    }\n\n\n    const handleCenterChange = (newCx: number, newCy: number) => {\n        setCx(newCx);\n        setCy(newCy);\n    };\n\n    const handleRChange = (newR: number) => {\n        setR(newR);\n    };\n\n    const rHandle = {\n        x: cx - r,\n        y: cy,\n    }\n\n    const diskRoiHandles: HandleRenderFunction = (handleDragStart, handleDrop) => (<>\n        <DraggableHandle x={cx} y={cy}\n            imageWidth={scanWidth}\n            onDragMove={handleCenterChange}\n            parentOnDragStart={handleDragStart}\n            parentOnDrop={handleDrop}\n            constraint={inRectConstraint(scanWidth, scanHeight)} />\n        <DraggableHandle x={rHandle.x} y={rHandle.y}\n            imageWidth={scanWidth}\n            onDragMove={cbToRadius(cx, cy, handleRChange)}\n            parentOnDragStart={handleDragStart}\n            parentOnDrop={handleDrop}\n            constraint={keepOnCY(cy)} />\n    </>);\n\n    const diskRoiWidgets = (\n        <Disk cx={cx} cy={cy} r={r}\n            imageWidth={scanWidth}\n        />\n    );\n\n    return {\n        diskRoiParameters,\n        diskRoiHandles,\n        diskRoiWidgets,\n    };\n};\n\nexport { useDiskROI };\n\n","import * as React from \"react\";\nimport { Grid, Header, Icon, Segment } from \"semantic-ui-react\";\n\ninterface AnalysisLayoutTwoColProps {\n    title: string,\n    subtitle: React.ReactNode,\n    left: React.ReactNode,\n    right: React.ReactNode,\n    toolbar?: React.ReactNode,\n    params?: React.ReactNode,\n}\n\ntype MergedProps = AnalysisLayoutTwoColProps;\n\nconst AnalysisLayoutTwoCol: React.FC<MergedProps> = ({\n    title, subtitle,\n    left, right,\n    toolbar,\n    params,\n}) => (\n    <>\n        <Header as='h3' attached=\"top\">\n            <Icon name=\"cog\" />\n            <Header.Content>{title}</Header.Content>\n        </Header>\n        <Segment attached>\n            <Grid columns={2}>\n                <Grid.Row>\n                    <Grid.Column>\n                        {left}\n                        <p>{subtitle}</p>\n                    </Grid.Column>\n                    <Grid.Column>\n                        {right}\n                    </Grid.Column>\n                </Grid.Row>\n            </Grid>\n        </Segment>\n        {params === null ? params : <Segment attached>{params}</Segment>}\n        {toolbar}\n    </>\n)\n\nexport default AnalysisLayoutTwoCol\n","export const getApiBasePath = () : string => {\n    const loc = window.location.pathname;\n\n    if(loc.endsWith('/')) {\n        return `${loc}api/`;\n    } else {\n        return `${loc}/api/`;\n    }\n}\n\nexport const getApiWSURL = () : string => {\n    const basePath = getApiBasePath();\n    const isSecure = window.location.protocol === 'https:';\n    const proto = isSecure ? 'wss' : 'ws';\n    return `${proto}://${window.location.hostname}:${window.location.port}${basePath}events/`;\n}\n\nexport const genericDelete = async <T>(path: string): Promise<T> => {\n    const basePath = getApiBasePath();\n    const r = await fetch(`${basePath}${path}`, {\n        credentials: \"same-origin\",\n        method: \"DELETE\",\n    });\n    return await (r.json() as Promise<T>);\n}\n\n\nexport const genericPut = async <Resp, Payload>(path: string, payload: Payload): Promise<Resp> => {\n    const basePath = getApiBasePath();\n    const r = await fetch(`${basePath}${path}`, {\n        body: JSON.stringify(payload),\n        credentials: \"same-origin\",\n        method: \"PUT\",\n    });\n    return await (r.json() as Promise<Resp>);\n}\n","import { genericDelete, genericPut, getApiBasePath } from \"../helpers/apiHelpers\";\nimport { AnalysisDetails, CompoundAnalysisDetails, CopyNotebookResponse, CreateAnalysisResponse, CreateCompoundAnalysisResponse, CreateOrUpdateAnalysisRequest, CreateOrUpdateCompoundAnalysisRequest, RemoveAnalysisResponse, RemoveCompoundAnalysisResponse } from \"../messages\";\n\nexport const createOrUpdateAnalysis = async (\n    compoundAnalysisId: string,\n    analysisId: string, dataset: string, details: AnalysisDetails\n): Promise<CreateAnalysisResponse> => {\n    const payload: CreateOrUpdateAnalysisRequest = {\n        dataset,\n        details,\n    };\n    return await genericPut(`compoundAnalyses/${compoundAnalysisId}/analyses/${analysisId}/`, payload);\n}\n\nexport const removeAnalysis = async (compoundAnalysisId: string, analysisId: string): Promise<RemoveAnalysisResponse> => (\n    await genericDelete(`compoundAnalyses/${compoundAnalysisId}/analyses/${analysisId}/`)\n);\n\nexport const createOrUpdateCompoundAnalysis = async (\n    compoundAnalysisId: string,\n    dataset: string,\n    details: CompoundAnalysisDetails,\n): Promise<CreateCompoundAnalysisResponse> => {\n    const payload: CreateOrUpdateCompoundAnalysisRequest = {\n        dataset,\n        details,\n    };\n    return await genericPut(`compoundAnalyses/${compoundAnalysisId}/`, payload);\n}\n\nexport const removeCompoundAnalysis = async (compoundAnalysisId: string): Promise<RemoveCompoundAnalysisResponse> => (\n    await genericDelete(`compoundAnalyses/${compoundAnalysisId}/`)\n);\n\nexport const getNotebook = async (compoundAnalysisId: string): Promise<CopyNotebookResponse> => {\n    const basePath = getApiBasePath();\n    const url = `${basePath}compoundAnalyses/${compoundAnalysisId}/copy/notebook/`;\n    const r = await fetch(url, {\n        method: 'GET',\n        credentials: \"same-origin\",\n    });\n    return await (r.json() as Promise<CopyNotebookResponse>);\n}\n","import { AnalysisTypes } from \"../messages\";\nimport { CompoundAnalysisMetadata, CompoundAnalysisMetadataItem } from \"./types\";\n// keyof typeof: https://stackoverflow.com/a/42623905/540644\nexport const getMetadata = (typeName: keyof typeof AnalysisTypes): CompoundAnalysisMetadataItem => {\n    const type: AnalysisTypes = AnalysisTypes[typeName];\n    return CompoundAnalysisMetadata[type];\n};\n","import * as React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Button, Dropdown, DropdownProps, Header, Icon, Modal, Segment, Tab } from \"semantic-ui-react\";\nimport { AnalysisState } from \"../../analysis/types\";\nimport { dispatchGenericError } from \"../../errors/helpers\";\nimport { writeClipboard } from \"../../helpers\";\nimport { getApiBasePath } from \"../../helpers/apiHelpers\";\nimport { JobStatus } from \"../../job/types\";\nimport { CopyAnalysis } from \"../../messages\";\nimport { RootReducer } from \"../../store\";\nimport { getNotebook } from '../api';\nimport { getMetadata } from \"../getMetadata\";\nimport { CompoundAnalysisState } from \"../types\";\n\ninterface DownloadItemsProps {\n    compoundAnalysis: CompoundAnalysisState,\n    currentFormat: string,\n}\n\nconst DownloadItems: React.FC<DownloadItemsProps> = ({\n    compoundAnalysis, currentFormat\n}) => {\n\n    const basePath = getApiBasePath();\n    const downloadUrl = (analysisId: string) => (\n        `${basePath}compoundAnalyses/${compoundAnalysis.compoundAnalysis}/analyses/${analysisId}/download/${currentFormat}/`\n    )\n\n    const analysesById = useSelector((state: RootReducer) => state.analyses.byId);\n    const jobsById = useSelector((state: RootReducer) => state.jobs.byId);\n\n    const analyses = compoundAnalysis.details.analyses.map(analysis => analysesById[analysis]).filter(analysis =>\n        analysis.jobs.some(jobId => jobsById[jobId].status === JobStatus.SUCCESS)\n    );\n\n    const getAnalysisDescription = (analysis: AnalysisState) => getMetadata(analysis.details.analysisType).desc;\n\n    const getDownloadChannels = (analysis: AnalysisState) => {\n        if (!analysis.displayedJob) {\n            return [];\n        }\n        return jobsById[analysis.displayedJob].results.filter(\n            result => result.description.includeInDownload\n        ).map(\n            result => result.description.title\n        )\n    }\n\n    return (\n        <ul>\n            {analyses.map((analysis) => (\n                <li key={analysis.id}>\n                    <a href={downloadUrl(analysis.id)}>\n                        {getAnalysisDescription(analysis)} (channels: {getDownloadChannels(analysis).join(\", \")})\n                        </a>\n                </li>\n            ))}\n        </ul>\n    )\n}\n\ninterface CopyScriptsProps {\n    compoundAnalysis: CompoundAnalysisState,\n}\n\nconst CopyScripts: React.FC<CopyScriptsProps> = ({ compoundAnalysis }) => {\n    const initialAnalysis: CopyAnalysis[] = [\n        {\n            analysis: \"\",\n            plot: [\"\"],\n        },\n    ];\n\n    const [notebook, setNotebook] = useState({\n        dependency: \"\",\n        initial_setup: \"\",\n        ctx: \"\",\n        dataset: \"\",\n        analysis: initialAnalysis,\n    });\n\n    const dispatch = useDispatch();\n\n    const cell = (code: string) => {\n        const copy = () => {\n            writeClipboard(code, dispatch);\n        };\n\n        return (\n            <Segment padded>\n                <Button floated={\"right\"} icon={\"copy\"} onClick={copy} />\n                <pre>{code}</pre>\n            </Segment>\n        );\n    };\n\n    const copyCompleteNotebook = () => {\n        const firstPart = [notebook.dependency, notebook.initial_setup, notebook.ctx, notebook.dataset].join(\"\\n\\n\");\n        const joinCode = (analysis: CopyAnalysis) => `${analysis.analysis}\\n${analysis.plot.join(\"\\n\\n\")}`\n        const secondPart = notebook.analysis.map(joinCode).join(\"\\n\\n\");\n        writeClipboard(`${firstPart}\\n\\n${secondPart}`, dispatch);\n    };\n\n    useEffect(() => {\n        getNotebook(compoundAnalysis.compoundAnalysis).then(CurrentNotebook => {\n            setNotebook({\n                dependency: CurrentNotebook.dependency,\n                initial_setup: CurrentNotebook.initial_setup,\n                ctx: CurrentNotebook.ctx,\n                dataset: CurrentNotebook.dataset,\n                analysis: CurrentNotebook.analysis,\n            });\n        }).catch(() => dispatchGenericError(\"could not get notebook\", dispatch))\n    }, [compoundAnalysis.compoundAnalysis]);\n\n    return (\n        <>\n            <Segment clearing>\n                <Header floated={\"left\"}>Notebook</Header>\n                <Button icon labelPosition=\"left\" floated={\"right\"} onClick={copyCompleteNotebook}>\n                    <Icon name=\"copy\" />\n                    Complete notebook\n                </Button>\n            </Segment>\n            <Modal.Content scrolling>\n                {[notebook.dependency, notebook.initial_setup, notebook.ctx, notebook.dataset].map(cell)}\n                {notebook.analysis.map(analysis => (\n                    <>\n                        {cell(analysis.analysis)}\n                        {analysis.plot.map(cell)}\n                    </>\n                ))}\n            </Modal.Content>\n        </>\n    );\n};\n\ninterface DownloadScriptsProps {\n    compoundAnalysis: CompoundAnalysisState,\n}\n\nconst DownloadScripts: React.FC<DownloadScriptsProps> = ({ compoundAnalysis }) => {\n    const basePath = getApiBasePath();\n    const downloadUrl = `${basePath}compoundAnalyses/${compoundAnalysis.compoundAnalysis}/download/notebook/`;\n\n    return (\n        <ul>\n            <li>\n                <a href={downloadUrl}>notebook corresponding to analysis</a>\n            </li>\n        </ul>\n    );\n};\n\ninterface DownloadProps {\n    compoundAnalysis: CompoundAnalysisState,\n}\n\ntype FormatOptions = Array<{\n    text: string;\n    value: string;\n}>;\n\ninterface DownloadResultItemProps {\n    formatOptions: FormatOptions,\n    onFormatChange: (e: React.SyntheticEvent, data: DropdownProps) => void,\n    currentFormat: string,\n    compoundAnalysis: CompoundAnalysisState,\n}\n\nconst DownloadResultItem: React.FC<DownloadResultItemProps> = ({\n    formatOptions, onFormatChange, currentFormat, compoundAnalysis,\n}) => (\n    <Tab.Pane>\n        <Header >\n            Download Results, format: <Dropdown inline options={formatOptions} onChange={onFormatChange} value={currentFormat} />\n        </Header>\n        <Header as=\"h3\">Available results:</Header>\n        <DownloadItems compoundAnalysis={compoundAnalysis} currentFormat={currentFormat} />\n    </Tab.Pane>\n);\n\ninterface DownloadNotebookItemProps {\n    compoundAnalysis: CompoundAnalysisState,\n}\n\nconst DownloadNotebookItem: React.FC<DownloadNotebookItemProps> = ({\n    compoundAnalysis\n}) => (\n    <Tab.Pane>\n        <Header as=\"h3\">Available scripts: </Header>\n        <DownloadScripts compoundAnalysis={compoundAnalysis} />\n    </Tab.Pane>\n);\n\ninterface CopyNotebookItemProps {\n    compoundAnalysis: CompoundAnalysisState,\n}\n\nconst CopyNotebookItem: React.FC<CopyNotebookItemProps> = ({\n    compoundAnalysis,\n}) => (\n    <Tab.Pane>\n        <CopyScripts compoundAnalysis={compoundAnalysis} />\n    </Tab.Pane>\n);\n\nconst Download: React.FC<DownloadProps> = ({ compoundAnalysis }) => {\n    const formats = useSelector((state: RootReducer) => state.config.resultFileFormats);\n    const formatOptions: FormatOptions = Object.keys(formats).map(identifier => ({\n        value: identifier,\n        text: formats[identifier].description,\n    }));\n\n    const [currentFormat, setFormat] = useState(formatOptions[0]?.value);\n\n    // we may be called before the config is completely loaded, so we\n    // need to set the format after the list of formats is available\n    React.useEffect(() => {\n        if (formatOptions.length !== 0 && !currentFormat) {\n            setFormat(formatOptions[0].value);\n        }\n    }, [formatOptions, currentFormat])\n\n    const onFormatChange = (e: React.SyntheticEvent, data: DropdownProps) => {\n        if(data.value) {\n            setFormat(data.value.toString());\n        }\n    }\n\n    const panes = [\n        {\n            menuItem: \"Download result\",\n            render: () => <DownloadResultItem formatOptions={formatOptions} onFormatChange={onFormatChange} currentFormat={currentFormat} compoundAnalysis={compoundAnalysis} />\n        },\n        {\n            menuItem: \"Download notebook\",\n            render: () => <DownloadNotebookItem compoundAnalysis={compoundAnalysis} />,\n        },\n        {\n            menuItem: \"Copy notebook\",\n            render: () => <CopyNotebookItem compoundAnalysis={compoundAnalysis} />,\n        },\n    ];\n\n\n    return (\n        <Modal trigger={\n            <Button icon>\n                <Icon name='download' />\n                Download\n            </Button>\n        }>\n            <Tab panes={panes} />\n        </Modal>\n    );\n}\n\nexport default Download;","import * as React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Button, Icon, IconProps, Segment } from \"semantic-ui-react\";\nimport { RootReducer } from \"../../store\";\nimport * as analysisActions from \"../actions\";\nimport { getAnalysisStatus } from \"../helpers\";\nimport { CompoundAnalysisState } from \"../types\";\nimport Download from \"./Download\";\n\ninterface ToolbarProps {\n    compoundAnalysis: CompoundAnalysisState,\n    busyIdxs: number[],\n    onApply: () => void,\n}\n\n\ntype MergedProps = ToolbarProps;\n\nconst Toolbar: React.FC<MergedProps> = ({ busyIdxs, onApply, compoundAnalysis }) => {\n    const dispatch = useDispatch();\n    const handleRemove = () => dispatch(analysisActions.Actions.remove(compoundAnalysis.compoundAnalysis));\n    const analyses = useSelector((state: RootReducer) => state.analyses);\n    const jobs = useSelector((state: RootReducer) => state.jobs);\n    const status = getAnalysisStatus(\n        compoundAnalysis, analyses, jobs,\n        busyIdxs\n    );\n    const running = status === \"busy\";\n    const applyIconProps: IconProps = running ? { name: 'cog', loading: true } : { name: 'check' }\n\n    return (\n        <Segment attached=\"bottom\">\n            <Button.Group>\n                <Button primary onClick={onApply} icon>\n                    <Icon {...applyIconProps} />\n                    Apply\n                </Button>\n                <Download compoundAnalysis={compoundAnalysis} />\n                <Button onClick={handleRemove} icon>\n                    <Icon name='remove' />\n                    Remove\n                </Button>\n            </Button.Group>\n        </Segment>\n    );\n}\n\nexport default Toolbar;","import { AnalysisReducerState } from \"../analysis/reducers\";\nimport { JobReducerState } from \"../job/reducers\";\nimport { JobRunning } from \"../job/types\";\nimport { CompoundAnalysisState } from \"./types\";\n\nexport const getAnalysisStatus = (\n    compoundAnalysis: CompoundAnalysisState,\n    analyses: AnalysisReducerState,\n    jobs: JobReducerState,\n    analysisIdxsToInclude: number[] = []\n): \"idle\" | \"busy\" => {\n    let filteredAnalyses = compoundAnalysis.details.analyses;\n\n    if (analysisIdxsToInclude.length > 0) {\n        filteredAnalyses = filteredAnalyses.filter((analysisId: string, idx: number) => analysisIdxsToInclude.indexOf(idx) !== -1)\n    }\n\n    return filteredAnalyses.reduce((prevValue: \"idle\" | \"busy\", analysisId: string) => {\n        const analysis = analyses.byId[analysisId];\n        if(!analysis) {\n            return prevValue; // no analysis, so \"all jobs\" are done\n        }\n        analysis.jobs.forEach((jobId) => {\n            if (!jobs.byId[jobId]) {\n                // eslint-disable-next-line no-console\n                console.error(`could not find job id ${jobId} for analysis ${analysisId}`);\n            }\n        });\n        const allDone = analysis.jobs.every(\n            jobId => jobs.byId[jobId] ? jobs.byId[jobId].running === JobRunning.DONE : true\n        );\n        return allDone ? prevValue : \"busy\";\n    }, \"idle\");\n}\n\n\n/**\n * Check if there is a finished job that is being displayed\n * \n * @param compoundAnalysis \n * @param analyses \n * @param jobs \n * @param analysisIdxsToInclude \n * @returns true iff all displayedJobs of the given analyses are DONE (also false if there are no analyses or displayed jobs)\n */\nexport const haveDisplayResult = (\n    compoundAnalysis: CompoundAnalysisState,\n    analyses: AnalysisReducerState,\n    jobs: JobReducerState,\n    analysisIdxsToInclude: number[] = []\n): boolean => {\n    let filteredAnalyses = compoundAnalysis.details.analyses;\n\n    if (analysisIdxsToInclude.length > 0) {\n        filteredAnalyses = filteredAnalyses.filter((analysisId: string, idx: number) => analysisIdxsToInclude.indexOf(idx) !== -1)\n    }\n\n    if (filteredAnalyses.length === 0) {\n        return false;\n    }\n\n    return filteredAnalyses.reduce((prevValue: boolean, analysisId: string) => {\n        const analysis = analyses.byId[analysisId];\n        if (!analysis) {\n            return false; // no analysis, so we don't have a result\n        }\n        if (!analysis.displayedJob) {\n            return false;\n        }\n        const displayedJob = jobs.byId[analysis.displayedJob];\n        if (!displayedJob) {\n            return false;\n        }\n\n        return displayedJob.running === JobRunning.DONE && prevValue;\n    }, true);\n}\n","import { ActionsUnion, createAction } from '../helpers/actionHelpers';\nimport { CreateDatasetMessage, DatasetCreateParams, DatasetFormInfo, DatasetFormParams } from '../messages';\n\nexport enum ActionTypes {\n    OPEN = 'DATASET_OPEN',\n    CANCEL_OPEN = 'DATASET_CANCEL_OPEN',\n    CREATE = 'DATASET_CREATE',\n    CREATED = 'DATASET_CREATED',\n    ERROR = 'DATASET_ERROR',\n    DELETE = 'DATASET_DELETE',\n    DELETED = 'DATASET_DELETED',\n    DETECT = 'DATASET_DETECT',\n    DETECTED = 'DATASET_DETECTED',\n    DETECT_FAILED = 'DATASET_DETECT_FAILED',\n}\n\nexport const Actions = {\n    open: (path: string, cachedParams?: DatasetFormParams, detectedParams?: DatasetFormParams, detectedInfo?: DatasetFormInfo) => createAction(ActionTypes.OPEN, { path, cachedParams, detectedParams, detectedInfo }),\n    cancelOpen: () => createAction(ActionTypes.CANCEL_OPEN),\n    create: (dataset: DatasetCreateParams) => createAction(ActionTypes.CREATE, { dataset }),\n    created: (dataset: CreateDatasetMessage) => createAction(ActionTypes.CREATED, { dataset }),\n    error: (dataset: string, msg: string, timestamp: number, id: string) => createAction(ActionTypes.ERROR, { dataset, msg, timestamp, id }),\n    delete: (dataset: string) => createAction(ActionTypes.DELETE, { dataset }),\n    deleted: (dataset: string) => createAction(ActionTypes.DELETED, { dataset }),\n    detect: (path: string) => createAction(ActionTypes.DETECT, { path }),\n    detected: (path: string, params: DatasetFormParams, info: DatasetFormInfo) => createAction(ActionTypes.DETECTED, { path, params, info }),\n    detectFailed: (path: string) => createAction(ActionTypes.DETECT_FAILED, { path }),\n}\n\nexport type Actions = ActionsUnion<typeof Actions>;\n","import { HandleRenderFunction } from \"./types\"\n\ntype ComposeFns = (f: HandleRenderFunction, g: HandleRenderFunction) => HandleRenderFunction;\n\nexport const composeHandles: ComposeFns = (f, g) => (handleDragStart, handleDrop) => (\n    <>\n        {f(handleDragStart, handleDrop)}\n        {g(handleDragStart, handleDrop)}\n    </>\n)\n","import * as React from \"react\";\nimport { Grid, Header, Icon, Segment } from \"semantic-ui-react\";\n\ninterface AnalysisLayoutTwoResProps {\n    title: string,\n    subtitle: React.ReactNode,\n    left: React.ReactNode,\n    mid: React.ReactNode,\n    right: React.ReactNode,\n    clustparams: React.ReactNode,\n    toolbar?: React.ReactNode,\n    title1: string, \n    title2: React.ReactNode,\n    title3:string,\n}\n\ntype MergedProps = AnalysisLayoutTwoResProps;\n\nconst AnalysisLayoutTwoRes: React.FC<MergedProps> = ({\n    title, subtitle,\n    left, mid, right,\n    toolbar, clustparams, title1, title2, title3\n}) => (\n    <>\n        <Header as='h3' attached=\"top\">\n            <Icon name=\"cog\" />\n            <Header.Content>{title}</Header.Content>\n        </Header>\n        <Segment attached>\n            <Grid columns={3}>\n                <Grid.Row>\n                    <Grid.Column width={4}>\n                        <p>{title1}</p>\n                    </Grid.Column>\n\n                    <Grid.Column width={6}>\n                        <p>{title2}</p>\n\n                    </Grid.Column>\n\n                    <Grid.Column width={6}>\n                        <p>{title3}</p>\n                    </Grid.Column>\n                </Grid.Row>\n\n                <Grid.Row>\n                    <Grid.Column width={4}>\n                        {left}\n                    </Grid.Column>\n\n                    <Grid.Column width={6}>\n                        {mid}\n                    </Grid.Column>\n\n                    <Grid.Column width={6}>\n                        {right}\n                    </Grid.Column>\n\n                </Grid.Row>\n\n                <Grid.Row>\n                    <Grid.Column width={16}>\n\n                        <div>{clustparams}</div>\n                        <p>{subtitle}</p>\n\n                    </Grid.Column>\n\n                </Grid.Row>\n            </Grid>\n\n        </Segment>\n\n        {toolbar}\n    </>\n);\n\nexport default AnalysisLayoutTwoRes","import * as React from \"react\";\nimport { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { Accordion, Form, Icon } from \"semantic-ui-react\";\nimport { defaultDebounce } from \"../../helpers\";\nimport ResultList from \"../../job/components/ResultList\";\nimport { AnalysisTypes } from \"../../messages\";\nimport { cbToRadius, inRectConstraint, riConstraint, roConstraints } from \"../../widgets/constraints\";\nimport DraggableHandle from \"../../widgets/DraggableHandle\";\nimport Ring from \"../../widgets/Ring\";\nimport { HandleRenderFunction } from \"../../widgets/types\";\nimport * as compoundAnalysisActions from \"../actions\";\nimport { CompoundAnalysisProps } from \"../types\";\nimport useDefaultFrameView from \"./DefaultFrameView\";\nimport AnalysisLayoutTwoRes from \"./layouts/AnalysisLayoutTwoRes\";\nimport { useRectROI } from \"./roi/RectROI\";\nimport Toolbar from \"./Toolbar\";\n\n\nconst ClustAnalysis: React.FC<CompoundAnalysisProps> = ({ compoundAnalysis, dataset }) => {\n    const { shape } = dataset.params;\n    const [scanHeight, scanWidth, imageHeight, imageWidth] = shape;\n    const minLength = Math.min(imageWidth, imageHeight);\n\n    const [cx, setCx] = useState(imageWidth / 2);\n    const [cy, setCy] = useState(imageHeight / 2);\n    const [ri, setRi] = useState(minLength / 4);\n    const [ro, setRo] = useState(minLength / 2);\n\n    const riHandle = {\n        x: cx - ri,\n        y: cy,\n    }\n    const roHandle = {\n        x: cx - ro,\n        y: cy,\n    }\n\n    const [minDist, setMinDist] = React.useState(1);\n\n    const minDistChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setMinDist(event.target.valueAsNumber);\n    }\n\n    const [nPeaks, setNPeaks] = React.useState(500);\n\n    const peakChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setNPeaks(event.target.valueAsNumber);\n    }\n\n    const [nClust, setNClust] = React.useState(20);\n\n    const clustChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setNClust(event.target.valueAsNumber);\n    }\n\n    const handleCenterChange = defaultDebounce((newCx: number, newCy: number) => {\n        setCx(newCx);\n        setCy(newCy);\n    });\n    const handleRIChange = defaultDebounce(setRi);\n    const handleROChange = defaultDebounce(setRo);\n\n    const frameViewHandles: HandleRenderFunction = (handleDragStart, handleDrop) => (<>\n        <DraggableHandle x={cx} y={cy}\n            imageWidth={imageWidth}\n            onDragMove={handleCenterChange}\n            parentOnDrop={handleDrop}\n            parentOnDragStart={handleDragStart}\n            constraint={inRectConstraint(imageWidth, imageHeight)} />\n        <DraggableHandle x={roHandle.x} y={roHandle.y}\n            imageWidth={imageWidth}\n            onDragMove={cbToRadius(cx, cy, handleROChange)}\n            parentOnDrop={handleDrop}\n            parentOnDragStart={handleDragStart}\n            constraint={roConstraints(riHandle.x, cy)} />\n        <DraggableHandle x={riHandle.x} y={riHandle.y}\n            imageWidth={imageWidth}\n            parentOnDrop={handleDrop}\n            parentOnDragStart={handleDragStart}\n            onDragMove={cbToRadius(cx, cy, handleRIChange)}\n            constraint={riConstraint(roHandle.x, cy)} />\n    </>);\n\n    const frameViewWidgets = (\n        <Ring cx={cx} cy={cy} ri={ri} ro={ro}\n            imageWidth={imageWidth} />\n    )\n\n    const dispatch = useDispatch();\n    const { rectRoiParameters, rectRoiHandles, rectRoiWidgets } = useRectROI({ scanWidth, scanHeight });\n\n    React.useEffect(() => {\n        if (compoundAnalysis.doAutoStart) {\n            dispatch(compoundAnalysisActions.Actions.run(compoundAnalysis.compoundAnalysis, 1, {\n                analysisType: AnalysisTypes.SUM_SIG,\n                parameters: {},\n            }))\n        }\n    }, [compoundAnalysis.compoundAnalysis, dispatch, compoundAnalysis.doAutoStart]);\n\n    const runAnalysis = () => {\n        dispatch(compoundAnalysisActions.Actions.run(compoundAnalysis.compoundAnalysis, 2, {\n            analysisType: AnalysisTypes.CLUST,\n            parameters: {\n                roi: rectRoiParameters.roi,\n                cx,\n                cy,\n                ri,\n                ro,\n                n_clust: nClust,\n                n_peaks: nPeaks,\n                min_dist: minDist\n            }\n        }));\n    };\n\n    const {\n        frameViewTitle, frameModeSelector,\n        handles: resultHandles,\n        widgets: resultWidgets,\n    } = useDefaultFrameView({\n        scanWidth,\n        scanHeight,\n        compoundAnalysisId: compoundAnalysis.compoundAnalysis,\n        doAutoStart: compoundAnalysis.doAutoStart,\n    })\n\n    const subtitle = (\n        <>{frameViewTitle} Ring: center=(x={cx.toFixed(2)}, y={cy.toFixed(2)}), ri={ri.toFixed(2)}, ro={ro.toFixed(2)}</>\n    )\n    const toolbar = <Toolbar compoundAnalysis={compoundAnalysis} onApply={runAnalysis} busyIdxs={[2]} />\n\n    const [paramsVisible, setParamsVisible] = React.useState(false);\n\n    const handleClick = () => {\n        setParamsVisible(!paramsVisible);\n    }\n\n    const clustparams =\n        <Accordion>\n            <Accordion.Title active={paramsVisible} index={0} onClick={handleClick}>\n                <Icon name='dropdown' />\n                Parameters\n            </Accordion.Title>\n            <Accordion.Content active={paramsVisible}>\n                <Form>\n                    <Form.Field>\n                        <label> Number of clusters  <input type=\"number\" value={nClust} step=\"1\" min=\"2\" max=\"100\" onChange={clustChange} /> </label>\n                    </Form.Field>\n                    <Form.Field>\n                        <label>  Maximal number of possible peak positions to detect (better put higher value,\n        the output is limited to the number of peaks the algorithm could find)  <input type=\"number\" value={nPeaks} step=\"1\" min=\"5\" max=\"200\" onChange={peakChange} /> </label>\n                    </Form.Field>\n                    <Form.Field>\n                        <label>  Minimal distance in pixels between peaks  <input type=\"number\" value={minDist} step=\"1\" min=\"0\" max=\"100\" onChange={minDistChange} />  </label>\n                    </Form.Field>\n                </Form>\n            </Accordion.Content>\n        </Accordion>\n    return (\n        <AnalysisLayoutTwoRes\n            title=\"Region clustering\" subtitle={subtitle}\n            left={<>\n                <ResultList\n                    extraHandles={frameViewHandles} extraWidgets={frameViewWidgets}\n                    analysisIndex={0} compoundAnalysis={compoundAnalysis.compoundAnalysis}\n                    width={imageWidth} height={imageHeight}\n                    selectors={frameModeSelector}\n                />\n            </>}\n            mid={<>\n                <ResultList\n                    analysisIndex={1} compoundAnalysis={compoundAnalysis.compoundAnalysis}\n                    width={scanWidth} height={scanHeight}\n                    extraHandles={rectRoiHandles}\n                    extraWidgets={rectRoiWidgets}\n                />\n            </>}\n\n            right={<>\n                <ResultList\n                    analysisIndex={2} compoundAnalysis={compoundAnalysis.compoundAnalysis}\n                    width={scanWidth} height={scanHeight}\n                    extraHandles={resultHandles}\n                    extraWidgets={resultWidgets}\n                />\n            </>}\n            toolbar={toolbar}\n            clustparams={clustparams}\n\n            title1=\"Peaks inside the ring will be considered\"\n            title2=\"Choose specimen region\"\n            title3=\"Clustering result\"\n\n        />\n    );\n}\n\nexport default ClustAnalysis;","import * as React from \"react\";\nimport { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport ResultList from \"../../job/components/ResultList\";\nimport { AnalysisTypes } from \"../../messages\";\nimport { cbToRadius, inRectConstraint, keepOnCY } from \"../../widgets/constraints\";\nimport Disk from \"../../widgets/Disk\";\nimport DraggableHandle from \"../../widgets/DraggableHandle\";\nimport { HandleRenderFunction } from \"../../widgets/types\";\nimport * as compoundAnalysisActions from \"../actions\";\nimport { CompoundAnalysisProps } from \"../types\";\nimport useDefaultFrameView from \"./DefaultFrameView\";\nimport AnalysisLayoutTwoCol from \"./layouts/AnalysisLayoutTwoCol\";\nimport Toolbar from \"./Toolbar\";\n\nconst DiskMaskAnalysis: React.FC<CompoundAnalysisProps> = ({ compoundAnalysis, dataset }) => {\n    const { shape } = dataset.params;\n    const [scanHeight, scanWidth, imageHeight, imageWidth] = shape;\n\n    const minLength = Math.min(imageWidth, imageHeight);\n    const [cx, setCx] = useState(imageWidth / 2);\n    const [cy, setCy] = useState(imageHeight / 2);\n    const [r, setR] = useState(minLength / 4);\n\n    const handleCenterChange = (newCx: number, newCy: number) => {\n        setCx(newCx);\n        setCy(newCy);\n    };\n    const handleRChange = setR;\n\n    const rHandle = {\n        x: cx - r,\n        y: cy,\n    }\n\n    const frameViewHandles: HandleRenderFunction = (handleDragStart, handleDrop) => (<>\n        <DraggableHandle x={cx} y={cy}\n            imageWidth={imageWidth}\n            onDragMove={handleCenterChange}\n            parentOnDragStart={handleDragStart}\n            parentOnDrop={handleDrop}\n            constraint={inRectConstraint(imageWidth, imageHeight)} />\n        <DraggableHandle x={rHandle.x} y={rHandle.y}\n            imageWidth={imageWidth}\n            onDragMove={cbToRadius(cx, cy, handleRChange)}\n            parentOnDragStart={handleDragStart}\n            parentOnDrop={handleDrop}\n            constraint={keepOnCY(cy)} />\n    </>);\n\n    const frameViewWidgets = (\n        <Disk cx={cx} cy={cy} r={r} imageWidth={imageWidth} />\n    );\n\n    const dispatch = useDispatch();\n\n    const runAnalysis = () => {\n        dispatch(compoundAnalysisActions.Actions.run(compoundAnalysis.compoundAnalysis, 1, {\n            analysisType: AnalysisTypes.APPLY_DISK_MASK,\n            parameters: {\n                shape: \"disk\",\n                cx, cy, r\n            }\n        }));\n    };\n\n    const {\n        frameViewTitle, frameModeSelector,\n        handles: resultHandles, widgets: resultWidgets,\n    } = useDefaultFrameView({\n        scanWidth,\n        scanHeight,\n        compoundAnalysisId: compoundAnalysis.compoundAnalysis,\n        doAutoStart: compoundAnalysis.doAutoStart,\n    });\n\n    const subtitle = <>{frameViewTitle} Disk: center=(x={cx.toFixed(2)}, y={cy.toFixed(2)}), r={r.toFixed(2)}</>;\n\n    const toolbar = <Toolbar compoundAnalysis={compoundAnalysis} onApply={runAnalysis} busyIdxs={[1]} />\n\n    return (\n        <AnalysisLayoutTwoCol\n            title=\"Disk analysis\" subtitle={subtitle}\n            left={<>\n                <ResultList\n                    extraHandles={frameViewHandles} extraWidgets={frameViewWidgets}\n                    analysisIndex={0} compoundAnalysis={compoundAnalysis.compoundAnalysis}\n                    width={imageWidth} height={imageHeight}\n                    selectors={frameModeSelector}\n                />\n            </>}\n            right={<>\n                <ResultList\n                    analysisIndex={1} compoundAnalysis={compoundAnalysis.compoundAnalysis}\n                    width={scanWidth} height={scanHeight}\n                    extraHandles={resultHandles}\n                    extraWidgets={resultWidgets}\n                />\n            </>}\n            toolbar={toolbar}\n        />\n    );\n}\n\nexport default DiskMaskAnalysis;\n","import * as React from \"react\";\nimport { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { defaultDebounce } from \"../../helpers\";\nimport ResultList from \"../../job/components/ResultList\";\nimport { AnalysisTypes } from \"../../messages\";\nimport { cbToRadius, inRectConstraint, riConstraint, roConstraints } from \"../../widgets/constraints\";\nimport DraggableHandle from \"../../widgets/DraggableHandle\";\nimport Ring from \"../../widgets/Ring\";\nimport { HandleRenderFunction } from \"../../widgets/types\";\nimport * as compoundAnalysisActions from \"../actions\";\nimport { CompoundAnalysisProps } from \"../types\";\nimport useDefaultFrameView from \"./DefaultFrameView\";\nimport AnalysisLayoutTwoCol from \"./layouts/AnalysisLayoutTwoCol\";\nimport Toolbar from \"./Toolbar\";\n\nconst FEMAnalysis: React.FC<CompoundAnalysisProps> = ({ compoundAnalysis, dataset }) => {\n    const { shape } = dataset.params;\n    const [scanHeight, scanWidth, imageHeight, imageWidth] = shape;\n    const minLength = Math.min(imageWidth, imageHeight);\n\n    const [cx, setCx] = useState(imageWidth / 2);\n    const [cy, setCy] = useState(imageHeight / 2);\n    const [ri, setRi] = useState(minLength / 4);\n    const [ro, setRo] = useState(minLength / 2);\n\n    const riHandle = {\n        x: cx - ri,\n        y: cy,\n    }\n    const roHandle = {\n        x: cx - ro,\n        y: cy,\n    }\n\n    const handleCenterChange = defaultDebounce((newCx: number, newCy: number) => {\n        setCx(newCx);\n        setCy(newCy);\n    });\n    const handleRIChange = defaultDebounce(setRi);\n    const handleROChange = defaultDebounce(setRo);\n\n    const frameViewHandles: HandleRenderFunction = (handleDragStart, handleDrop) => (<>\n        <DraggableHandle x={cx} y={cy}\n            imageWidth={imageWidth}\n            onDragMove={handleCenterChange}\n            parentOnDrop={handleDrop}\n            parentOnDragStart={handleDragStart}\n            constraint={inRectConstraint(imageWidth, imageHeight)} />\n        <DraggableHandle x={roHandle.x} y={roHandle.y}\n            imageWidth={imageWidth}\n            onDragMove={cbToRadius(cx, cy, handleROChange)}\n            parentOnDrop={handleDrop}\n            parentOnDragStart={handleDragStart}\n            constraint={roConstraints(riHandle.x, cy)} />\n        <DraggableHandle x={riHandle.x} y={riHandle.y}\n            imageWidth={imageWidth}\n            parentOnDrop={handleDrop}\n            parentOnDragStart={handleDragStart}\n            onDragMove={cbToRadius(cx, cy, handleRIChange)}\n            constraint={riConstraint(roHandle.x, cy)} />\n    </>);\n\n    const frameViewWidgets = (\n        <Ring cx={cx} cy={cy} ri={ri} ro={ro}\n            imageWidth={imageWidth} />\n    )\n\n    const dispatch = useDispatch();\n\n    const runAnalysis = () => {\n        dispatch(compoundAnalysisActions.Actions.run(compoundAnalysis.compoundAnalysis, 1, {\n            analysisType: AnalysisTypes.FEM,\n            parameters: {\n                shape: \"ring\",\n                cx, cy, ri, ro,\n            }\n        }));\n    };\n\n    const {\n        frameViewTitle, frameModeSelector,\n        handles: resultHandles,\n        widgets: resultWidgets,\n    } = useDefaultFrameView({\n        scanWidth,\n        scanHeight,\n        compoundAnalysisId: compoundAnalysis.compoundAnalysis,\n        doAutoStart: compoundAnalysis.doAutoStart,\n    })\n\n    const subtitle = (\n        <>{frameViewTitle} Ring: center=(x={cx.toFixed(2)}, y={cy.toFixed(2)}), ri={ri.toFixed(2)}, ro={ro.toFixed(2)}</>\n    )\n\n    const toolbar = <Toolbar compoundAnalysis={compoundAnalysis} onApply={runAnalysis} busyIdxs={[1]} />\n\n    return (\n        <AnalysisLayoutTwoCol\n            title=\"Fluctuation EM (SD over Ring analysis)\" subtitle={subtitle}\n            left={<>\n                <ResultList\n                    extraHandles={frameViewHandles} extraWidgets={frameViewWidgets}\n                    analysisIndex={0} compoundAnalysis={compoundAnalysis.compoundAnalysis}\n                    width={imageWidth} height={imageHeight}\n                    selectors={frameModeSelector}\n                />\n            </>}\n            right={<>\n                <ResultList\n                    analysisIndex={1} compoundAnalysis={compoundAnalysis.compoundAnalysis}\n                    width={scanWidth} height={scanHeight}\n                    extraHandles={resultHandles}\n                    extraWidgets={resultWidgets}\n                />\n            </>}\n            toolbar={toolbar}\n        />\n    );\n}\n\nexport default FEMAnalysis;","import React from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { AnalysisTypes } from \"../../messages\";\nimport { inRectConstraint } from \"../../widgets/constraints\";\nimport DraggableHandle from \"../../widgets/DraggableHandle\";\nimport { HandleRenderFunction } from \"../../widgets/types\";\nimport * as compoundAnalysisActions from \"../actions\";\n\nconst useFFTFramePicker = ({\n    enabled, scanWidth, scanHeight, analysisIndex, compoundAnalysisId,\n    cx, cy, real_rad, real_centerx, real_centery, setCx, setCy\n}: {\n    enabled: boolean, scanWidth: number, scanHeight: number,\n    analysisIndex: number, compoundAnalysisId: string,\n    cx: number, cy: number, setCx: (newCx: number) => void, setCy: (newCy: number) => void,\n    real_rad: number | null, real_centerx: number | null, real_centery: number | null\n}) => {\n\n    const dispatch = useDispatch();\n\n    React.useEffect(() => {\n        if (enabled) {\n            dispatch(compoundAnalysisActions.Actions.run(compoundAnalysisId, analysisIndex, {\n                analysisType: AnalysisTypes.PICK_FFT_FRAME,\n                parameters: { x: cx, y: cy, real_rad, real_centerx, real_centery },\n            }));\n        }\n    }, [compoundAnalysisId, cx, cy, enabled, analysisIndex, real_rad, real_centerx, real_centery, dispatch]);\n\n    const onPickChange = (pickX: number, pickY: number) => {\n        const newX = Math.round(pickX);\n        const newY = Math.round(pickY);\n        if (cx === newX && cy === newY) {\n            return;\n        }\n        setCx(newX);\n        setCy(newY);\n    }\n\n    const renderPickHandle: HandleRenderFunction = (onDragStart, onDrop) => (\n        <DraggableHandle x={cx} y={cy} withCross\n            imageWidth={scanWidth}\n            onDragMove={onPickChange}\n            parentOnDragStart={onDragStart}\n            parentOnDrop={onDrop}\n            constraint={inRectConstraint(scanWidth, scanHeight)} />\n    )\n\n    return { coords: { cx, cy }, handles: renderPickHandle };\n}\n\nexport default useFFTFramePicker;","import React from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { AnalysisTypes } from \"../../messages\";\nimport * as analysisActions from \"../actions\";\n\nconst useFFTSumFrames = ({\n    enabled, analysisIndex: jobIndex, compoundAnalysisId: analysisId, real_rad, real_centerx, real_centery\n}: {\n    enabled: boolean, analysisIndex: number, compoundAnalysisId: string, real_rad: number | null, real_centerx: number | null, real_centery: number | null\n}) => {\n    const dispatch = useDispatch();\n\n    React.useEffect(() => {\n        if (enabled) {\n            dispatch(analysisActions.Actions.run(analysisId, jobIndex, {\n                analysisType: AnalysisTypes.FFTSUM_FRAMES,\n                parameters: { real_rad, real_centerx, real_centery },\n            }));\n        }\n    }, [analysisId, enabled, jobIndex, real_rad, real_centerx, real_centery, dispatch]);\n};\n\nexport default useFFTSumFrames;\n","import * as React from \"react\";\nimport { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { AnalysisTypes } from \"../../messages\";\nimport { HandleRenderFunction } from \"../../widgets/types\";\nimport * as compoundAnalysisActions from \"../actions\";\nimport useFFTFramePicker from \"./FFTFramePicker\";\nimport useFFTSumFrames from \"./FFTSumFrames\";\nimport useFramePicker from \"./FramePicker\";\nimport ModeSelector from \"./ModeSelector\";\nimport { useRoiPicker } from \"./roi/RoiPicker\";\n\nconst useFFTFrameView = ({\n    scanWidth, scanHeight, compoundAnalysisId, real_rad, real_centerx,\n    real_centery, doAutoStart,\n}: {\n    scanWidth: number, scanHeight: number, compoundAnalysisId: string,\n    real_rad: number | null, real_centerx: number | null, real_centery: number | null,\n    doAutoStart: boolean,\n}) => {\n    const availableModes = [\n        {\n            text: \"Pick\",\n            value: AnalysisTypes.PICK_FRAME,\n        },\n        {\n            text: \"Average\",\n            value: AnalysisTypes.SUM_FRAMES,\n        },\n    ];\n\n    const [frameMode, setMode] = useState(AnalysisTypes.SUM_FRAMES);\n\n    const dispatch = useDispatch();\n\n    const updateMode = (newMode: string) => {\n        dispatch(compoundAnalysisActions.Actions.enableAutoStart(compoundAnalysisId));\n        setMode(newMode as AnalysisTypes);\n    }\n\n    const frameModeSelector = <ModeSelector modes={availableModes} currentMode={frameMode} onModeChange={updateMode} label=\"Mode\" />\n\n    const [cx, setCx] = React.useState(Math.floor(scanWidth / 2));\n    const [cy, setCy] = React.useState(Math.floor(scanHeight / 2));\n\n    const { coords: pickCoords, handles: pickHandles } = useFramePicker({\n        enabled: frameMode === AnalysisTypes.PICK_FRAME && doAutoStart,\n        scanWidth, scanHeight,\n        analysisIndex: 1,\n        compoundAnalysisId,\n        cx, cy, setCx, setCy\n    });\n\n    useFFTFramePicker({\n        enabled: frameMode === AnalysisTypes.PICK_FRAME && doAutoStart,\n        scanWidth, scanHeight,\n        analysisIndex: 0,\n        compoundAnalysisId,\n        cx, cy, setCx, setCy, real_rad, real_centerx, real_centery\n    });\n\n    useRoiPicker({\n        enabled: frameMode === AnalysisTypes.SUM_FRAMES && doAutoStart,\n        analysisIndex: 1,\n        compoundAnalysisId,\n        scanWidth, scanHeight,\n        roiParameters: { roi: {} },\n        analysisType: AnalysisTypes.SUM_FRAMES,\n    })\n    useFFTSumFrames({\n        enabled: frameMode === AnalysisTypes.SUM_FRAMES && doAutoStart,\n        analysisIndex: 0,\n        compoundAnalysisId,\n        real_rad,\n        real_centerx,\n        real_centery\n    })\n\n    const frameViewTitle = (\n        frameMode !== AnalysisTypes.PICK_FRAME ? null : <>Pick: x={pickCoords.cx}, y={pickCoords.cy} &emsp;</>\n    )\n\n    const nullHandles: HandleRenderFunction = () => null\n\n    return {\n        frameViewTitle,\n        handles: frameMode !== AnalysisTypes.PICK_FRAME ? nullHandles : pickHandles,\n\n        frameModeSelector,\n    }\n}\n\nexport default useFFTFrameView;\n","import * as React from \"react\";\nimport { Grid, Header, Icon, Segment } from \"semantic-ui-react\";\n\ninterface AnalysisLayoutThreeColProps {\n    title: string,\n    subtitle: React.ReactNode,\n    left: React.ReactNode,\n    mid: React.ReactNode,\n    right: React.ReactNode,\n    toolbar?: React.ReactNode,\n    title1: string,\n    title2: React.ReactNode,\n    title3: string,\n}\n\ntype MergedProps = AnalysisLayoutThreeColProps;\n\nconst AnalysisLayoutThreeCol: React.FC<MergedProps> = ({\n    title, subtitle,\n    left, mid, right,\n    toolbar, title1, title2, title3\n}) => (\n    <>\n        <Header as='h3' attached=\"top\">\n            <Icon name=\"cog\" />\n            <Header.Content>{title}</Header.Content>\n        </Header>\n        <Segment attached>\n            <Grid columns={3}>\n                <Grid.Row>\n                    <Grid.Column width={5}>\n                        <p>{title1}</p>\n                    </Grid.Column>\n\n                    <Grid.Column width={5}>\n                        <p>{title2}</p>\n                    </Grid.Column>\n\n                    <Grid.Column width={6}>\n                        <p>{title3}</p>\n                    </Grid.Column>\n                </Grid.Row>\n\n                <Grid.Row>\n                    <Grid.Column width={5}>\n                        {left}\n                    </Grid.Column>\n\n                    <Grid.Column width={5}>\n                        {mid}\n                    </Grid.Column>\n\n                    <Grid.Column width={6}>\n                        {right}\n                    </Grid.Column>\n\n                </Grid.Row>\n\n                <Grid.Row>\n                    <Grid.Column width={10}>\n                        <p>{subtitle}</p>\n                    </Grid.Column>\n\n                    <Grid.Column width={6} />\n                </Grid.Row>\n            </Grid>\n        </Segment>\n        {toolbar}\n    </>\n);\n\nexport default AnalysisLayoutThreeCol","import * as React from \"react\";\nimport { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { defaultDebounce } from \"../../helpers\";\nimport ResultList from \"../../job/components/ResultList\";\nimport { AnalysisTypes } from \"../../messages\";\nimport { cbToRadius, inRectConstraint, keepOnCY, riConstraint, roConstraints } from \"../../widgets/constraints\";\nimport Disk from \"../../widgets/Disk\";\nimport DraggableHandle from \"../../widgets/DraggableHandle\";\nimport Ring from \"../../widgets/Ring\";\nimport { HandleRenderFunction } from \"../../widgets/types\";\nimport * as compoundAnalysisActions from \"../actions\";\nimport { CompoundAnalysisProps } from \"../types\";\nimport useFFTFrameView from \"./FFTFrameView\";\nimport AnalysisLayoutThreeCol from \"./layouts/AnalysisLayoutThreeCol\";\nimport Toolbar from \"./Toolbar\";\n\n\nconst FFTAnalysis: React.FC<CompoundAnalysisProps> = ({ compoundAnalysis, dataset }) => {\n    const { shape } = dataset.params;\n    const [scanHeight, scanWidth, imageHeight, imageWidth] = shape;\n    const minLength = Math.min(imageWidth, imageHeight);\n\n    const cx = imageWidth / 2;\n    const cy = imageHeight / 2;\n    const [radIn, setRi] = useState(minLength / 4);\n    const [radOut, setRo] = useState(minLength / 2);\n\n    const dispatch = useDispatch();\n    const riHandle = {\n        x: cx - radIn,\n        y: cy,\n    }\n    const roHandle = {\n        x: cx - radOut,\n        y: cy,\n    }\n\n\n    const handleRIChange = defaultDebounce(setRi);\n    const handleROChange = defaultDebounce(setRo);\n\n    const frameViewHandlesfft: HandleRenderFunction = (handleDragStart, handleDrop) => (<>\n\n        <DraggableHandle x={roHandle.x} y={roHandle.y}\n            imageWidth={imageWidth}\n            onDragMove={cbToRadius(cx, cy, handleROChange)}\n            parentOnDrop={handleDrop}\n            parentOnDragStart={handleDragStart}\n            constraint={roConstraints(riHandle.x, cy)} />\n        <DraggableHandle x={riHandle.x} y={riHandle.y}\n            imageWidth={imageWidth}\n            parentOnDrop={handleDrop}\n            parentOnDragStart={handleDragStart}\n            onDragMove={cbToRadius(cx, cy, handleRIChange)}\n            constraint={riConstraint(roHandle.x, cy)} />\n    </>);\n\n    const frameViewWidgetsfft = (\n        <Ring cx={cx} cy={cy} ri={radIn} ro={radOut}\n            imageWidth={imageWidth} />\n    )\n\n    const [check, setCheck] = React.useState(true);\n\n    const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        dispatch(compoundAnalysisActions.Actions.enableAutoStart(compoundAnalysis.compoundAnalysis));\n        setCheck(event.target.checked);\n    }\n\n    const [realCenterX, setCx] = useState(imageWidth / 2);\n    const [realCenterY, setCy] = useState(imageHeight / 2);\n    const [realRad, setR] = useState(minLength / 4);\n\n    const handleCenterChange = defaultDebounce((newCx: number, newCy: number) => {\n        dispatch(compoundAnalysisActions.Actions.enableAutoStart(compoundAnalysis.compoundAnalysis));\n        setCx(newCx);\n        setCy(newCy);\n    });\n    const handleRChange = defaultDebounce(setR);\n\n    const rHandle = {\n        x: realCenterX - realRad,\n        y: realCenterY,\n    }\n\n    const frameViewHandlesreal: HandleRenderFunction = (handleDragStart, handleDrop) => (<>\n        <DraggableHandle x={realCenterX} y={realCenterY}\n            imageWidth={imageWidth}\n            onDragMove={handleCenterChange}\n            parentOnDragStart={handleDragStart}\n            parentOnDrop={handleDrop}\n            constraint={inRectConstraint(imageWidth, imageHeight)} />\n        <DraggableHandle x={rHandle.x} y={rHandle.y}\n            imageWidth={imageWidth}\n            onDragMove={cbToRadius(realCenterX, realCenterY, handleRChange)}\n            parentOnDragStart={handleDragStart}\n            parentOnDrop={handleDrop}\n            constraint={keepOnCY(realCenterY)} />\n    </>);\n\n    const frameViewWidgetsreal = (\n        <Disk cx={realCenterX} cy={realCenterY} r={realRad} imageWidth={imageWidth} />\n    );\n\n    const runAnalysis = () => {\n        dispatch(compoundAnalysisActions.Actions.run(compoundAnalysis.compoundAnalysis, 2, {\n            analysisType: AnalysisTypes.APPLY_FFT_MASK,\n            parameters: {\n                rad_in: radIn,\n                rad_out: radOut,\n                real_rad: check ? realRad : null,\n                real_centerx: check ? realCenterX : null,\n                real_centery: check ? realCenterY : null\n            }\n        }));\n    };\n\n    const { frameViewTitle, frameModeSelector, handles: resultHandles } = useFFTFrameView({\n        scanWidth,\n        scanHeight,\n        compoundAnalysisId: compoundAnalysis.compoundAnalysis,\n        real_rad: check ? realRad : null,\n        real_centerx: check ? realCenterX : null,\n        real_centery: check ? realCenterY : null,\n        doAutoStart: compoundAnalysis.doAutoStart,\n    });\n\n    const toolbar = <Toolbar compoundAnalysis={compoundAnalysis} onApply={runAnalysis} busyIdxs={[2]} />\n\n    let subtitle;\n    let mid: React.ReactNode;\n    if (check) {\n        mid = (<>\n            <ResultList\n                extraHandles={frameViewHandlesreal} extraWidgets={frameViewWidgetsreal}\n                analysisIndex={1} compoundAnalysis={compoundAnalysis.compoundAnalysis}\n                width={imageWidth} height={imageHeight}\n                selectors={frameModeSelector}\n            />\n        </>)\n        subtitle = (\n            <>{frameViewTitle} real_rad={radIn.toFixed(2)}, real_center=(x={realCenterX.toFixed(2)}, y={realCenterY.toFixed(2)}), fourier_rad_in={radIn.toFixed(2)}, fourier_rad_out={radOut.toFixed(2)}</>\n        )\n    }\n    else {\n        mid = (<>\n            <ResultList\n                analysisIndex={1} compoundAnalysis={compoundAnalysis.compoundAnalysis}\n                width={imageWidth} height={imageHeight}\n                selectors={frameModeSelector}\n            />\n        </>)\n        subtitle = (\n            <>{frameViewTitle} fourier_rad_in={radIn.toFixed(2)}, fourier_rad_out={radOut.toFixed(2)}</>\n        )\n    }\n\n\n    return (\n        <AnalysisLayoutThreeCol\n            title=\"FFT analysis\" subtitle={subtitle}\n            left={<>\n                <ResultList\n                    extraHandles={frameViewHandlesfft} extraWidgets={frameViewWidgetsfft}\n                    analysisIndex={0} compoundAnalysis={compoundAnalysis.compoundAnalysis}\n                    width={imageWidth} height={imageHeight}\n                />\n            </>}\n            mid={mid}\n\n            right={<>\n                <ResultList\n                    analysisIndex={2} compoundAnalysis={compoundAnalysis.compoundAnalysis}\n                    width={scanWidth} height={scanHeight}\n                    extraHandles={resultHandles}\n                />\n            </>}\n            toolbar={toolbar}\n\n            title2={<><label> Masking out of zero order diffraction peak <input type=\"checkbox\" name=\"check\" onChange={handleChange} checked={check} /> </label>\n            </>}\n            title1=\"Masking of integration region in Fourier space\"\n            title3=\"Result of analysis\"\n\n        />\n    );\n}\n\n\nexport default FFTAnalysis;\n","import * as React from \"react\";\nimport { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { defaultDebounce } from \"../../helpers\";\nimport ResultList from \"../../job/components/ResultList\";\nimport { AnalysisTypes } from \"../../messages\";\nimport { inRectConstraint } from \"../../widgets/constraints\";\nimport DraggableHandle from \"../../widgets/DraggableHandle\";\nimport { HandleRenderFunction } from \"../../widgets/types\";\nimport * as analysisActions from \"../actions\";\nimport { CompoundAnalysisProps } from \"../types\";\nimport useDefaultFrameView from \"./DefaultFrameView\";\nimport AnalysisLayoutTwoCol from \"./layouts/AnalysisLayoutTwoCol\";\nimport Toolbar from \"./Toolbar\";\n\n\nconst PointSelectionAnalysis: React.FC<CompoundAnalysisProps> = ({ compoundAnalysis, dataset, }) => {\n    const { shape } = dataset.params;\n    const [scanHeight, scanWidth, imageHeight, imageWidth] = shape;\n\n    const [cx, setCx] = useState(imageWidth / 2);\n    const [cy, setCy] = useState(imageHeight / 2);\n    const handleCenterChange = defaultDebounce((newCx: number, newCy: number) => {\n        const newX = Math.round(newCx);\n        const newY = Math.round(newCy);\n        if (cx === newX && cy === newY) {\n            return;\n        }\n        setCx(newX);\n        setCy(newY);\n    });\n\n    const frameViewHandles: HandleRenderFunction = (handleDragStart, handleDrop) => (<>\n        <DraggableHandle x={cx} y={cy} withCross\n            onDragMove={handleCenterChange}\n            imageWidth={imageWidth}\n            parentOnDragStart={handleDragStart}\n            parentOnDrop={handleDrop}\n            constraint={inRectConstraint(imageWidth, imageHeight)} />\n    </>);\n\n    const {\n        frameViewTitle, frameModeSelector,\n        handles: resultHandles,\n        widgets: resultWidgets,\n    } = useDefaultFrameView({\n        scanWidth,\n        scanHeight,\n        compoundAnalysisId: compoundAnalysis.compoundAnalysis,\n        doAutoStart: compoundAnalysis.doAutoStart,\n    })\n\n    const subtitle = (\n        <>{frameViewTitle} Point: center=(x={cx.toFixed(2)}, y={cy.toFixed(2)})</>\n    )\n\n    const dispatch = useDispatch();\n\n    const runAnalysis = () => {\n        dispatch(analysisActions.Actions.run(compoundAnalysis.compoundAnalysis, 1, {\n            analysisType: AnalysisTypes.APPLY_POINT_SELECTOR,\n            parameters: {\n                shape: \"point\",\n                cx,\n                cy,\n            }\n        }));\n    };\n\n    const toolbar = <Toolbar compoundAnalysis={compoundAnalysis} onApply={runAnalysis} busyIdxs={[1]} />\n\n    return (\n        <AnalysisLayoutTwoCol\n            title=\"Point analysis\" subtitle={subtitle}\n            left={<>\n                <ResultList\n                    extraHandles={frameViewHandles}\n                    analysisIndex={0} compoundAnalysis={compoundAnalysis.compoundAnalysis}\n                    width={imageWidth} height={imageHeight}\n                    selectors={frameModeSelector}\n                />\n            </>}\n            right={<>\n                <ResultList\n                    analysisIndex={1} compoundAnalysis={compoundAnalysis.compoundAnalysis}\n                    width={scanWidth} height={scanHeight}\n                    extraHandles={resultHandles}\n                    extraWidgets={resultWidgets}\n                />\n            </>}\n            toolbar={toolbar}\n        />\n    );\n}\n\nexport default PointSelectionAnalysis;","import * as React from \"react\";\nimport { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { defaultDebounce } from \"../../helpers\";\nimport ResultList from \"../../job/components/ResultList\";\nimport { AnalysisTypes } from \"../../messages\";\nimport { cbToRadius, inRectConstraint, riConstraint, roConstraints } from \"../../widgets/constraints\";\nimport DraggableHandle from \"../../widgets/DraggableHandle\";\nimport Ring from \"../../widgets/Ring\";\nimport { HandleRenderFunction } from \"../../widgets/types\";\nimport * as analysisActions from \"../actions\";\nimport { CompoundAnalysisProps } from \"../types\";\nimport useDefaultFrameView from \"./DefaultFrameView\";\nimport AnalysisLayoutTwoCol from \"./layouts/AnalysisLayoutTwoCol\";\nimport Toolbar from \"./Toolbar\";\n\nconst RadialFourierAnalysis: React.FC<CompoundAnalysisProps> = ({ compoundAnalysis, dataset }) => {\n    const { shape } = dataset.params;\n    const [scanHeight, scanWidth, imageHeight, imageWidth] = shape;\n\n    const minLength = Math.min(imageWidth, imageHeight);\n    const [cx, setCx] = useState(imageWidth / 2);\n    const [cy, setCy] = useState(imageHeight / 2);\n    const [ri, setRi] = useState(minLength / 4);\n    const [ro, setRo] = useState(minLength / 2);\n    const [nBins] = useState(1);\n    const [maxOrder] = useState(8);\n\n    const riHandle = {\n        x: cx - ri,\n        y: cy,\n    }\n    const roHandle = {\n        x: cx - ro,\n        y: cy,\n    }\n\n    const handleCenterChange = defaultDebounce((newCx: number, newCy: number) => {\n        setCx(newCx);\n        setCy(newCy);\n    });\n    const handleRIChange = defaultDebounce(setRi);\n    const handleROChange = defaultDebounce(setRo);\n\n    const frameViewHandles: HandleRenderFunction = (handleDragStart, handleDrop) => (<>\n        <DraggableHandle x={cx} y={cy}\n            imageWidth={imageWidth}\n            onDragMove={handleCenterChange}\n            parentOnDrop={handleDrop}\n            parentOnDragStart={handleDragStart}\n            constraint={inRectConstraint(imageWidth, imageHeight)} />\n        <DraggableHandle x={roHandle.x} y={roHandle.y}\n            imageWidth={imageWidth}\n            onDragMove={cbToRadius(cx, cy, handleROChange)}\n            parentOnDrop={handleDrop}\n            parentOnDragStart={handleDragStart}\n            constraint={roConstraints(riHandle.x, cy)} />\n        <DraggableHandle x={riHandle.x} y={riHandle.y}\n            imageWidth={imageWidth}\n            parentOnDrop={handleDrop}\n            parentOnDragStart={handleDragStart}\n            onDragMove={cbToRadius(cx, cy, handleRIChange)}\n            constraint={riConstraint(roHandle.x, cy)} />\n    </>);\n\n    const frameViewWidgets = (\n        <Ring cx={cx} cy={cy} ri={ri} ro={ro}\n            imageWidth={imageWidth} />\n    )\n\n    const {\n        frameViewTitle, frameModeSelector,\n        handles: resultHandles,\n        widgets: resultWidgets,\n    } = useDefaultFrameView({\n        scanWidth,\n        scanHeight,\n        compoundAnalysisId: compoundAnalysis.compoundAnalysis,\n        doAutoStart: compoundAnalysis.doAutoStart,\n    })\n\n    const subtitle = (\n        <>{frameViewTitle} Ring: center=(x={cx.toFixed(2)}, y={cy.toFixed(2)}), ri={ri.toFixed(2)}, ro={ro.toFixed(2)}</>\n    )\n\n    const dispatch = useDispatch();\n\n    const runAnalysis = () => {\n        dispatch(analysisActions.Actions.run(compoundAnalysis.compoundAnalysis, 1, {\n            analysisType: AnalysisTypes.RADIAL_FOURIER,\n            parameters: {\n                shape: \"radial_fourier\",\n                cx, cy, ri, ro,\n                n_bins: nBins,\n                max_order: maxOrder,\n            }\n        }));\n    };\n\n    const toolbar = <Toolbar compoundAnalysis={compoundAnalysis} onApply={runAnalysis} busyIdxs={[1]} />\n\n    return (\n        <AnalysisLayoutTwoCol\n            title=\"Radial Fourier analysis\" subtitle={subtitle}\n            left={<>\n                <ResultList\n                    extraHandles={frameViewHandles} extraWidgets={frameViewWidgets}\n                    analysisIndex={0} compoundAnalysis={compoundAnalysis.compoundAnalysis}\n                    width={imageWidth} height={imageHeight}\n                    selectors={frameModeSelector}\n                />\n            </>}\n            right={<>\n                <ResultList\n                    analysisIndex={1} compoundAnalysis={compoundAnalysis.compoundAnalysis}\n                    width={scanWidth} height={scanHeight}\n                    extraHandles={resultHandles}\n                    extraWidgets={resultWidgets}\n                />\n            </>}\n            toolbar={toolbar}\n        />\n    );\n}\n\nexport default RadialFourierAnalysis;","import * as React from \"react\";\nimport { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { defaultDebounce } from \"../../helpers\";\nimport ResultList from \"../../job/components/ResultList\";\nimport { AnalysisTypes } from \"../../messages\";\nimport { cbToRadius, inRectConstraint, riConstraint, roConstraints } from \"../../widgets/constraints\";\nimport DraggableHandle from \"../../widgets/DraggableHandle\";\nimport Ring from \"../../widgets/Ring\";\nimport { HandleRenderFunction } from \"../../widgets/types\";\nimport * as analysisActions from \"../actions\";\nimport { CompoundAnalysisProps } from \"../types\";\nimport useDefaultFrameView from \"./DefaultFrameView\";\nimport AnalysisLayoutTwoCol from \"./layouts/AnalysisLayoutTwoCol\";\nimport Toolbar from \"./Toolbar\";\n\nconst RingMaskAnalysis: React.FC<CompoundAnalysisProps> = ({ compoundAnalysis, dataset }) => {\n    const { shape } = dataset.params;\n    const [scanHeight, scanWidth, imageHeight, imageWidth] = shape;\n    const minLength = Math.min(imageWidth, imageHeight);\n\n    const [cx, setCx] = useState(imageWidth / 2);\n    const [cy, setCy] = useState(imageHeight / 2);\n    const [ri, setRi] = useState(minLength / 4);\n    const [ro, setRo] = useState(minLength / 2);\n\n    const riHandle = {\n        x: cx - ri,\n        y: cy,\n    }\n    const roHandle = {\n        x: cx - ro,\n        y: cy,\n    }\n\n    const handleCenterChange = defaultDebounce((newCx: number, newCy: number) => {\n        setCx(newCx);\n        setCy(newCy);\n    });\n    const handleRIChange = defaultDebounce(setRi);\n    const handleROChange = defaultDebounce(setRo);\n\n    const frameViewHandles: HandleRenderFunction = (handleDragStart, handleDrop) => (<>\n        <DraggableHandle x={cx} y={cy}\n            imageWidth={imageWidth}\n            onDragMove={handleCenterChange}\n            parentOnDrop={handleDrop}\n            parentOnDragStart={handleDragStart}\n            constraint={inRectConstraint(imageWidth, imageHeight)} />\n        <DraggableHandle x={roHandle.x} y={roHandle.y}\n            imageWidth={imageWidth}\n            onDragMove={cbToRadius(cx, cy, handleROChange)}\n            parentOnDrop={handleDrop}\n            parentOnDragStart={handleDragStart}\n            constraint={roConstraints(riHandle.x, cy)} />\n        <DraggableHandle x={riHandle.x} y={riHandle.y}\n            imageWidth={imageWidth}\n            parentOnDrop={handleDrop}\n            parentOnDragStart={handleDragStart}\n            onDragMove={cbToRadius(cx, cy, handleRIChange)}\n            constraint={riConstraint(roHandle.x, cy)} />\n    </>);\n\n    const frameViewWidgets = (\n        <Ring cx={cx} cy={cy} ri={ri} ro={ro}\n            imageWidth={imageWidth} />\n    )\n\n    const dispatch = useDispatch();\n\n    const runAnalysis = () => {\n        dispatch(analysisActions.Actions.run(compoundAnalysis.compoundAnalysis, 1, {\n            analysisType: AnalysisTypes.APPLY_RING_MASK,\n            parameters: {\n                shape: \"ring\",\n                cx, cy, ri, ro,\n            }\n        }));\n    };\n\n    const {\n        frameViewTitle, frameModeSelector,\n        handles: resultHandles,\n        widgets: resultWidgets,\n    } = useDefaultFrameView({\n        scanWidth,\n        scanHeight,\n        compoundAnalysisId: compoundAnalysis.compoundAnalysis,\n        doAutoStart: compoundAnalysis.doAutoStart,\n    })\n\n    const subtitle = (\n        <>{frameViewTitle} Ring: center=(x={cx.toFixed(2)}, y={cy.toFixed(2)}), ri={ri.toFixed(2)}, ro={ro.toFixed(2)}</>\n    )\n\n    const toolbar = <Toolbar compoundAnalysis={compoundAnalysis} onApply={runAnalysis} busyIdxs={[1]} />\n\n    return (\n        <AnalysisLayoutTwoCol\n            title=\"Ring analysis\" subtitle={subtitle}\n            left={<>\n                <ResultList\n                    extraHandles={frameViewHandles} extraWidgets={frameViewWidgets}\n                    analysisIndex={0} compoundAnalysis={compoundAnalysis.compoundAnalysis}\n                    width={imageWidth} height={imageHeight}\n                    selectors={frameModeSelector}\n                />\n            </>}\n            right={<>\n                <ResultList\n                    analysisIndex={1} compoundAnalysis={compoundAnalysis.compoundAnalysis}\n                    width={scanWidth} height={scanHeight}\n                    extraHandles={resultHandles}\n                    extraWidgets={resultWidgets}\n                />\n            </>}\n            toolbar={toolbar}\n        />\n    );\n}\n\nexport default RingMaskAnalysis;","import { AnalysisTypes, DatasetOpen, PickFrameDetails, SumFramesDetails } from \"../messages\";\nimport CenterOfMassAnalysis from \"./components/CenterOfMassAnalysis\";\nimport ClustAnalysis from \"./components/Clustering\";\nimport DiskMaskAnalysis from \"./components/DiskMaskAnalysis\";\nimport FEM from \"./components/FEM\";\nimport FFTAnalysis from \"./components/FFTAnalysis\";\nimport PointSelectionAnalysis from \"./components/PointSelectionAnalysis\";\nimport RadialFourierAnalysis from \"./components/RadialFourierAnalysis\";\nimport RingMaskAnalysis from \"./components/RingMaskAnalysis\";\n\n\nexport type CompoundAnalysisStatus = \"busy\" | \"idle\";\n\nexport type JobHistory = string[][];\n\nexport type FrameAnalysisDetails = PickFrameDetails | SumFramesDetails;\n\nexport interface CompoundAnalysis {\n    compoundAnalysis: string,\n    dataset: string,\n    details: {\n        mainType: AnalysisTypes,\n        analyses: string[],\n    }\n}\n\n\n/**\n * CompoundAnalysisProps is the interface you should implement with your\n * CompoundAnalysis, as a functional component. For example:\n * \n * const MyAnalysis: React.FunctionalComponent<CompoundAnalysisProps> = ({ analysis, dataset }) = { ... }\n * \n */\n\nexport type CompoundAnalysisState = CompoundAnalysis & {\n    doAutoStart: boolean,\n};\n\nexport interface CompoundAnalysisProps {\n    compoundAnalysis: CompoundAnalysisState,\n    dataset: DatasetOpen,\n}\n\nexport interface CompoundAnalysisMetadataItem {\n    desc: string,\n    title: string,\n    component?: React.FunctionComponent<CompoundAnalysisProps>,\n}\n\n\n/**\n * list of all analyses; those having a component will be available for selection in the UI\n * \n * please fill in a title and description, and reference your component.\n */\nexport const CompoundAnalysisMetadata: { [s: string]: CompoundAnalysisMetadataItem } = {\n    [AnalysisTypes.APPLY_RING_MASK]: {\n        desc: \"Application of a ring mask\",\n        title: \"Ring\",\n        component: RingMaskAnalysis,\n    },\n    [AnalysisTypes.APPLY_DISK_MASK]: {\n        desc: \"Application of a disk mask\",\n        title: \"Disk\",\n        component: DiskMaskAnalysis,\n    },\n    [AnalysisTypes.FEM]: {\n        desc: \"Application of a ring mask\",\n        title: \"FEM (SD over Ring)\",\n        component: FEM,\n    },\n    [AnalysisTypes.CENTER_OF_MASS]: {\n        desc: \"The center of mass of all diffraction images\",\n        title: \"Center of mass\",\n        component: CenterOfMassAnalysis,\n    },\n    [AnalysisTypes.APPLY_POINT_SELECTOR]: {\n        desc: \"Image from a single pixel selected in the detector\",\n        title: \"Point selection\",\n        component: PointSelectionAnalysis,\n    },\n    [AnalysisTypes.SUM_FRAMES]: {\n        desc: \"A sum of all (or selected) detector frames\",\n        title: \"Sum all frames\",\n    },\n    [AnalysisTypes.SD_FRAMES]: {\n        desc: \"A SD of all (or selected) detector frames\",\n        title: \"SD all frames\",\n    },\n    [AnalysisTypes.PICK_FRAME]: {\n        desc: \"A single picked frame\",\n        title: \"Pick frame\",\n    },\n    [AnalysisTypes.PICK_FFT_FRAME]: {\n        desc: \"Fourier transform of a picked frame\",\n        title: \"Pick frame\",\n    },\n    [AnalysisTypes.APPLY_FFT_MASK]: {\n        desc: \"Application of a ring mask in Fourier space\",\n        title: \"FFT analysis\",\n        component: FFTAnalysis\n    },\n    [AnalysisTypes.FFTSUM_FRAMES]: {\n        desc: \"Fourier transform of sum of all detector frames\",\n        title: \"FFT of Sum all frames\",\n    },\n    [AnalysisTypes.RADIAL_FOURIER]: {\n        desc: \"Radial Fourier analysis over the selected ring\",\n        title: \"Radial Fourier\",\n        component: RadialFourierAnalysis,\n    },\n    [AnalysisTypes.CLUST]: {\n        desc: \"Region clustering based on non-zero order diffraction peaks positions\",\n        title: \"Clustering\",\n        component: ClustAnalysis,\n    },\n    [AnalysisTypes.SUM_SIG]: {\n        desc: \"Frame integration\",\n        title: \"Sum\",\n    },\n}","import * as React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { DatasetStatus } from \"../../../messages\";\nimport { RootReducer } from \"../../../store\";\nimport { CompoundAnalysisMetadata, CompoundAnalysisState } from \"../../types\";\n\ninterface AnalysisDispatcherProps {\n    analysis: CompoundAnalysisState,\n}\n\nconst AnalysisDispatcherComponent: React.FC<AnalysisDispatcherProps> = ({ analysis }) => {\n    const dataset = useSelector((state: RootReducer) => state.datasets.byId[analysis.dataset])\n\n    if (dataset.status !== DatasetStatus.OPEN) {\n        return null;\n    }\n\n    const AnalysisComponent = CompoundAnalysisMetadata[analysis.details.mainType].component;\n    if (!AnalysisComponent) {\n        throw new Error(\"unknown analysis type\");\n    }\n\n    return <AnalysisComponent dataset={dataset} compoundAnalysis={analysis} />;\n}\n\nexport default AnalysisDispatcherComponent;","import * as React from \"react\";\nimport { CompoundAnalysisReducerState } from \"../../reducers\";\nimport Analysis from \"./Analysis\";\n\ninterface AnalysisProps {\n    analyses: CompoundAnalysisReducerState,\n}\n\nconst AnalysisList: React.FC<AnalysisProps> = ({ analyses }) => (<>{\n    analyses.ids.map(analysisId => <Analysis key={analysisId} analysis={analyses.byId[analysisId]} />)\n}</>);\n\nexport default AnalysisList;","// eslint-disable-next-line @typescript-eslint/ban-types\ntype ImmutablePrimitive = undefined | null | boolean | string | number | Function;\n\nexport type Immutable<T> =\n    T extends ImmutablePrimitive ? T :\n    T extends Array<infer U> ? ImmutableArray<U> :\n    T extends Map<infer K, infer V> ? ImmutableMap<K, V> :\n    T extends Set<infer M> ? ImmutableSet<M> : ImmutableObject<T>;\n\nexport type ImmutableArray<T> = ReadonlyArray<Immutable<T>>;\nexport type ImmutableMap<K, V> = ReadonlyMap<Immutable<K>, Immutable<V>>;\nexport type ImmutableSet<T> = ReadonlySet<Immutable<T>>;\nexport type ImmutableObject<T> = { readonly [K in keyof T]: Immutable<T[K]> };\n\n\ntype DeepReadonly<T> =\n    T extends Array<infer R> ? DeepReadonlyArray<R> :\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    T extends Function ? T :\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    T extends object ? DeepReadonlyObject<T> :\n    T;\n\ntype DeepReadonlyArray<T> = ReadonlyArray<DeepReadonly<T>>\n\ntype DeepReadonlyObject<T> = {\n    readonly [P in keyof T]: DeepReadonly<T[P]>;\n};\n\ninterface IdMap<R> {\n    [s: string]: R\n}\n\nexport interface ById<R> {\n    ids: string[],\n    byId: IdMap<R>,\n}\n\nexport type ByIdReadOnly<R> = DeepReadonly<ById<R>>;\n\nexport const updateById = <R>(state: ById<R>, id: string, partialRecord: Partial<R>): ById<R> => {\n    const newObj = Object.assign({}, state.byId[id], partialRecord);\n    const newById = Object.assign({}, state.byId, { [id]: newObj });\n    return Object.assign({}, state, { byId: newById });\n}\n\nexport const insertById = <R>(state: ById<R>, id: string, record: R): ById<R> => {\n    const newById = Object.assign({}, state.byId, { [id]: record });\n    const newIds = [...state.ids, id];\n    return { byId: newById, ids: newIds };\n}\n\nexport const constructById = <R>(items: R[], key: (k: R) => string): IdMap<R> => {\n    const byId = items.reduce((acc, item) => Object.assign(acc, {\n        [key(item)]: item,\n    }), {} as IdMap<R>);\n    return byId;\n}\n\nexport type MapFn<R> = (item: R) => R;\n\nexport const updateWithMap = <R>(state: ById<R>, fn: MapFn<R>): ById<R> => {\n    const byId: IdMap<R> = state.ids.reduce((acc, id) => Object.assign(acc, {\n        [id]: fn(state.byId[id]),\n    }), {});\n    return {\n        byId,\n        ids: state.ids,\n    };\n}\n\nexport type Predicate<R> = (item: R) => boolean;\n\nexport const filterWithPred = <R>(state: ById<R>, pred: Predicate<R>): ById<R> => {\n    const ids: string[] = state.ids.filter(id => pred(state.byId[id]));\n    const byId: IdMap<R> = ids.reduce((acc, id) => Object.assign(acc, {\n        [id]: state.byId[id],\n    }), {});\n    return {\n        byId,\n        ids,\n    };\n}\n\nexport const filterWithPredReadOnly = <R>(state: ByIdReadOnly<R>, pred: Predicate<DeepReadonly<R>>): ByIdReadOnly<R> => {\n    const ids: DeepReadonly<string[]> = state.ids.filter(id => pred(state.byId[id]));\n    const byId: DeepReadonly<IdMap<R>> = ids.reduce((acc, id) => Object.assign(acc, {\n        [id]: state.byId[id],\n    }), {});\n    return {\n        byId,\n        ids,\n    };\n}\n\nexport const toggleItemInList = <T>(list: T[], item: T): T[] => {\n    if (list.includes(item)) {\n        return list.filter(i => i !== item)\n    } else {\n        return [item, ...list];\n    }\n}","import * as React from \"react\";\nimport { Dropdown, DropdownItemProps } from \"semantic-ui-react\";\nimport { getEnumValues } from \"../../../helpers\";\nimport { AnalysisTypes } from \"../../../messages\";\nimport { getMetadata } from \"../../getMetadata\";\n\nconst analysisTypeKeys = getEnumValues(AnalysisTypes);\nconst analysisTypeOptions = analysisTypeKeys.filter(t => getMetadata(t).component !== undefined).map(t => ({\n    text: getMetadata(t).title,\n    value: AnalysisTypes[t],\n}));\n\ninterface AnalysisSelectProps {\n    onClick: (analysisType: AnalysisTypes) => void,\n    label: string,\n}\n\nconst selectData = (fn: (v: AnalysisTypes) => void) => (e: React.MouseEvent, data: DropdownItemProps) => fn(data.value as AnalysisTypes)\n\nconst AnalysisSelect: React.FC<AnalysisSelectProps> = ({ onClick, label }) => (\n    <Dropdown text={label} icon='add' floating labeled button className='icon'>\n        <Dropdown.Menu>\n            <Dropdown.Header content='implemented analyses' />\n            {analysisTypeOptions.map(option => <Dropdown.Item key={option.value} onClick={selectData(onClick)} {...option} />)}\n        </Dropdown.Menu>\n    </Dropdown>\n);\n\nexport default AnalysisSelect;","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport * as compoundAnalysisActions from \"../../compoundAnalysis/actions\";\nimport AnalysisSelect from \"../../compoundAnalysis/components/base/AnalysisSelect\";\nimport { AnalysisTypes, DatasetState } from \"../../messages\";\n\ninterface DatasetProps {\n    dataset: DatasetState\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch, ownProps: DatasetProps) => ({\n    handleAddAnalysis: (type: AnalysisTypes) => {\n        dispatch(compoundAnalysisActions.Actions.create(ownProps.dataset.id, type));\n    },\n});\ntype MergedProps = DatasetProps & ReturnType<typeof mapDispatchToProps>;\n\nconst AddAnalysis: React.FC<MergedProps> = ({ handleAddAnalysis }) => \n    <AnalysisSelect onClick={handleAddAnalysis} label='Add analysis' />;\n\n\nexport default connect(null, mapDispatchToProps)(AddAnalysis);","import * as React from \"react\";\nimport { Table } from \"semantic-ui-react\";\nimport { DatasetFormParams, DatasetState } from \"../../messages\";\n\ninterface DatasetProps {\n    dataset: DatasetState\n}\n\nconst renderParamValue = (value: any[] | string) => {\n    if (value instanceof Array) {\n        return `(${value.join(\",\")})`;\n    } else {\n        return value.toString();\n    }\n}\n\nconst renderRow = (param: any[] | string, key: string, idx: number) => (\n    <Table.Row key={idx}>\n        <Table.Cell>{key}</Table.Cell>\n        <Table.Cell>{renderParamValue(param)}</Table.Cell>\n    </Table.Row>\n);\n\nconst renderParams = (params: DatasetFormParams) => \n    Object.entries(params).map(([key, param], idx) => {\n        if (param && typeof param === 'object' && !(param instanceof Array)) {\n            return Object.keys(param).map((objKey: string, keyIdx: number) => renderRow(param, objKey, keyIdx));\n        } else if (param && (typeof param === \"string\" || param instanceof Array)) {\n            return renderRow(param, key, idx);\n        }\n    });\n\n\nconst DatasetParams: React.FC<DatasetProps> = ({ dataset }) => (\n    <Table>\n        <Table.Header>\n            <Table.Row>\n                <Table.HeaderCell>Parameter</Table.HeaderCell>\n                <Table.HeaderCell>Value</Table.HeaderCell>\n            </Table.Row>\n        </Table.Header>\n        <Table.Body>\n            {renderParams(dataset.params)}\n        </Table.Body>\n    </Table>\n);\n\n\nexport default DatasetParams;\n","import * as React from \"react\";\nimport { Table } from \"semantic-ui-react\";\nimport { DatasetOpen, DiagElemMsg } from \"../../messages\";\nimport DatasetParams from \"./DatasetParams\";\n\ninterface DatasetInfoProps {\n    dataset: DatasetOpen,\n}\n\nconst renderValue = (elem: DiagElemMsg) => {\n    if (elem.value instanceof Array) {\n        return <DiagElems diagnostics={elem.value} />\n    } else {\n        return elem.value;\n    }\n}\n\nconst DiagElem: React.FC<{ elem: DiagElemMsg }> = ({ elem }) => (\n    <Table.Row>\n        <Table.Cell>{elem.name}</Table.Cell>\n        <Table.Cell>{renderValue(elem)}</Table.Cell>\n    </Table.Row>\n);\n\nconst DiagElems: React.FC<{ diagnostics: DiagElemMsg[] }> = ({ diagnostics }) => {\n    if (diagnostics.length === 0) {\n        return null;\n    }\n    return (\n        <Table>\n            <Table.Header>\n                <Table.Row>\n                    <Table.HeaderCell>Name</Table.HeaderCell>\n                    <Table.HeaderCell>Value</Table.HeaderCell>\n                </Table.Row>\n            </Table.Header>\n            <Table.Body>\n                {diagnostics.map((elem, idx) => (\n                    <DiagElem elem={elem} key={idx} />\n                ))}\n            </Table.Body>\n        </Table>\n    );\n}\n\nconst DatasetInfo: React.FC<DatasetInfoProps> = ({ dataset }) => (\n    <>\n        <DatasetParams dataset={dataset} />\n        <DiagElems diagnostics={dataset.diagnostics} />\n    </>\n);\n\nexport default DatasetInfo;","import { ActionsUnion, createAction } from \"../helpers/actionHelpers\";\nimport { JobResultType } from \"../job/types\";\nimport { AnalysisDetails, MsgPartAnalysis, MsgPartCompoundAnalysis, MsgPartInitialDataset, MsgPartJob } from \"../messages\";\n\nexport type PartialResultType = JobResultType;\n\nexport enum ActionTypes {\n    INITIAL_STATE = \"CHANNEL_INITIAL_STATE\",\n    JOB_STARTED = \"CHANNEL_JOB_STARTED\",\n    FINISH_JOB = \"CHANNEL_FINISH_JOB\",\n    TASK_RESULT = \"CHANNEL_TASK_RESULT\",\n    JOB_ERROR = \"CHANNEL_JOB_ERROR\",\n    OPEN = \"CHANNEL_OPEN\",\n    CLOSE = \"CHANNEL_CLOSE\",\n    ERROR = \"CHANNEL_ERROR\",\n    CANCELLED = \"CANCELLED\",\n    CANCEL_JOB_FAILED = \"CANCEL_JOB_FAILED\",\n    SHUTDOWN = \"CHANNEL_SHUTDOWN\",\n    CLOSE_LOOP = \"CHANNEL_LOOP_CLOSE\",\n    ANALYSIS_CREATED = \"ANALYSIS_CREATED\",\n    ANALYSIS_UPDATED = \"ANALYSIS_UPDATED\",\n    ANALYSIS_REMOVED = \"ANALYSIS_REMOVED\",\n}\n\nexport const Actions = {\n    initialState: (\n        jobs: MsgPartJob[],\n        datasets: MsgPartInitialDataset[],\n        compoundAnalyses: MsgPartCompoundAnalysis[],\n        analyses: MsgPartAnalysis[],\n        timestamp: number\n    ) => createAction(ActionTypes.INITIAL_STATE, { jobs, datasets, timestamp, compoundAnalyses, analyses }),\n    jobStarted: (job: string, timestamp: number) => createAction(ActionTypes.JOB_STARTED, { job, timestamp }),\n    finishJob: (job: string, results: JobResultType[], timestamp: number) => createAction(ActionTypes.FINISH_JOB, { job, results, timestamp }),\n    taskResult: (job: string, results: PartialResultType[], timestamp: number) => createAction(ActionTypes.TASK_RESULT, { job, results, timestamp }),\n    jobError: (job: string, msg: string, id: string, timestamp: number) => createAction(ActionTypes.JOB_ERROR, { job, msg, id, timestamp }),\n    open: (timestamp: number) => createAction(ActionTypes.OPEN, { timestamp }),\n    close: (timestamp: number) => createAction(ActionTypes.CLOSE, { timestamp }),\n    error: (msg: string, timestamp: number, id: string) => createAction(ActionTypes.ERROR, { msg, timestamp, id }),\n    shutdown: (timestamp: number) => createAction(ActionTypes.SHUTDOWN, { timestamp }),\n    closeloop: (timestamp: number) => createAction(ActionTypes.CLOSE_LOOP, { timestamp }),\n    cancelled: (job: string) => createAction(ActionTypes.CANCELLED, { job }),\n    cancelFailed: (job: string) => createAction(ActionTypes.CANCEL_JOB_FAILED, { job }),\n    analysisCreated: (analysis: string, dataset: string, details: AnalysisDetails) =>\n        createAction(ActionTypes.ANALYSIS_CREATED, { dataset, analysis, details }),\n    analysisUpdated: (analysis: string, dataset: string, details: AnalysisDetails) =>\n        createAction(ActionTypes.ANALYSIS_UPDATED, { dataset, analysis, details }),\n    analysisRemoved: (analysis: string) => createAction(ActionTypes.ANALYSIS_REMOVED, { analysis }),\n};\n\nexport type Actions = ActionsUnion<typeof Actions>;\n","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { Button } from \"semantic-ui-react\";\nimport { DatasetState } from \"../../messages\";\nimport * as datasetActions from \"../actions\";\n\ninterface DatasetProps {\n    dataset: DatasetState,\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch, ownProps: DatasetProps) => ({\n    handleRemoveDataset: () => {\n        dispatch(datasetActions.Actions.delete(ownProps.dataset.id));\n    }\n})\n\ntype MergedProps = DatasetProps & ReturnType<typeof mapDispatchToProps>;\n\nconst DatasetToolbar: React.FC<MergedProps> = ({ handleRemoveDataset }) => (\n    <>\n        <Button icon=\"remove\" labelPosition=\"left\" onClick={handleRemoveDataset} content='Close Dataset' />\n    </>\n);\n\n\nexport default connect(null, mapDispatchToProps)(DatasetToolbar);","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Header, Icon, Message, Modal, Popup, Segment } from 'semantic-ui-react';\nimport AnalysisList from \"../../compoundAnalysis/components/base/AnalysisList\";\nimport { CompoundAnalysisState } from \"../../compoundAnalysis/types\";\nimport { filterWithPred, Immutable, Predicate } from \"../../helpers/reducerHelpers\";\nimport { DatasetState, DatasetStatus } from \"../../messages\";\nimport { RootReducer } from \"../../store\";\nimport AddAnalysis from \"./AddAnalysis\";\nimport DatasetInfo from \"./DatasetInfo\";\nimport DatasetToolbar from \"./DatasetToolbar\";\n\ninterface DatasetProps {\n    dataset: DatasetState\n}\n\nconst mapStateToProps = (state: RootReducer, ownProps: DatasetProps) => {\n    const p: Predicate<Immutable<CompoundAnalysisState>> = (analysis: Immutable<CompoundAnalysisState>) => analysis.dataset === ownProps.dataset.id;\n    return {\n        analyses: filterWithPred(state.compoundAnalyses, p),\n    }\n}\n\ntype MergedProps = DatasetProps & ReturnType<typeof mapStateToProps>;\n\nconst DatasetComponent: React.FC<MergedProps> = ({ dataset, analyses }) => {\n    const msg = {\n        [DatasetStatus.OPENING]: `Opening dataset ${dataset.params.name}`,\n        [DatasetStatus.DELETING]: `Closing dataset ${dataset.params.name}`,\n    }\n    if (dataset.status === DatasetStatus.OPENING || dataset.status === DatasetStatus.DELETING) {\n        return (\n            <>\n                <Header as=\"h2\" dividing>{dataset.params.name}</Header>\n                <Message icon>\n                    <Icon name='cog' loading />\n                    <Message.Content>\n                        <Message.Header>{msg[dataset.status]}</Message.Header>\n                    </Message.Content>\n                </Message>\n            </>\n        );\n    }\n\n    return (\n        <Segment.Group style={{ marginTop: \"3em\", marginBottom: \"3em\" }}>\n            <Segment.Group horizontal>\n                <Segment>\n                    <Header as=\"h2\">\n                        <Icon name=\"database\" />\n                        <Modal trigger={\n                            <Header.Content>\n                                {dataset.params.name}\n                                {' '}\n                                <Icon name=\"info circle\" size=\"small\" link />\n                            </Header.Content>\n                        }>\n                            <Popup.Header>{dataset.params.type} Dataset {dataset.params.name}</Popup.Header>\n                            <Popup.Content>\n                                <DatasetInfo dataset={dataset} />\n                            </Popup.Content>\n                        </Modal>\n                    </Header>\n                </Segment>\n                <Segment style={{ flexShrink: 1, flexGrow: 0 }}>\n                    <DatasetToolbar dataset={dataset} />\n                </Segment>\n            </Segment.Group>\n            {\n                analyses.ids.length > 0 ? (\n                    <>\n                        <Segment>\n                            <AnalysisList analyses={analyses} />\n                        </Segment>\n                    </>\n                ) : null\n            }\n            <Segment textAlign=\"center\">\n                <AddAnalysis dataset={dataset} />\n            </Segment>\n        </Segment.Group>\n    );\n}\n\nconst DatasetContainer = connect(mapStateToProps)(DatasetComponent);\n\nexport default DatasetContainer;","import Ajv, { ErrorObject } from 'ajv';\nimport { FormikErrors, FormikValues } from 'formik';\nimport { JsonSchema } from '../messages';\n\nexport const convertErrors = (errors: ErrorObject[]): FormikErrors<FormikValues> => {\n    const res: FormikErrors<FormikValues> = {};\n    errors.forEach(err => {\n        // flatten field names, convert from array to object\n        // FIXME: doesn't support multiple errors per field yet (formik limitation?)\n        const expr = /^\\.([^[]+)(\\[[^]+\\])?$/\n        const fieldName = err.instancePath.replace(expr, (match, plainName) => plainName as string);\n        res[fieldName] = err.message;\n    });\n    return res;\n}\n\nexport const throwErrors = (validateErrors : ErrorObject[] | null = [], customValidateErrors: FormikErrors<FormikValues> = {}): never => {\n    if (validateErrors || customValidateErrors) {\n        const converted = validateErrors ? { ...convertErrors(validateErrors), customValidateErrors } : customValidateErrors;\n        throw converted;\n    } else {\n        throw new Error(\"unspecified error while validating fields\");\n    }\n}\n\nexport const validateOpen = <T>(schema: JsonSchema, data: T, customValidateErrors?: FormikErrors<FormikValues>): void => {\n    const ajv = new Ajv();\n    const validate = ajv.compile(schema);\n    const valid = validate(data);\n    if (!valid || customValidateErrors) {\n        throwErrors(validate.errors, customValidateErrors);\n    }\n}\n","import * as pathfind from 'path';\nimport { FormikErrors, FormikValues, withFormik } from 'formik';\nimport { DatasetTypes } from \"../messages\";\nimport { OpenFormProps } from \"./types\";\nimport { validateOpen } from \"./validate\";\n\nexport const parseNumList = (nums: string): number[] => nums.split(\",\").filter(part => part.trim() !== \"\").map(part => +part)\n\nexport const parseNumListWithPadding = (nums: string, minLength: number, maxLength: number): string[] => {\n    let initialList = new Array<string>(minLength).fill(\"\");\n    if (nums) {\n        let value = nums.split(\",\");\n        if (minLength > value.length) {\n            initialList = [...value, ...Array<string>(minLength - value.length).fill(\"\")];\n        } else {\n            value = value.slice(0, maxLength);\n            initialList = [...value];\n        }\n    }\n    return initialList;\n}\n\nexport const parseNumListProduct = (nums: string): number => parseNumList(nums).reduce((a,b) => a * b, 1)\n\nexport const frameCalcForOffset = (syncOffset: number, navShapeProduct: number, imageCount: number) => ({\n    framesSkippedStart: Math.max(0, syncOffset),\n    framesIgnoredEnd: Math.max(0, imageCount - navShapeProduct - syncOffset),\n    framesInsertedStart: Math.abs(Math.min(0, syncOffset)),\n    framesInsertedEnd: Math.max(0, navShapeProduct - imageCount + syncOffset),\n})\n\nexport const isSigShapeValid = (sigShape: string, nativeSigShape: string): boolean => parseNumListProduct(sigShape) === parseNumListProduct(nativeSigShape)\n\nexport const isSyncOffsetValid = (syncOffset: number, imageCount: number): boolean => -imageCount < syncOffset && syncOffset < imageCount\n\nexport const validateSyncOffsetAndSigShape = (\n    nativeSigShape: number[] | undefined,\n    sigShape: string,\n    syncOffset: number,\n    imageCount: number | undefined\n): FormikErrors<FormikValues> => {\n    const res: FormikErrors<FormikValues> = {};\n    if (nativeSigShape && !isSigShapeValid(sigShape, nativeSigShape.toString())) {\n        res.sig_shape = `must be of size: ${parseNumListProduct(nativeSigShape.toString())}`;\n    }\n    if(imageCount && !isSyncOffsetValid(syncOffset, imageCount)) {\n        res.sync_offset = `must be in (-${imageCount}, ${imageCount})`;\n    }\n    return res;\n}\n\nexport const getInitial = <T, K extends keyof T, V>(key: K, otherwise: V, values?: T): V | T[K] => {\n    if (!values) {\n        return otherwise;\n    }\n    const res = values[key] !== undefined ? values[key] : otherwise;\n    return res;\n}\n\nexport const getInitialName = <T, K extends keyof T>(key: K, otherwise: string, values?: T): string | T[K] => {\n    if (!values) {\n        return pathfind.basename(otherwise);\n    }\n    const res = values[key] !== undefined ? values[key] : pathfind.basename(otherwise);\n    return res;\n}\n\nexport const isKnownDatasetType = (detectedType: string): boolean => (Object.keys(DatasetTypes).some((v) => v === detectedType) ? true : false)\n\ntype FormToJsonFn<SubmitParams, FormParams> = (inParams: FormParams, path: string) => SubmitParams;\ntype PropsToValuesFn<SubmitParams, FormParams, FormInfo> = (props: OpenFormProps<SubmitParams, FormInfo>) => FormParams;\ntype CustomValidationFn<SubmitParams, FormParams, FormInfo> = (inParams: FormParams, props: OpenFormProps<SubmitParams, FormInfo>) => FormikErrors<FormikValues>;\n\ninterface WithValidationOpts<SubmitParams, FormParams, FormInfo> {\n    formToJson: FormToJsonFn<SubmitParams, FormParams>,\n    mapPropsToValues: PropsToValuesFn<SubmitParams, FormParams, FormInfo>,\n    type: DatasetTypes,\n    customValidation?: CustomValidationFn<SubmitParams, FormParams, FormInfo>\n    // WrappedComponent: React.FunctionComponent<FormikProps<FormParams> & OpenFormProps<SubmitParams>>\n}\n\nexport const withValidation = <SubmitParams, FormParams, FormInfo>(\n    opts: WithValidationOpts<SubmitParams, FormParams, FormInfo>\n) => withFormik<OpenFormProps<SubmitParams, FormInfo>, FormParams, FormInfo>({\n    mapPropsToValues: opts.mapPropsToValues,\n    handleSubmit: (values, formikBag) => {\n        const { onSubmit, path } = formikBag.props;\n        const submitData = opts.formToJson(values, path);\n        onSubmit(submitData);\n        formikBag.setSubmitting(false);\n    },\n    validate: (values, props) => validateOpen(\n        props.datasetTypeInfo.schema,\n        opts.formToJson(values, props.path),\n        opts.customValidation?.(values, props)\n    ),\n    enableReinitialize: true,\n    validateOnChange: true,\n    validateOnBlur: true,\n})\n","import React from \"react\"\nimport { Dropdown, DropdownProps } from \"semantic-ui-react\";\nimport { DatasetTypeInfo, IOBackendId, IOBackendMetadata } from \"../../messages\";\n\nexport interface BackendSelectionDropdownProps {\n    value?: string,\n    datasetTypeInfo: DatasetTypeInfo,\n    setFieldValue: (field: string, value: any, shouldValidate?: boolean) => void,\n}\n\nconst BackendSelectionDropdown: React.FC<BackendSelectionDropdownProps> = ({\n    value,\n    setFieldValue,\n    datasetTypeInfo,\n}) => {\n    const handleChange = (e: React.SyntheticEvent, data: DropdownProps) => {\n        const backendId = data.value as IOBackendId;\n        setFieldValue(\"io_backend\", backendId);\n    };\n\n    const backendOptions = datasetTypeInfo.supported_io_backends.map(backendId => ({\n        text: IOBackendMetadata[backendId].label,\n        value: backendId,\n    }));\n\n    const defaultBackend = datasetTypeInfo.default_io_backend\n    const defaultValue = defaultBackend ? defaultBackend : \"\";\n\n    return (\n        <>\n            <Dropdown\n            selection\n            options={backendOptions}\n            value={value ? value : defaultValue}\n            onChange={handleChange} />\n        </>\n    );\n}\n\nexport default BackendSelectionDropdown;\n","import * as React from \"react\";\n\ninterface TupleInputPartProps {\n    name: string,\n    id: string,\n    tupleKey: number,\n    value: number,\n    tupleInputChangeHandle: (idx: number, value: string) => void,\n    commaPressHandle: (idx: number) => void,\n    tupleRef: (ref:HTMLInputElement) => void,\n}\n\nconst TupleInputPart: React.FC<TupleInputPartProps> = ({ name, id, tupleKey, tupleInputChangeHandle, value, commaPressHandle, tupleRef }) => {\n\n   const onPartChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n      tupleInputChangeHandle(tupleKey, e.target.value);\n   }\n\n   const onCommaPress = (e: React.KeyboardEvent<HTMLInputElement>) => {\n     if(e.keyCode === 188) {\n       commaPressHandle(tupleKey);\n     }\n   }\n\n   return <input type=\"number\" name={name} id={id} key={tupleKey} onChange={onPartChange} value={value} onKeyDown={onCommaPress} ref={tupleRef} />;\n}\n\nexport default TupleInputPart;\n","import * as React from \"react\";\nimport { Button, Form } from \"semantic-ui-react\";\nimport { parseNumListWithPadding } from \"../helpers\";\nimport TupleInputPart from \"./TupleInputPart\";\n\ninterface TupleInputProps {\n  value: string,\n  minLen: number,\n  maxLen: number,\n  fieldName: string,\n  setFieldValue: (field: string, value: any, shouldValidate?: boolean) => void,\n}\n\nconst TupleInput: React.FC<TupleInputProps> = ({ value, minLen, maxLen, fieldName, setFieldValue }) => {\n  const tupleInputValue = parseNumListWithPadding(value, minLen, maxLen);\n\n  const tupleInputRefsArray = React.useRef<HTMLInputElement[]>([]);\n\n  const tupleInputChangeHandle = (idx: number, val: string) => {\n    const newTupleInputValue = [...tupleInputValue];\n    newTupleInputValue[idx] = val;\n    setFieldValue(fieldName, newTupleInputValue.toString());\n  };\n\n  const commaPressHandle = (idx: number) => {\n    if (idx === (tupleInputValue.length - 1)) {\n      newTupleDim();\n    } else {\n      tupleInputRefsArray.current[idx + 1].focus();\n    }\n  }\n\n  const newTupleDim = () => {\n    if (tupleInputValue.length < maxLen) {\n      const newTupleInputValue = [...tupleInputValue];\n      newTupleInputValue.push(\"\");\n      setFieldValue(fieldName, newTupleInputValue.toString());\n    }\n  }\n  /* Fix this auto focus bug when GUI supports n-D visualizations */\n  /* React.useEffect(() => {\n    if(tupleInputValue.length === tupleInputRefsArray.current.length + 1) {\n      tupleInputRefsArray.current[tupleInputValue.length+1].focus();\n    }\n  }, [tupleInputValue, tupleInputRefsArray]); */\n\n  const delTupleDim = () => {\n    if (tupleInputValue.length > minLen) {\n      const newTupleInputValue = [...tupleInputValue];\n      newTupleInputValue.pop();\n      setFieldValue(fieldName, newTupleInputValue.toString());\n      tupleInputRefsArray.current[tupleInputValue.length - 2].focus()\n    }\n  }\n\n  return (\n    <>\n      <Form.Group>\n        {tupleInputValue.map((val, idx) => {\n          const tupleRef = (ref: HTMLInputElement) => { tupleInputRefsArray.current[idx] = ref; }\n          return (\n            <Form.Field width={2} key={idx}>\n              <TupleInputPart\n                tupleKey={idx}  \n                name={`${fieldName}_${idx}`}\n                id={`id_${fieldName}_${idx}`}\n                value={+val}\n                tupleRef={tupleRef}\n                tupleInputChangeHandle={tupleInputChangeHandle}\n                commaPressHandle={commaPressHandle} />\n            </Form.Field>\n          );\n        })}\n        <Form.Field hidden={minLen === maxLen}>\n          <Button onClick={newTupleDim} disabled={tupleInputValue.length === maxLen} type=\"button\" icon=\"add\" title=\"Add dimension\" basic={false} />\n          <Button onClick={delTupleDim} disabled={tupleInputValue.length === minLen} type=\"button\" icon=\"minus\" title=\"Remove dimension\" basic={false} />\n        </Form.Field>\n      </Form.Group>\n    </>\n  );\n}\n\nexport default TupleInput;\n","import { ErrorMessage } from \"formik\";\nimport * as React from \"react\";\nimport { Form, Input } from \"semantic-ui-react\";\nimport { frameCalcForOffset, parseNumListProduct } from \"../helpers\";\nimport TupleInput from \"./TupleInput\";\n\ninterface ReshapeProps {\n    navShape: string,\n    sigShape: string,\n    syncOffset: number,\n    imageCount?: number,\n    hideInfo?: boolean,\n    setFieldValue: (field: string, value: any, shouldValidate?: boolean) => void,\n}\n\nconst Reshape: React.FC<ReshapeProps> = ({ navShape, sigShape, syncOffset, imageCount=0, hideInfo=false, setFieldValue }) => {\n\n    const reshapedNavShape = navShape !== undefined ? navShape : \"0\";\n    const reshapedSigShape = sigShape !== undefined ? sigShape : \"0\";\n\n    const navShapeProduct = parseNumListProduct(navShape);\n    const [offsetValue, setOffset] = React.useState(syncOffset.toString());\n    const offsetVal = parseInt(offsetValue, 10);\n\n    React.useEffect(() => {\n        setOffset(syncOffset.toString());\n      }, [syncOffset]);\n\n    const { framesSkippedStart, framesIgnoredEnd, framesInsertedStart, framesInsertedEnd } = frameCalcForOffset(offsetVal, navShapeProduct, imageCount);\n    \n    const handleOffsetChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        const { value } = e.target;\n        setOffset(value);\n        setFieldValue(\"sync_offset\", parseInt(value, 10));\n    };\n\n    return (\n        <div style={{paddingBottom: 5}}>\n            <Form.Field>\n                <label htmlFor=\"id_nav_shape_0\">Navigation shape (H, W):</label>\n                <div style={{ color: 'red'}}><ErrorMessage name=\"nav_shape\" /></div>\n                <TupleInput value={reshapedNavShape} minLen={2} maxLen={2} fieldName=\"nav_shape\" setFieldValue={setFieldValue} />\n                <label htmlFor=\"id_sig_shape_0\">Signal shape (H, W):</label>\n                <div style={{ color: 'red'}}><ErrorMessage name=\"sig_shape\" /></div>\n                <TupleInput value={reshapedSigShape} minLen={2} maxLen={2} fieldName=\"sig_shape\" setFieldValue={setFieldValue} />\n            </Form.Field>\n            <Form.Field width={4}>\n                <label htmlFor=\"id_sync_offset\">Sync Offset (frames):</label>\n                <div style={{ color: 'red'}}><ErrorMessage name=\"sync_offset\" /></div>\n                <Input type=\"number\" required name=\"sync_offset\" id=\"id_sync_offset\" value={offsetValue} onChange={handleOffsetChange} />\n            </Form.Field>\n            <Form.Field hidden={hideInfo}>\n                <label>Number of frames skipped at the beginning: {framesSkippedStart}</label>\n                <label>Number of blank frames inserted at the beginning: {framesInsertedStart}</label>\n                <label>Number of frames ignored at the end: {framesIgnoredEnd}</label>\n                <label>Number of blank frames inserted at the end: {framesInsertedEnd}</label>\n            </Form.Field>\n        </div>\n    );\n\n}\n\nexport default Reshape;","import { ErrorMessage, Field, FormikProps } from \"formik\";\nimport * as React from \"react\";\nimport { Button, Form } from \"semantic-ui-react\";\nimport { Omit } from \"../../helpers/types\";\nimport { DatasetInfoBLO, DatasetParamsBLO, DatasetTypes } from \"../../messages\";\nimport { getInitial, getInitialName, parseNumList, validateSyncOffsetAndSigShape, withValidation } from \"../helpers\";\nimport { OpenFormProps } from \"../types\";\nimport BackendSelectionDropdown from \"./BackendSelectionDropdown\";\nimport Reshape from \"./Reshape\";\n\n// some fields have different types in the form vs. in messages\ntype DatasetParamsBLOForForm = Omit<DatasetParamsBLO,\n    \"type\"\n    | \"path\"\n    | \"nav_shape\"\n    | \"sig_shape\"> & {\n        nav_shape: string,\n        sig_shape: string,\n};\n\ntype MergedProps = FormikProps<DatasetParamsBLOForForm> & OpenFormProps<DatasetParamsBLO, DatasetInfoBLO>;\n\nconst BLOFileParamsForm: React.FC<MergedProps> = ({\n    values,\n    info,\n    isSubmitting,\n    handleSubmit,\n    handleReset,\n    isValidating,\n    onCancel,\n    setFieldValue,\n    datasetTypeInfo,\n}) => (\n    <Form onSubmit={handleSubmit}>\n        <Form.Field>\n            <label htmlFor=\"id_name\">Name:</label>\n            <ErrorMessage name=\"name\" />\n            <Field name=\"name\" id=\"id_name\" />\n        </Form.Field>\n        <Form.Field>\n            <label htmlFor=\"id_io_backend\">I/O Backend:</label>\n            <ErrorMessage name=\"io_backend\" />\n            <BackendSelectionDropdown\n                value={values.io_backend}\n                datasetTypeInfo={datasetTypeInfo}\n                setFieldValue={setFieldValue} />\n        </Form.Field>\n        <Reshape navShape={values.nav_shape} sigShape={values.sig_shape} syncOffset={values.sync_offset} imageCount={info?.image_count} setFieldValue={setFieldValue} />\n        <Button primary type=\"submit\" disabled={isSubmitting || isValidating}>Load Dataset</Button>\n        <Button type=\"button\" onClick={onCancel}>Cancel</Button>\n        <Button type=\"button\" onClick={handleReset}>Reset</Button>\n    </Form>\n)\n\nexport default withValidation<DatasetParamsBLO, DatasetParamsBLOForForm, DatasetInfoBLO>({\n    mapPropsToValues: ({ path, initial }) => ({\n        name: getInitialName(\"name\", path, initial),\n        nav_shape: getInitial(\"nav_shape\", \"\", initial).toString(),\n        sig_shape: getInitial(\"sig_shape\", \"\", initial).toString(),\n        sync_offset: getInitial(\"sync_offset\", 0, initial),\n        io_backend: getInitial(\"io_backend\", undefined, initial),\n    }),\n    formToJson: (values, path) => ({\n        path,\n        type: DatasetTypes.BLO,\n        name: values.name,\n        nav_shape: parseNumList(values.nav_shape),\n        sig_shape: parseNumList(values.sig_shape),\n        sync_offset: values.sync_offset,\n        io_backend: values.io_backend,\n    }),\n    customValidation: (values, { info }) =>\n        validateSyncOffsetAndSigShape(\n            info?.native_sig_shape,\n            values.sig_shape,\n            values.sync_offset,\n            info?.image_count\n        ),\n    type: DatasetTypes.BLO,\n})(BLOFileParamsForm);\n","import * as React from \"react\";\nimport { Dropdown, DropdownProps } from \"semantic-ui-react\";\nimport { getEnumValues } from \"../../helpers\";\nimport { DatasetTypes } from \"../../messages\";\n\n\nconst datasetTypeKeys = getEnumValues(DatasetTypes);\nconst datasetTypeOptions = datasetTypeKeys.map(t => ({\n    // text: DatasetTypeMetadata[DatasetTypes[t as any]].short,\n    text: DatasetTypes[t],\n    value: DatasetTypes[t],\n}));\n\ninterface DatasetTypeSelectProps {\n    onClick: (e: React.SyntheticEvent, data: DropdownProps) => void,\n    currentType: DatasetTypes,\n}\n\nconst DatasetTypeSelect: React.FC<DatasetTypeSelectProps> = ({ currentType, onClick }) => (\n    <>\n        <Dropdown\n            inline\n            options={datasetTypeOptions}\n            value={currentType}\n            onChange={onClick}\n        />\n    </>\n);\n\nexport default DatasetTypeSelect;","import { ErrorMessage, Field, FormikProps } from \"formik\";\nimport * as React from \"react\";\nimport { Button, Form } from \"semantic-ui-react\";\nimport { Omit } from \"../../helpers/types\";\nimport { DatasetInfoEMPAD, DatasetParamsEMPAD, DatasetTypes } from \"../../messages\";\nimport { getInitial, getInitialName, parseNumList, validateSyncOffsetAndSigShape, withValidation } from \"../helpers\";\nimport { OpenFormProps } from \"../types\";\nimport BackendSelectionDropdown from \"./BackendSelectionDropdown\";\nimport Reshape from \"./Reshape\";\n\n// some fields have different types in the form vs. in messages\ntype DatasetParamsEMPADForForm = Omit<DatasetParamsEMPAD,\n    \"type\"\n    | \"path\"\n    | \"nav_shape\"\n    | \"sig_shape\"> & {\n        nav_shape: string,\n        sig_shape: string,\n};\n\ntype MergedProps = FormikProps<DatasetParamsEMPADForForm> & OpenFormProps<DatasetParamsEMPAD, DatasetInfoEMPAD>;\n\nconst EMPADParamsForm: React.FC<MergedProps> = ({\n    values,\n    info,\n    isSubmitting,\n    handleSubmit,\n    handleReset,\n    onCancel,\n    setFieldValue,\n    datasetTypeInfo,\n}) => (\n    <Form onSubmit={handleSubmit}>\n        <Form.Field>\n            <label htmlFor=\"id_name\">Name:</label>\n            <ErrorMessage name=\"name\" />\n            <Field name=\"name\" id=\"id_name\" />\n        </Form.Field>\n        <Form.Field>\n            <label htmlFor=\"id_io_backend\">I/O Backend:</label>\n            <ErrorMessage name=\"io_backend\" />\n            <BackendSelectionDropdown\n                value={values.io_backend}\n                datasetTypeInfo={datasetTypeInfo}\n                setFieldValue={setFieldValue} />\n        </Form.Field>\n        <Reshape navShape={values.nav_shape} sigShape={values.sig_shape} syncOffset={values.sync_offset} imageCount={info?.image_count} setFieldValue={setFieldValue} />\n        <Button primary type=\"submit\" disabled={isSubmitting}>Load Dataset</Button>\n        <Button type=\"button\" onClick={onCancel}>Cancel</Button>\n        <Button type=\"button\" onClick={handleReset}>Reset</Button>\n    </Form>\n)\n\nexport default withValidation<DatasetParamsEMPAD, DatasetParamsEMPADForForm, DatasetInfoEMPAD>({\n    mapPropsToValues: ({ path, initial }) => ({\n        name: getInitialName(\"name\", path, initial),\n        nav_shape: getInitial(\"nav_shape\", \"\", initial).toString(),\n        sig_shape: getInitial(\"sig_shape\", \"\", initial).toString(),\n        sync_offset: getInitial(\"sync_offset\", 0, initial),\n        io_backend: getInitial(\"io_backend\", undefined, initial),\n    }),\n    formToJson: (values, path) => ({\n        path,\n        type: DatasetTypes.EMPAD,\n        name: values.name,\n        nav_shape: parseNumList(values.nav_shape),\n        sig_shape: parseNumList(values.sig_shape),\n        sync_offset: values.sync_offset,\n        io_backend: values.io_backend,\n    }),\n    customValidation: (values, { info }) => validateSyncOffsetAndSigShape(\n        info?.native_sig_shape,\n        values.sig_shape,\n        values.sync_offset,\n        info?.image_count\n    ),\n    type: DatasetTypes.EMPAD,\n})(EMPADParamsForm);\n","import { ErrorMessage, Field, FormikProps } from \"formik\";\nimport * as React from \"react\";\nimport { Button, Form } from \"semantic-ui-react\";\nimport { Omit } from \"../../helpers/types\";\nimport { DatasetInfoFRMS6, DatasetParamsFRMS6, DatasetTypes } from \"../../messages\";\nimport { getInitial, getInitialName, parseNumList, validateSyncOffsetAndSigShape, withValidation } from \"../helpers\";\nimport { OpenFormProps } from \"../types\";\nimport BackendSelectionDropdown from \"./BackendSelectionDropdown\";\nimport Reshape from \"./Reshape\";\n\n// some fields have different types in the form vs. in messages\ntype DatasetParamsFRMS6ForForm = Omit<DatasetParamsFRMS6,\n    \"type\"\n    | \"path\"\n    | \"nav_shape\"\n    | \"sig_shape\"> & {\n        nav_shape: string,\n        sig_shape: string,\n};\n\ntype MergedProps = FormikProps<DatasetParamsFRMS6ForForm> & OpenFormProps<DatasetParamsFRMS6, DatasetInfoFRMS6>;\n\nconst FRMS6ParamsForm: React.FC<MergedProps> = ({\n    values,\n    info,\n    isSubmitting,\n    handleSubmit,\n    handleReset,\n    onCancel,\n    setFieldValue,\n    datasetTypeInfo,\n}) => (\n    <Form onSubmit={handleSubmit}>\n        <Form.Field>\n            <label htmlFor=\"id_name\">Name:</label>\n            <ErrorMessage name=\"name\" />\n            <Field name=\"name\" id=\"id_name\" />\n        </Form.Field>\n        <Form.Field>\n            <label htmlFor=\"id_io_backend\">I/O Backend:</label>\n            <ErrorMessage name=\"io_backend\" />\n            <BackendSelectionDropdown\n                value={values.io_backend}\n                datasetTypeInfo={datasetTypeInfo}\n                setFieldValue={setFieldValue} />\n        </Form.Field>\n        <Reshape navShape={values.nav_shape} sigShape={values.sig_shape} syncOffset={values.sync_offset} imageCount={info?.image_count} setFieldValue={setFieldValue} />\n        <Button primary type=\"submit\" disabled={isSubmitting}>Load Dataset</Button>\n        <Button type=\"button\" onClick={onCancel}>Cancel</Button>\n        <Button type=\"button\" onClick={handleReset}>Reset</Button>\n    </Form>\n)\n\nexport default withValidation<DatasetParamsFRMS6, DatasetParamsFRMS6ForForm, DatasetInfoFRMS6>({\n    mapPropsToValues: ({ path, initial }) => ({\n        name: getInitialName(\"name\", path, initial),\n        nav_shape: getInitial(\"nav_shape\", \"\", initial).toString(),\n        sig_shape: getInitial(\"sig_shape\", \"\", initial).toString(),\n        sync_offset: getInitial(\"sync_offset\", 0, initial),\n        io_backend: getInitial(\"io_backend\", undefined, initial),\n    }),\n    formToJson: (values, path) => ({\n        path,\n        type: DatasetTypes.FRMS6,\n        name: values.name,\n        nav_shape: parseNumList(values.nav_shape),\n        sig_shape: parseNumList(values.sig_shape),\n        sync_offset: values.sync_offset,\n        io_backend: values.io_backend,\n    }),\n    customValidation: (values, { info }) => validateSyncOffsetAndSigShape(\n        info?.native_sig_shape,\n        values.sig_shape,\n        values.sync_offset,\n        info?.image_count\n    ),\n    type: DatasetTypes.FRMS6,\n})(FRMS6ParamsForm);\n","import { ErrorMessage, Field, FormikProps } from \"formik\";\nimport * as React from \"react\";\nimport { Button, Dropdown, DropdownProps, Form } from \"semantic-ui-react\";\nimport { Omit } from \"../../helpers/types\";\nimport { DatasetInfoHDF5, DatasetInfoHDF5Item, DatasetParamsHDF5, DatasetTypes } from \"../../messages\";\nimport { getInitial, getInitialName, parseNumList, withValidation } from \"../helpers\";\nimport { OpenFormProps } from \"../types\";\n\ntype DatasetParamsHDF5ForForm = Omit<DatasetParamsHDF5,\n    \"type\"\n    | \"path\"\n    | \"nav_shape\"\n    | \"sig_shape\"> & {\n        nav_shape: string,\n        sig_shape: string,\n};\n\ntype MergedProps = FormikProps<DatasetParamsHDF5ForForm> & OpenFormProps<DatasetParamsHDF5, DatasetInfoHDF5>;\n\nconst HDF5ParamsForm: React.FC<MergedProps> = ({\n    values,\n    info,\n    isSubmitting,\n    handleSubmit,\n    handleReset,\n    onCancel,\n    setFieldValue,\n}) => {\n    const dsItemsByPath: {\n        [k: string]: DatasetInfoHDF5Item\n    } = {};\n    info?.datasets?.forEach(dsItem => dsItemsByPath[dsItem.path] = dsItem);\n\n    const dsPathOptions = info?.datasets?.map(dsItem => {\n        const shape = dsItem.shape.join(\",\")\n        const opts: string[] = [];\n\n        if(dsItem.chunks !== null) {\n            opts.push('chunked');\n        }\n\n        if(dsItem.compression !== null) {\n            opts.push(`compression: ${dsItem.compression}`);\n        }\n\n        const text = `${dsItem.path} (shape: (${shape}), ${opts.join(\", \")})`;\n        return {\n            text,\n            key: dsItem.path,\n            value: dsItem.path,\n        };\n    });\n\n    // semantic-ui requires value to be set manually on option selection\n    const onDSPathChange = (e: React.SyntheticEvent, result: DropdownProps) => {\n      const { value } = result;\n      if (value) {\n        setFieldValue(\"ds_path\", value.toString());\n      }\n    };\n\n    let dsPathInput;\n    const pathsLength = info?.datasets?.length\n    const isTimeOut = pathsLength === 0 || pathsLength === undefined;\n\n    if (isTimeOut) {\n      dsPathInput = <Field name=\"ds_path\" id=\"id_ds_path\" />;\n    } else {\n        dsPathInput = <Dropdown name=\"ds_path\" id=\"id_ds_path\" placeholder=\"Select dataset\" fluid search selection defaultValue={values.ds_path} onChange={onDSPathChange} options={dsPathOptions} />;\n    }\n\n    let warning = null;\n    const selectedItem = dsItemsByPath[values.ds_path];\n    if (selectedItem && selectedItem.compression) {\n        warning = (\n            <p><strong style={{ color: \"red\" }}>Loading compressed HDF5, performance can be worse than with other formats</strong></p>\n        );\n    }\n\n    return (\n        <Form onSubmit={handleSubmit}>\n            <Form.Field>\n                <label htmlFor=\"id_name\">Name:</label>\n                <ErrorMessage name=\"name\" />\n                <Field name=\"name\" id=\"id_name\" />\n            </Form.Field>\n            <Form.Field>\n                <label htmlFor=\"id_ds_path\">HDF5 Dataset Path:</label>\n                <ErrorMessage name=\"ds_path\" />\n                {dsPathInput}\n            </Form.Field>\n            {warning}\n            <Button primary type=\"submit\" disabled={isSubmitting}>Load Dataset</Button>\n            <Button onClick={onCancel} >Cancel</Button>\n            <Button type=\"button\" onClick={handleReset}>Reset</Button>\n        </Form>\n    )\n}\n\nexport default withValidation<DatasetParamsHDF5, DatasetParamsHDF5ForForm, DatasetInfoHDF5>({\n    mapPropsToValues: ({ path, initial }) => ({\n        name: getInitialName(\"name\", path, initial),\n        ds_path: getInitial(\"ds_path\", \"\", initial),\n        nav_shape: getInitial(\"nav_shape\", \"\", initial).toString(),\n        sig_shape: getInitial(\"sig_shape\", \"\", initial).toString(),\n        sync_offset: getInitial(\"sync_offset\", 0, initial),\n    }),\n    formToJson: (values, path) => ({\n        path,\n        type: DatasetTypes.HDF5,\n        name: values.name,\n        ds_path: values.ds_path,\n        nav_shape: parseNumList(values.nav_shape),\n        sig_shape: parseNumList(values.sig_shape),\n        sync_offset: values.sync_offset,\n    }),\n    type: DatasetTypes.HDF5,\n})(HDF5ParamsForm);\n","import { ErrorMessage, Field, FormikProps } from \"formik\";\nimport * as React from \"react\";\nimport { Button, Form } from \"semantic-ui-react\";\nimport { Omit } from \"../../helpers/types\";\nimport { DatasetInfoK2IS, DatasetParamsK2IS, DatasetTypes } from \"../../messages\";\nimport { getInitial, getInitialName, parseNumList, validateSyncOffsetAndSigShape, withValidation } from \"../helpers\";\nimport { OpenFormProps } from \"../types\";\nimport BackendSelectionDropdown from \"./BackendSelectionDropdown\";\nimport Reshape from \"./Reshape\";\n\n// some fields have different types in the form vs. in messages\ntype DatasetParamsK2ISForForm = Omit<DatasetParamsK2IS,\n    \"type\"\n    | \"path\"\n    | \"nav_shape\"\n    | \"sig_shape\"> & {\n        nav_shape: string,\n        sig_shape: string,\n    };\n\ntype MergedProps = FormikProps<DatasetParamsK2ISForForm> & OpenFormProps<DatasetParamsK2IS, DatasetInfoK2IS>;\n\nconst K2ISFileParamsForm: React.FC<MergedProps> = ({\n    values,\n    info,\n    isSubmitting,\n    handleSubmit,\n    handleReset,\n    onCancel,\n    setFieldValue,\n    datasetTypeInfo,\n}) => (\n    <Form onSubmit={handleSubmit}>\n        <Form.Field>\n            <label htmlFor=\"id_name\">Name:</label>\n            <ErrorMessage name=\"name\" />\n            <Field name=\"name\" id=\"id_name\" />\n        </Form.Field>\n        <Form.Field>\n            <label htmlFor=\"id_io_backend\">I/O Backend:</label>\n            <ErrorMessage name=\"io_backend\" />\n            <BackendSelectionDropdown\n                value={values.io_backend}\n                datasetTypeInfo={datasetTypeInfo}\n                setFieldValue={setFieldValue} />\n        </Form.Field>\n        <Reshape navShape={values.nav_shape} sigShape={values.sig_shape} syncOffset={values.sync_offset} imageCount={info?.image_count} setFieldValue={setFieldValue} />\n        <Button primary type=\"submit\" disabled={isSubmitting}>Load Dataset</Button>\n        <Button type=\"button\" onClick={onCancel}>Cancel</Button>\n        <Button type=\"button\" onClick={handleReset}>Reset</Button>\n    </Form>\n)\n\nexport default withValidation<DatasetParamsK2IS, DatasetParamsK2ISForForm, DatasetInfoK2IS>({\n    mapPropsToValues: ({ path, initial }) => ({\n        name: getInitialName(\"name\", path, initial),\n        nav_shape: getInitial(\"nav_shape\", \"\", initial).toString(),\n        sig_shape: getInitial(\"sig_shape\", \"\", initial).toString(),\n        sync_offset: getInitial(\"sync_offset\", 0, initial),\n        io_backend: getInitial(\"io_backend\", undefined, initial),\n    }),\n    formToJson: (values, path) => ({\n        path,\n        type: DatasetTypes.K2IS,\n        name: values.name,\n        nav_shape: parseNumList(values.nav_shape),\n        sig_shape: parseNumList(values.sig_shape),\n        sync_offset: values.sync_offset,\n        io_backend: values.io_backend,\n    }),\n    customValidation: (values, { info }) => validateSyncOffsetAndSigShape(\n        info?.native_sig_shape,\n        values.sig_shape,\n        values.sync_offset,\n        info?.image_count\n    ),\n    type: DatasetTypes.K2IS,\n})(K2ISFileParamsForm);\n","import { ErrorMessage, Field, FormikProps } from \"formik\";\nimport * as React from \"react\";\nimport { Button, Form } from \"semantic-ui-react\";\nimport { Omit } from \"../../helpers/types\";\nimport { DatasetInfoMIB, DatasetParamsMIB, DatasetTypes } from \"../../messages\";\nimport { getInitial, getInitialName, parseNumList, validateSyncOffsetAndSigShape, withValidation } from \"../helpers\";\nimport { OpenFormProps } from \"../types\";\nimport BackendSelectionDropdown from \"./BackendSelectionDropdown\";\nimport Reshape from \"./Reshape\";\n\n// some fields have different types in the form vs. in messages\ntype DatasetParamsMIBForForm = Omit<DatasetParamsMIB,\n    \"type\"\n    | \"path\"\n    | \"nav_shape\"\n    | \"sig_shape\"> & {\n        nav_shape: string,\n        sig_shape: string,\n};\n\ntype FormValues = DatasetParamsMIBForForm\n\ntype MergedProps = FormikProps<FormValues> & OpenFormProps<DatasetParamsMIB, DatasetInfoMIB>;\n\nconst MIBFileParamsForm: React.FC<MergedProps> = ({\n    values,\n    info,\n    isSubmitting,\n    handleSubmit,\n    handleReset,\n    isValidating,\n    onCancel,\n    setFieldValue,\n    datasetTypeInfo,\n}) => (\n    <Form onSubmit={handleSubmit}>\n        <Form.Field>\n            <label htmlFor=\"id_name\">Name:</label>\n            <ErrorMessage name=\"name\" />\n            <Field name=\"name\" id=\"id_name\" />\n        </Form.Field>\n        <Form.Field>\n            <label htmlFor=\"id_io_backend\">I/O Backend:</label>\n            <ErrorMessage name=\"io_backend\" />\n            <BackendSelectionDropdown\n                value={values.io_backend}\n                datasetTypeInfo={datasetTypeInfo}\n                setFieldValue={setFieldValue} />\n        </Form.Field>\n        <Reshape navShape={values.nav_shape} sigShape={values.sig_shape} syncOffset={values.sync_offset} imageCount={info?.image_count} setFieldValue={setFieldValue} />\n        <Button primary type=\"submit\" disabled={isSubmitting || isValidating}>Load Dataset</Button>\n        <Button type=\"button\" onClick={onCancel}>Cancel</Button>\n        <Button type=\"button\" onClick={handleReset}>Reset</Button>\n    </Form>\n)\n\nexport default withValidation<DatasetParamsMIB, DatasetParamsMIBForForm, DatasetInfoMIB>({\n    formToJson: (values, path) => ({\n        path,\n        type: DatasetTypes.MIB,\n        name: values.name,\n        nav_shape: parseNumList(values.nav_shape),\n        sig_shape: parseNumList(values.sig_shape),\n        sync_offset: values.sync_offset,\n        io_backend: values.io_backend,\n    }),\n    mapPropsToValues: ({ path, initial }) => ({\n        name: getInitialName(\"name\", path, initial),\n        nav_shape: getInitial(\"nav_shape\", \"\", initial).toString(),\n        sig_shape: getInitial(\"sig_shape\", \"\", initial).toString(),\n        sync_offset: getInitial(\"sync_offset\", 0, initial),\n        io_backend: getInitial(\"io_backend\", undefined, initial),\n    }),\n    customValidation: (values, { info }) => validateSyncOffsetAndSigShape(\n        info?.native_sig_shape,\n        values.sig_shape,\n        values.sync_offset,\n        info?.image_count\n    ),\n    type: DatasetTypes.MIB,\n})(MIBFileParamsForm);\n","import { ErrorMessage, Field, FormikProps } from \"formik\";\nimport * as React from \"react\";\nimport { Button, Form } from \"semantic-ui-react\";\nimport { Omit } from \"../../helpers/types\";\nimport { DatasetInfoMRC, DatasetParamsMRC, DatasetTypes } from \"../../messages\";\nimport { getInitial, getInitialName, parseNumList, validateSyncOffsetAndSigShape, withValidation } from \"../helpers\";\nimport { OpenFormProps } from \"../types\";\nimport Reshape from \"./Reshape\";\n\n// some fields have different types in the form vs. in messages\ntype DatasetParamsMRCForForm = Omit<DatasetParamsMRC,\n    \"type\"\n    | \"path\"\n    | \"nav_shape\"\n    | \"sig_shape\"> & {\n        nav_shape: string,\n        sig_shape: string,\n};\n\ntype FormValues = DatasetParamsMRCForForm\n\ntype MergedProps = FormikProps<FormValues> & OpenFormProps<DatasetParamsMRC, DatasetInfoMRC>;\n\nconst MRCFileParamsForm: React.FC<MergedProps> = ({\n    values,\n    info,\n    isSubmitting,\n    handleSubmit,\n    handleReset,\n    isValidating,\n    onCancel,\n    setFieldValue,\n}) => (\n\n    <Form onSubmit={handleSubmit}>\n        <Form.Field>\n            <label htmlFor=\"id_name\">Name:</label>\n            <ErrorMessage name=\"name\" />\n            <Field name=\"name\" id=\"id_name\" />\n        </Form.Field>\n        <Reshape navShape={values.nav_shape} sigShape={values.sig_shape} syncOffset={values.sync_offset} imageCount={info?.image_count} setFieldValue={setFieldValue} />\n        <Button primary type=\"submit\" disabled={isSubmitting || isValidating}>Load Dataset</Button>\n        <Button type=\"button\" onClick={onCancel}>Cancel</Button>\n        <Button type=\"button\" onClick={handleReset}>Reset</Button>\n    </Form>\n)\n\nexport default withValidation<DatasetParamsMRC, DatasetParamsMRCForForm, DatasetInfoMRC>({\n    formToJson: (values, path) => ({\n        path,\n        type: DatasetTypes.MRC,\n        name: values.name,\n        nav_shape: parseNumList(values.nav_shape),\n        sig_shape: parseNumList(values.sig_shape),\n        sync_offset: values.sync_offset,\n    }),\n    mapPropsToValues: ({ path, initial }) => ({\n        name: getInitialName(\"name\", path, initial),\n        nav_shape: getInitial(\"nav_shape\", \"\", initial).toString(),\n        sig_shape: getInitial(\"sig_shape\", \"\", initial).toString(),\n        sync_offset: getInitial(\"sync_offset\", 0, initial),\n    }),\n    customValidation: (values, { info }) => validateSyncOffsetAndSigShape(\n        info?.native_sig_shape,\n        values.sig_shape,\n        values.sync_offset,\n        info?.image_count\n    ),\n    type: DatasetTypes.MRC,\n})(MRCFileParamsForm);\n","import { ErrorMessage, Field, FormikProps } from \"formik\";\nimport * as React from \"react\";\nimport { Button, Form } from \"semantic-ui-react\";\nimport { Omit } from \"../../helpers/types\";\nimport { DatasetInfoRAW, DatasetParamsRaw, DatasetTypes } from \"../../messages\";\nimport { getInitial, getInitialName, parseNumList, withValidation } from \"../helpers\";\nimport { OpenFormProps } from \"../types\";\nimport BackendSelectionDropdown from \"./BackendSelectionDropdown\";\nimport Reshape from \"./Reshape\";\n\n// some fields have different types in the form vs. in messages\ntype DatasetParamsRawForForm = Omit<DatasetParamsRaw,\n    \"type\"\n    | \"path\"\n    | \"nav_shape\"\n    | \"sig_shape\"> & {\n        nav_shape: string,\n        sig_shape: string,\n    };\n\ntype MergedProps = FormikProps<DatasetParamsRawForForm> & OpenFormProps<DatasetParamsRaw, DatasetInfoRAW>;\n\nconst RawFileParamsForm: React.FC<MergedProps> = ({\n    values,\n    isSubmitting,\n    handleSubmit,\n    handleReset,\n    onCancel,\n    setFieldValue,\n    datasetTypeInfo,\n}) => (\n    <Form onSubmit={handleSubmit}>\n        <Form.Field>\n            <label htmlFor=\"id_name\">Name:</label>\n            <ErrorMessage name=\"name\" />\n            <Field name=\"name\" id=\"id_name\" />\n        </Form.Field>\n        <Form.Field>\n            <label htmlFor=\"id_dtype\">Datatype (uint16, uint32, float32, float64, &gt;u2, ..., can be anything that is <a href=\"https://numpy.org/doc/stable/reference/arrays.dtypes.html\">understood by numpy as a dtype</a>):</label>\n            <ErrorMessage name=\"dtype\" />\n            <Field name=\"dtype\" id=\"id_dtype\" />\n        </Form.Field>\n        <Form.Field>\n            <label htmlFor=\"id_io_backend\">I/O Backend:</label>\n            <ErrorMessage name=\"io_backend\" />\n            <BackendSelectionDropdown\n                value={values.io_backend}\n                datasetTypeInfo={datasetTypeInfo}\n                setFieldValue={setFieldValue} />\n        </Form.Field>\n        <Reshape navShape={values.nav_shape} sigShape={values.sig_shape} syncOffset={values.sync_offset} hideInfo setFieldValue={setFieldValue} />\n        <Button primary type=\"submit\" disabled={isSubmitting}>Load Dataset</Button>\n        <Button type=\"button\" onClick={onCancel}>Cancel</Button>\n        <Button type=\"button\" onClick={handleReset}>Reset</Button>\n    </Form>\n)\n\nexport default withValidation<DatasetParamsRaw, DatasetParamsRawForForm, DatasetInfoRAW>({\n    mapPropsToValues: ({ path, initial }) => ({\n        name: getInitialName(\"name\", path, initial),\n        dtype: getInitial(\"dtype\", \"float32\", initial),\n        nav_shape: getInitial(\"nav_shape\", \"\", initial).toString(),\n        sig_shape: getInitial(\"sig_shape\", \"\", initial).toString(),\n        sync_offset: getInitial(\"sync_offset\", 0, initial),\n        io_backend: getInitial(\"io_backend\", undefined, initial),\n    }),\n    formToJson: (values, path) => ({\n        path,\n        type: DatasetTypes.RAW,\n        name: values.name,\n        dtype: values.dtype,\n        nav_shape: parseNumList(values.nav_shape),\n        sig_shape: parseNumList(values.sig_shape),\n        sync_offset: values.sync_offset,\n        io_backend: values.io_backend,\n    }),\n    type: DatasetTypes.RAW,\n})(RawFileParamsForm);\n","import { ErrorMessage, Field, FormikProps } from \"formik\";\nimport * as React from \"react\";\nimport { Button, Form } from \"semantic-ui-react\";\nimport { Omit } from \"../../helpers/types\";\nimport { DatasetInfoSEQ, DatasetParamsSEQ, DatasetTypes } from \"../../messages\";\nimport { getInitial, getInitialName, parseNumList, validateSyncOffsetAndSigShape, withValidation } from \"../helpers\";\nimport { OpenFormProps } from \"../types\";\nimport BackendSelectionDropdown from \"./BackendSelectionDropdown\";\nimport Reshape from \"./Reshape\";\n\n// some fields have different types in the form vs. in messages\ntype DatasetParamsSEQForForm = Omit<DatasetParamsSEQ,\n    \"type\"\n    | \"path\"\n    | \"nav_shape\"\n    | \"sig_shape\"> & {\n        nav_shape: string,\n        sig_shape: string,\n};\n\ntype FormValues = DatasetParamsSEQForForm\n\ntype MergedProps = FormikProps<FormValues> & OpenFormProps<DatasetParamsSEQ, DatasetInfoSEQ>;\n\nconst SEQFileParamsForm: React.FC<MergedProps> = ({\n    values,\n    info,\n    isSubmitting,\n    handleSubmit,\n    handleReset,\n    isValidating,\n    onCancel,\n    setFieldValue,\n    datasetTypeInfo,\n}) => (\n    <Form onSubmit={handleSubmit}>\n        <Form.Field>\n            <label htmlFor=\"id_name\">Name:</label>\n            <ErrorMessage name=\"name\" />\n            <Field name=\"name\" id=\"id_name\" />\n        </Form.Field>\n        <Form.Field>\n            <label htmlFor=\"id_io_backend\">I/O Backend:</label>\n            <ErrorMessage name=\"io_backend\" />\n            <BackendSelectionDropdown\n                value={values.io_backend}\n                datasetTypeInfo={datasetTypeInfo}\n                setFieldValue={setFieldValue} />\n        </Form.Field>\n        <Reshape navShape={values.nav_shape} sigShape={values.sig_shape} syncOffset={values.sync_offset} imageCount={info?.image_count} setFieldValue={setFieldValue} />\n        <Button primary type=\"submit\" disabled={isSubmitting || isValidating}>Load Dataset</Button>\n        <Button type=\"button\" onClick={onCancel}>Cancel</Button>\n        <Button type=\"button\" onClick={handleReset}>Reset</Button>\n    </Form>\n)\n\nexport default withValidation<DatasetParamsSEQ, DatasetParamsSEQForForm, DatasetInfoSEQ>({\n    formToJson: (values, path) => ({\n        path,\n        type: DatasetTypes.SEQ,\n        name: values.name,\n        nav_shape: parseNumList(values.nav_shape),\n        sig_shape: parseNumList(values.sig_shape),\n        sync_offset: values.sync_offset,\n        io_backend: values.io_backend,\n    }),\n    mapPropsToValues: ({ path, initial }) => ({\n        name: getInitialName(\"name\", path, initial),\n        nav_shape: getInitial(\"nav_shape\", \"\", initial).toString(),\n        sig_shape: getInitial(\"sig_shape\", \"\", initial).toString(),\n        sync_offset: getInitial(\"sync_offset\", 0, initial),\n        io_backend: getInitial(\"io_backend\", undefined, initial),\n    }),\n    customValidation: (values, { info }) => validateSyncOffsetAndSigShape(\n        info?.native_sig_shape,\n        values.sig_shape,\n        values.sync_offset,\n        info?.image_count\n    ),\n    type: DatasetTypes.SEQ,\n})(SEQFileParamsForm);\n","import { ErrorMessage, Field, FormikProps } from \"formik\";\nimport * as React from \"react\";\nimport { Button, Form } from \"semantic-ui-react\";\nimport { Omit } from \"../../helpers/types\";\nimport { DatasetInfoSER, DatasetParamsSER, DatasetTypes } from \"../../messages\";\nimport { getInitial, getInitialName, parseNumList, validateSyncOffsetAndSigShape, withValidation } from \"../helpers\";\nimport { OpenFormProps } from \"../types\";\nimport Reshape from \"./Reshape\";\n\n// some fields have different types in the form vs. in messages\ntype DatasetParamsSERForForm = Omit<DatasetParamsSER,\n    \"type\"\n    | \"path\"\n    | \"nav_shape\"\n    | \"sig_shape\"> & {\n        nav_shape: string,\n        sig_shape: string,\n    };\n\ntype MergedProps = FormikProps<DatasetParamsSERForForm> & OpenFormProps<DatasetParamsSER, DatasetInfoSER>;\n\nconst SERParamsForm: React.FC<MergedProps> = ({\n    values,\n    info,\n    isSubmitting,\n    handleSubmit,\n    handleReset,\n    onCancel,\n    setFieldValue,\n}) => (\n    <Form onSubmit={handleSubmit}>\n        <Form.Field>\n            <label htmlFor=\"id_name\">Name:</label>\n            <ErrorMessage name=\"name\" />\n            <Field name=\"name\" id=\"id_name\" />\n        </Form.Field>\n        <Reshape navShape={values.nav_shape} sigShape={values.sig_shape} syncOffset={values.sync_offset} imageCount={info?.image_count} setFieldValue={setFieldValue} />\n        <Button primary type=\"submit\" disabled={isSubmitting}>Load Dataset</Button>\n        <Button type=\"button\" onClick={onCancel}>Cancel</Button>\n        <Button type=\"button\" onClick={handleReset}>Reset</Button>\n    </Form>\n)\n\nexport default withValidation<DatasetParamsSER, DatasetParamsSERForForm, DatasetInfoSER>({\n    mapPropsToValues: ({ path, initial }) => ({\n        name: getInitialName(\"name\", path, initial),\n        nav_shape: getInitial(\"nav_shape\", \"\", initial).toString(),\n        sig_shape: getInitial(\"sig_shape\", \"\", initial).toString(),\n        sync_offset: getInitial(\"sync_offset\", 0, initial),\n    }),\n    formToJson: (values, path) => ({\n        path,\n        type: DatasetTypes.SER,\n        name: values.name,\n        nav_shape: parseNumList(values.nav_shape),\n        sig_shape: parseNumList(values.sig_shape),\n        sync_offset: values.sync_offset,\n    }),\n    customValidation: (values, { info }) => validateSyncOffsetAndSigShape(\n        info?.native_sig_shape,\n        values.sig_shape,\n        values.sync_offset,\n        info?.image_count\n    ),\n    type: DatasetTypes.SER,\n})(SERParamsForm);\n","import * as React from \"react\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport { DropdownProps, Header, Segment } from \"semantic-ui-react\";\nimport { v4 as uuid } from 'uuid';\nimport { assertNotReached } from \"../../helpers\";\nimport { DatasetFormParams, DatasetTypes } from '../../messages';\nimport { RootReducer } from \"../../store\";\nimport * as datasetActions from \"../actions\";\nimport { OpenDatasetState } from \"../types\";\nimport BLOParamsForm from \"./BLOParamsForm\";\nimport DatasetTypeSelect from \"./DatasetTypeSelect\";\nimport EMPADParamsForm from \"./EMPADParamsForm\";\nimport FRMS6ParamsForm from \"./FRMS6ParamsForm\";\nimport HDF5ParamsForm from \"./HDF5ParamsForm\";\nimport K2ISParamsForm from \"./K2ISParamsForm\";\nimport MIBParamsForm from \"./MIBParamsForm\";\nimport MRCParamsForm from \"./MRCParamsForm\";\nimport RawFileParamsForm from \"./RawFileParamsForm\";\nimport SEQParamsForm from \"./SEQParamsForm\";\nimport SERParamsForm from \"./SERParamsForm\";\n\n\n/**\n * Get the initial selection for the dataset type dropdown. If we have a previous\n * user selection, we use it, but only if the reset button was not pressed. If it was,\n * we use the detected dataset type, falling back to RAW.\n *\n * @param didReset flag: was the reset button pressed?\n * @param openState complete OpenDatasetState instance\n */\nconst getDefaultDSType = (didReset: boolean, openState: OpenDatasetState) => {\n    const { formCachedParams, formDetectedParams } = openState;\n    if (didReset) {\n        return formDetectedParams ? formDetectedParams.type : DatasetTypes.RAW;\n    }\n    if (formCachedParams) {\n        return formCachedParams.type;\n    }\n    if (formDetectedParams) {\n        return formDetectedParams.type;\n    }\n    return DatasetTypes.RAW;\n}\n\n\n/**\n * Get the initial form field values. If we have previously entered values, we\n * use these, otherwise we use the detected parameters. If the reset button was\n * clicked, we use the detected params, but keep the original name field,\n *\n * @param didReset flag: was the reset button pressed?\n * @param openState complete OpenDatasetState instance\n */\n\nconst getFormInitial = (didReset: boolean, openState: OpenDatasetState) => {\n    const { formCachedParams, formDetectedParams } = openState;\n    if (didReset) {\n        if (formDetectedParams) {\n            return {\n                ...formDetectedParams,\n                name: formCachedParams ? formCachedParams.name : \"\",\n            };\n        }\n        return undefined;\n    }\n    if (formCachedParams) {\n        // To handle deprecation of scan_size and detector_size, fix this after complete removal\n        let newFormCachedParams = formCachedParams;\n        if (formCachedParams.scan_size) {\n            newFormCachedParams = {\n                ...newFormCachedParams,\n                nav_shape: formCachedParams.scan_size,\n                scan_size: [],\n            };\n        }\n        if (formCachedParams.detector_size) {\n            newFormCachedParams = {\n                ...newFormCachedParams,\n                sig_shape: formCachedParams.detector_size,\n                detector_size: [],\n            };\n        }\n        if (!formCachedParams.nav_shape) {\n            newFormCachedParams = {\n                ...newFormCachedParams,\n                nav_shape: formDetectedParams ? formDetectedParams.nav_shape : [],\n            };\n        }\n        if (!formCachedParams.sig_shape) {\n            newFormCachedParams = {\n                ...newFormCachedParams,\n                sig_shape: formDetectedParams ? formDetectedParams.sig_shape : [],\n            };\n        }\n        return newFormCachedParams;\n    } else {\n        return formDetectedParams;\n    }\n}\n\nconst getFormInfo = (openState: OpenDatasetState) => {\n    const { formDetectedInfo } = openState;\n    if (formDetectedInfo) {\n        return formDetectedInfo;\n    }\n    return undefined;\n}\n\n/**\n * Dispatch to specific dataset opening forms, including a selection of dataset type\n * via a dropdown.\n */\nconst DatasetOpen = () => {\n    const dispatch = useDispatch();\n    const openState = useSelector((state: RootReducer) => state.openDataset);\n\n    const [didReset, setReset] = React.useState(false);\n    const formInitial = getFormInitial(didReset, openState);\n    const formInfo = getFormInfo(openState);\n    const defaultType = getDefaultDSType(didReset, openState);\n    const [datasetType, setDatasetType] = React.useState(defaultType);\n\n    const doSetType = (e: React.SyntheticEvent, data: DropdownProps) => setDatasetType(data.value as DatasetTypes);\n    // FIXME: find out how to make ts correctly correlate the types of FormComponent\n    // and initial and replace the huge switch below with something like:\n    // const initial = formInitial && datasetType === formInitial.type ? formInitial : undefined;\n    // const formComponentMap = {\n    //     [DatasetTypes.HDF5]: HDF5ParamsForm,\n    //     [DatasetTypes.RAW]: RawFileParamsForm,\n    //     [DatasetTypes.MIB]: MIBParamsForm,\n    //     [DatasetTypes.BLO]: BLOParamsForm,\n    //     [DatasetTypes.K2IS]: K2ISParamsForm,\n    //     [DatasetTypes.SER]: SERParamsForm,\n    //     [DatasetTypes.FRMS6]: FRMS6ParamsForm,\n    //     [DatasetTypes.EMPAD]: EMPADParamsForm,\n    // }\n    // const FormComponent = formComponentMap[datasetType];\n\n    const renderForm = (form: React.ReactNode) => (\n        <Segment>\n            Type: <DatasetTypeSelect onClick={doSetType} currentType={datasetType} />\n            <Header as=\"h2\">Open: {openState.formPath}</Header>\n            {form}\n        </Segment>\n    );\n\n    const datasetTypeInfo = useSelector((state: RootReducer) => state.config.datasetTypes[datasetType])\n\n    const commonParams = {\n        path: openState.formPath,\n        onSubmit: (params: DatasetFormParams) => {\n            dispatch(datasetActions.Actions.create({\n                id: uuid(),\n                params,\n            }))\n        },\n        onCancel: () => dispatch(datasetActions.Actions.cancelOpen()),\n        onReset: () => {\n            setReset(true);\n            setDatasetType(getDefaultDSType(true, openState));\n        },\n        datasetTypeInfo,\n    }\n\n    switch (datasetType) {\n        case DatasetTypes.HDF5: {\n            const initial = formInitial && datasetType === formInitial.type ? formInitial : undefined;\n            const info = formInfo && datasetType === formInfo.type ? formInfo : undefined;\n            return renderForm(<HDF5ParamsForm {...commonParams} initial={initial} info={info} />);\n        }\n        case DatasetTypes.RAW: {\n            const initial = formInitial && datasetType === formInitial.type ? formInitial : undefined;\n            const info = formInfo && datasetType === formInfo.type ? formInfo : undefined;\n            return renderForm(<RawFileParamsForm {...commonParams} initial={initial} info={info} />);\n        }\n        case DatasetTypes.MIB: {\n            const initial = formInitial && datasetType === formInitial.type ? formInitial : undefined;\n            const info = formInfo && datasetType === formInfo.type ? formInfo : undefined;\n            return renderForm(<MIBParamsForm {...commonParams} initial={initial} info={info} />);\n        }\n        case DatasetTypes.BLO: {\n            const initial = formInitial && datasetType === formInitial.type ? formInitial : undefined;\n            const info = formInfo && datasetType === formInfo.type ? formInfo : undefined;\n            return renderForm(<BLOParamsForm {...commonParams} initial={initial} info={info} />);\n        }\n        case DatasetTypes.K2IS: {\n            const initial = formInitial && datasetType === formInitial.type ? formInitial : undefined;\n            const info = formInfo && datasetType === formInfo.type ? formInfo : undefined;\n            return renderForm(<K2ISParamsForm {...commonParams} initial={initial} info={info} />);\n        }\n        case DatasetTypes.SER: {\n            const initial = formInitial && datasetType === formInitial.type ? formInitial : undefined;\n            const info = formInfo && datasetType === formInfo.type ? formInfo : undefined;\n            return renderForm(<SERParamsForm {...commonParams} initial={initial} info={info} />);\n        }\n        case DatasetTypes.FRMS6: {\n            const initial = formInitial && datasetType === formInitial.type ? formInitial : undefined;\n            const info = formInfo && datasetType === formInfo.type ? formInfo : undefined;\n            return renderForm(<FRMS6ParamsForm {...commonParams} initial={initial} info={info} />);\n        }\n        case DatasetTypes.EMPAD: {\n            const initial = formInitial && datasetType === formInitial.type ? formInitial : undefined;\n            const info = formInfo && datasetType === formInfo.type ? formInfo : undefined;\n            return renderForm(<EMPADParamsForm {...commonParams} initial={initial} info={info} />)\n        }\n        case DatasetTypes.SEQ: {\n            const initial = formInitial && datasetType === formInitial.type ? formInitial : undefined;\n            const info = formInfo && datasetType === formInfo.type ? formInfo : undefined;\n            return renderForm(<SEQParamsForm {...commonParams} initial={initial} info={info} />);\n        }\n        case DatasetTypes.MRC: {\n            const initial = formInitial && datasetType === formInitial.type ? formInitial : undefined;\n            const info = formInfo && datasetType === formInfo.type ? formInfo : undefined;\n            return renderForm(<MRCParamsForm {...commonParams} initial={initial} info={info} />);\n        }\n    }\n    return assertNotReached(\"unknown dataset type\");\n}\n\nexport default DatasetOpen;\n","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Header, Icon, Message } from \"semantic-ui-react\";\nimport { RootReducer } from \"../../store\";\n\nconst mapStateToProps = (state: RootReducer) => ({\n    busy: state.openDataset.busy,\n    path: state.openDataset.busyPath,\n})\n\ntype MergedProps = ReturnType<typeof mapStateToProps>;\n\nconst DatasetOpenSpinner: React.FC<MergedProps> = ({ busy, path }) => {\n    if (!busy) {\n        return null;\n    }\n    return (\n        <>\n            <Header as=\"h2\" dividing>Loading...</Header>\n            <Message icon>\n                <Icon name='cog' loading />\n                <Message.Content>\n                    <Message.Header>Detecting parameters for {path}</Message.Header>\n                </Message.Content>\n            </Message>\n        </>\n    );\n}\n\nexport default connect(mapStateToProps)(DatasetOpenSpinner);","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport BrowserWrapper from \"../../browser/components/BrowserWrapper\";\nimport { RootReducer } from \"../../store\";\nimport { DatasetsState } from \"../types\";\nimport Dataset from \"./Dataset\";\nimport DatasetOpen from \"./DatasetOpen\";\nimport DatasetOpenSpinner from \"./DatasetOpenSpinner\";\n\ninterface DatasetListProps {\n    datasets: DatasetsState\n}\n\nconst mapStateToProps = (state: RootReducer) => ({\n    datasets: state.datasets,\n    formVisible: state.openDataset.formVisible,\n    formPath: state.openDataset.formPath,\n});\n\ntype MergedProps = DatasetListProps & ReturnType<typeof mapStateToProps>;\n\nclass DatasetList extends React.Component<MergedProps> {\n    public render() {\n        const { formVisible, datasets } = this.props;\n\n        return (\n            <>\n                {datasets.ids.map((dsId: string) => <Dataset dataset={datasets.byId[dsId]} key={dsId} />)}\n                <DatasetOpenSpinner />\n                {formVisible && <DatasetOpen />}\n                <BrowserWrapper />\n            </>\n        );\n    }\n}\n\nexport default connect(mapStateToProps)(DatasetList);","import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { Dispatch } from 'redux';\nimport { Message } from 'semantic-ui-react';\nimport * as errorActions from '../actions';\nimport { ErrorMessage } from '../reducers';\n\nconst mapDispatchToProps = (dispatch: Dispatch, ownProps: ErrorProps) => ({\n    dismiss: () => dispatch(errorActions.Actions.dismiss(ownProps.error.id)),\n});\n\ninterface ErrorProps {\n    error: ErrorMessage,\n}\n\ntype MergedProps = ErrorProps & ReturnType<typeof mapDispatchToProps>;\n\nconst ErrorComponent: React.FC<MergedProps> = ({ dismiss, error }) => (\n    <Message negative onDismiss={dismiss}>{error.msg}</Message>\n);\n\nexport default connect(null, mapDispatchToProps)(ErrorComponent);","import * as React from \"react\";\nimport { connect, useDispatch } from \"react-redux\";\nimport { Modal } from \"semantic-ui-react\";\nimport { useDismissEscape } from \"../../helpers/hooks\";\nimport { RootReducer } from \"../../store\";\nimport { Actions } from \"../actions\";\nimport Error from \"./Error\";\n\nconst mapStateToProps = (state: RootReducer) => ({\n    errors: state.errors,\n    channelConnected: (state.channelStatus.status === \"connected\" ||\n        state.channelStatus.status === \"ready\"),\n});\n\ntype MergedProps = ReturnType<typeof mapStateToProps>;\n\nconst ErrorList: React.FC<MergedProps> = ({ errors, channelConnected }) => {\n    const numShown = 3;\n    const latestErrors = errors.ids.slice(Math.max(0, errors.ids.length - numShown));\n    const showModal = errors.ids.length > 0 && channelConnected;\n\n    const dispatch = useDispatch();\n\n    const doDismiss = () => {\n        dispatch(Actions.dismissAll());\n    }\n\n    useDismissEscape(doDismiss);\n\n    return (\n        <Modal open={showModal}>\n            {latestErrors.map(error => <Error error={errors.byId[error]} key={error} />)}\n        </Modal>\n    );\n}\n\nexport default connect(mapStateToProps)(ErrorList);","import React from \"react\";\n\nexport const useDismissEscape = (dismiss: () => void): void => {\n    React.useEffect(() => {\n        const handleEsc = (ev: KeyboardEvent) => {\n            if(ev.code === \"Escape\" || ev.keyCode === 27) {\n                dismiss();\n            }\n        }\n        document.addEventListener(\"keyup\", handleEsc);\n\n        return () => {\n            document.removeEventListener(\"keyup\", handleEsc);\n        };\n    });\n}","export default __webpack_public_path__ + \"static/media/LiberTEM logo-medium.2765b438.png\";","import { connect } from \"react-redux\";\nimport { Header, List } from \"semantic-ui-react\";\nimport { RootReducer } from \"./store\";\n\nconst mapStateToProps = (state: RootReducer) => ({\n    version: state.config.version,\n    revision: state.config.revision,\n});\n\ntype MergedProps = ReturnType<typeof mapStateToProps>;\n\nconst About: React.FC<MergedProps> = ({ version, revision }) => (\n    <>\n        <Header as=\"h3\">This is LiberTEM version {version} (revision {revision.slice(0, 8)})</Header>\n        <List>\n            <List.Item>\n                <List.Icon name=\"github\" />\n                <List.Content>\n                    Find us on <a href=\"https://github.com/LiberTEM/LiberTEM\">GitHub</a>\n                </List.Content>\n            </List.Item>\n            <List.Item>\n                <List.Icon name=\"bug\" />\n                <List.Content>\n                    Found a bug? Got a feature request? Please <a href=\"https://github.com/LiberTEM/LiberTEM/issues/new\">open an issue!</a>\n                </List.Content>\n            </List.Item>\n            <List.Item>\n                <List.Icon name=\"legal\" />\n                <List.Content>\n                    LiberTEM is licensed under the <a href=\"https://github.com/LiberTEM/LiberTEM/blob/master/LICENSE\">GNU General Public License v3.0</a>\n                </List.Content>\n            </List.Item>\n            <List.Item>\n                <List.Icon name=\"book\" />\n                <List.Content>\n                    Read <a href=\"https://libertem.github.io/LiberTEM/\">the documentation</a>\n                </List.Content>\n            </List.Item>\n            <List.Item>\n                <List.Icon name=\"user\" />\n                <List.Content>\n                    Read <a href=\"https://libertem.github.io/LiberTEM/acknowledgments.html\">the acknowledgments</a>\n                </List.Content>\n            </List.Item>\n            <List.Item>\n                <List.Icon name=\"gitter\" />\n                <List.Content>\n                    Join our <a href=\"https://gitter.im/LiberTEM/Lobby\">chat on gitter!</a>\n                </List.Content>\n            </List.Item>\n            <List.Item>\n                <List.Icon name=\"linkify\" />\n                <List.Content>\n                <a href=\"https://doi.org/10.5281/zenodo.1477847\"><img src=\"https://zenodo.org/badge/DOI/10.5281/zenodo.1477847.svg\" alt=\"doi.org/10.5281/zenodo.1477847\"/></a>\n                </List.Content>\n            </List.Item>\n        </List>\n    </>\n);\n\nexport default connect(mapStateToProps)(About);\n","import { getApiBasePath } from \"../helpers/apiHelpers\";\nimport { ClusterDetailsResponse } from \"../messages\";\n\nexport const getClusterDetail = async (): Promise<ClusterDetailsResponse> => {\n    const basePath = getApiBasePath();\n    const url = `${basePath}config/cluster/`;\n    const r = await fetch(url, {\n        method: 'GET',\n        credentials: \"same-origin\",\n    });\n    return await (r.json() as Promise<ClusterDetailsResponse>);\n}","import * as React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { List, Modal } from \"semantic-ui-react\";\nimport { v4 as uuid } from 'uuid';\nimport { HostDetails } from \"../../messages\";\nimport { getClusterDetail } from \"../api\"\nimport * as errorActions from \"../../errors/actions\";\n\ninterface LocalStatusProps {\n    localCore: number;\n    cudas: number[];\n}\n\nconst LocalStatus: React.FC<LocalStatusProps> = ({ localCore, cudas }) => {\n    let cudaText: string;\n\n    const intialDetails: HostDetails[] = [\n        {\n            host: \"\",\n            cpu: 0,\n            cuda: 0,\n            service: 0,\n        },\n    ];\n\n    const [clustDetails, setDetails] = useState<HostDetails[]>(intialDetails)\n\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        getClusterDetail().then(newDetails => {\n            setDetails(newDetails.details);\n        }).catch(() => {\n            const id = uuid();\n            const timestamp = Date.now();\n            dispatch(errorActions.Actions.generic(id, \"Could not copy to clipboard\", timestamp));\n        })\n    }, []);\n\n    if (cudas.length === 0) {\n        cudaText = \"None selected\";\n    } else {\n        const ids = cudas\n            .map(id => ` ${id}`)\n            .join(\",\");\n        cudaText = `GPU ${ids}`;\n    }\n\n    return (\n        <Modal.Content>\n            <List>\n                <List.Item>\n                    <List.Content as=\"h4\">Connected to local cluster</List.Content>\n                </List.Item>\n                <List.Item>\n                    <List.Content>Number of local core : {localCore}</List.Content>\n                </List.Item>\n                <List.Item>\n                    <List.Content>Number of CPU workers : {clustDetails[0].cpu} </List.Content>\n                </List.Item>\n                <List.Item>\n                    <List.Content>Number of CUDA workers : {clustDetails[0].cuda}</List.Content>\n                </List.Item>\n                <List.Item>\n                    <List.Content>Selected CUDA devices : {cudaText}</List.Content>\n                </List.Item>\n            </List>\n        </Modal.Content>\n    );\n};\n\nexport default LocalStatus;\n","import * as React from \"react\";\nimport { List, Modal } from \"semantic-ui-react\";\n\nconst NotConnected: React.FC = () => (\n    <Modal.Content>\n        <List>\n            <List.Item>\n                <List.Content>\n                    Not Connected\n                </List.Content>\n            </List.Item>\n        </List>\n    </Modal.Content>\n);\n\nexport default NotConnected;","import * as React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { Accordion, Button, Header, Icon, List, Modal, Segment } from \"semantic-ui-react\";\nimport { v4 as uuid } from 'uuid';\nimport { HostDetails } from \"../../messages\";\nimport { getClusterDetail } from \"../api\";\nimport * as errorActions from \"../../errors/actions\";\nimport { writeClipboard } from \"../../helpers\";\n\n\nconst ClusterDetails = (details: HostDetails[]) => {\n    const [clustOverview, setOverview] = useState({\n        host: 0,\n        cpu: 0,\n        cuda: 0,\n    });\n\n    const [idx, setIdx] = useState(false);\n    const [expandMsg, setMsg] = useState(\"More Info\");\n\n    const handleClick = () => {\n        setIdx(!idx);\n        if (expandMsg === \"More Info\") {\n            setMsg(\"Less Info\");\n        } else {\n            setMsg(\"More Info\");\n        }\n    };\n\n    useEffect(() => {\n        const overview = {\n            host: 0,\n            cpu: 0,\n            cuda: 0,\n        };\n        details.forEach(node => {\n            overview.host += 1;\n            overview.cpu += node.cpu;\n            overview.cuda += node.cuda;\n        });\n        setOverview(overview);\n    }, [details]);\n\n    const clusterExpanded = details.map((node: HostDetails) => (\n        <Segment key={node.host}>\n            <List.Item >\n                <List.Content>Host : {node.host}</List.Content>\n                <List.Content>Number of CPU workers : {node.cpu}</List.Content>\n                <List.Content>Number of CUDA workers : {node.cuda}</List.Content>\n            </List.Item>\n        </Segment>\n    ));\n\n    return (\n        <>\n            <Segment>\n                <List.Item>\n                    <List.Content>Number of hosts : {clustOverview.host}</List.Content>\n                    <List.Content>Number of CPU workers : {clustOverview.cpu}</List.Content>\n                    <List.Content>Number of CUDA workers : {clustOverview.cuda}</List.Content>\n                </List.Item>\n            </Segment>\n            <Accordion>\n                <Accordion.Title active={idx} onClick={handleClick}>\n                    <Icon name=\"dropdown\" />\n                    {expandMsg}\n                </Accordion.Title>\n                <Accordion.Content active={idx}>\n                    <Segment.Group>{clusterExpanded}</Segment.Group>\n                </Accordion.Content>\n            </Accordion>\n        </>\n    );\n};\n\ninterface TCPStatusProps {\n    address: string;\n}\n\nconst TCPStatus: React.FC<TCPStatusProps> = ({ address }) => {\n    const template = [\n        `import libertem.api as lt`,\n        `import distributed as dd`,\n        `from libertem.executor.dask import DaskJobExecutor\\n`,\n        `client = dd.Client(\"URI\")`,\n        `executor = DaskJobExecutor(client)\\n`,\n        `ctx = lt.Context(executor=executor)`,\n    ];\n\n    const dispatch = useDispatch();\n\n    const connectionCode = template.join(\"\\n\");\n    const code = connectionCode.replace(\"URI\", address);\n    const copyToClipboard = () => writeClipboard(code, dispatch);\n\n    const [clustDetails, setDetails] = useState<HostDetails[]>([])\n\n    useEffect(() => {\n        getClusterDetail().then(newDetails => {\n            setDetails(newDetails.details)\n        }).catch((e) => {\n            const id = uuid();\n            const timestamp = Date.now();\n            dispatch(errorActions.Actions.generic(id, `Could not fetch cluster details: ${(e as Error).toString()}`, timestamp));\n        })\n    }, [])\n\n    return (\n        <Modal.Content>\n            <List>\n                <Header as=\"h4\" attached=\"top\">\n                    Connected to {address}\n                </Header>\n                <Segment.Group>{ClusterDetails(clustDetails)}</Segment.Group>\n                <List.Item>\n                    <List.Content>\n                        <Segment.Group>\n                            <Segment as=\"h5\">Connection code</Segment>\n                            <Segment>\n                                <Button floated={\"right\"} icon={\"copy\"} onClick={copyToClipboard} />\n                                <pre>\n                                    <code>\n                                        {code}\n                                    </code>\n                                </pre>\n                            </Segment>\n                        </Segment.Group>\n                    </List.Content>\n                </List.Item>\n            </List>\n        </Modal.Content>\n    );\n};\n\nexport default TCPStatus;\n","import * as React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Button, Modal, Popup } from \"semantic-ui-react\";\nimport { RootReducer } from \"../../store\";\nimport LocalStatus from \"./LocalStatus\";\nimport NotConnected from \"./NotConnected\";\nimport TCPStatus from \"./TCPStatus\";\n\nconst mapStateToProps = (state: RootReducer) => ({\n    clusterConnection: state.clusterConnection,\n    channelStatus: state.channelStatus.status,\n    type: state.config.lastConnection.type,\n    localcore: state.config.localCores,\n    cudas: state.config.lastConnection.cudas,\n    address: state.config.lastConnection.address,\n})\n\ntype MergedProps = ReturnType<typeof mapStateToProps>;\n\nconst ClusterStatus: React.FC<MergedProps> = ({ clusterConnection, channelStatus, type, localcore, cudas, address }) => {\n    enum ColorType  {\n        blue= \"blue\",\n        grey= \"grey\"\n    }\n\n    const [color , setColor] = useState<ColorType>(ColorType.grey)\n    const [status, setStatus] =  useState(clusterConnection.status)\n    const [disable, setDisable] = useState(true)\n\n    useEffect(()=>{\n        if (channelStatus === \"connected\"|| channelStatus === \"ready\"){\n            setStatus(clusterConnection.status)\n            setDisable(false)\n            if (clusterConnection.status === \"connected\"){\n                setColor(ColorType.blue)\n            }else{\n                setColor(ColorType.grey)\n            }\n        }else{\n            setDisable(true)\n            setStatus(\"unknown\")\n            setColor(ColorType.grey)\n        }\n\n    }, [clusterConnection, channelStatus, ColorType])\n\n\n    const clusterDetails = () => {\n        if (clusterConnection.status === \"connected\") {\n            if (type === \"LOCAL\") {\n                return <LocalStatus cudas={cudas} localCore={localcore} />;\n            } else {\n                return <TCPStatus address={address} />;\n            }\n        } else {\n            return <NotConnected />;\n        }\n    };\n\n    return (\n        <Modal\n            trigger={\n                <Button\n                    color= {color}\n                    content=\"Cluster info\"\n                    icon=\"plug\"\n                    labelPosition=\"left\"\n                    disabled={disable}\n                    label={{ as: \"a\", basic: true, content: status }} /> }\n            size=\"small\" >\n            <Popup.Header>Connection Info</Popup.Header>\n            <Popup.Content>{clusterDetails()}</Popup.Content>\n        </Modal>\n    );\n};\n\nexport default connect(mapStateToProps)(ClusterStatus);\n","import { genericDelete } from \"../helpers/apiHelpers\";\nimport { ShutdownResponse } from '../messages'\n\nexport const doShutdown = async (): Promise<ShutdownResponse> => (\n    await genericDelete<ShutdownResponse>(`shutdown/`)\n);","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Button, Header, Icon, Modal } from \"semantic-ui-react\";\nimport * as channelActions from \"../../channel/actions\";\nimport { DispatchProps } from \"../../helpers/props\";\nimport { RootReducer } from \"../../store\";\nimport { doShutdown } from \"../api\";\n\nconst mapDispatchToProps = {\n    closeLoopAction: channelActions.Actions.closeloop,\n    shutdownAction: channelActions.Actions.shutdown,\n};\n\nconst mapStateToProps = (state: RootReducer) => ({\n    channel: state.channelStatus.status,\n})\n\ntype MergedProps = DispatchProps<typeof mapDispatchToProps> & ReturnType<typeof mapStateToProps>;\n\nclass ShutdownButton extends React.Component<MergedProps> {\n    public state = {\n        modal: false,\n        shutdown: false,\n    };\n\n    public modalOpen = () => {\n        this.setState({ modal: true });\n    };\n\n    public modalClose = () => {\n        this.setState({ modal: false });\n    };\n\n    public handleShutdown = () => {\n        this.setState({ shutdown: true });\n        void doShutdown().then(() => {\n            const timestamp = Date.now();\n            this.props.closeLoopAction(timestamp);\n        });\n    };\n\n    public componentDidUpdate() {\n        if (this.props.channel === \"waiting\" && this.state.shutdown) {\n            const timestamp = Date.now();\n            this.modalClose();\n            this.props.shutdownAction(timestamp);\n        }\n    }\n\n    public render() {\n        return (\n            <Modal\n                trigger={\n                    <Button\n                        content=\"Shutdown\"\n                        icon=\"shutdown\"\n                        onClick={this.modalOpen}\n                        disabled={this.state.shutdown}\n                        labelPosition=\"left\"\n                        floated=\"right\"\n                    />\n                }\n                open={this.state.modal}\n                closeOnDimmerClick={false}\n                onClose={this.modalClose}\n                size=\"mini\"\n            >\n                <Header icon=\"shutdown\" content=\"Confirm shutdown\" />\n                <Modal.Content>\n                    <p>Do you want to shutdown ?</p>\n                </Modal.Content>\n                <Modal.Actions>\n                    <Button onClick={this.modalClose} disabled={this.state.shutdown}>\n                        <Icon name=\"remove\" /> Cancel\n                    </Button>\n                    <Button primary loading={this.state.shutdown} disabled={this.state.shutdown} onClick={this.handleShutdown}>\n                        <Icon name=\"checkmark\" /> Shutdown\n                    </Button>\n                </Modal.Actions>\n            </Modal>\n        );\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ShutdownButton);\n","import React from \"react\";\nimport { Button, Menu, Modal, Popup } from \"semantic-ui-react\";\nimport About from \"./About\";\nimport ClusterStatus from \"./clusterStatus/components/Cluster\"\nimport QuitButton from \"./shutdown/components/ShutdownButton\";\n\nconst HeaderMenu: React.FC = () => (\n\n    <Menu fixed=\"top\">\n        <Menu.Item>\n            <Modal trigger={<Button content=\"About\" />}>\n                <Popup.Header>About LiberTEM</Popup.Header>\n                <Popup.Content>\n                    <About />\n                </Popup.Content>\n            </Modal>\n        </Menu.Item>\n        <Menu.Menu position=\"right\">\n            <Menu.Item>\n                <ClusterStatus />\n            </Menu.Item>\n            <Menu.Item>\n                <QuitButton />\n            </Menu.Item>\n        </Menu.Menu>\n    </Menu>\n);\n\nexport default HeaderMenu;\n","import \"semantic-ui-css/semantic.min.css\";\nimport { Container } from \"semantic-ui-react\";\nimport ChannelStatus from \"./channel/components/ChannelStatus\";\nimport DatasetList from \"./dataset/components/DatasetList\";\nimport ErrorList from \"./errors/components/ErrorList\";\nimport logo from \"./images/LiberTEM logo-medium.png\";\nimport HeaderMenu from \"./Menu\";\n\nconst App : React.FC = () => (\n    <>\n        <HeaderMenu />\n        <Container style={{ margin: \"5em 1em 5em 1em\" }}>\n            <div style={{ display: \"flex\" }}>\n                <img src={logo} width=\"200\" height=\"46\" alt=\"LiberTEM\" style={{ marginBottom: \"20px\" }} />\n            </div>\n            <ErrorList />\n            <ChannelStatus>\n                <DatasetList />\n            </ChannelStatus>\n        </Container>\n    </>\n);\n\nexport default App;\n","import _ from 'lodash';\nimport { ClusterTypes, MsgPartConfig } from \"../messages\";\nimport { ConfigParams, ConfigState, LocalConfig } from \"./reducers\";\n\nconst CONFIG_KEY = \"LiberTEM.config\";\n\nexport const joinPaths = (config: ConfigState, ...parts: string[]): string => {\n    const removeSep = (part: string) => part.replace(new RegExp(`${_.escapeRegExp(config.separator)}$`), \"\")\n    parts = [removeSep(parts[0]), ...parts.slice(1)];\n    return parts.map(part => part.trim()).join(config.separator);\n}\n\nexport const mergeLocalStorage = (serverConfig: MsgPartConfig): ConfigParams => {\n    const localSettings = window.localStorage.getItem(CONFIG_KEY);\n    if (localSettings === null) {\n        return Object.assign({}, getDefaultLocalConfig(), serverConfig);\n    }\n    const localSettingsParsed = JSON.parse(localSettings) as LocalConfig;\n    const defaultConfig = getDefaultLocalConfig();\n    const mergedConfig = Object.assign({}, defaultConfig, serverConfig, localSettingsParsed);\n    return mergedConfig;\n}\n\nexport const setLocalStorage = (config: ConfigState): void => {\n    const localSettings: LocalConfig = {\n        cwd: config.cwd,\n        lastOpened: config.lastOpened,\n        fileHistory: config.fileHistory,\n        lastConnection: config.lastConnection,\n        starred: config.starred,\n    }\n\n    window.localStorage.setItem(CONFIG_KEY, JSON.stringify(localSettings));\n}\n\nexport const clearLocalStorage = (): void => {\n    window.localStorage.removeItem(CONFIG_KEY);\n}\n\nexport const getDefaultLocalConfig = (): LocalConfig => ({\n    lastOpened: {},\n    fileHistory: [],\n    cwd: \"/\",\n    lastConnection: {\n        type: ClusterTypes.LOCAL,\n        address: \"tcp://localhost:8786\",\n        cudas: [],\n    },\n    starred: [],\n});\n\nexport const makeUnique = <T>(inp: T[]): T[] => inp.reduce((acc: T[], curr: T) => {\n    if (acc.indexOf(curr) === -1) {\n        return [...acc, curr];\n    } else {\n        return acc;\n    }\n}, [] as T[])","import { getApiBasePath } from \"../helpers/apiHelpers\";\nimport { DirectoryListingResponse } from \"../messages\";\n\nexport const getDirectoryListing = async (path: string): Promise<DirectoryListingResponse> => {\n    const basePath = getApiBasePath();\n    const url = `${basePath}browse/localfs/?path=${encodeURIComponent(path)}`;\n    const r = await fetch(url, {\n        method: 'GET',\n        credentials: \"same-origin\",\n    });\n    return await (r.json() as Promise<DirectoryListingResponse>);\n}","import { call, fork, put, select, take } from \"redux-saga/effects\";\nimport { v4 as uuid } from 'uuid';\nimport { joinPaths } from \"../config/helpers\";\nimport { ConfigState } from \"../config/reducers\";\nimport { DirectoryListingResponse } from \"../messages\";\nimport { RootReducer } from \"../store\";\nimport * as browserActions from './actions';\nimport { getDirectoryListing } from \"./api\";\nimport { DirectoryBrowserState } from \"./types\";\n\nexport function* directoryListingSaga() {\n    yield fork(fetchOnRequest);\n    yield fork(fetchDirectoryListOnOpen);\n}\n\nfunction* fetchOnRequest() {\n    while (true) {\n        const action = (yield take(browserActions.ActionTypes.LIST_DIRECTORY)) as ReturnType<typeof browserActions.Actions.list>;\n\n        const { name, path } = action.payload;\n        const config = (yield select((state: RootReducer) => state.config)) as ConfigState;\n        const newPath = name !== undefined ? joinPaths(config, path, name) : path;\n        yield fork(fetchDirectoryListing, newPath);\n    }\n}\n\nfunction* fetchDirectoryListing(path: string) {\n    try {\n        const result = (yield call(getDirectoryListing, path)) as DirectoryListingResponse;\n        if (result.status === \"ok\") {\n            yield put(browserActions.Actions.dirListing(result.path, result.dirs, result.files, result.drives, result.places));\n        } else if (result.status === \"error\") {\n            const browserState = (yield select((state: RootReducer) => state.browser)) as DirectoryBrowserState;\n            const timestamp = Date.now();\n            const id = uuid();\n            const alternative = result.alternative ? result.alternative : browserState.places.home.path;\n            // Don't show an error, if it's due to last recent directory not being available\n            const config = (yield select((state: RootReducer) => state.config)) as ConfigState;\n            if (config.cwd !== path) {\n              yield put(browserActions.Actions.error(`Error browsing directory: ${result.msg}`, timestamp, id));\n            }\n            yield put(browserActions.Actions.list(alternative));\n        }\n    } catch (e) {\n        const browserState = (yield select((state: RootReducer) => state.browser)) as DirectoryBrowserState;\n        const timestamp = Date.now();\n        const id = uuid();\n        yield put(browserActions.Actions.error(`Error browsing directory: ${(e as Error).toString()}`, timestamp, id));\n        yield put(browserActions.Actions.list(browserState.places.home.path));\n    }\n}\n\nfunction* fetchDirectoryListOnOpen() {\n    while (true) {\n        yield take(browserActions.ActionTypes.OPEN);\n        const config = (yield select((state: RootReducer) => state.config)) as ConfigState;\n        yield put(browserActions.Actions.list(config.cwd));\n    }\n}\n","import { ActionCreatorsMapObject } from \"redux\";\nimport { AnalysisDetails, CompoundAnalysisDetails, CreateDatasetMessage, FollowupPart, MsgPartAnalysis, MsgPartCompoundAnalysis, MsgPartInitialDataset, MsgPartJob } from \"../messages\";\n\nexport interface Message<T extends string> {\n    messageType: T\n}\n\nexport const createMessage = <T extends string, O>(messageType: T, attribs: O) => Object.assign({ messageType }, attribs);\n\nexport enum MessageTypes {\n    INITIAL_STATE = \"INITIAL_STATE\",\n    JOB_STARTED = \"JOB_STARTED\",\n    FINISH_JOB = \"FINISH_JOB\",\n    TASK_RESULT = \"TASK_RESULT\",\n    JOB_ERROR = \"JOB_ERROR\",\n    BINARY = \"BINARY\",\n    OPEN = \"OPEN\",\n    CLOSE = \"CLOSE\",\n    ERROR = \"ERROR\",\n    DELETE_DATASET = \"DELETE_DATASET\",\n    CREATE_DATASET = \"CREATE_DATASET\",\n    CANCEL_JOB_DONE = \"CANCEL_JOB_DONE\",\n    CANCEL_JOB_FAILED = \"CANCEL_JOB_FAILED\",\n    ANALYSIS_CREATED = \"ANALYSIS_CREATED\",\n    ANALYSIS_UPDATED = \"ANALYSIS_UPDATED\",\n    ANALYSIS_REMOVED = \"ANALYSIS_REMOVED\",\n    COMPOUND_ANALYSIS_CREATED = \"COMPOUND_ANALYSIS_CREATED\",\n    COMPOUND_ANALYSIS_UPDATED = \"COMPOUND_ANALYSIS_UPDATED\",\n    COMPOUND_ANALYSIS_REMOVED = \"COMPOUND_ANALYSIS_REMOVED\",\n}\n\nexport const Messages = {\n    initialState: (\n        jobs: MsgPartJob[],\n        datasets: MsgPartInitialDataset[],\n        analyses: MsgPartAnalysis[],\n        compoundAnalyses: MsgPartCompoundAnalysis[]\n    ) => createMessage(MessageTypes.INITIAL_STATE, {\n        jobs, datasets, compoundAnalyses, analyses,\n    }),\n\n    startJob: (job: string) => createMessage(MessageTypes.JOB_STARTED, { job }),\n    finishJob: (job: string, followup: FollowupPart) => createMessage(MessageTypes.FINISH_JOB, { job, followup }),\n    taskResult: (job: string, followup: FollowupPart) => createMessage(MessageTypes.TASK_RESULT, { job, followup }),\n    jobError: (job: string, msg: string) => createMessage(MessageTypes.JOB_ERROR, { job, msg }),\n    binary: (objectURL: string) => createMessage(MessageTypes.BINARY, { objectURL }),\n    open: () => createMessage(MessageTypes.OPEN, {}),\n    close: () => createMessage(MessageTypes.CLOSE, {}),\n    error: (msg: string) => createMessage(MessageTypes.ERROR, { msg }),\n    deleteDataset: (dataset: string) => createMessage(MessageTypes.DELETE_DATASET, { dataset }),\n    createDataset: (dataset: string, details: CreateDatasetMessage) => createMessage(MessageTypes.CREATE_DATASET, { dataset, details }),\n    cancelled: (job: string) => createMessage(MessageTypes.CANCEL_JOB_DONE, { job }),\n    cancelFailed: (job: string) => createMessage(MessageTypes.CANCEL_JOB_FAILED, { job }),\n    analysisCreated: (analysis: string, dataset: string, details: AnalysisDetails) => createMessage(MessageTypes.ANALYSIS_CREATED, { dataset, analysis, details }),\n    analysisUpdated: (analysis: string, dataset: string, details: AnalysisDetails) => createMessage(MessageTypes.ANALYSIS_UPDATED, { dataset, analysis, details }),\n    analysisRemoved: (analysis: string) => createMessage(MessageTypes.ANALYSIS_REMOVED, { analysis }),\n\n    compoundAnalysisCreated: (compoundAnalysis: string, dataset: string, details: CompoundAnalysisDetails) => createMessage(MessageTypes.COMPOUND_ANALYSIS_CREATED, { dataset, compoundAnalysis, details }),\n    compoundAnalysisUpdated: (compoundAnalysis: string, dataset: string, details: CompoundAnalysisDetails) => createMessage(MessageTypes.COMPOUND_ANALYSIS_UPDATED, { dataset, compoundAnalysis, details }),\n    compoundAnalysisRemoved: (compoundAnalysis: string) => createMessage(MessageTypes.ANALYSIS_REMOVED, { compoundAnalysis }),\n}\n\nexport type MessagesUnion<A extends ActionCreatorsMapObject> = ReturnType<A[keyof A]>\nexport type Messages = MessagesUnion<typeof Messages>;\n\n// types of messages sent by the server:\n/*\nexport type InitialStateMessage = ReturnType<typeof Messages.initialState>;\nexport type StartJobMessage = ReturnType<typeof Messages.startJob>;\nexport type FinishJobMessage = ReturnType<typeof Messages.finishJob>;\nexport type TaskResultMessage = ReturnType<typeof Messages.taskResult>;\n*/\n\nexport type BinaryMessage = ReturnType<typeof Messages.binary>;","import { END, eventChannel, EventChannel } from \"redux-saga\";\nimport { call, delay, fork, put, take } from \"redux-saga/effects\";\nimport { v4 as uuid } from 'uuid';\nimport * as datasetActions from \"../dataset/actions\";\nimport { getApiWSURL } from \"../helpers/apiHelpers\";\nimport * as channelActions from \"./actions\";\nimport * as channelMessages from \"./messages\";\n\ntype SocketChannel = EventChannel<channelMessages.Messages>;\n\n/**\n * create typesafe messages from the websocket messages\n *\n * also creates some synthetic events like open, close, error\n */\nconst createWebSocketChannel = (/* addr */): SocketChannel => eventChannel((emit) => {\n    const onMessage = (msg: MessageEvent) => {\n        if (msg.data instanceof Blob) {\n            // TODO: cleanup createObjectURL results somewhere\n            emit(channelMessages.Messages.binary(URL.createObjectURL(msg.data)));\n        } else {\n            const parsed = JSON.parse(msg.data) as channelMessages.Messages;\n            emit(parsed);\n        }\n    }\n\n    const onOpen = () => {\n        emit(channelMessages.Messages.open());\n    }\n\n    const onClose = () => {\n        emit(channelMessages.Messages.close());\n        emit(END);\n    }\n\n    const onError = () => {\n        emit(channelMessages.Messages.error(\"Error in weboscket connection\"));\n    }\n\n    const ws = new WebSocket(getApiWSURL());\n    ws.addEventListener(\"message\", onMessage);\n    ws.addEventListener(\"open\", onOpen);\n    ws.addEventListener(\"close\", onClose);\n    ws.addEventListener(\"error\", onError);\n\n    // return cleanup function:\n    return () => {\n        ws.removeEventListener(\"message\", onMessage);\n        ws.removeEventListener(\"open\", onOpen);\n        ws.removeEventListener(\"close\", onClose);\n        ws.removeEventListener(\"error\", onError);\n        // TODO: close connection if still open\n        // (or is it guaranteed that if an error was thrown, the connection is closed?)\n    };\n})\n\n/**\n * handles the connection lifecycle for our websocket\n */\nexport function* webSocketSaga() {\n    while (true) {\n        const socketChannel = (yield call(createWebSocketChannel)) as SocketChannel;\n        yield fork(actionsFromChannel, socketChannel);\n        const action = (yield take([channelActions.ActionTypes.OPEN, channelActions.ActionTypes.CLOSE])) as channelActions.Actions;\n        if (action.type === channelActions.ActionTypes.OPEN) {\n            const isShutdown = (yield take([\n                channelActions.ActionTypes.CLOSE,\n                channelActions.ActionTypes.ERROR,\n                channelActions.ActionTypes.CLOSE_LOOP,\n            ])) as channelActions.Actions;\n            if (isShutdown.type === channelActions.ActionTypes.CLOSE_LOOP) {\n                break;\n            }\n        }\n        yield delay(1000);\n    }\n}\n\n/**\n * translates the messages from the channel to redux actions, handles aggregation etc.\n */\nexport function* actionsFromChannel(socketChannel: SocketChannel) {\n    try {\n        while (true) {\n            const msg = (yield take(socketChannel)) as channelMessages.Messages;\n            const timestamp = Date.now();\n            switch (msg.messageType) {\n                case channelMessages.MessageTypes.OPEN: {\n                    yield put(channelActions.Actions.open(timestamp));\n                    break;\n                }\n                case channelMessages.MessageTypes.CLOSE: {\n                    yield put(channelActions.Actions.close(timestamp));\n                    break;\n                }\n                case channelMessages.MessageTypes.ERROR: {\n                    const id = uuid();\n                    yield put(channelActions.Actions.error(msg.msg, timestamp, id));\n                    break;\n                }\n                case channelMessages.MessageTypes.INITIAL_STATE: {\n                    yield put(channelActions.Actions.initialState(msg.jobs, msg.datasets, msg.compoundAnalyses, msg.analyses, timestamp));\n                    break;\n                }\n                case channelMessages.MessageTypes.JOB_STARTED: {\n                    yield put(channelActions.Actions.jobStarted(msg.job, timestamp));\n                    break;\n                }\n                case channelMessages.MessageTypes.FINISH_JOB: {\n                    yield call(handleFinishJob, msg, socketChannel, timestamp);\n                    break;\n                }\n                case channelMessages.MessageTypes.TASK_RESULT: {\n                    yield call(handleTaskResult, msg, socketChannel, timestamp);\n                    break;\n                }\n                case channelMessages.MessageTypes.CREATE_DATASET: {\n                    yield put(datasetActions.Actions.created(msg.details));\n                    break;\n                }\n                case channelMessages.MessageTypes.DELETE_DATASET: {\n                    yield put(datasetActions.Actions.deleted(msg.dataset));\n                    break;\n                }\n                case channelMessages.MessageTypes.JOB_ERROR: {\n                    const id = uuid();\n                    yield put(channelActions.Actions.jobError(msg.job, msg.msg, id, timestamp));\n                    break;\n                }\n                case channelMessages.MessageTypes.CANCEL_JOB_DONE: {\n                    yield put(channelActions.Actions.cancelled(msg.job));\n                    break;\n                }\n                case channelMessages.MessageTypes.CANCEL_JOB_FAILED: {\n                    yield put(channelActions.Actions.cancelFailed(msg.job));\n                }\n                /*\n                // FIXME: server needs to know about compount analyses\n                case channelMessages.MessageTypes.ANALYSIS_CREATED: {\n                    yield put(channelActions.Actions.analysisCreated(\n                        msg.analysis,\n                        msg.dataset,\n                        msg.details,\n                    ));\n                    break;\n                }\n                case channelMessages.MessageTypes.ANALYSIS_UPDATED: {\n                    yield put(channelActions.Actions.analysisUpdated(\n                        msg.analysis,\n                        msg.dataset,\n                        msg.details,\n                    ));\n                    break;\n                }\n                case channelMessages.MessageTypes.ANALYSIS_REMOVED: {\n                    yield put(channelActions.Actions.analysisRemoved(\n                        msg.analysis,\n                    ));\n                    break;\n                }\n                */\n            }\n        }\n    } finally {\n        // disconnected\n    }\n}\n\nexport function* handleBinaryParts(numParts: number, socketChannel: SocketChannel) {\n    const parts: channelMessages.BinaryMessage[] = [];\n    while (parts.length < numParts) {\n        const binMsg = (yield take(socketChannel)) as channelMessages.BinaryMessage;\n        parts.push(binMsg);\n    }\n    return parts;\n}\n\nexport function* handleTaskResult(msg: ReturnType<typeof channelMessages.Messages.taskResult>, socketChannel: SocketChannel, timestamp: number) {\n    const parts = (yield call(handleBinaryParts, msg.followup.numMessages, socketChannel)) as channelMessages.BinaryMessage[];\n    const images = parts.map((part, idx) => ({ imageURL: part.objectURL, description: msg.followup.descriptions[idx] }));\n    yield put(channelActions.Actions.taskResult(msg.job, images, timestamp));\n}\n\nexport function* handleFinishJob(msg: ReturnType<typeof channelMessages.Messages.finishJob>, socketChannel: SocketChannel, timestamp: number) {\n    const parts = (yield call(handleBinaryParts, msg.followup.numMessages, socketChannel)) as channelMessages.BinaryMessage[];\n    const images = parts.map((part, idx) => ({ imageURL: part.objectURL, description: msg.followup.descriptions[idx] }));\n    yield put(channelActions.Actions.finishJob(msg.job, images, timestamp));\n}\n","import { genericPut, getApiBasePath } from \"../helpers/apiHelpers\";\nimport { ConnectRequest, ConnectRequestParams, ConnectResponse } from \"../messages\";\n\nexport const connectToCluster = async (params: ConnectRequestParams): Promise<ConnectResponse> => {\n    const payload: ConnectRequest = {\n        connection: params\n    }\n    return await genericPut(\"config/connection/\", payload);\n}\n\nexport const checkClusterConnection = async (): Promise<ConnectResponse> => {\n    const basePath = getApiBasePath();\n    const r = await fetch(`${basePath}config/connection/`, {\n        method: 'GET',\n    });\n    return await (r.json() as Promise<ConnectResponse>);\n}\n","import { all, call, put, take, takeEvery } from \"redux-saga/effects\";\nimport { v4 as uuid } from 'uuid';\nimport * as channelActions from '../channel/actions';\nimport { ConnectResponse } from \"../messages\";\nimport * as clusterActions from './actions';\nimport { checkClusterConnection, connectToCluster } from \"./api\";\n\nfunction* connectSaga(action: ReturnType<typeof clusterActions.Actions.connect>) {\n    yield put(clusterActions.Actions.connecting())\n    const conn = (yield call(connectToCluster, action.payload.params)) as ConnectResponse;\n    yield call(putClusterStatus, conn);\n}\n\nfunction* putClusterStatus(conn: ConnectResponse) {\n    if (conn.status === \"ok\") {\n        yield put(clusterActions.Actions.connected(conn.connection.connection));\n    } else if (conn.status === \"error\") {\n        yield put(clusterActions.Actions.notConnected());\n        const timestamp = Date.now();\n        const id = uuid();\n        yield put(clusterActions.Actions.error(`error connecting to cluster: ${conn.msg}`,timestamp, id));\n    } else {\n        yield put(clusterActions.Actions.notConnected());\n    }\n}\n\n/**\n * when the channel is connected, check if cluster is connected and update status accordingly\n */\nfunction* trackClusterConnection() {\n    while (true) {\n        yield take(channelActions.ActionTypes.OPEN)\n        const conn = (yield call(checkClusterConnection)) as ConnectResponse;\n        yield call(putClusterStatus, conn);\n    }\n}\n\nexport function* clusterConnectionSaga() {\n    yield takeEvery(clusterActions.ActionTypes.CONNECT, connectSaga);\n    yield all([\n        trackClusterConnection(),\n    ])\n}","import { ActionsUnion, createAction } from \"../helpers/actionHelpers\";\nimport { AnalysisDetails, AnalysisTypes } from \"../messages\";\nimport { AnalysisState } from \"./types\";\n\n\nexport enum ActionTypes {\n    CREATE = 'ANALYSIS_CREATE',\n    CREATED = 'ANALYSIS_CREATED',\n    UPDATED = 'ANALYSIS_UPDATED',\n    REMOVE = 'ANALYSIS_REMOVE',\n    REMOVED = 'ANALYSIS_REMOVED',\n    ERROR = 'ANALYSIS_ERROR',\n}\n\nexport const Actions = {\n    create: (\n        dataset: string, analysisType: AnalysisTypes\n    ) => createAction(ActionTypes.CREATE, { dataset, analysisType }),\n\n    created: (\n        analysis: AnalysisState, compoundAnalysis: string, analysisIndex: number\n    ) => createAction(ActionTypes.CREATED, {\n        analysis, compoundAnalysis, analysisIndex\n    }),\n\n    updated: (\n        id: string, details: AnalysisDetails\n    ) => createAction(ActionTypes.UPDATED, { id, details }),\n\n    remove: (id: string) => createAction(ActionTypes.REMOVE, { id }),\n    removed: (id: string) => createAction(ActionTypes.REMOVED, { id }),\n    error: (\n        msg: string, timestamp: number, id: string\n    ) => createAction(ActionTypes.ERROR, { msg, timestamp, id }),\n}\n\nexport type Actions = ActionsUnion<typeof Actions>;\n\nexport type ActionParts = {\n    [K in keyof typeof Actions]: ReturnType<typeof Actions[K]>\n}\n","import { ActionsUnion, createAction } from \"../helpers/actionHelpers\";\n\nexport enum ActionTypes {\n    CREATE = 'JOB_CREATE',\n}\n\nexport const Actions = {\n    create: (id: string, analysis: string, timestamp: number) => createAction(ActionTypes.CREATE, { id, analysis, timestamp }),\n}\n\nexport type Actions = ActionsUnion<typeof Actions>;\n\nexport type ActionParts = {\n    [K in keyof typeof Actions]: ReturnType<typeof Actions[K]>\n}","import { genericDelete, genericPut } from \"../helpers/apiHelpers\";\nimport { CancelJobResponse, StartJobRequest, StartJobResponse } from \"../messages\";\n\nexport const startJob = async (jobId: string, analysis: string): Promise<StartJobResponse> => {\n    const payload: StartJobRequest = {\n        job: {\n            analysis,\n        }\n    }\n    return await genericPut<StartJobResponse, StartJobRequest>(`jobs/${jobId}/`, payload);\n}\n\nexport const cancelJob = async (jobId: string): Promise<CancelJobResponse> => (\n    await genericDelete<CancelJobResponse>(`jobs/${jobId}/`)\n)\n","import { buffers, TakeableChannel, Task } from 'redux-saga';\nimport { actionChannel, call, cancel, fork, put, select, take, takeEvery } from 'redux-saga/effects';\nimport { v4 as uuid } from 'uuid';\nimport * as analysisActions from '../analysis/actions';\nimport { AnalysisState } from '../analysis/types';\nimport * as channelActions from '../channel/actions';\nimport * as jobActions from '../job/actions';\nimport { cancelJob, startJob } from '../job/api';\nimport { JobState } from '../job/types';\nimport { AnalysisDetails, DatasetState, DatasetStatus } from '../messages';\nimport { RootReducer } from '../store';\nimport * as compoundAnalysisActions from './actions';\nimport { createOrUpdateAnalysis, createOrUpdateCompoundAnalysis, removeAnalysis, removeCompoundAnalysis } from \"./api\";\nimport { CompoundAnalysis, CompoundAnalysisState } from './types';\n\nconst selectDataset = (state: RootReducer, dataset: string) => state.datasets.byId[dataset]\nconst selectCompoundAnalysis = (state: RootReducer, id: string) => state.compoundAnalyses.byId[id]\nconst selectAnalysis = (state: RootReducer, id: string) => state.analyses.byId[id]\nconst selectJob = (state: RootReducer, id: string) => state.jobs.byId[id]\n\nexport function* cleanupOnRemove(compoundAnalysis: CompoundAnalysis, sidecarTask: Task) {\n    while (true) {\n        const removeAction = (yield take(compoundAnalysisActions.ActionTypes.REMOVE)) as ReturnType<typeof compoundAnalysisActions.Actions.remove>;\n        if (removeAction.payload.id === compoundAnalysis.compoundAnalysis) {\n            yield cancel(sidecarTask);\n        }\n    }\n}\n\nexport function* createCompoundAnalysisSaga(action: ReturnType<typeof compoundAnalysisActions.Actions.create>) {\n    try {\n        const datasetState = (yield select(selectDataset, action.payload.dataset)) as DatasetState;\n        if (datasetState.status !== DatasetStatus.OPEN) {\n            throw new Error(\"invalid dataset status\");\n        }\n        const compoundAnalysis: CompoundAnalysis = {\n            compoundAnalysis: uuid(),\n            dataset: action.payload.dataset,\n            details: {\n                mainType: action.payload.analysisType,\n                analyses: [],\n            }\n        }\n\n        yield call(\n            createOrUpdateCompoundAnalysis,\n            compoundAnalysis.compoundAnalysis,\n            compoundAnalysis.dataset,\n            compoundAnalysis.details,\n        );\n\n        const sidecarTask = (yield fork(analysisSidecar, compoundAnalysis.compoundAnalysis /* , { doAutoStart: true } */)) as Task;\n\n        yield put(compoundAnalysisActions.Actions.created(compoundAnalysis, true));\n        yield fork(cleanupOnRemove, compoundAnalysis, sidecarTask);\n    } catch (e) {\n        const timestamp = Date.now();\n        const id = uuid();\n        yield put(compoundAnalysisActions.Actions.error(`Error creating analysis: ${(e as Error).toString()}`, timestamp, id));\n    }\n}\n\nexport function* createFromServerState(action: ReturnType<typeof channelActions.Actions.initialState>) {\n    for (const msgPart of action.payload.compoundAnalyses) {\n        const compoundAnalysis = (yield select(selectCompoundAnalysis, msgPart.compoundAnalysis)) as CompoundAnalysisState;\n        const sidecarTask = (yield fork(analysisSidecar, compoundAnalysis.compoundAnalysis /* , { doAutoStart: false } */)) as Task;\n        yield fork(cleanupOnRemove, compoundAnalysis, sidecarTask);\n    }\n}\n\nexport function* cancelOldJob(analysis: AnalysisState, jobIndex: number) {\n    const jobId = analysis.jobs[jobIndex];\n    if (jobId === undefined) {\n        return;\n    } else {\n        const job = (yield select(selectJob, jobId)) as JobState;\n        if (job.running !== \"DONE\") {\n            yield call(cancelJob, jobId);\n        }\n    }\n}\n\nexport function* createOrUpdate(\n    compoundAnalysis: CompoundAnalysisState, analysisId: string | undefined,\n    analysisIndex: number, details: AnalysisDetails\n): Generator<unknown, string, any> {\n    if (analysisId) {\n        // update the analysis on the server:\n        yield call(createOrUpdateAnalysis,\n            compoundAnalysis.compoundAnalysis, analysisId,\n            compoundAnalysis.dataset, details\n        );\n        yield put(analysisActions.Actions.updated(analysisId, details));\n\n        const analysis = (yield select(selectAnalysis, analysisId)) as AnalysisState;\n        const jobs = analysis.jobs ? analysis.jobs : [];\n\n        for (const oldJobId of jobs) {\n            const job = (yield select(selectJob, oldJobId)) as JobState;\n            if (job && job.running !== \"DONE\") {\n                // wait until the job is cancelled:\n                yield call(cancelJob, oldJobId);\n            }\n        }\n        return analysisId;\n    } else {\n        // create the analysis on the server:\n        const newAnalysisId = uuid();\n        yield call(createOrUpdateAnalysis,\n            compoundAnalysis.compoundAnalysis, newAnalysisId,\n            compoundAnalysis.dataset, details\n        );\n        yield put(analysisActions.Actions.created({\n            id: newAnalysisId,\n            dataset: compoundAnalysis.dataset,\n            details,\n            jobs: [],\n        }, compoundAnalysis.compoundAnalysis, analysisIndex));\n\n        const updatedCompoundAnalysis = (yield select(selectCompoundAnalysis, compoundAnalysis.compoundAnalysis)) as CompoundAnalysisState;\n\n        yield call(\n            createOrUpdateCompoundAnalysis,\n            updatedCompoundAnalysis.compoundAnalysis,\n            updatedCompoundAnalysis.dataset,\n            updatedCompoundAnalysis.details,\n        );\n        return newAnalysisId;\n    }\n}\n\nexport function* analysisSidecar(compoundAnalysisId: string /* , options: { doAutoStart: boolean } */) {\n    // channel for incoming actions:\n    // all actions that arrive while we block in `call` will be buffered here.\n    // because the buffer is sliding of size 2, we only keep the latest two actions!\n    const runOrParamsChannel = (yield actionChannel(compoundAnalysisActions.ActionTypes.RUN, buffers.sliding(2))) as TakeableChannel<unknown>;\n\n    while (true) {\n        try {\n            const action = (yield take(runOrParamsChannel)) as compoundAnalysisActions.ActionParts[\"run\"];\n\n            // ignore actions meant for other analyses\n            if (action.payload.id !== compoundAnalysisId) {\n                continue;\n            }\n\n            // get the current state incl. configuration\n            const compoundAnalysis = (yield select(selectCompoundAnalysis, compoundAnalysisId)) as CompoundAnalysisState;\n            const { analysisIndex, details } = action.payload;\n\n            const existingAnalysisId = compoundAnalysis.details.analyses[analysisIndex];\n            const analysisId = (yield call(createOrUpdate, compoundAnalysis, existingAnalysisId, analysisIndex, details)) as string;\n\n            // prepare running the job:\n            const jobId = uuid();\n            yield put(jobActions.Actions.create(jobId, analysisId, Date.now()));\n\n            // FIXME: we have a race here, as the websocket msg FINISH_JOB may\n            // arrive before call(startJob, ...) returns. this causes the apply button\n            // to feel unresponsive (the action gets done, but only after we finish here...)\n            // best reproduced in \"Slow 3G\" network simulation mode in devtools\n\n            // wait until the job is started\n            yield call(startJob, jobId, analysisId);\n            yield put(compoundAnalysisActions.Actions.running(compoundAnalysis.compoundAnalysis, jobId, analysisIndex));\n            // tslint:disable-next-line:no-empty\n        } catch (e) {\n            const timestamp = Date.now();\n            const id = uuid();\n            yield put(compoundAnalysisActions.Actions.error(`Error running analysis: ${(e as Error).toString()}`, timestamp, id));\n        }\n    }\n}\n\nfunction* removeJobsForAnalysis(analysis: AnalysisState) {\n    for (const oldJobId of analysis.jobs) {\n        const job = (yield select(selectJob, oldJobId)) as JobState;\n        if (job && job.running !== \"DONE\") {\n            // wait until the job is cancelled:\n            yield call(cancelJob, oldJobId);\n        }\n    }\n}\n\nexport function* doRemoveAnalysisSaga(action: ReturnType<typeof compoundAnalysisActions.Actions.remove>) {\n    const compoundAnalysis = (yield select(selectCompoundAnalysis, action.payload.id)) as CompoundAnalysisState;\n    try {\n        for (const analysisId of compoundAnalysis.details.analyses) {\n            const analysis = (yield select(selectAnalysis, analysisId)) as AnalysisState;\n            yield call(removeJobsForAnalysis, analysis);\n            yield call(removeAnalysis, compoundAnalysis.compoundAnalysis, analysisId);\n            yield put(analysisActions.Actions.removed(analysisId));\n        }\n        yield call(removeCompoundAnalysis, action.payload.id);\n    } finally {\n        yield put(compoundAnalysisActions.Actions.removed(action.payload.id));\n    }\n}\n\nexport function* analysisRootSaga() {\n    yield takeEvery(compoundAnalysisActions.ActionTypes.CREATE, createCompoundAnalysisSaga);\n    yield takeEvery(compoundAnalysisActions.ActionTypes.REMOVE, doRemoveAnalysisSaga);\n    yield takeEvery(channelActions.ActionTypes.INITIAL_STATE, createFromServerState);\n}","import { getApiBasePath } from \"../helpers/apiHelpers\";\nimport { GetConfigResponse } from \"../messages\";\n\nexport const getConfig = async (): Promise<GetConfigResponse> => {\n    const basePath = getApiBasePath();\n    const r = await fetch(`${basePath}config/`, {\n        method: \"GET\",\n        credentials: \"same-origin\",\n    });\n    return await (r.json() as Promise<GetConfigResponse>);\n}","import { call, fork, put, select, take, takeEvery } from 'redux-saga/effects';\nimport { v4 as uuid } from 'uuid';\nimport * as browserActions from '../browser/actions';\nimport * as channelActions from '../channel/actions';\nimport * as clusterActions from '../cluster/actions';\nimport * as datasetActions from '../dataset/actions';\nimport { GetConfigResponse } from '../messages';\nimport { RootReducer } from '../store';\nimport * as configActions from './actions';\nimport { getConfig } from './api';\nimport { clearLocalStorage, getDefaultLocalConfig, mergeLocalStorage, setLocalStorage } from './helpers';\nimport { ConfigState } from './reducers';\n\nfunction* getConfigOnReconnect() {\n    yield takeEvery(channelActions.ActionTypes.OPEN, getConfigSaga);\n}\n\n/**\n * get config from server and try to merge in the localStorage config\n */\nfunction* getConfigSaga() {\n    yield put(configActions.Actions.fetch());\n    const configResponse = (yield call(getConfig)) as GetConfigResponse;\n    try {\n        const mergedConfig = mergeLocalStorage(configResponse.config);\n        yield put(configActions.Actions.fetched(mergedConfig));\n    } catch (e) {\n        try {\n            clearLocalStorage();\n            // eslint-disable-next-line @typescript-eslint/no-shadow\n        } catch (e) {\n            // ignore any errors clearing local storage...\n        }\n        const defaultConfig = Object.assign({}, configResponse.config, getDefaultLocalConfig());\n        yield put(configActions.Actions.fetched(defaultConfig));\n    }\n}\n\n/**\n * update localStorage config on opening files or using the file browser\n */\nfunction* updateLocalStorageConfig() {\n    while (true) {\n        yield take([\n            datasetActions.ActionTypes.CREATE,\n            browserActions.ActionTypes.DIRECTORY_LISTING,\n            clusterActions.ActionTypes.CONNECTED,\n            configActions.ActionTypes.TOGGLE_STAR,\n        ]);\n        const config = (yield select((state: RootReducer) => state.config)) as ConfigState;\n        setLocalStorage(config);\n    }\n}\n\nexport function* firstConfigFetch() {\n    try {\n        yield call(getConfigSaga);\n    } catch (e) {\n        const timestamp = Date.now();\n        const id = uuid();\n        yield put(configActions.Actions.fetchFailed(`failed to fetch config: ${(e as Error).toString()}`, timestamp, id));\n    }\n}\n\nexport function* configRootSaga() {\n    yield fork(firstConfigFetch);\n    yield fork(getConfigOnReconnect);\n    yield fork(updateLocalStorageConfig);\n}","import { genericDelete, genericPut, getApiBasePath } from \"../helpers/apiHelpers\";\nimport { DeleteDatasetResponse, DetectDatasetResponse, OpenDatasetRequest, OpenDatasetResponse } from \"../messages\";\n\nexport const openDataset = async (id: string, dataset: OpenDatasetRequest): Promise<OpenDatasetResponse> => await genericPut<OpenDatasetResponse, OpenDatasetRequest>(`datasets/${id}/`, dataset)\n\nexport const deleteDataset = async (id: string): Promise<DeleteDatasetResponse> => await genericDelete<DeleteDatasetResponse>(`datasets/${id}/`)\n\n\nexport const detectDataset = async (path: string): Promise<DetectDatasetResponse> => {\n    const basePath = getApiBasePath();\n    const r = await fetch(`${basePath}datasets/detect/?path=${encodeURIComponent(path)}`, {\n        credentials: \"same-origin\",\n        method: \"GET\",\n    });\n    return await (r.json() as Promise<DetectDatasetResponse>);\n}\n","import { call, put, select, takeEvery } from 'redux-saga/effects';\nimport { v4 as uuid } from 'uuid';\nimport * as browserActions from '../browser/actions';\nimport { joinPaths } from '../config/helpers';\nimport { ConfigState } from '../config/reducers';\nimport { DatasetFormInfo, DatasetFormParams, DetectDatasetResponse, OpenDatasetResponse } from '../messages';\nimport { RootReducer } from '../store';\nimport * as datasetActions from \"./actions\";\nimport { deleteDataset, detectDataset, openDataset } from './api';\nimport { isKnownDatasetType } from './helpers';\n\n\nexport function* createDatasetSaga(action: ReturnType<typeof datasetActions.Actions.create>) {\n    try {\n        const resp = (yield call(openDataset, action.payload.dataset.id, { dataset: action.payload.dataset })) as OpenDatasetResponse;\n        if (resp.status === \"ok\") {\n            yield put(datasetActions.Actions.created(resp.details));\n        } else if (resp.status === \"error\") {\n            const timestamp = Date.now();\n            const id = uuid();\n            yield put(datasetActions.Actions.error(resp.dataset, resp.msg, timestamp, id));\n        }\n    } catch (e) {\n        const timestamp = Date.now();\n        const id = uuid();\n        yield put(datasetActions.Actions.error(action.payload.dataset.id, `Error loading dataset: ${(e as Error).toString()}`, timestamp, id));\n    }\n}\n\nexport function* deleteDatasetSaga(action: ReturnType<typeof datasetActions.Actions.delete>) {\n    try {\n        yield call(deleteDataset, action.payload.dataset);\n    } catch (e) {\n        const timestamp = Date.now();\n        const id = uuid();\n        yield put(datasetActions.Actions.error(action.payload.dataset, `Error closing dataset: ${(e as Error).toString()}`, timestamp, id));\n    }\n}\n\ninterface DetectResults {\n    detectedParams?: DatasetFormParams,\n    shouldOpen: boolean,\n    detectedInfo?: DatasetFormInfo,\n}\n\nexport function* doDetectDataset(fullPath: string): Generator<unknown, DetectResults, unknown> {\n    yield put(datasetActions.Actions.detect(fullPath));\n    const detectResult = (yield call(detectDataset, fullPath)) as DetectDatasetResponse;\n    let detectedParams;\n    let detectedInfo;\n    let shouldOpen = true;\n    if (detectResult.status === \"ok\") {\n        if (isKnownDatasetType(detectResult.datasetParams.type)) {\n          detectedParams = detectResult.datasetParams;\n          detectedInfo = detectResult.datasetInfo;\n          yield put(datasetActions.Actions.detected(fullPath, detectedParams, detectedInfo));\n        }\n        else {\n          const timestamp = Date.now();\n          const id = uuid();\n          yield put(datasetActions.Actions.detectFailed(fullPath));\n          shouldOpen = false;\n          yield put(datasetActions.Actions.error(id, detectResult.datasetParams.type + ` dataset type is currently not supported in the GUI`, timestamp, id));\n        }\n    } else {\n        yield put(datasetActions.Actions.detectFailed(fullPath));\n    }\n    return {detectedParams, shouldOpen, detectedInfo};\n}\n\nexport function* doOpenDataset(fullPath: string) {\n    const config = (yield select((state: RootReducer) => state.config)) as ConfigState;\n    const cachedParams = config.lastOpened[fullPath];\n    try {\n        const { detectedParams, shouldOpen, detectedInfo } = (yield call(doDetectDataset, fullPath)) as DetectResults;\n        if (shouldOpen) {\n            yield put(datasetActions.Actions.open(fullPath, cachedParams, detectedParams, detectedInfo));\n        }\n    } catch (e) {\n        yield put(datasetActions.Actions.detectFailed(fullPath));\n    }\n}\n\nexport function* openDatasetSagaFullPath(action: ReturnType<typeof browserActions.Actions.selectFullPath>) {\n    const fullPath = action.payload.path;\n    yield call(doOpenDataset, fullPath);\n}\n\nexport function* openDatasetSaga(action: ReturnType<typeof browserActions.Actions.select>) {\n    const config = (yield select((state: RootReducer) => state.config)) as ConfigState;\n    const fullPath = joinPaths(config, action.payload.path, action.payload.name);\n    yield call(doOpenDataset, fullPath);\n}\n\nexport function* datasetRootSaga() {\n    yield takeEvery(datasetActions.ActionTypes.CREATE, createDatasetSaga);\n    yield takeEvery(datasetActions.ActionTypes.DELETE, deleteDatasetSaga);\n    yield takeEvery(browserActions.ActionTypes.SELECT, openDatasetSaga);\n    yield takeEvery(browserActions.ActionTypes.SELECT_FULL_PATH, openDatasetSagaFullPath);\n}\n","import { all } from 'redux-saga/effects';\nimport { directoryListingSaga } from './browser/sagas';\nimport { webSocketSaga } from './channel/sagas';\nimport { clusterConnectionSaga } from './cluster/sagas';\nimport { analysisRootSaga } from './compoundAnalysis/sagas';\nimport { configRootSaga } from './config/sagas';\nimport { datasetRootSaga } from './dataset/sagas';\n\nexport function* rootSaga() {\n    yield all([\n        configRootSaga(),\n        webSocketSaga(),\n        analysisRootSaga(),\n        datasetRootSaga(),\n        clusterConnectionSaga(),\n        directoryListingSaga(),\n    ]);\n}","import { AllActions } from \"../actions\";\nimport * as channelActions from '../channel/actions';\nimport { ById, constructById, filterWithPred, insertById, updateById, updateWithMap } from \"../helpers/reducerHelpers\";\nimport * as jobActions from '../job/actions';\nimport * as analysisActions from \"./actions\";\nimport { AnalysisState } from \"./types\";\n\n\nexport type AnalysisReducerState = ById<AnalysisState>;\n\nconst initialAnalysisState: AnalysisReducerState = {\n    byId: {},\n    ids: [],\n}\n\nexport const analysisReducer = (state = initialAnalysisState, action: AllActions): AnalysisReducerState => {\n    switch (action.type) {\n        case analysisActions.ActionTypes.CREATED: {\n            return insertById(state, action.payload.analysis.id, action.payload.analysis);\n        }\n        case analysisActions.ActionTypes.REMOVED: {\n            return filterWithPred(state, (r: AnalysisState) => r.id !== action.payload.id);\n        }\n        case analysisActions.ActionTypes.UPDATED: {\n            return updateById(state, action.payload.id, {\n                details: action.payload.details,\n            });\n        }\n        case jobActions.ActionTypes.CREATE: {\n            const analysis = state.byId[action.payload.analysis];\n            const oldJobs = analysis.jobs ? analysis.jobs : [];\n            return updateById(state, action.payload.analysis, {\n                jobs: [action.payload.id, ...oldJobs],\n            })\n        }\n        case channelActions.ActionTypes.CANCEL_JOB_FAILED:\n        case channelActions.ActionTypes.CANCELLED: {\n            // remove job from the matching analysis\n            return updateWithMap(state, (analysis) => ({\n                ...analysis,\n                jobs: analysis.jobs.filter((job) => job !== action.payload.job),\n            }));\n        }\n        case channelActions.ActionTypes.INITIAL_STATE: {\n            const analysisState: AnalysisState[] = action.payload.analyses.map(item => ({\n                doAutoStart: false,\n                id: item.analysis,\n                dataset: item.dataset,\n                details: item.details,\n                // FIXME: add jobs!\n                jobs: item.jobs,\n            }));\n            return {\n                byId: constructById(analysisState, analysis => analysis.id),\n                ids: action.payload.analyses.map(analysis => analysis.analysis),\n            }\n        }\n        case channelActions.ActionTypes.FINISH_JOB:\n        case channelActions.ActionTypes.TASK_RESULT: {\n            const analysisIdForJob = state.ids.find(id => {\n                const analysis = state.byId[id];\n                const jobs = analysis.jobs ? analysis.jobs : [];\n                return jobs.some(job => job === action.payload.job)\n            });\n            if (!analysisIdForJob) {\n                return state;\n            }\n            return updateById(state, analysisIdForJob, {\n                displayedJob: action.payload.job,\n            });\n        }\n    }\n    return state;\n}\n","import { AllActions } from \"../actions\";\nimport * as channelActions from './actions';\n\nexport interface ChannelStatusReducer {\n    status: ChannelStatusCodes,\n}\n\nexport enum ChannelStatusCodes {\n    CONNECTING = \"connecting\",\n    CONNECTED = \"connected\",\n    READY = \"ready\",\n    WAITING = \"waiting\",\n    DISCONNECTED = \"disconnected\"\n}\n\nconst initialChannelState: ChannelStatusReducer = {\n    status: ChannelStatusCodes.WAITING,\n}\n\nexport const channelStatusReducer = (state = initialChannelState, action: AllActions): ChannelStatusReducer => {\n    switch (action.type) {\n        case channelActions.ActionTypes.OPEN: {\n            return { status: ChannelStatusCodes.CONNECTED };\n        }\n        case channelActions.ActionTypes.INITIAL_STATE: {\n            return { status: ChannelStatusCodes.READY };\n        }\n        case channelActions.ActionTypes.CLOSE: {\n            return { status: ChannelStatusCodes.WAITING };\n        }\n        case channelActions.ActionTypes.SHUTDOWN: {\n            return { status: ChannelStatusCodes.DISCONNECTED }\n        }\n    }\n    return state;\n}","import { AllActions } from \"../actions\";\nimport * as configActions from '../config/actions';\nimport { DirectoryListingDetails, FSPlace } from \"../messages\";\nimport * as browserActions from './actions';\nimport { DirectoryBrowserState } from \"./types\";\n\nconst initialBrowserState: DirectoryBrowserState = {\n    isOpen: false,\n    isLoading: true,\n    path: \"/\",\n    drives: [],\n    places: {},\n    files: [] as DirectoryListingDetails[],\n    dirs: [] as DirectoryListingDetails[],\n}\n\nexport const directoryBrowserReducer = (state: DirectoryBrowserState = initialBrowserState, action: AllActions): DirectoryBrowserState => {\n    switch (action.type) {\n        case configActions.ActionTypes.FETCHED: {\n            return Object.assign({}, state, {\n                path: action.payload.config.cwd,\n            })\n        }\n        case browserActions.ActionTypes.OPEN: {\n            return Object.assign({}, state, {\n                isOpen: true,\n            })\n        }\n        case browserActions.ActionTypes.CANCEL: {\n            return Object.assign({}, state, {\n                isOpen: false,\n            })\n        }\n        case browserActions.ActionTypes.LIST_DIRECTORY: {\n            return Object.assign({}, state, {\n                isLoading: true,\n            })\n        }\n        case browserActions.ActionTypes.DIRECTORY_LISTING: {\n            const places = action.payload.places.reduce((acc, place: FSPlace) => Object.assign({}, acc, {\n                [place.key]: place,\n            }), {});\n            return Object.assign({}, state, {\n                isLoading: false,\n                path: action.payload.path,\n                files: action.payload.files,\n                dirs: action.payload.dirs,\n                drives: action.payload.drives,\n                places,\n            })\n        }\n        case browserActions.ActionTypes.SELECT_FULL_PATH:\n        case browserActions.ActionTypes.SELECT: {\n            return Object.assign({}, state, {\n                isLoading: false,\n                isOpen: false,\n            });\n        }\n    }\n    return state;\n}","import { AllActions } from \"../actions\";\nimport { ConnectRequestParams } from \"../messages\";\nimport * as clusterActions from './actions';\n\nexport type ClusterConnectionState = {\n    status: \"connected\",\n    params: ConnectRequestParams\n} | {\n    status: \"disconnected\",\n} | {\n    status: \"unknown\"\n} | {\n    status: \"connecting\"\n}\n\nconst initialClusterConnectionState: ClusterConnectionState = {\n    status: \"unknown\"\n}\n\nexport const clusterConnectionReducer = (state: ClusterConnectionState = initialClusterConnectionState, action: AllActions): ClusterConnectionState => {\n    switch (action.type) {\n        case clusterActions.ActionTypes.NOT_CONNECTED: {\n            return {\n                status: \"disconnected\"\n            };\n        }\n        case clusterActions.ActionTypes.CONNECTED: {\n            return {\n                status: \"connected\",\n                params: action.payload.params,\n            }\n        }\n        case clusterActions.ActionTypes.CONNECTING: {\n            return {\n                status: \"connecting\"\n            }\n        }\n    }\n    return state;\n}","import { AllActions } from \"../actions\";\nimport * as analysisActions from \"../analysis/actions\";\nimport * as channelActions from '../channel/actions';\nimport * as datasetActions from \"../dataset/actions\";\nimport { ById, constructById, filterWithPred, insertById, updateById } from \"../helpers/reducerHelpers\";\nimport * as compoundAnalysisActions from \"./actions\";\nimport { CompoundAnalysisState } from \"./types\";\n\nexport type CompoundAnalysisReducerState = ById<CompoundAnalysisState>;\n\nconst initialCompoundAnalysisState: CompoundAnalysisReducerState = {\n    byId: {},\n    ids: [],\n}\n\nexport const compoundAnalysisReducer = (state = initialCompoundAnalysisState, action: AllActions): CompoundAnalysisReducerState => {\n    switch (action.type) {\n        case compoundAnalysisActions.ActionTypes.CREATED: {\n            const newCompoundAnalysis = {\n                doAutoStart: action.payload.autoStart,\n                ...action.payload.compoundAnalysis,\n            }\n            return insertById(state, action.payload.compoundAnalysis.compoundAnalysis, newCompoundAnalysis);\n        }\n        case compoundAnalysisActions.ActionTypes.REMOVED: {\n            return filterWithPred(state, (r: CompoundAnalysisState) => r.compoundAnalysis !== action.payload.id);\n        }\n        case compoundAnalysisActions.ActionTypes.ENABLE_AUTOSTART: {\n            return updateById(state, action.payload.compoundAnalysisId, {\n                doAutoStart: true,\n            })\n        }\n        case datasetActions.ActionTypes.DELETE: {\n            return filterWithPred(state, (r: CompoundAnalysisState) => r.dataset !== action.payload.dataset);\n        }\n        case analysisActions.ActionTypes.CREATED: {\n            const compoundAnalysis = state.byId[action.payload.compoundAnalysis];\n            const newAnalyses = [...compoundAnalysis.details.analyses];\n            newAnalyses[action.payload.analysisIndex] = action.payload.analysis.id;\n            return updateById(state, action.payload.compoundAnalysis, {\n                details: {\n                    analyses: newAnalyses,\n                    mainType: compoundAnalysis.details.mainType,\n                }\n            });\n        }\n        case channelActions.ActionTypes.INITIAL_STATE: {\n            const compoundAnalyses = action.payload.compoundAnalyses.map(ca => ({ doAutoStart: false, ...ca }));\n            return {\n                byId: constructById(compoundAnalyses, ca => ca.compoundAnalysis),\n                ids: compoundAnalyses.map(ca => ca.compoundAnalysis),\n            };\n        }\n    }\n    return state;\n}","import { AllActions } from \"../actions\";\nimport * as browserActions from '../browser/actions';\nimport * as clusterActions from '../cluster/actions';\nimport * as datasetActions from '../dataset/actions';\nimport { toggleItemInList } from \"../helpers/reducerHelpers\";\nimport { ClusterTypes, DatasetFormParams, MsgPartConfig } from \"../messages\";\nimport * as configActions from './actions';\nimport { makeUnique } from \"./helpers\";\n\nexport interface LocalConfig {\n    cwd: string,\n    fileHistory: string[],\n    lastOpened: {\n        [path: string]: DatasetFormParams\n    },\n    lastConnection: {\n        type: ClusterTypes,\n        address: string,\n        cudas: number[],\n    },\n    starred: string[],\n}\n\nexport type ConfigParams = MsgPartConfig & LocalConfig ;\nexport type ConfigState = ConfigParams & {\n    haveConfig: boolean,\n};\n\nexport const initialConfigState: ConfigState = {\n    version: \"\",\n    revision: \"\",\n    localCores: 0,\n    devices: {\n        cpus: [] as number[],\n        cudas: [] as number[],\n        has_cupy: false,\n    },\n    cwd: \"/\",\n    separator: \"/\",\n    lastOpened: {},\n    resultFileFormats: {},\n    fileHistory: [],\n    haveConfig: false,\n    lastConnection: {\n        type: ClusterTypes.LOCAL,\n        address: \"tcp://localhost:8786\",\n        cudas: [] as number[],\n    },\n    starred: [],\n    datasetTypes: {},\n}\n\nexport const configReducer = (state = initialConfigState, action: AllActions): ConfigState => {\n    switch (action.type) {\n        case configActions.ActionTypes.FETCHED: {\n            return Object.assign({}, action.payload.config, { haveConfig: true });\n        }\n        case browserActions.ActionTypes.DIRECTORY_LISTING: {\n            return Object.assign({}, state, {\n                cwd: action.payload.path,\n            });\n        }\n        case datasetActions.ActionTypes.CREATE: {\n            const newLastOpened = Object.assign({}, state.lastOpened, { [action.payload.dataset.params.path]: action.payload.dataset.params });\n            const newFileHistory = makeUnique([\n                action.payload.dataset.params.path, ...state.fileHistory\n            ]).slice(0, 11);\n            return Object.assign({}, state, {\n                lastOpened: newLastOpened,\n                fileHistory: newFileHistory,\n            });\n        }\n        case clusterActions.ActionTypes.CONNECT: {\n            if (action.payload.params.type === ClusterTypes.LOCAL) {\n                const newLastConnection = Object.assign({}, state.lastConnection, { type: ClusterTypes.LOCAL, cudas: action.payload.params.cudas })\n                return Object.assign({}, state, {\n                    lastConnection: newLastConnection\n                })\n            }\n            else {\n                const newLastConnection = Object.assign({}, state.lastConnection, { type: ClusterTypes.TCP, address: action.payload.params.address })\n                return Object.assign({}, state, {\n                    lastConnection: newLastConnection\n                })\n            }\n        }\n        case configActions.ActionTypes.TOGGLE_STAR: {\n            const path = action.payload.path;\n            return {\n                ...state,\n                starred: toggleItemInList(state.starred, path),\n            };\n        }\n    }\n    return state;\n}\n","import { AllActions } from \"../actions\";\nimport * as channelActions from '../channel/actions';\nimport { constructById, filterWithPred, insertById, updateById } from \"../helpers/reducerHelpers\";\nimport { Dataset, DatasetState, DatasetStatus } from \"../messages\";\nimport * as datasetActions from './actions';\nimport { DatasetsState, OpenDatasetState } from \"./types\";\n\nconst initialDatasetState: DatasetsState = {\n    byId: {},\n    ids: [],\n};\n\nexport const datasetReducer = (state = initialDatasetState, action: AllActions): DatasetsState => {\n    switch (action.type) {\n        case channelActions.ActionTypes.INITIAL_STATE: {\n            const datasets = action.payload.datasets.map(ds => Object.assign({}, ds, { status: DatasetStatus.OPEN }));\n            return {\n                byId: constructById(datasets, ds => ds.id),\n                ids: datasets.map(ds => ds.id),\n            }\n        }\n        case datasetActions.ActionTypes.CREATE: {\n            const ds: Dataset = {\n                ...action.payload.dataset,\n                status: DatasetStatus.OPENING\n            };\n            return insertById(state, action.payload.dataset.id, ds);\n        }\n        case datasetActions.ActionTypes.CREATED: {\n            const ds = Object.assign({}, action.payload.dataset, { status: DatasetStatus.OPEN });\n            if (state.byId[action.payload.dataset.id]) {\n                return updateById(state, action.payload.dataset.id, ds);\n            } else {\n                return insertById(state, action.payload.dataset.id, ds);\n            }\n        }\n        case datasetActions.ActionTypes.ERROR: {\n            return filterWithPred(state, (r: DatasetState) => r.id !== action.payload.dataset);\n        }\n        case datasetActions.ActionTypes.DELETE: {\n            return updateById(state, action.payload.dataset, { status: DatasetStatus.DELETING });\n        }\n        case datasetActions.ActionTypes.DELETED: {\n            return filterWithPred(state, (r: DatasetState) => r.id !== action.payload.dataset);\n        }\n    }\n    return state;\n}\n\nconst initialOpenDatasetState: OpenDatasetState = {\n    busy: false,\n    busyPath: \"\",\n    formVisible: false,\n    formPath: \"/\",\n    formCachedParams: undefined,\n    formDetectedParams: undefined,\n    formDetectedInfo: undefined,\n}\n\nexport const openDatasetReducer = (state = initialOpenDatasetState, action: AllActions): OpenDatasetState => {\n    switch (action.type) {\n        case datasetActions.ActionTypes.OPEN: {\n            return {\n                ...state,\n                formVisible: true,\n                formPath: action.payload.path,\n                formCachedParams: action.payload.cachedParams,\n                formDetectedParams: action.payload.detectedParams,\n                formDetectedInfo: action.payload.detectedInfo\n            };\n        }\n        case datasetActions.ActionTypes.CANCEL_OPEN: {\n            return {\n                ...state,\n                formVisible: false,\n            }\n        }\n        case datasetActions.ActionTypes.CREATE: {\n            return {\n                ...state,\n                formVisible: false,\n            }\n        }\n        case datasetActions.ActionTypes.DETECT: {\n            return {\n                ...state,\n                busyPath: action.payload.path,\n                busy: true,\n            }\n        }\n        case datasetActions.ActionTypes.DETECTED:\n        case datasetActions.ActionTypes.DETECT_FAILED: {\n            return {\n                ...state,\n                busyPath: \"\",\n                busy: false,\n            }\n        }\n    }\n    return state;\n}","import { AllActions } from \"../actions\";\nimport * as browserActions from '../browser/actions';\nimport * as channelActions from '../channel/actions';\nimport * as clusterActions from '../cluster/actions';\nimport * as analysisActions from '../compoundAnalysis/actions';\nimport * as datasetActions from '../dataset/actions';\nimport { ById, filterWithPred, insertById } from \"../helpers/reducerHelpers\";\nimport * as errorActions from './actions';\n\nexport interface ErrorMessage {\n    id: string,\n    msg: string,\n    timestamp: number,\n}\n\nexport type ErrorState = ById<ErrorMessage>;\n\nconst initialErrorState: ErrorState = {\n    byId: {},\n    ids: [],\n};\n\nexport const errorReducer = (state = initialErrorState, action: AllActions): ErrorState => {\n    switch (action.type) {\n        case browserActions.ActionTypes.ERROR:\n        case datasetActions.ActionTypes.ERROR:\n        case channelActions.ActionTypes.ERROR:\n        case clusterActions.ActionTypes.ERROR:\n        case analysisActions.ActionTypes.ERROR:\n        case errorActions.ActionTypes.GENERIC:\n        case channelActions.ActionTypes.JOB_ERROR: {\n            return insertById(state, action.payload.id, {\n                id: action.payload.id,\n                msg: action.payload.msg,\n                timestamp: action.payload.timestamp,\n            });\n        }\n        case channelActions.ActionTypes.OPEN: {\n            return initialErrorState;\n        }\n        case errorActions.ActionTypes.DISMISS: {\n            return filterWithPred(state, (r: ErrorMessage) => r.id !== action.payload.id);\n        }\n        case errorActions.ActionTypes.DISMISS_ALL: {\n            return initialErrorState;\n        }\n    }\n    return state;\n}","import { AllActions } from \"../actions\";\nimport * as channelActions from '../channel/actions';\nimport { ById, constructById, insertById, updateById } from \"../helpers/reducerHelpers\";\nimport * as jobActions from './actions';\nimport { JobRunning, JobState, JobStatus } from \"./types\";\n\nexport type JobReducerState = ById<JobState>;\n\nconst initialJobState: JobReducerState = {\n    byId: {},\n    ids: [],\n};\n\nexport const jobReducer = (state = initialJobState, action: AllActions): JobReducerState => {\n    switch (action.type) {\n        case jobActions.ActionTypes.CREATE: {\n            const createResult = insertById(\n                state,\n                action.payload.id,\n                {\n                    id: action.payload.id,\n                    analysis: action.payload.analysis,\n                    running: JobRunning.CREATING,\n                    status: JobStatus.CREATING,\n                    results: [],\n                    startTimestamp: action.payload.timestamp,\n                }\n            )\n            return createResult;\n        }\n        case channelActions.ActionTypes.JOB_STARTED: {\n            return updateById(\n                state,\n                action.payload.job,\n                {\n                    running: JobRunning.RUNNING,\n                    status: JobStatus.IN_PROGRESS,\n                    startTimestamp: action.payload.timestamp,\n                }\n            )\n        }\n        case channelActions.ActionTypes.TASK_RESULT: {\n            return updateById(\n                state,\n                action.payload.job,\n                {\n                    results: action.payload.results,\n                }\n            );\n        }\n        case channelActions.ActionTypes.FINISH_JOB: {\n            const { job, timestamp, results } = action.payload;\n            return updateById(\n                state,\n                job,\n                {\n                    running: JobRunning.DONE,\n                    status: JobStatus.SUCCESS,\n                    results,\n                    endTimestamp: timestamp,\n                }\n            );\n        }\n        case channelActions.ActionTypes.JOB_ERROR: {\n            const { job, timestamp } = action.payload;\n            return updateById(\n                state,\n                job,\n                {\n                    running: JobRunning.DONE,\n                    status: JobStatus.ERROR,\n                    endTimestamp: timestamp,\n                }\n            )\n        }\n        case channelActions.ActionTypes.INITIAL_STATE: {\n            const jobs = action.payload.jobs;\n            const jobState: JobState[] = jobs.map(job => ({\n                    id: job.id,\n                    analysis: job.analysis,\n                    // FIXME: right job status!\n                    status: JobStatus.SUCCESS,\n                    startTimestamp: 0,\n                    // FIXME: result blobs?\n                    results: [],\n                    // FIXME: right job running status!\n                    running: JobRunning.DONE,\n                    endTimestamp: 0,\n            }));\n\n            return {\n                byId: constructById(jobState, job => job.id),\n                ids: jobState.map(job => job.id),\n            };\n        }\n    }\n    return state;\n}","import { combineReducers } from \"redux\";\nimport { analysisReducer } from \"./analysis/reducers\";\nimport { directoryBrowserReducer } from './browser/reducers';\nimport { channelStatusReducer } from \"./channel/reducers\";\nimport { clusterConnectionReducer } from \"./cluster/reducers\";\nimport { compoundAnalysisReducer } from \"./compoundAnalysis/reducers\";\nimport { configReducer } from \"./config/reducers\";\nimport { datasetReducer, openDatasetReducer } from \"./dataset/reducers\";\nimport { errorReducer } from \"./errors/reducers\";\nimport { jobReducer } from \"./job/reducers\";\n\nexport const rootReducer = combineReducers({\n    compoundAnalyses: compoundAnalysisReducer,\n    analyses: analysisReducer,\n    channelStatus: channelStatusReducer,\n    clusterConnection: clusterConnectionReducer,\n    datasets: datasetReducer,\n    openDataset: openDatasetReducer,\n    jobs: jobReducer,\n    errors: errorReducer,\n    config: configReducer,\n    browser: directoryBrowserReducer,\n})\n\nexport type RootReducer = ReturnType<typeof rootReducer>;","/* eslint-disable no-underscore-dangle */\n// tslint:disable:ordered-imports\nimport \"core-js/fn/symbol/iterator.js\";\nimport \"core-js/es6/symbol.js\";\nimport 'react-app-polyfill/ie11';\n// tslint:enable:ordered-imports\n\nimport * as ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { applyMiddleware, compose, createStore } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport App from './App';\nimport { rootSaga } from './sagas';\nimport { rootReducer } from './store';\n\nconst sagaMiddleware = createSagaMiddleware();\n\ndeclare global {\n    interface Window { __REDUX_DEVTOOLS_EXTENSION_COMPOSE__: typeof compose }\n}\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(rootReducer, composeEnhancers(\n    applyMiddleware(\n        sagaMiddleware,\n    )\n));\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root') as HTMLElement\n);\n\nsagaMiddleware.run(rootSaga);\n"],"sourceRoot":""}